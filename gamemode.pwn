/*
* Los Angeles Roleplay - losangelesrpg.com © 2020-2021
* Credits: bojna,sharax
*/

#pragma compat 1
#pragma dynamic 500000

//Kütüphaneler
#include <a_samp>
#include <AFK>
#include <fix>
#include <a_mysql>
#include <streamer>
#include <sqlitei>
#include <sscanf2>
#include <zcmd>
#include <FCNPC>
#include <YSI\y_iterate>
#include <YSI\y_bit>
#include <foreach>
#include <dialogs>
#include <SKY>
#include <weapon-config>
#include <easyDialog>
#include <mSelection>
#include <progress2>
#include <cuffs>
#include <evi>
#include <vSyncALS>
#include <garage_block>
#include <EVF>
#include <speedcap>

#define COLOR_KOlustur 0xFFBD00AA

new kolial[MAX_PLAYERS];
new koliarac[MAX_VEHICLES];
new saatlikTimer = 60;
new PlayerText:tackle[MAX_PLAYERS];

#define NT_DISTANCE 25.0
new Text3D:cNametag[MAX_PLAYERS];

#define 	ATTACH_INDEX    			(4)
#define 	MAX_LOGS 					(300)
#define 	LOG_LIFETIME 				(120)
#define 	LOG_LIMIT 					(10)

new LogObjects[MAX_VEHICLES][LOG_LIMIT];

enum weaponSettings
{
    Float:Position[6],
    Bone,
    Hidden,
    duzenlendi
};
new WeaponSettings[MAX_PLAYERS][17][weaponSettings], WeaponTick[MAX_PLAYERS], EditingWeapon[MAX_PLAYERS];

#undef MAX_PLAYERS
#define MAX_PLAYERS 100

#define DIALOG_EDIT_BONE 5000
#define isnull(%1) ((!(%1[0])) || (((%1[0]) == '\1') && (!(%1[1]))))

#define SAATLIK_MAAS 200
#define SAATLIK_VERGI 50
#define GISE_UCRET 10
#define BENZIN_UCRET 5
#define TAMIRCI_UCRET 200

#define BITCOIN_ALMA    500
#define BITCOIN_SATMA	300

#define SERVER_MUZIK ""

#define KamyonX 2220.7766
#define KamyonY -2666.3394
#define KamyonZ 13.5409

#define CopcuX 1647.2135
#define CopcuY -1522.5519
#define CopcuZ 13.5515

#define EhliyetX 2045.7034
#define EhliyetY -1908.2552
#define EhliyetZ 13.5469

#define EHLIYET_SURUCU 128
#define EHLIYET_MOTOR  106

#define SATILIK_ARACLAR		(1)

//-------------------------------------//
#define MermiX 1296.9305
#define MermiY -986.5956
#define MermiZ 32.6953
#define MermiA 90.4914

#define DeagleFiyat		(35700)
#define ColtFiyat       (26900)
#define ShotgunFiyat	(32300)
#define CuntgunFiyat	(36200)
#define KelesFiyat 		(42600)

new Yarrak[MAX_PLAYERS];
new Yarrak2[MAX_PLAYERS];

new PlayerText:hizgostergesi0[MAX_PLAYERS];
new PlayerText:hizgostergesi1[MAX_PLAYERS];
new PlayerText:hizgostergesi2[MAX_PLAYERS];

//-------------------------------------//

new Float: uyduX;
new Float: uyduY;
new Float: uyduZ;

new DroneCar[MAX_PLAYERS];

new Text:TDEditor_TD[2];
new PlayerText:destekiste[MAX_PLAYERS];

new connect_destek[MAX_PLAYERS];
new connect_arac[MAX_PLAYERS];

#define FERRIS_WHEEL_WAIT_TIME 3000
#define FERRIS_WHEEL_SPEED 0.005
#define COLOR_KOlusturma 0xFFD200AA
new Float:gFerrisCageOffsets[10][3]=
{
	{0.0699,0.0600,-11.7500},
	{-6.9100,-0.0899,-9.5000},
	{11.1600,0.0000,-3.6300},
	{-11.1600,-0.0399,3.6499},
	{-6.9100,-0.0899,9.4799},
	{0.0699,0.0600,11.7500},
	{6.9599,0.0100,-9.5000},
	{-11.1600,-0.0399,-3.6300},
	{11.1600,0.0000,3.6499},
	{7.0399,-0.0200,9.3600}
};

new	FerrisWheelObjects[12];
new	Float:FerrisWheelAngle = 0.0;
new	FerrisWheelAlternate = 0;
new Float: tx;
new Float: ty;
new Float: tz;

AntiDeAMX()
{
    new sharax[][] =
    {
        "Unarmed (Fist)",
        "Brass K"
    };
    #pragma unused sharax
}
WasteDeAMXersTime()
{
    new
		sharax;
    #emit load.pri sharax
    #emit stor.pri sharax
}

#define MAXIMUM_NPC 100
#define MAX_SECENEK 5
enum NPC
{
	npcID,
	bool:npcExists,
	npcAd[24],
	npcSkin,
	Float:npcPos[4],
	npcVw,
	npcActor,
	Text3D:npcLabel
}
new NPCBilgi[MAXIMUM_NPC][NPC];
new NPCSecenekler[MAXIMUM_NPC][MAX_SECENEK][50];
new NPCSecenekCevaplar[MAXIMUM_NPC][MAX_SECENEK][200];
new NotMoving[MAX_PLAYERS];
new JoueurAppuieJump[MAX_PLAYERS] = {0, ...};
new Airbreak[MAX_PLAYERS];
new Airbreak2[MAX_PLAYERS];
new WeaponID[MAX_PLAYERS];
new CheckCrouch[MAX_PLAYERS];
new Ammo[MAX_PLAYERS][50];
new pDrunkLevelLast[MAX_PLAYERS];
new pFPS[MAX_PLAYERS];
new TohumTutuyor[MAX_PLAYERS];
new TohumSayisi[MAX_PLAYERS];
new Float:LastPosition[MAX_PLAYERS][3];
new TohumCP[MAX_PLAYERS];
new AracTohumObjeler[MAX_VEHICLES][5];
new AracTohumlar[MAX_VEHICLES][3];
new EsyaAdi[MAX_PLAYERS][30];
new
	Float: CCTV_oldX[MAX_PLAYERS],
	Float: CCTV_oldY[MAX_PLAYERS],
	Float: CCTV_oldZ[MAX_PLAYERS],
	CCTV_oldSkin[MAX_PLAYERS],
	CCTV_oldVW[MAX_PLAYERS],
	CCTV_oldInterior[MAX_PLAYERS],
	CCTV_ID[MAX_PLAYERS],
	CCTV_inEditing[MAX_PLAYERS];

#define MAX_SORU 200 // Maksimum olusturulabilecek soru sayisidir.
enum SoruBilgi
{
    soruID,
    soruExists,
    Soru[50],
    SoruCevap[128],
    OkunmaSayisi,
    EklenmeTarihi[25],
    Ekleyen[24]
}
new SoruData[MAX_SORU][SoruBilgi];
new SoruListeleme[MAX_PLAYERS][45];
new AnahtarKelime[MAX_PLAYERS][20];
#define MAX_ARSA 100 // Maksimum olusturulabilecek arsa sayisidir.
enum arsa
{
	arsaExists,
	arsaSahip,
	arsaTip,
	Float:arsaPos[3],
	arsaFiyat,
	KiraSure,
	arsaMaxTohum,
	Metrekare,
	arsaPickup,
	Text3D:arsaLabel
}
new ArsaBilgi[MAX_ARSA][arsa];
#define MAX_TOHUM 200
enum tohum
{
	tohumArsa,
	tohumTip,
	Float:tohumPos[3],
	tohumBuyume,
	tohumSayi,
	tohumObject,
	Text3D:tohumLabel
}
new Tohumlar[MAX_TOHUM][tohum];

new Float: TohumAttachOffsets[5][3] =
{
    {-0.500000, -0.899999, 0.000000},
    {0.100000, -0.899999, 0.000000},
    {0.599999, -0.900000, 0.000000},
    {-0.299999, -1.700000, 0.000000},
    {0.300000, -1.700000, 0.000000}
};

#define MYSQL_HOST 			"localhost"
#define MYSQL_USER 			"root"
#define MYSQL_PASS 			""
#define MYSQL_BASE 			"qwe"

new MySQL:g_SQL;

new bool:sunucuKilitli;
new CarUpdate[MAX_VEHICLES] = {0, ...};
new actors[10];
new Download[MAX_PLAYERS];

#define MOVE_FORWARD    		1
#define MOVE_BACK       		2
#define MOVE_LEFT       		3
#define MOVE_RIGHT      		4
#define MOVE_FORWARD_LEFT       5
#define MOVE_FORWARD_RIGHT      6
#define MOVE_BACK_LEFT          7
#define MOVE_BACK_RIGHT         8

new SonMobilyaID[MAX_PLAYERS];

#define MesajGonder(%0,%1) \
	SendClientMessageEx(%0, 0xFF6347FF, "[ ! ]: {C8C8C8}"%1)

#define SunucuMesaji(%0,%1) \
	SendClientMessageEx(%0, 0xFF6347FF, "[ ! ]: {C8C8C8}"%1)

#define KullanimMesaji(%0,%1) \
	SendClientMessageEx(%0, 0xFF6347FF, "[ ! ]: {C8C8C8}"%1)

#define HataMesajGonder(%0,%1) \
	SendClientMessageEx(%0, 0xFF6347FF, "[ ! ]: {C8C8C8}"%1)


#define MAX_ENTRANCES (100) // Maksimum olusturulabilecek bina sayisidir.
#define MAX_ARAC 1200 // Maksimum olusturulabilecek araç sayisidir.
#define MAX_GATES 200 // Maksimum olusturulabilecek gate sayisidir.
#define MAX_EV 500 // Maksimum olusturulabilecek ev sayisidir.
#define MAX_BIRLIK 100 // Maksimum olusturulabilecek birlik sayisidir.
#define MAX_ISYERI 350 // Maksimum olusturulabilecek isyeri sayisidir.
#define MAX_DEALERSHIP_CARS 250 // Maksimum galeri araci.
#define MAX_GARAGE 300 // Maksiumum olusturulabilecek garaj sayisidir.
#define MAX_LOKASYON 100 // Maksiumum olusturulabilecek lokasyon sayisidir.
#define MAX_HASAR 40
#define MAX_OWNABLE_CARS 5
#define MAX_ARREST_POINTS (30)
#define MAX_CCTV 100 // Maksiumum olusturulabilecek cctv sayisidir.
#define MAX_HOUSE_KEYS 3
#define MAX_CAR_KEYS 3
#define MAX_REKLAM 50
#define MAX_CADIR 50
#define MAX_DROPPED_WEAPONS 300
#define MAX_PLAYER_TICKETS (20)
#define VERGI_GUN 7
#define LITRE_PRICE 5
#define     ZAR_NXR()       random(6) + 1
#define ARMEDBODY_USE_HEAVY_WEAPON                      (false)
#define MAX_INVENTORY (120)
#define WALK_DEFAULT    0
#define WALK_NORMAL     1
#define WALK_PED        2
#define WALK_GANGSTA    3
#define WALK_GANGSTA2   4
#define WALK_OLD        5
#define WALK_FAT_OLD    6
#define WALK_FAT        7
#define WALK_LADY      	8
#define WALK_LADY2      9
#define WALK_WHORE      10
#define WALK_WHORE2     11
#define WALK_DRUNK     	12
#define WALK_BLIND     	13

enum inventoryData {
	invExists,
	invID,
	invItem[64 char],
	invModel,
	invQuantity
};

// ======================= PB Sistemi =================================
#define MAX_ODA 20 // Maksimum olusturulabilecek oda sayisidir.
#define ODA_PARA 200 // Oda kurmak için gereken para.
#define ODA_BEKLEME 1
#define ODA_BASLADI 2
#define ODA_AYARLARI 9500 // Dialog id. Mod ile çakisirsa buradan degistirebilirsiniz.
#define ODA_AYARLARI_AD 9501 // Dialog id. Mod ile çakisirsa buradan degistirebilirsiniz.
#define ODA_AYARLARI_SIFRE 9502 // Dialog id. Mod ile çakisirsa buradan degistirebilirsiniz.
#define ODA_AYARLARI_TAKIMAD 9503 // Dialog id. Mod ile çakisirsa buradan degistirebilirsiniz.
#define ODA_AYARLARI_SURE 9505 // Dialog id. Mod ile çakisirsa buradan degistirebilirsiniz.
#define ODA_AYARLARI_ARENA 9506 // Dialog id. Mod ile çakisirsa buradan degistirebilirsiniz.
#define ODA_AYARLARI_ZIRH 9507 // Dialog id. Mod ile çakisirsa buradan degistirebilirsiniz.
#define ODA_AYARLARI_SILAH 9508 // Dialog id. Mod ile çakisirsa buradan degistirebilirsiniz.
#define ODA_AYARLARI_KATILIMCI 9510 // Dialog id. Mod ile çakisirsa buradan degistirebilirsiniz.
#define DIALOG_KATIL 9512 // Dialog id. Mod ile çakisirsa buradan degistirebilirsiniz.
#define DIALOG_KATIL_SIFRE 9514
#define TAKIM_SEC 9513
enum PaintballDegiskenler
{
	bool:odaExists,
	odaIsim[30],
	odaSifre[30],
	odaSahip,
	odaTakim1Ad[20],
	odaTakim2Ad[20],
	odaSilahlar[4],
	odaZirh,
	odaSure,
	odaOyunTuru,
	odaArena,
	odaPuan[2],
	bool:TakimDengeleme,
	odaDurum,
	odaSayac
}
new Paintball[MAX_ODA][PaintballDegiskenler];
new pbOda[MAX_PLAYERS];
new pbTakim[MAX_PLAYERS];
new pbOldurme[MAX_PLAYERS];
new pbOlme[MAX_PLAYERS];
new PlayerText:PaintballTD[MAX_PLAYERS][9];
new PlayerText:TaxiTD[MAX_PLAYERS][2];
new gPlayerAnimLibsPreloaded[MAX_PLAYERS];
new surf_LastChecked[MAX_PLAYERS];
// ================================================================
// =================================================================
// ============= UYUsTURUCU SiSTEMi =============================
#define     MAX_DEALERS         (3)    // limit of drug dealers
#define     MAX_PLANTS      	(250)   // limit of drug plants

#define     USE_DRUNKLEVEL              // remove this line if you don't want SetPlayerDrunkLevel to be used while on drugs
#define     PLAYER_LIMIT    	(1)     // a player can plant up to x drug plants (Default: 5)
#define     PLANT_MAX_GROWTH	(10)    // a plant will grow up to x grams of drugs (Default: 75)
#define     GROWTH_INTERVAL 	(100)    // a plant will grow up every x seconds (Default: 45)
#define     ROT_INTERVAL        (300)   // a plant will rot after x seconds of fully growing (Default: 300)

#define     CARRY_LIMIT         (50)   // a player can carry up to x grams of drugs (Default: 150)
#define     SEED_LIMIT         	(5)   	// a player can carry up to x drug plant seeds (Default: 25)
#define     SEED_PRICE      	(2300)    // price players will pay for a drug plant seed (Default: 50)
#define     DRUG_BUY_PRICE      (250)    // price players will pay a dealer for a gram of drugs (Default: 20)
#define     DRUG_SELL_PRICE     (140)    // price dealers will pay a player for a gram of drugs (Default: 16)
#define     OFFER_COOLDOWN      (30)    // how many seconds does a player wait to send an another offer to someone (Default: 30)
// ===============================================================

// ================ BANKA SISTEMI ==================================
#define     MAX_BANKERS     (10)
#define     MAX_ATMS        (150)

//#define     BANKER_USE_MAPICON      			// comment or remove this line if you don't want bankers to have mapicons
#define     ATM_USE_MAPICON         			// comment or remove this line if you don't want atms to have mapicons
//#define     BANKER_ICON_RANGE       (10.0)		// banker mapicon stream distance, you can remove this if you're not using banker icons (default: 10.0)
#define     ATM_ICON_RANGE       	(100.0)		// atm mapicon stream distance, you can remove this if you're not using banker icons (default: 100.0)
#define     ACCOUNT_PRICE           (500)      	// amount of money required to create a new bank account (default: 100)
#define     ACCOUNT_CLIMIT          (5)         // a player can create x accounts, you can comment or remove this line if you don't want an account limit (default: 5)
#define     ACCOUNT_LIMIT           (500000000) // how much money can a bank account have (default: 500,000,000)

// ATM Robbery Config
//#define     ROBBABLE_ATMS           // uncomment this line if you want robbable atms

#if defined ROBBABLE_ATMS
	#define     ATM_HEALTH              (350.0)     // health of an atm (Default: 350.0)
	#define     ATM_REGEN               (120)       // a robbed atm will start working after x seconds (Default: 120)
	#define     ATM_ROB_MIN  			(1500)   	// min. amount of money stolen from an atm (Default: 1500)
	#define     ATM_ROB_MAX  			(3500)  	// max. amount of money stolen from an atm (Default: 3500)
#endif

enum    _:E_BANK_DIALOG
{
    DIALOG_BANK_MENU_NOLOGIN = 12450,
    DIALOG_BANK_MENU,
    DIALOG_BANK_CREATE_ACCOUNT,
    DIALOG_BANK_ACCOUNTS,
    DIALOG_BANK_LOGIN_ID,
	DIALOG_BANK_LOGIN_PASS,
	DIALOG_BANK_DEPOSIT,
	DIALOG_BANK_WITHDRAW,
	DIALOG_BANK_TRANSFER_1,
	DIALOG_BANK_TRANSFER_2,
	DIALOG_BANK_PASSWORD,
	DIALOG_BANK_REMOVE,
	DIALOG_BANK_LOGS,
	DIALOG_BANK_LOG_PAGE
}

enum    _:E_BANK_LOGTYPE
{
	TYPE_NONE,
	TYPE_LOGIN,
	TYPE_DEPOSIT,
	TYPE_WITHDRAW,
	TYPE_TRANSFER,
	TYPE_PASSCHANGE
}

#if defined ROBBABLE_ATMS
enum    _:E_ATMDATA
{
	IDString[8],
	refID
}
#endif

enum    E_BANKER
{
	// saved
	Skin,
	Float: bankerX,
	Float: bankerY,
	Float: bankerZ,
	Float: bankerA,
	bankerVw,
	// temp
	bankerActorID,
	#if defined BANKER_USE_MAPICON
	bankerIconID,
	#endif
	Text3D: bankerLabel
}

enum    E_ATM
{
	// saved
	Float: atmX,
	Float: atmY,
	Float: atmZ,
	Float: atmRX,
	Float: atmRY,
	Float: atmRZ,
	// temp
	atmObjID,

	#if defined ATM_USE_MAPICON
	atmIconID,
	#endif

	#if defined ROBBABLE_ATMS
	Float: atmHealth,
	atmRegen,
	atmTimer,
	atmPickup,
	#endif

	Text3D: atmLabel
}

new
	BankerData[MAX_BANKERS][E_BANKER],
	ATMData[MAX_ATMS][E_ATM];

new
	Iterator: Bankers<MAX_BANKERS>,
	Iterator: ATMs<MAX_ATMS>;

/*============================================================================*/

new
	CurrentAccountID[MAX_PLAYERS] = {-1, ...},
	LogListType[MAX_PLAYERS] = {TYPE_NONE, ...},
	LogListPage[MAX_PLAYERS],
	EditingATMID[MAX_PLAYERS] = {-1, ...};

// ======================= LSPD Obje Sistemi ===================================
#define     MAX_COP_OBJECTS     (300)
#define     COPOBJECTS_DIALOG   (7100)
#define     SPEEDCAM_RANGE      (30.0)

enum    _:e_object_types
{
	OBJECT_TYPE_ROADBLOCK,
	OBJECT_TYPE_SIGN,
	OBJECT_TYPE_POLICELINE,
	OBJECT_TYPE_SPIKE,
	OBJECT_TYPE_SPEEDCAM
}

enum	e_object_data
{
	Owner[32],
	Type,
	ObjData,
	ObjModel,
	Float: ObjX,
	Float: ObjY,
	Float: ObjZ,
	Float: ObjRX,
	Float: ObjRY,
	Float: ObjRZ,
	ObjInterior,
	ObjVirtualWorld,
	ObjID,
	Text3D: ObjLabel,
	ObjArea,
	bool: ObjCreated
}

new
	CopObjectData[MAX_COP_OBJECTS][e_object_data],
	EditingCopObjectID[MAX_PLAYERS] = {-1, ...},
	RoadblockList = mS_INVALID_LISTID,
	SignList = mS_INVALID_LISTID,
	DroneList = mS_INVALID_LISTID;

new
    Float: zOffsets[5] = {1.35, 3.25, 0.35, 0.4, 5.35},
    Float: streamDistances[5] = {10.0, 10.0, 5.0, 3.0, SPEEDCAM_RANGE};

new
	DB: ObjectDB,
	DBStatement: LoadObjects,
	DBStatement: AddObject,
	DBStatement: UpdateObject,
	DBStatement: RemoveObject;

enum sunucubilgi
{
	TasimacilikPara,
	CopcuPara
};

#define     TRASH_BAG_VALUE     (30)    	// value of a collected trash bag (default: 125)
#define     REFILL_TIME         (300)   	// trash container refill time - in seconds (default: 300)
#define     ATTACHMENT_INDEX    (4)     	// for setplayerattachedobject (default: 4)
#define     TRASH_LIMIT         (10)    	// trashmaster capacity (default: 10)

enum	_:e_trashtypes
{
	TYPE_BIN,
	TYPE_DUMPSTER
}

enum	e_trashdata
{
	TrashType,
	Float: TrashX,
	Float: TrashY,
	Float: TrashZ,
	Text3D: TrashLabel,
	TrashLevel,
	TrashTimer
}

enum    e_factorydata
{
    FactoryName[32],
	Float: FactoryX,
	Float: FactoryY,
	Float: FactoryZ,
	FactoryCurrent,
	FactoryCP,
	Text3D: FactoryLabel
}

new
	TrashData[][e_trashdata] = {
		{TYPE_DUMPSTER, -169.9766, 1027.1953, 19.4453},
		{TYPE_DUMPSTER, -160.2656, 1122.5391, 19.5391},
		{TYPE_DUMPSTER, -149.8516, 1133.7656, 19.5391},
		{TYPE_DUMPSTER, -170.1719, 1169.0547, 19.5391},
		{TYPE_DUMPSTER, -218.0312, 1164.9219, 19.5391},
		{TYPE_DUMPSTER, -149.8203, 1164.1094, 19.5391},
		{TYPE_DUMPSTER, -162.0938, 1175.1406, 19.5391},
		{TYPE_DUMPSTER, -155.6953, 1234.4219, 19.4766},
		{TYPE_DUMPSTER, -123.8125, 1079.3984, 19.5000},
		{TYPE_DUMPSTER, -90.6016, 1128.2188, 19.4609},
		{TYPE_DUMPSTER, -88.8594, 1165.3828, 19.4609},
		{TYPE_DUMPSTER, -44.3047, 1179.2734, 19.2422},
		{TYPE_DUMPSTER, -24.8203, 1165.4062, 19.2422},
		{TYPE_DUMPSTER, 776.8281, 1866.1562, 3.8906},
		{TYPE_DUMPSTER, 338.0547, 39.8438, 6.2656},
		{TYPE_DUMPSTER, 339.7188, 52.9844, 3.2656},
		{TYPE_DUMPSTER, 341.4219, 55.0078, 3.2656},
		{TYPE_DUMPSTER, 1353.1016, 201.7578, 19.2656},
		{TYPE_DUMPSTER, 1353.5781, 204.2266, 19.2656},
		{TYPE_DUMPSTER, 244.1250, -313.1250, 1.2734},
		{TYPE_DUMPSTER, 251.4453, -262.5469, 1.2734},
		{TYPE_DUMPSTER, 254.0000, -263.2578, 1.2734},
		{TYPE_DUMPSTER, 306.0625, -255.1016, 1.2578},
		{TYPE_DUMPSTER, 308.6719, -255.0938, 1.2578},
		{TYPE_BIN, 2317.1562, 29.2031, 26.2188},
		{TYPE_DUMPSTER, 2321.1172, 14.3359, 26.1953},
		{TYPE_BIN, 2317.5938, 30.4766, 26.2188},
		{TYPE_DUMPSTER, 196.7109, -121.4062, 1.2734},
		{TYPE_DUMPSTER, 255.1172, -161.2891, 1.3047},
		{TYPE_DUMPSTER, 255.3125, -132.6250, 1.2734},
		{TYPE_DUMPSTER, 259.5547, -132.7891, 1.2734},
		{TYPE_DUMPSTER, 165.9219, -107.6328, 1.2734},
		{TYPE_DUMPSTER, 182.9922, -93.6172, 1.2734},
		{TYPE_DUMPSTER, 171.4453, -93.4453, 1.2734},
		{TYPE_DUMPSTER, 657.8516, -650.0703, 16.0625},
		{TYPE_DUMPSTER, 665.2266, -624.3750, 16.0625},
		{TYPE_DUMPSTER, 668.2109, -624.4453, 16.0625},
		{TYPE_DUMPSTER, 652.7422, -496.5156, 16.0469},
		{TYPE_DUMPSTER, 652.8125, -499.3203, 16.0469},
		{TYPE_DUMPSTER, 725.8750, -465.7422, 15.9375},
		{TYPE_DUMPSTER, 656.0000, -439.2734, 16.2812},
		{TYPE_DUMPSTER, 693.2891, -456.0156, 16.0078},
		{TYPE_DUMPSTER, 830.4766, -754.6016, 84.9375},
		{TYPE_BIN, 842.5156, -756.1719, 84.3047},
		{TYPE_DUMPSTER, 1300.4531, 221.5078, 19.2656},
		{TYPE_DUMPSTER, 1320.6328, 211.4688, 19.2656},
		{TYPE_DUMPSTER, 1328.8672, 207.3438, 19.2656},
		{TYPE_DUMPSTER, 1362.0391, 232.6094, 19.2656},
		{TYPE_DUMPSTER, 1364.2891, 231.4844, 19.2656},
		{TYPE_DUMPSTER, 1307.6875, 349.7578, 19.2812},
		{TYPE_DUMPSTER, 1315.2500, 349.5625, 19.2578},
		{TYPE_DUMPSTER, 1413.4141, 451.1172, 19.7344},
		{TYPE_DUMPSTER, 1368.6250, 484.1406, 19.7344},
		{TYPE_DUMPSTER, -2146.7344, -2462.4844, 30.5547},
		{TYPE_DUMPSTER, -2105.9375, -2458.1562, 30.5547},
		{TYPE_DUMPSTER, -2108.4922, -2456.1719, 30.5547},
		{TYPE_DUMPSTER, -2103.7734, -2479.7344, 30.5547},
		{TYPE_DUMPSTER, -2218.8828, -2336.2109, 30.4844},
		{TYPE_DUMPSTER, -2213.9609, -2339.3047, 30.4844},
		{TYPE_DUMPSTER, -2136.5547, -2450.5938, 30.5547},
		{TYPE_DUMPSTER, -2176.3438, -2424.5781, 30.5547},
		{TYPE_DUMPSTER, -2174.8594, -2365.2734, 30.7969},
		{TYPE_DUMPSTER, -2136.5000, -2263.8984, 30.7266},
		{TYPE_DUMPSTER, -2138.6641, -2262.1953, 30.7266},
		{TYPE_DUMPSTER, -2087.9922, -2440.9453, 30.6953},
		{TYPE_DUMPSTER, -2107.2109, -2423.8906, 30.7969},
		{TYPE_DUMPSTER, -2085.3203, -2414.5078, 30.6406},
		{TYPE_DUMPSTER, -2087.2031, -2343.1016, 30.7969},
		{TYPE_DUMPSTER, -77.2188, -1188.3672, 0.8359},
		{TYPE_DUMPSTER, -68.3516, -1104.9922, 0.2188},
		{TYPE_DUMPSTER, -63.8125, -1106.4219, 0.2188},
		{TYPE_DUMPSTER, -541.4297, -561.2266, 24.5859},
		{TYPE_DUMPSTER, -513.7578, -561.0078, 24.5859},
		{TYPE_DUMPSTER, -502.6094, -528.6484, 24.5859},
		{TYPE_DUMPSTER, -620.4141, -490.5078, 24.5859},
		{TYPE_DUMPSTER, -619.6250, -473.4531, 24.5859},
		{TYPE_BIN, 788.3438, -863.3828, 59.7031},
		{TYPE_BIN, 787.9766, -862.3750, 59.7109},
		{TYPE_BIN, 787.9766, -862.3750, 59.7109},
		{TYPE_BIN, 787.9844, -841.5234, 59.7031},
		{TYPE_DUMPSTER, 792.6250, -838.8906, 60.6406},
		{TYPE_BIN, 911.7031, -836.2031, 91.3594},
		{TYPE_BIN, 910.8750, -836.6953, 91.1250},
		{TYPE_BIN, 960.2422, -822.8594, 95.5391},
		{TYPE_BIN, 974.9219, -815.5156, 96.7266},
		{TYPE_BIN, 948.4922, -699.7422, 121.2969},
		{TYPE_BIN, 948.0078, -698.7891, 121.3203},
		{TYPE_BIN, 914.3125, -670.3594, 116.2891},
		{TYPE_BIN, 1072.1406, -778.3828, 106.4453},
		{TYPE_BIN, 1072.1406, -778.3828, 106.4453},
		{TYPE_BIN, 1071.0547, -778.4766, 106.2891},
		{TYPE_BIN, 2380.0312, -1038.0703, 52.8281},
		{TYPE_BIN, 2380.8516, -1039.0547, 52.7891},
		{TYPE_BIN, 2426.7266, -1016.7500, 53.4453},
		{TYPE_BIN, 2436.7109, -1052.2500, 53.4297},
		{TYPE_BIN, 2459.4531, -1051.6094, 58.8438},
		{TYPE_BIN, 2457.3984, -1023.1719, 58.7891},
		{TYPE_BIN, 2484.0859, -1053.1406, 66.6406},
		{TYPE_BIN, 2489.6172, -1022.6094, 64.5156},
		{TYPE_BIN, 2505.0781, -1061.0781, 69.3125},
		{TYPE_BIN, 2527.9219, -1058.1406, 68.6875},
		{TYPE_BIN, 2510.2891, -1029.5859, 69.1797},
		{TYPE_BIN, 2528.6719, -1034.9219, 68.6719},
		{TYPE_BIN, 2538.6484, -1058.6016, 68.6719},
		{TYPE_BIN, 2545.1562, -1034.8984, 68.6641},
		{TYPE_BIN, 2567.8203, -1035.2812, 68.6719},
		{TYPE_DUMPSTER, 1420.1172, -1356.8438, 13.3828},
		{TYPE_DUMPSTER, 1425.5312, -1320.5781, 13.3672},
		{TYPE_DUMPSTER, 1415.6016, -1299.1875, 13.3672},
		{TYPE_DUMPSTER, 1425.5703, -1317.9688, 13.3672},
		{TYPE_DUMPSTER, 1439.8594, -1323.7031, 13.3828},
		{TYPE_DUMPSTER, 1593.0781, -1200.3750, 19.6875},
		{TYPE_DUMPSTER, 1616.5547, -1200.3750, 19.6875},
		{TYPE_DUMPSTER, 1660.4688, -1200.3750, 19.6875},
		{TYPE_DUMPSTER, 1435.5859, -1095.7969, 17.4141},
		{TYPE_DUMPSTER, 1438.1953, -1095.8438, 17.4141},
		{TYPE_DUMPSTER, 1424.5234, -1084.3047, 17.4141},
		{TYPE_DUMPSTER, 1424.5781, -1080.3828, 17.4141},
		{TYPE_DUMPSTER, 1520.1562, -1018.5547, 23.8438},
		{TYPE_DUMPSTER, 1520.2109, -1014.6328, 23.8438},
		{TYPE_DUMPSTER, 1611.6875, -993.9062, 23.8438},
		{TYPE_DUMPSTER, 1659.9141, -1065.1172, 23.7969},
		{TYPE_DUMPSTER, 1631.9219, -987.8281, 23.8438},
		{TYPE_DUMPSTER, 1633.9375, -990.5547, 23.8438},
		{TYPE_DUMPSTER, 1660.2500, -1000.4141, 23.7891},
		{TYPE_DUMPSTER, 1666.3984, -997.7031, 23.7891},
		{TYPE_DUMPSTER, 1786.2109, -1148.2969, 23.6797},
		{TYPE_DUMPSTER, 1800.4531, -1148.2969, 23.6797},
		{TYPE_DUMPSTER, 1830.5703, -1147.3828, 23.6797},
		{TYPE_DUMPSTER, 1830.6172, -1143.8203, 23.6797},
		{TYPE_DUMPSTER, 1789.7734, -1116.0625, 23.8906},
		{TYPE_DUMPSTER, 1789.9062, -1112.6406, 23.8906},
		{TYPE_DUMPSTER, 1830.5703, -1113.9297, 23.6797},
		{TYPE_DUMPSTER, 1830.5703, -1097.3047, 23.6797},
		{TYPE_DUMPSTER, 1830.5703, -1084.2891, 23.6797},
		{TYPE_DUMPSTER, 1336.3359, -1842.8516, 12.6641},
		{TYPE_DUMPSTER, 1336.7891, -1816.3047, 12.6641},
		{TYPE_DUMPSTER, 1466.9453, -1847.8438, 12.6641},
		{TYPE_DUMPSTER, 1419.7344, -1846.5469, 12.6641},
		{TYPE_DUMPSTER, 1419.6953, -1844.2031, 12.6641},
		{TYPE_DUMPSTER, 1486.2109, -1848.1250, 12.6641},
		{TYPE_DUMPSTER, 1468.0625, -1847.7891, 12.6641},
		{TYPE_DUMPSTER, 1516.6875, -1850.0547, 12.6641},
		{TYPE_DUMPSTER, 1337.6953, -1774.7344, 12.6641},
		{TYPE_DUMPSTER, 1461.4297, -1489.2188, 12.6797},
		{TYPE_DUMPSTER, 1538.9453, -1849.2734, 12.6641},
		{TYPE_DUMPSTER, 1534.9297, -1480.9922, 8.6094},
		{TYPE_DUMPSTER, 1537.9297, -1480.6094, 8.6094},
		{TYPE_DUMPSTER, 2382.0234, -1941.0391, 12.6641},
		{TYPE_DUMPSTER, 1920.0547, -2122.4141, 12.6875},
		{TYPE_DUMPSTER, 1920.4844, -2088.1719, 12.6875},
		{TYPE_DUMPSTER, 1092.0078, -1881.2812, 13.3047},
		{TYPE_DUMPSTER, 1175.3828, -1877.5625, 13.3047},
		{TYPE_DUMPSTER, 1091.9844, -1876.8281, 13.3047},
		{TYPE_DUMPSTER, 1101.9922, -1874.9766, 13.3047},
		{TYPE_DUMPSTER, 1117.4688, -1874.9766, 13.3047},
		{TYPE_DUMPSTER, 432.2422, -1747.8828, 8.3281},
		{TYPE_DUMPSTER, 477.7734, -1746.4531, 8.5000},
		{TYPE_DUMPSTER, 569.5078, -1765.0312, 13.5312},
		{TYPE_DUMPSTER, 732.8516, -1332.8984, 12.6875},
		{TYPE_DUMPSTER, 732.7266, -1341.7734, 12.6328},
		{TYPE_DUMPSTER, 387.1484, -1751.5078, 7.9453},
		{TYPE_DUMPSTER, 387.2266, -1747.7266, 8.3594},
		{TYPE_DUMPSTER, 1322.1875, -1235.8828, 13.4375},
		{TYPE_DUMPSTER, -826.2812, 495.1172, 1357.8594},
		{TYPE_DUMPSTER, -827.2656, 498.1953, 1357.7656},
		{TYPE_DUMPSTER, -829.0312, 498.1953, 1357.5938},
		{TYPE_BIN, -800.9453, 500.8984, 1360.0312},
		{TYPE_BIN, -800.9453, 501.7422, 1360.0312},
		{TYPE_DUMPSTER, -2531.9062, 2295.0312, 4.7578},
		{TYPE_DUMPSTER, -2526.9453, 2295.0312, 4.7578},
		{TYPE_DUMPSTER, -2527.2422, 2353.1250, 4.7578},
		{TYPE_DUMPSTER, -2520.7188, 2353.1250, 4.7578},
		{TYPE_DUMPSTER, -2524.0625, 2353.1250, 4.7578},
		{TYPE_DUMPSTER, -2480.8828, 2295.0312, 4.7578},
		{TYPE_DUMPSTER, -2503.0703, 2364.2188, 4.7578},
		{TYPE_DUMPSTER, -2503.0469, 2368.0469, 4.7578},
		{TYPE_DUMPSTER, -2253.5391, 2372.5469, 4.7578},
		{TYPE_DUMPSTER, -2455.3750, -143.8750, 26.0156},
		{TYPE_DUMPSTER, -2455.3516, -138.0156, 26.0156},
		{TYPE_DUMPSTER, -2753.9453, -178.3281, 6.8359},
		{TYPE_DUMPSTER, -2658.9766, -168.8984, 3.9844},
		{TYPE_DUMPSTER, -2657.9297, -189.0703, 3.9844},
		{TYPE_DUMPSTER, -2652.7891, -188.2891, 3.9844},
		{TYPE_DUMPSTER, -2653.3828, -167.3984, 3.9844},
		{TYPE_DUMPSTER, -2759.2578, -136.2031, 6.8359},
		{TYPE_DUMPSTER, -2753.3125, -149.8516, 6.8359},
		{TYPE_DUMPSTER, -2659.2734, -125.2031, 3.9844},
		{TYPE_DUMPSTER, -2753.2734, -121.6016, 6.8359},
		{TYPE_DUMPSTER, -2759.2031, -120.8203, 6.8359},
		{TYPE_DUMPSTER, -2653.6797, -124.7422, 3.9844},
		{TYPE_DUMPSTER, -2759.9453, -96.8203, 6.8359},
		{TYPE_DUMPSTER, -2763.7031, -13.7344, 6.8359},
		{TYPE_DUMPSTER, -2766.0312, 25.0156, 6.8359},
		{TYPE_DUMPSTER, -2760.7188, -54.3438, 6.8359},
		{TYPE_DUMPSTER, -2759.4766, 7.8906, 6.8359},
		{TYPE_DUMPSTER, -2754.4219, -85.3906, 6.8359},
		{TYPE_DUMPSTER, -2754.8516, -56.6016, 6.8359},
		{TYPE_DUMPSTER, -2755.9141, -36.3828, 6.8359},
		{TYPE_DUMPSTER, -2747.3594, -8.6641, 6.0938},
		{TYPE_DUMPSTER, -2766.4297, 52.0781, 6.9297},
		{TYPE_DUMPSTER, -2766.2109, 86.5781, 6.9297},
		{TYPE_DUMPSTER, -2760.3672, 63.8594, 6.9375},
		{TYPE_DUMPSTER, -2757.9688, 95.9844, 6.9297},
		{TYPE_DUMPSTER, -2756.2656, 90.3594, 6.9297},
		{TYPE_DUMPSTER, -2756.4844, 93.1875, 6.9297},
		{TYPE_DUMPSTER, -2763.1328, 115.3828, 6.8906},
		{TYPE_DUMPSTER, -2760.3672, 144.3516, 6.8828},
		{TYPE_DUMPSTER, -2658.3125, -89.6172, 3.9844},
		{TYPE_DUMPSTER, -2716.9844, 74.3594, 4.0781},
		{TYPE_DUMPSTER, -2717.9219, 77.9219, 4.0781},
		{TYPE_DUMPSTER, -2656.5938, 71.5625, 3.9844},
		{TYPE_DUMPSTER, -2651.2500, 92.4375, 3.9844},
		{TYPE_DUMPSTER, -2649.8125, 52.7500, 3.9844},
		{TYPE_DUMPSTER, -2651.9062, 133.3438, 3.9844},
		{TYPE_DUMPSTER, -2656.7109, 115.3828, 3.9844},
		{TYPE_DUMPSTER, -2657.7734, 135.6016, 3.9844},
		{TYPE_DUMPSTER, 2535.3906, 1942.2500, 10.6094},
		{TYPE_DUMPSTER, 2676.4531, 1665.6875, 10.6094},
		{TYPE_DUMPSTER, 2676.4531, 1705.5703, 10.6094},
		{TYPE_DUMPSTER, 2657.1250, 1942.2500, 10.6094},
		{TYPE_DUMPSTER, 2676.4531, 1825.4062, 10.6094},
		{TYPE_DUMPSTER, 2178.2188, 1418.8438, 10.6250},
		{TYPE_DUMPSTER, 2181.5625, 1418.8438, 10.6250},
		{TYPE_BIN, 2065.7344, 637.5781, 11.2031},
		{TYPE_BIN, 2011.1328, 638.1172, 11.2031},
		{TYPE_DUMPSTER, 1878.6484, 683.7734, 10.6250},
		{TYPE_DUMPSTER, 1881.3828, 683.7734, 10.6250},
		{TYPE_BIN, 1885.4844, 683.7500, 10.5625},
		{TYPE_DUMPSTER, 1969.9453, 693.7422, 10.6250},
		{TYPE_BIN, 1976.6797, 693.7109, 10.5625},
		{TYPE_BIN, 1969.2109, 712.7344, 10.5625},
		{TYPE_DUMPSTER, 1975.6953, 712.7031, 10.6250},
		{TYPE_DUMPSTER, 2006.1953, 706.4531, 11.2500},
		{TYPE_BIN, 2043.4531, 708.3672, 11.1953},
		{TYPE_DUMPSTER, 1884.8359, 722.7031, 10.6250},
		{TYPE_DUMPSTER, 1882.1016, 722.7031, 10.6250},
		{TYPE_BIN, 1877.8828, 722.7344, 10.5625},
		{TYPE_BIN, 2010.3125, 718.0391, 11.1953},
		{TYPE_DUMPSTER, 2009.2812, 786.4297, 11.2500},
		{TYPE_BIN, 2046.0547, 788.3906, 11.1953},
		{TYPE_BIN, 2065.2812, 717.4688, 11.1953},
		{TYPE_BIN, 2071.4609, 788.9609, 11.1953},
		{TYPE_BIN, 2128.2500, 640.0781, 11.2031},
		{TYPE_BIN, 2090.1562, 638.1016, 11.2031},
		{TYPE_DUMPSTER, 2224.1328, 666.4062, 11.2500},
		{TYPE_DUMPSTER, 2086.3672, 706.4531, 11.2500},
		{TYPE_BIN, 2123.2734, 708.4297, 11.1953},
		{TYPE_BIN, 2174.5703, 678.0625, 11.1953},
		{TYPE_BIN, 2180.9531, 668.4141, 11.2031},
		{TYPE_BIN, 2206.4688, 669.0078, 11.2031},
		{TYPE_DUMPSTER, 2210.4766, 679.9453, 11.2500},
		{TYPE_BIN, 2219.0312, 677.5234, 11.1953},
		{TYPE_BIN, 2254.0859, 677.9844, 11.1953},
		{TYPE_BIN, 2261.4688, 668.3828, 11.1953},
		{TYPE_BIN, 2088.5156, 718.0469, 11.1953},
		{TYPE_DUMPSTER, 2087.4219, 786.4297, 11.2500},
		{TYPE_BIN, 2126.7969, 719.9062, 11.1953},
		{TYPE_BIN, 2126.6797, 788.4062, 11.1953},
		{TYPE_BIN, 2180.2188, 748.3828, 11.1953},
		{TYPE_DUMPSTER, 2180.6016, 778.2266, 11.2500},
		{TYPE_BIN, 2186.9219, 748.3828, 11.1953},
		{TYPE_BIN, 2205.6641, 748.9141, 11.1953},
		{TYPE_DUMPSTER, 2222.5234, 746.4219, 11.2500},
		{TYPE_BIN, 2260.3438, 748.4219, 11.1953},
		{TYPE_DUMPSTER, 2364.0781, 666.5703, 11.2500},
		{TYPE_BIN, 2359.7109, 677.4844, 11.1953},
		{TYPE_BIN, 2394.3906, 678.0312, 11.1953},
		{TYPE_DUMPSTER, 2460.6172, 696.5859, 11.2500},
		{TYPE_BIN, 2463.1250, 706.3438, 11.1953},
		{TYPE_BIN, 2463.1250, 707.8203, 11.1953},
		{TYPE_DUMPSTER, 2538.3125, 716.4219, 10.6172},
		{TYPE_DUMPSTER, 2364.0781, 746.4219, 11.2500},
		{TYPE_BIN, 2462.5859, 739.7500, 11.1953},
		{TYPE_DUMPSTER, 2578.8906, 723.9531, 10.6172},
		{TYPE_DUMPSTER, 2615.2578, 716.3984, 10.6172},
		{TYPE_DUMPSTER, 2658.3438, 716.3984, 10.6172},
		{TYPE_BIN, 2821.8750, 858.1875, 10.4844},
		{TYPE_BIN, 2836.9531, 858.1953, 10.4844},
		{TYPE_DUMPSTER, 2879.0859, 858.1562, 10.5391},
		{TYPE_BIN, 2863.4688, 946.0156, 10.4844},
		{TYPE_DUMPSTER, 2879.6484, 945.9688, 10.5391},
		{TYPE_DUMPSTER, 2764.9766, 1437.9766, 10.5547},
		{TYPE_DUMPSTER, 2763.0469, 1443.0781, 10.5547},
		{TYPE_DUMPSTER, 2108.6562, 2650.0625, 10.5938},
		{TYPE_DUMPSTER, 2120.5156, 2667.0859, 10.6172},
		{TYPE_DUMPSTER, 2120.3359, 2669.8984, 10.6172},
		{TYPE_DUMPSTER, 2180.9766, 2747.1484, 10.6172},
		{TYPE_DUMPSTER, 2190.2500, 2792.6016, 10.6172},
		{TYPE_DUMPSTER, 2203.6406, 2808.6719, 10.6172},
		{TYPE_DUMPSTER, 2229.1641, 2812.1562, 10.5938},
		{TYPE_DUMPSTER, 2256.7500, 2527.4922, 10.6172},
		{TYPE_DUMPSTER, 2260.3516, 2563.2500, 10.6172},
		{TYPE_DUMPSTER, 2264.1719, 2563.2500, 10.6172},
		{TYPE_DUMPSTER, 2273.8438, 2784.4531, 10.5703},
		{TYPE_DUMPSTER, 2287.7891, 2784.2891, 10.5703},
		{TYPE_DUMPSTER, 2361.7969, 2793.0156, 10.6172},
		{TYPE_DUMPSTER, 2361.1016, 2783.2188, 10.6172},
		{TYPE_DUMPSTER, 2361.2422, 2781.7656, 10.6250},
		{TYPE_DUMPSTER, 2374.3516, 2759.8750, 10.6328},
		{TYPE_DUMPSTER, 2377.2109, 2759.4453, 10.6172},
		{TYPE_DUMPSTER, 2379.2578, 2759.4062, 10.6328},
		{TYPE_DUMPSTER, 2596.2500, 2045.4141, 10.6172},
		{TYPE_DUMPSTER, 2579.4141, 2081.3516, 10.6172},
		{TYPE_DUMPSTER, 2596.3203, 2053.7578, 10.6172},
		{TYPE_DUMPSTER, 2596.3203, 2072.0000, 10.6172},
		{TYPE_DUMPSTER, 2596.2500, 2077.6953, 10.6172},
		{TYPE_DUMPSTER, 2514.1875, 2316.5938, 10.6250},
		{TYPE_DUMPSTER, 2550.1094, 2245.0234, 10.6172},
		{TYPE_DUMPSTER, 2542.9141, 2317.9609, 10.6328},
		{TYPE_DUMPSTER, 2545.7031, 2317.8594, 10.6250},
		{TYPE_DUMPSTER, 2257.9375, 2298.6797, 10.6250},
		{TYPE_DUMPSTER, 2781.6250, 2544.4375, 10.6172},
		{TYPE_DUMPSTER, 2809.6094, 2581.0000, 10.6172},
		{TYPE_DUMPSTER, 2818.9297, 2590.2969, 10.6250},
		{TYPE_DUMPSTER, 2820.3594, 2592.9375, 10.6172},
		{TYPE_DUMPSTER, 2253.9062, 2336.5156, 10.6172},
		{TYPE_DUMPSTER, 1004.8125, 1068.0703, 10.6250},
		{TYPE_DUMPSTER, 1002.5625, 1068.0703, 10.6250},
		{TYPE_DUMPSTER, 1346.2734, 1064.0781, 10.9297},
		{TYPE_DUMPSTER, 1341.3516, 1064.0781, 10.9297},
		{TYPE_DUMPSTER, 1339.0781, 1064.0781, 10.6250},
		{TYPE_DUMPSTER, 1303.2188, 1102.7188, 10.6250},
		{TYPE_DUMPSTER, 1338.8047, 1164.1562, 10.9297},
		{TYPE_DUMPSTER, 1584.9297, 663.9844, 10.9297},
		{TYPE_DUMPSTER, 1632.0156, 663.9844, 10.9297},
		{TYPE_DUMPSTER, 1634.6797, 663.9844, 10.9297},
		{TYPE_DUMPSTER, 1635.9844, 892.2109, 10.9297},
		{TYPE_DUMPSTER, 1756.5781, 691.1641, 10.9297},
		{TYPE_DUMPSTER, 1756.5781, 688.6250, 10.9297},
		{TYPE_DUMPSTER, 1478.1250, 963.5625, 10.6250},
		{TYPE_DUMPSTER, 1478.1250, 967.0703, 10.6250},
		{TYPE_DUMPSTER, 1518.2500, 971.4609, 10.9297},
		{TYPE_DUMPSTER, 1518.2500, 979.7656, 10.9297},
		{TYPE_DUMPSTER, 1557.6562, 970.5625, 10.6250},
		{TYPE_DUMPSTER, 1557.7422, 968.3125, 10.9297},
		{TYPE_DUMPSTER, 1464.2188, 1081.7422, 10.6250},
		{TYPE_DUMPSTER, 1598.6250, 1060.6562, 10.9297},
		{TYPE_DUMPSTER, 1603.0078, 1060.6562, 10.9297},
		{TYPE_DUMPSTER, 1668.0547, 911.7969, 10.9297},
		{TYPE_DUMPSTER, 1732.7422, 967.8359, 10.9297},
		{TYPE_DUMPSTER, 1745.3594, 1049.3906, 10.9297},
		{TYPE_DUMPSTER, 1680.0547, 1168.2734, 10.9297},
		{TYPE_DUMPSTER, 1680.0547, 1164.1562, 10.9297},
		{TYPE_DUMPSTER, 1694.4141, 1160.8594, 9.8125},
		{TYPE_DUMPSTER, 1680.2734, 1251.8594, 9.9062},
		{TYPE_DUMPSTER, 1734.2578, 1249.0547, 10.9297},
		{TYPE_DUMPSTER, 1947.6875, 2331.5469, 10.5625},
		{TYPE_DUMPSTER, 1980.8438, 2331.5156, 10.5625},
		{TYPE_DUMPSTER, 1427.1797, 1905.2578, 9.9453},
		{TYPE_BIN, 1427.2422, 1891.8828, 9.9219},
		{TYPE_BIN, 1427.2422, 1893.1094, 9.9219},
		{TYPE_BIN, 1427.2422, 1911.9297, 9.9219},
		{TYPE_BIN, 1427.2422, 1910.7031, 9.9219},
		{TYPE_BIN, 1427.2422, 1915.1328, 9.9219},
		{TYPE_BIN, 1430.2031, 1932.2812, 9.9219},
		{TYPE_BIN, 1431.4297, 1932.2812, 9.9219},
		{TYPE_BIN, 1434.6328, 1932.2812, 9.9219},
		{TYPE_BIN, 1446.2656, 1884.8438, 9.9219},
		{TYPE_BIN, 1446.2656, 1888.0547, 9.9219},
		{TYPE_BIN, 1446.2656, 1910.7031, 9.9219},
		{TYPE_BIN, 1446.2656, 1911.9297, 9.9219},
		{TYPE_BIN, 1446.2656, 1915.1328, 9.9219},
		{TYPE_DUMPSTER, 1446.1016, 1917.5938, 9.9453},
		{TYPE_BIN, 1666.5469, 2042.2109, 9.9219},
		{TYPE_BIN, 1666.5469, 2039.0078, 9.9219},
		{TYPE_BIN, 1666.5469, 2037.7812, 9.9219},
		{TYPE_DUMPSTER, 1666.5781, 2034.5312, 9.9453},
		{TYPE_BIN, 1659.1406, 2050.9062, 9.9219},
		{TYPE_BIN, 1659.1406, 2049.1406, 9.9219},
		{TYPE_BIN, 1659.1406, 2046.4688, 9.9219},
		{TYPE_DUMPSTER, 1666.5781, 2056.0000, 9.9453},
		{TYPE_BIN, 1659.1406, 2068.9688, 9.9219},
		{TYPE_BIN, 1659.1406, 2070.7344, 9.9219},
		{TYPE_BIN, 1659.2109, 2086.6094, 9.9219},
		{TYPE_BIN, 1659.2109, 2092.3047, 9.9219},
		{TYPE_DUMPSTER, 1659.1016, 2084.4844, 9.9453},
		{TYPE_BIN, 1666.6562, 2062.5312, 9.9219},
		{TYPE_BIN, 1666.6562, 2064.2969, 9.9219},
		{TYPE_BIN, 1666.6562, 2098.8438, 9.9219},
		{TYPE_BIN, 1666.6562, 2100.6094, 9.9219},
		{TYPE_BIN, 1659.2109, 2116.0156, 9.9219},
		{TYPE_DUMPSTER, 1666.5781, 2109.2188, 9.9453},
		{TYPE_BIN, 1659.2109, 2121.7031, 9.9219},
		{TYPE_DUMPSTER, 1659.1016, 2124.2266, 9.9453},
		{TYPE_BIN, 1666.9609, 2128.7344, 9.9219},
		{TYPE_BIN, 1666.9609, 2134.4219, 9.9219},
		{TYPE_BIN, 1659.0078, 2144.4297, 9.9219},
		{TYPE_BIN, 1659.0078, 2142.6641, 9.9219},
		{TYPE_DUMPSTER, 1659.1016, 2159.1094, 9.9453},
		{TYPE_DUMPSTER, 1659.1016, 2161.6016, 9.9453},
		{TYPE_BIN, 1047.7969, 1991.3906, 9.9531},
		{TYPE_BIN, 1047.7969, 1990.1641, 9.9531},
		{TYPE_BIN, 1047.7969, 1994.5938, 9.9531},
		{TYPE_BIN, 1066.8203, 1991.3906, 9.9531},
		{TYPE_BIN, 1066.8203, 1994.5938, 9.9531},
		{TYPE_BIN, 1066.8203, 1990.1641, 9.9531},
		{TYPE_DUMPSTER, 1066.6562, 1997.0547, 9.9453},
		{TYPE_BIN, 1066.4766, 2017.5078, 9.9531},
		{TYPE_BIN, 1048.5000, 2012.0391, 9.9531},
		{TYPE_BIN, 1066.4766, 2018.7344, 9.9531},
		{TYPE_BIN, 1066.4766, 2021.9375, 9.9531},
		{TYPE_DUMPSTER, 1048.3359, 2017.7031, 9.9453},
		{TYPE_BIN, 1567.8203, 2096.8047, 9.9219},
		{TYPE_BIN, 1567.8203, 2095.5781, 9.9219},
		{TYPE_BIN, 1567.8203, 2133.4844, 9.9219},
		{TYPE_BIN, 1567.8203, 2134.7109, 9.9219},
		{TYPE_BIN, 1567.8203, 2157.5469, 9.9219},
		{TYPE_BIN, 1567.8203, 2156.3203, 9.9219},
		{TYPE_BIN, 1567.8203, 2160.7500, 9.9219},
		{TYPE_DUMPSTER, 1577.5859, 2161.1484, 10.2109},
		{TYPE_DUMPSTER, 1577.5859, 2119.1016, 10.2109},
		{TYPE_DUMPSTER, 1577.5859, 2091.5391, 10.2109},
		{TYPE_BIN, 1577.7578, 2158.6875, 9.9219},
		{TYPE_BIN, 1577.7578, 2155.4844, 9.9219},
		{TYPE_BIN, 1577.7578, 2154.2578, 9.9219},
		{TYPE_BIN, 1577.7578, 2113.4375, 9.9219},
		{TYPE_BIN, 1577.7578, 2112.2109, 9.9219}
	};

new
	FactoryData[][e_factorydata] = {
	// location, x, y, z
	    {"Los Santos", 2432.553710, -2115.611328, 13.546875},
		{"Las Venturas", 981.711303, 2168.738769, 10.820312},
		{"San Fierro", -1044.592895, -606.348876, 32.007812}
	};

new
	bool: HasTrash[MAX_PLAYERS],
	TrashCP[MAX_PLAYERS] = {-1, ...},
    FactoryIcons[MAX_PLAYERS][sizeof(FactoryData)],
    PlayerText: CapacityText[MAX_PLAYERS],
    PlayerBar: CapacityBar[MAX_PLAYERS];

new
	LoadedTrash[MAX_VEHICLES];


new Flasher[MAX_VEHICLES] = 0;

new FlasherState[MAX_VEHICLES];
new Beanbag[MAX_VEHICLES];
new CarInterior[MAX_VEHICLES];

// ============================PET SISTEMI =====================================
#define MAX_FURNITURE (500) // Maksimum mobilya.
#define DIALOG_PETLERIM 3300
#define DIALOG_PET 3301
#define DIALOG_PET_IYILESTIR 3556
#define MAX_PET 500
#define MAX_HOOD 50
#define MAX_TALEP 80
new Iterator:Petler<MAX_PET>;
new Iterator:Mobilyalar[MAX_EV]<MAX_FURNITURE>;
enum PetDegisken
{
	petID,
	NPCID,
	petAdi[24],
	petSahip,
	petTuru,
	petCinsiyet,
	petRenk,
	petAclik,
	Float:petSaglik,
	petTakip,
	petYarali,
	bool:petDurum,
	petSaldir,
	Text3D:petText,
	petAcikma,

}
new PetBilgi[MAX_PET][PetDegisken];
new PetKontrol[MAX_PLAYERS];
new Float:LastPos[MAX_PLAYERS][3];
enum talepler
{
	bool:tExists,
	tIcerik[128],
	tGonderen,
	tIlgilenen
}
new Talep[MAX_TALEP][talepler];
#define MAX_YARDIM_KOMUTLARI (300)
enum komutEnum
{
	komutVarmi,
	komutAd[24],
	komutTanim[256],
	komutKatagori,
	komutOlusum
};
new Komutlar[MAX_YARDIM_KOMUTLARI][komutEnum];

#define MAX_JAMMERS (25)

enum jammerData {
	jammerExists,
	jammerObject,
	Float:jammerPos[3],
	Text3D:jammerText3D,
	jammerMenzil
};

new JammerData[MAX_JAMMERS][jammerData];
enum hoodlar
{
	hID,
	bool:hExists,
	Float:hPos[3],
	hBirlik,
	hZone,
	hMapIcon,
	hPickup,
	Text3D:hLabel
}
new Hood[MAX_HOOD][hoodlar];
// ==================== PET SISTEMI ================================
#define BILDIRIM_DIALOG 9998
#define BILDIRIM_DIALOG2 9999
#define BALIK_TUTMA_ORANI 25
#define BIRLIK_CETE 1
#define BIRLIK_MAFYA 2
#define BIRLIK_HABER 3
#define BIRLIK_LEGAL 4
#define BIRLIK_LSPD 5
#define BIRLIK_LSSD 6
#define BIRLIK_LSMD 7
#define BIRLIK_FBI 8
#define BIRLIK_GOV 9
#define ARAMA_ARIYOR 1
#define ARAMA_ARANIYOR 2
#define ARAMA_KONUSUYOR 3
#define PRESSED(%0) \
	(((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))

#if !defined IsValidVehicle
	native IsValidVehicle(vehicleid);
#endif
// ===================== GisE SiSTEMi ==============================
//============================ GisE SiSTEMi ============================//
// Main configuration
#define TollOpenDistance (5.0)          // The distance in units the player can be from the icon to open the toll
// Other defines
#define MAX_TOLLS (5) // Amount of tolls
#define INVALID_TOLL_ID (-1)
#define RichmanToll (0)
#define FlintToll (1)
#define LVToll (2)
#define BlueberryTollR (3)
#define BlueberryTollL (4)
//Tolls
new L_a_TollObject[MAX_TOLLS*2]; // 0 & 1 = Richhman, 2 & 3 = Flint, 4 & 5 = LV, 6 & 7 = BlueBerry right
//Tolls
//========================BoomBox URL's========================//

enum TOLL_INFO
{
    E_tLocked,  // 0 & 1 = Richhman, 2 & 3 = Flint, 4 & 5 = LV, 6 & 7 = BlueBerry right
    E_tOpenTime // 0 & 1 = Richhman, 2 & 3 = Flint, 4 & 5 = LV, 6 & 7 = BlueBerry right
}

new aTolls[MAX_TOLLS][TOLL_INFO];

//============================ GisE SiSTEMi ============================//

// ====================================================================
//-----------------------------------------------------------------------------------
// ---------------------------- DEGISKENLER ------------------------------------------
// =========================== UYUsTURUCU SiSTEMi ================================
enum    _:E_DIALOG
{
	DIALOG_DRUG_STATS = 8620,
	DIALOG_CONFIRM_RESET,
	DIALOG_DRUG_DEALER,
	DIALOG_DRUG_DEALER_BUY_SEEDS,
	DIALOG_DRUG_DEALER_BUY_DRUGS,
	DIALOG_DRUG_DEALER_SELL,
	DIALOG_DRUG_OFFER
}
enum    E_PLANT
{
	plantedBy,
	Float: plantX,
	Float: plantY,
	Float: plantZ,
 	plantGrowth,
	plantObj,
	plantTimer,
	Text3D: plantLabel,
	bool: gotLeaves
}
new
	PlantData[MAX_PLANTS][E_PLANT],
	Iterator: Plants<MAX_PLANTS>;
enum    E_PLAYER
{
	// saved
	Drugs,
	Seeds,
	TotalUsed,
	TotalPlanted,
	TotalHarvestedPlants,
	TotalHarvestedGrams,
	TotalGiven,
	TotalReceived,
	TotalBought,
	TotalBoughtPrice,
	TotalSold,
	TotalSoldPrice,
	// temp
	DrugsCooldown,
	DealerID,
	DrugsOfferedBy,
	DrugsOfferedPrice,
	DrugsOfferedGram,
	DrugsOfferCooldown
}

enum    E_DEALER
{
	// loaded from db
	dealerID,
	dealerDrugs,
	dealerSkin,
	Float: dealerX,
	Float: dealerY,
	Float: dealerZ,
	Float: dealerA,
	dealerVw,
	// temp
	dealerActorID,
	Text3D: dealerLabel
}

new
	PlayerDrugData[MAX_PLAYERS][E_PLAYER],
	RegenTimer[MAX_PLAYERS] = {-1, ...},
	EffectTimer[MAX_PLAYERS] = {-1, ...};

new DealerData[MAX_DEALERS][E_DEALER],
	Iterator: Dealers<MAX_DEALERS>;

new
	DB: DrugDB;

new
	DBStatement: LoadPlayer,
	DBStatement: InsertPlayer,
	DBStatement: SavePlayer;


new DB:ArsaDB;
new DBStatement: LoadArsa;
new DBStatement: AddArsa;
new DBStatement: UpdateArsa;
new DBStatement: RemoveArsa;
// ===============================================================================

#define MAX_GRAFFITI_POINTS (50)
enum graffitiData {
    graffitiID,
    graffitiExists,
    Float:graffitiPos[6],
    graffitiObject,
    graffitiFont[64],
    graffitiText[64]
};
new GraffitiData[MAX_GRAFFITI_POINTS][graffitiData];
enum ticketData {
    ticketID,
    ticketExists,
    ticketFee,
    ticketMemur[24],
    ticketDate[36],
    ticketReason[64]
};
new TicketData[MAX_PLAYERS][MAX_PLAYER_TICKETS][ticketData];
enum droppedWeapons
{
	droppedID,
	bool:droppedExists,
	droppedPlayer,
	Float:droppedPos[3],
	droppedWeapon,
	droppedAmmo,
	droppedInt,
	droppedVw,
	droppedObject,
	Text3D:droppedText
}
new DroppedWeapon[MAX_DROPPED_WEAPONS][droppedWeapons];
enum cadirlar
{
	bool:cadirExists,
	cadirSahip,
	Float:cadirPos[3],
	cadirObject,
	Text3D:cadirText
}
new CadirData[MAX_CADIR][cadirlar];
enum reklam
{
	reklamExists,
	ajansID,
	reklamIletisim,
	reklamIcerik[128],
	reklamGonderen,
	reklamUcret

}
new Reklamlar[MAX_REKLAM][reklam];
new Text:Karanlik;
new Text:OyuncuHUD_0;
new Text:OyuncuHUD_5;
new Text:SunucuHud[3];
new PlayerText:YeniSunucuHud[3][MAX_PLAYERS];
new Text:GirisTD;
new PlayerText:MesafeTD[MAX_PLAYERS];
new PlayerText: FuelText[MAX_PLAYERS];
new PlayerText:OnayliHoodGirisTD[MAX_PLAYERS][3];
enum pData
{
 	pID,
 	pYas,
 	pCinsiyet,
 	pDogum[30],
 	pTen,
 	pMekanik,
 	pDuzkontak,
 	pDuzkontakArac,
 	pDuzkontakTimer,
 	pSkin,
 	pCikisInt,
 	Float:pCikisPos[3],
 	pCikisVw,
 	pAdmin,
 	//whitelist,
 	pPicking,
 	pPickCar,
 	pPickTime,
 	pPickSure,
	pDuzkontakEdiyor,
 	pDuzkontakSuresi,
 	pDuzkontakEttiZtn,
 	pHelper,
 	pOyunGorevlisi,
 	pForumGorevlisi,
 	pCash,
 	pAdminName[24],
 	pAdminDuty,
 	pHelperDuty,
	pEhliyet,
	pMotorEhliyet,
	pAdmins,
	pSeferSayi,
	pHouse,
	pFaction,
	pFactionRutbe,
	pFactionDivizyon,
	pBalikID[10],
	pBalikGram[10],
	pIsyeri,
	pGarage,
	pSu,
	pASlot[10],
	pTSlot[10],
	pABone[10],
	pARenk[10],
	Float:pHealth,
	Float:pArmour,
	pOnDuty,
	pOnDutySkin,
	pSilahlar[13],
	pMermiler[13],
	pAranma,
	pHapis,
	pHapisSure,
	pHapisSebep[50],
	pHapiseAtan[24],
	pTelefon,
	pTarife,
	pTarifeKalan[3],
	pTarifeSure,
	pBitcoin,
	pBoombox,
	pRadyo,
	pFrekans,
	pLevel,
	pEXP,
	pMaasSure,
	pOynamaSaati,
	pMaas,
	pDinle,
	pEsyalar[15],
	pTohumlar[3],
	pBagimlilik,
	pSilahAlmaSayisi,
	pSilahAlma,
	pTasimacilikSeviye,
	pTasimacilikSefer,
	pBakiye,
	pEXPBoost,
	pTackle,
	pBalikOrani,
	pYemTurleri[3],
	pVip,
	pVipSure,
	pDovusStili,
	pMaskeHakki,
	pMaskeID,
	pAyarlar[15],
	pPartner,
	pSerial[75],
	pHediye,
	pHediyeSaat,
	pYoutuber,
	bool:pYoutuberTag,
	pOldurme,
	pOlme,
	pTalepSayi,
	pCK,
	pProbation,
	pHurdaSure,
	pKilitMod,
 //
	pMuted,
	pYatKontrol[5],
	pKelepceKir,
	pBeanbag,
	bool:pSoyun,
	pTaxiCalled,
	pTaksiKabul,
	bool:pTaxiDuty,
	Float:pTaksiUcret,
	pTaxiPlayer,
	pBagajAracim,
	pBagajdayim,
	pBagajBenim,
	pBagajKim,
	pBagaj,
	pBagajAtan,
	pShootedBody,
	pLastShot,
	pPartnerTeklif,
	bool:pStand,
	pStandObject,
	Text3D:pStandText,
	bool:pHUD,
	pFriskOffer,
	pShakeOffer,
	pShakeType,
	bool:pGOD,
	pJetpack,
	pNameChange[24],
	pSpecID,
	pGraffiti,
	pGraffitiYazi[64],
	bool:pMaske,
	pVipRenk,
	pBagimlilikSayac[2],
	pSilahOffer,
	pSilahOfferID,
	pSilahOfferFiyat,
	pCadir,
	bool:pKampAtesi,
	pKampAtesiObject,
	bool:pMangalKuruldu,
	pMangalObject[2],
	pYemekPisiriliyor,
	pPisirilenYemek,
	Text3D:MangalText,
	yayinKonuk,
	pMuzikKutusu,
	pGPS,
	pTelefonAyar[6],
	pIhbar[128],
	pIhbarSayac,
	pAramada,
	pCallLine,
	pKonusmaSure,
	bool:pTopallama,
	pTopallamaSayac,
	pDuzenlenenPompa,
	pIyilestiriyor,
	pIyilestirmeSure,
	pBaygin,
	pBayginSure,
	bool:pLoopAnim,
	pDestek,
	pCCTV,
	pSoklandi,
	pYereYatirildi,
	pKelepce,
	pDragged,
	pDraggedBy,
	pDragTimer,
	pTazer,
	pLastCar,
	pEditGate,
	pEditType,
	pSelectType,
	pSelectFurniture,
	pEditFurniture,
	pMateryalDuzenle,
	pMateryalSlot,
	pGorunus,
	pFactionDavet,
	pFactionDavetEden,
	pFactionEdit,
	pSelectedSlot,
	pDrinking,
	PlayerBar:pDrinkBar,
	pSonBindigiArac,
	pBasari5,
	pBasari5Tarih[25],
	pBasari10,
	pBasari10Tarih[25],
	pBasariPB,
	pBasariPBTarih[25],
	pBasariArac,
	pBasariAracTarih[25],
	pBasariEv,
	pBasariEvTarih[25],
	bool:pLSPDUydu,
	pMateryal,
	pSilahHakki,
	pSilahSuresi,
	pSilahParca[3],
	Timer_Yuk,
	pEhliyetSinavinda,
	pEhliyetUyari
}
new PlayerData[MAX_PLAYERS][pData];

new bool:EmniyetKemeri[MAX_PLAYERS];

new NT_Timer[MAX_PLAYERS];

new KelepceSure[MAX_PLAYERS];
new KelepceTimer[MAX_PLAYERS];
new DuzkontakSure[MAX_PLAYERS];
new DuzkontakTimer[MAX_PLAYERS];

new ABS[MAX_PLAYERS] = 0;

new Sedye[MAX_PLAYERS];

new AcilDurum = 0;


/*============================================================================*/

#define MAX_GISE                                                           (100)

#define GISE_KAPALI                                                          (1)
#define GISE_ACIK                                                            (2)

enum e_GISE
{
	gs_ID,
	bool:gs_Exists,
	gs_Obje,
	gs_GateObje,
	gs_Durum,
	Float:gs_GateBar[6],
	Float:gs_Kapali[6],
	Float:gs_Acik[6],
	Text3D:gs_id,
	Text3D:gs_inf
};

new Gise[MAX_GISE][e_GISE];

/*============================================================================*/

enum hasarData
{
	bool:hasarVarmi,
	hasarBolge,
	Float:hasarDeger,
	hasarVeren,
	hasarSilah
};
new Hasarlar[MAX_PLAYERS][MAX_HASAR][hasarData];
enum entranceData {
    entranceID,
    entranceExists,
    entranceName[32],
    entrancePass[32],
    entranceIcon,
    entrancepIcon,
    entranceLocked,
    entranceInteriorVw,
    entranceBaglanti,
    Float:entrancePos[4],
    Float:entranceInt[4],
    entranceInterior,
    entranceExterior,
    entranceExteriorVW,
    entrancePickup,
    eVip,
    entranceMapIcon,
    Text3D:entranceText3D
};
new EntranceData[MAX_ENTRANCES][entranceData];

enum AracBilgi
{
	aracID,
	aracExists,
	aracModel,
	aracSahip,
	aracDisplay,
	Float:aracPos[4],
	aracInterior,
	aracWorld,
	aracRenkler[2],
	aracPaintjob,
	aracZirh,
	aracZirhVarMi,
	aracKilit,
	aracVergi,
	aracVergiSure,
	aracMods[14],
	aracGaraj,
	TaksiPlaka,
	aracBaglandi,
	aracBaglandiCeza,
	aracTicket,
	aracTicketTime,
	aracElKonuldu,
	aracFaction,
	aracFactionType,
	aracKira,
	aracKiralayan,
	aracTip,
	aracSatilik,
	aracPlaka[24],
	aracKiraZaman,
	aracSilahlar[5],
	aracMermiler[5],
	aracFiyat,
	aracUyusturucu,
	Float:aracKM,
	Float:aracBenzin,
	aracVehicle,
	aracDuzkontakEdildi,
	aracDuzkontakEden,
	aracHurda,
	aracDuzkontakID,
	aracKilitSeviye,
	Text3D:aracLabel,
	bool:aracCamlar,
	bool:aracSirenAcik,
	SirenObject,
	bool:aracRadar,
	TaksiObje,
	Taksimetre,
	OturumKazanci,
	aracGuvenlik,
	Float:aracDoorHealth,
	aracKisiSayi,
	aracSeviye
}
new AracInfo[MAX_ARAC][AracBilgi];

enum cruiser
{
	Silahlar[5],
	Mermiler[5],
	AgriKesici,
	CelikYelek
}
new PolisAraci[MAX_VEHICLES][cruiser];
new RadyoLink[MAX_VEHICLES][128];

enum gateData
{
	gateID,
	gateExists,
	gateOpened,
	gateModel,
	Float:gateSpeed,
	gateVip,
	Float:gateRadius,
	gateTime,
	Float:gatePos[6],
	gateInterior,
	gateOwner,
	gateBirlik,
	gateWorld,
	Float:gateMove[6],
	gateLinkID,
	gateFaction,
	gatePass[32],
	gateTimer,
	gateObject
};
new GateData[MAX_GATES][gateData];
enum dealershipCars {
	vehID,
	vehModel,
	vehPrice
};
enum arrestPoints {
	arrestID,
	arrestExists,
	Float:arrestPos[3],
	arrestInterior,
	arrestWorld,
	Text3D:arrestText3D,
	arrestPickup
};
new ArrestData[MAX_ARREST_POINTS][arrestPoints];

enum E_CCTV_INFO
{
	ID,

	cctv_Name[30],
	Float: cctv_X,
	Float: cctv_Y,
	Float: cctv_Z,

	Float: cctv_rotX,
	Float: cctv_rotY,
	Float: cctv_rotZ,

	cctv_VW,
	cctv_Interior,
	cctvBildirim,
	cctv_Object
};
new CCTVInfo[MAX_CCTV][E_CCTV_INFO];
enum Lokasyonlar
{
	ID,
	bool:Exists,
	lokasyonAd[30],
	Float:lokasyonPos[3],
}
new Lokasyon[MAX_LOKASYON][Lokasyonlar];
enum boomboxData {
	boomboxPlaced,
	Float:boomboxPos[3],
	boomboxInterior,
	boomboxWorld,
	boomboxObject,
	boomboxURL[128 char],
	Text3D:boomboxText3D
};
new BoomboxData[MAX_PLAYERS][boomboxData];

enum garajlar
{
	gID,
	bool:gExists,
	gKilit,
	gSifre[30],
	gBirlik,
	gSahip,
	Float:gPos[3],
	gParkDurum,
	gVw,
	gInterior,
	gTip[20],
	gAracLimit,
	gPickup,
	Text3D:gText,
}
new GarageData[MAX_GARAGE][garajlar];
// -------- QUIZ Sistemi -------------
#define     MAX_QUIZ  (15)
new
	Quiz[MAX_QUIZ][1024],
	Siklar[MAX_QUIZ][1024],
	Cevaplar[MAX_QUIZ];

new
	SoruID[MAX_PLAYERS] = {-1, ...},
	SoruSoruldu[MAX_PLAYERS][MAX_QUIZ],
	YanlisCevap[MAX_PLAYERS],
	CevaplananSoru[MAX_PLAYERS],
	SonSoruID;
// -----------------------------------

new const g_aWeaponSlots[] =
{
	0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 10, 10, 10, 10, 10, 10, 8, 8, 8, 0, 0, 0, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5, 4, 6, 6, 7, 7, 7, 7, 8, 12, 9, 9, 9, 11, 11, 11
};

enum  gbData
{
	Float:minX,
	Float:minY,
	Float:maxX,
	Float:maxY,
	Zone,
	Rectangle,
};

new DealershipCars[MAX_ISYERI][MAX_DEALERSHIP_CARS][dealershipCars];
	enum e_ZoneData
	{
     	e_ZoneName[32 char],
     	Float:e_ZoneArea[6]
	};
	new const g_arrZoneData[][e_ZoneData] =
	{
		{!"The Big Ear", 	              {-410.00, 1403.30, -3.00, -137.90, 1681.20, 200.00}},
		{!"Aldea Malvada",                {-1372.10, 2498.50, 0.00, -1277.50, 2615.30, 200.00}},
		{!"Angel Pine",                   {-2324.90, -2584.20, -6.10, -1964.20, -2212.10, 200.00}},
		{!"Arco del Oeste",               {-901.10, 2221.80, 0.00, -592.00, 2571.90, 200.00}},
		{!"Avispa Country Club",          {-2646.40, -355.40, 0.00, -2270.00, -222.50, 200.00}},
		{!"Avispa Country Club",          {-2831.80, -430.20, -6.10, -2646.40, -222.50, 200.00}},
		{!"Avispa Country Club",          {-2361.50, -417.10, 0.00, -2270.00, -355.40, 200.00}},
		{!"Avispa Country Club",          {-2667.80, -302.10, -28.80, -2646.40, -262.30, 71.10}},
		{!"Avispa Country Club",          {-2470.00, -355.40, 0.00, -2270.00, -318.40, 46.10}},
		{!"Avispa Country Club",          {-2550.00, -355.40, 0.00, -2470.00, -318.40, 39.70}},
		{!"Back o Beyond",                {-1166.90, -2641.10, 0.00, -321.70, -1856.00, 200.00}},
		{!"Battery Point",                {-2741.00, 1268.40, -4.50, -2533.00, 1490.40, 200.00}},
		{!"Bayside",                      {-2741.00, 2175.10, 0.00, -2353.10, 2722.70, 200.00}},
		{!"Bayside Marina",               {-2353.10, 2275.70, 0.00, -2153.10, 2475.70, 200.00}},
		{!"Beacon Hill",                  {-399.60, -1075.50, -1.40, -319.00, -977.50, 198.50}},
		{!"Blackfield",                   {964.30, 1203.20, -89.00, 1197.30, 1403.20, 110.90}},
		{!"Blackfield",                   {964.30, 1403.20, -89.00, 1197.30, 1726.20, 110.90}},
		{!"Blackfield Chapel",            {1375.60, 596.30, -89.00, 1558.00, 823.20, 110.90}},
		{!"Blackfield Chapel",            {1325.60, 596.30, -89.00, 1375.60, 795.00, 110.90}},
		{!"Blackfield Intersection",      {1197.30, 1044.60, -89.00, 1277.00, 1163.30, 110.90}},
		{!"Blackfield Intersection",      {1166.50, 795.00, -89.00, 1375.60, 1044.60, 110.90}},
		{!"Blackfield Intersection",      {1277.00, 1044.60, -89.00, 1315.30, 1087.60, 110.90}},
		{!"Blackfield Intersection",      {1375.60, 823.20, -89.00, 1457.30, 919.40, 110.90}},
		{!"Blueberry",                    {104.50, -220.10, 2.30, 349.60, 152.20, 200.00}},
		{!"Blueberry",                    {19.60, -404.10, 3.80, 349.60, -220.10, 200.00}},
		{!"Blueberry Acres",              {-319.60, -220.10, 0.00, 104.50, 293.30, 200.00}},
		{!"Caligula's Palace",            {2087.30, 1543.20, -89.00, 2437.30, 1703.20, 110.90}},
		{!"Caligula's Palace",            {2137.40, 1703.20, -89.00, 2437.30, 1783.20, 110.90}},
		{!"Calton Heights",               {-2274.10, 744.10, -6.10, -1982.30, 1358.90, 200.00}},
		{!"Chinatown",                    {-2274.10, 578.30, -7.60, -2078.60, 744.10, 200.00}},
		{!"City Hall",                    {-2867.80, 277.40, -9.10, -2593.40, 458.40, 200.00}},
		{!"Come-A-Lot",                   {2087.30, 943.20, -89.00, 2623.10, 1203.20, 110.90}},
		{!"Commerce",                     {1323.90, -1842.20, -89.00, 1701.90, -1722.20, 110.90}},
		{!"Commerce",                     {1323.90, -1722.20, -89.00, 1440.90, -1577.50, 110.90}},
		{!"Commerce",                     {1370.80, -1577.50, -89.00, 1463.90, -1384.90, 110.90}},
		{!"Commerce",                     {1463.90, -1577.50, -89.00, 1667.90, -1430.80, 110.90}},
		{!"Commerce",                     {1583.50, -1722.20, -89.00, 1758.90, -1577.50, 110.90}},
		{!"Commerce",                     {1667.90, -1577.50, -89.00, 1812.60, -1430.80, 110.90}},
		{!"Conference Center",            {1046.10, -1804.20, -89.00, 1323.90, -1722.20, 110.90}},
		{!"Conference Center",            {1073.20, -1842.20, -89.00, 1323.90, -1804.20, 110.90}},
		{!"Cranberry Station",            {-2007.80, 56.30, 0.00, -1922.00, 224.70, 100.00}},
		{!"Creek",                        {2749.90, 1937.20, -89.00, 2921.60, 2669.70, 110.90}},
		{!"Dillimore",                    {580.70, -674.80, -9.50, 861.00, -404.70, 200.00}},
		{!"Doherty",                      {-2270.00, -324.10, -0.00, -1794.90, -222.50, 200.00}},
		{!"Doherty",                      {-2173.00, -222.50, -0.00, -1794.90, 265.20, 200.00}},
		{!"Downtown",                     {-1982.30, 744.10, -6.10, -1871.70, 1274.20, 200.00}},
		{!"Downtown",                     {-1871.70, 1176.40, -4.50, -1620.30, 1274.20, 200.00}},
		{!"Downtown",                     {-1700.00, 744.20, -6.10, -1580.00, 1176.50, 200.00}},
		{!"Downtown",                     {-1580.00, 744.20, -6.10, -1499.80, 1025.90, 200.00}},
		{!"Downtown",                     {-2078.60, 578.30, -7.60, -1499.80, 744.20, 200.00}},
		{!"Downtown",                     {-1993.20, 265.20, -9.10, -1794.90, 578.30, 200.00}},
		{!"Downtown Los Santos",          {1463.90, -1430.80, -89.00, 1724.70, -1290.80, 110.90}},
		{!"Downtown Los Santos",          {1724.70, -1430.80, -89.00, 1812.60, -1250.90, 110.90}},
		{!"Downtown Los Santos",          {1463.90, -1290.80, -89.00, 1724.70, -1150.80, 110.90}},
		{!"Downtown Los Santos",          {1370.80, -1384.90, -89.00, 1463.90, -1170.80, 110.90}},
		{!"Downtown Los Santos",          {1724.70, -1250.90, -89.00, 1812.60, -1150.80, 110.90}},
		{!"Downtown Los Santos",          {1370.80, -1170.80, -89.00, 1463.90, -1130.80, 110.90}},
		{!"Downtown Los Santos",          {1378.30, -1130.80, -89.00, 1463.90, -1026.30, 110.90}},
		{!"Downtown Los Santos",          {1391.00, -1026.30, -89.00, 1463.90, -926.90, 110.90}},
		{!"Downtown Los Santos",          {1507.50, -1385.20, 110.90, 1582.50, -1325.30, 335.90}},
		{!"East Beach",                   {2632.80, -1852.80, -89.00, 2959.30, -1668.10, 110.90}},
		{!"East Beach",                   {2632.80, -1668.10, -89.00, 2747.70, -1393.40, 110.90}},
		{!"East Beach",                   {2747.70, -1668.10, -89.00, 2959.30, -1498.60, 110.90}},
		{!"East Beach",                   {2747.70, -1498.60, -89.00, 2959.30, -1120.00, 110.90}},
		{!"East Los Santos",              {2421.00, -1628.50, -89.00, 2632.80, -1454.30, 110.90}},
		{!"East Los Santos",              {2222.50, -1628.50, -89.00, 2421.00, -1494.00, 110.90}},
		{!"East Los Santos",              {2266.20, -1494.00, -89.00, 2381.60, -1372.00, 110.90}},
		{!"East Los Santos",              {2381.60, -1494.00, -89.00, 2421.00, -1454.30, 110.90}},
		{!"East Los Santos",              {2281.40, -1372.00, -89.00, 2381.60, -1135.00, 110.90}},
		{!"East Los Santos",              {2381.60, -1454.30, -89.00, 2462.10, -1135.00, 110.90}},
		{!"East Los Santos",              {2462.10, -1454.30, -89.00, 2581.70, -1135.00, 110.90}},
		{!"Easter Basin",                 {-1794.90, 249.90, -9.10, -1242.90, 578.30, 200.00}},
		{!"Easter Basin",                 {-1794.90, -50.00, -0.00, -1499.80, 249.90, 200.00}},
		{!"Easter Bay Airport",           {-1499.80, -50.00, -0.00, -1242.90, 249.90, 200.00}},
		{!"Easter Bay Airport",           {-1794.90, -730.10, -3.00, -1213.90, -50.00, 200.00}},
		{!"Easter Bay Airport",           {-1213.90, -730.10, 0.00, -1132.80, -50.00, 200.00}},
		{!"Easter Bay Airport",           {-1242.90, -50.00, 0.00, -1213.90, 578.30, 200.00}},
		{!"Easter Bay Airport",           {-1213.90, -50.00, -4.50, -947.90, 578.30, 200.00}},
		{!"Easter Bay Airport",           {-1315.40, -405.30, 15.40, -1264.40, -209.50, 25.40}},
		{!"Easter Bay Airport",           {-1354.30, -287.30, 15.40, -1315.40, -209.50, 25.40}},
		{!"Easter Bay Airport",           {-1490.30, -209.50, 15.40, -1264.40, -148.30, 25.40}},
		{!"Easter Bay Chemicals",         {-1132.80, -768.00, 0.00, -956.40, -578.10, 200.00}},
		{!"Easter Bay Chemicals",         {-1132.80, -787.30, 0.00, -956.40, -768.00, 200.00}},
		{!"El Castillo del Diablo",       {-464.50, 2217.60, 0.00, -208.50, 2580.30, 200.00}},
		{!"El Castillo del Diablo",       {-208.50, 2123.00, -7.60, 114.00, 2337.10, 200.00}},
		{!"El Castillo del Diablo",       {-208.50, 2337.10, 0.00, 8.40, 2487.10, 200.00}},
		{!"El Corona",                    {1812.60, -2179.20, -89.00, 1970.60, -1852.80, 110.90}},
		{!"El Corona",                    {1692.60, -2179.20, -89.00, 1812.60, -1842.20, 110.90}},
		{!"El Quebrados",                 {-1645.20, 2498.50, 0.00, -1372.10, 2777.80, 200.00}},
		{!"Esplanade East",               {-1620.30, 1176.50, -4.50, -1580.00, 1274.20, 200.00}},
		{!"Esplanade East",               {-1580.00, 1025.90, -6.10, -1499.80, 1274.20, 200.00}},
		{!"Esplanade East",               {-1499.80, 578.30, -79.60, -1339.80, 1274.20, 20.30}},
		{!"Esplanade North",              {-2533.00, 1358.90, -4.50, -1996.60, 1501.20, 200.00}},
		{!"Esplanade North",              {-1996.60, 1358.90, -4.50, -1524.20, 1592.50, 200.00}},
		{!"Esplanade North",              {-1982.30, 1274.20, -4.50, -1524.20, 1358.90, 200.00}},
		{!"Fallen Tree",                  {-792.20, -698.50, -5.30, -452.40, -380.00, 200.00}},
		{!"Fallow Bridge",                {434.30, 366.50, 0.00, 603.00, 555.60, 200.00}},
		{!"Fern Ridge",                   {508.10, -139.20, 0.00, 1306.60, 119.50, 200.00}},
		{!"Financial",                    {-1871.70, 744.10, -6.10, -1701.30, 1176.40, 300.00}},
		{!"Fisher's Lagoon",              {1916.90, -233.30, -100.00, 2131.70, 13.80, 200.00}},
		{!"Flint Intersection",           {-187.70, -1596.70, -89.00, 17.00, -1276.60, 110.90}},
		{!"Flint Range",                  {-594.10, -1648.50, 0.00, -187.70, -1276.60, 200.00}},
		{!"Fort Carson",                  {-376.20, 826.30, -3.00, 123.70, 1220.40, 200.00}},
		{!"Foster Valley",                {-2270.00, -430.20, -0.00, -2178.60, -324.10, 200.00}},
		{!"Foster Valley",                {-2178.60, -599.80, -0.00, -1794.90, -324.10, 200.00}},
		{!"Foster Valley",                {-2178.60, -1115.50, 0.00, -1794.90, -599.80, 200.00}},
		{!"Foster Valley",                {-2178.60, -1250.90, 0.00, -1794.90, -1115.50, 200.00}},
		{!"Frederick Bridge",             {2759.20, 296.50, 0.00, 2774.20, 594.70, 200.00}},
		{!"Gant Bridge",                  {-2741.40, 1659.60, -6.10, -2616.40, 2175.10, 200.00}},
		{!"Gant Bridge",                  {-2741.00, 1490.40, -6.10, -2616.40, 1659.60, 200.00}},
		{!"Ganton",                       {2222.50, -1852.80, -89.00, 2632.80, -1722.30, 110.90}},
		{!"Ganton",                       {2222.50, -1722.30, -89.00, 2632.80, -1628.50, 110.90}},
		{!"Garcia",                       {-2411.20, -222.50, -0.00, -2173.00, 265.20, 200.00}},
		{!"Garcia",                       {-2395.10, -222.50, -5.30, -2354.00, -204.70, 200.00}},
		{!"Garver Bridge",                {-1339.80, 828.10, -89.00, -1213.90, 1057.00, 110.90}},
		{!"Garver Bridge",                {-1213.90, 950.00, -89.00, -1087.90, 1178.90, 110.90}},
		{!"Garver Bridge",                {-1499.80, 696.40, -179.60, -1339.80, 925.30, 20.30}},
		{!"Glen Park",                    {1812.60, -1449.60, -89.00, 1996.90, -1350.70, 110.90}},
		{!"Glen Park",                    {1812.60, -1100.80, -89.00, 1994.30, -973.30, 110.90}},
		{!"Glen Park",                    {1812.60, -1350.70, -89.00, 2056.80, -1100.80, 110.90}},
		{!"Green Palms",                  {176.50, 1305.40, -3.00, 338.60, 1520.70, 200.00}},
		{!"Greenglass College",           {964.30, 1044.60, -89.00, 1197.30, 1203.20, 110.90}},
		{!"Greenglass College",           {964.30, 930.80, -89.00, 1166.50, 1044.60, 110.90}},
		{!"Hampton Barns",                {603.00, 264.30, 0.00, 761.90, 366.50, 200.00}},
		{!"Hankypanky Point",             {2576.90, 62.10, 0.00, 2759.20, 385.50, 200.00}},
		{!"Harry Gold Parkway",           {1777.30, 863.20, -89.00, 1817.30, 2342.80, 110.90}},
		{!"Hashbury",                     {-2593.40, -222.50, -0.00, -2411.20, 54.70, 200.00}},
		{!"Hilltop Farm",                 {967.30, -450.30, -3.00, 1176.70, -217.90, 200.00}},
		{!"Hunter Quarry",                {337.20, 710.80, -115.20, 860.50, 1031.70, 203.70}},
		{!"Idlewood",                     {1812.60, -1852.80, -89.00, 1971.60, -1742.30, 110.90}},
		{!"Idlewood",                     {1812.60, -1742.30, -89.00, 1951.60, -1602.30, 110.90}},
		{!"Idlewood",                     {1951.60, -1742.30, -89.00, 2124.60, -1602.30, 110.90}},
		{!"Idlewood",                     {1812.60, -1602.30, -89.00, 2124.60, -1449.60, 110.90}},
		{!"Idlewood",                     {2124.60, -1742.30, -89.00, 2222.50, -1494.00, 110.90}},
		{!"Idlewood",                     {1971.60, -1852.80, -89.00, 2222.50, -1742.30, 110.90}},
		{!"Jefferson",                    {1996.90, -1449.60, -89.00, 2056.80, -1350.70, 110.90}},
		{!"Jefferson",                    {2124.60, -1494.00, -89.00, 2266.20, -1449.60, 110.90}},
		{!"Jefferson",                    {2056.80, -1372.00, -89.00, 2281.40, -1210.70, 110.90}},
		{!"Jefferson",                    {2056.80, -1210.70, -89.00, 2185.30, -1126.30, 110.90}},
		{!"Jefferson",                    {2185.30, -1210.70, -89.00, 2281.40, -1154.50, 110.90}},
		{!"Jefferson",                    {2056.80, -1449.60, -89.00, 2266.20, -1372.00, 110.90}},
		{!"Julius Thruway East",          {2623.10, 943.20, -89.00, 2749.90, 1055.90, 110.90}},
		{!"Julius Thruway East",          {2685.10, 1055.90, -89.00, 2749.90, 2626.50, 110.90}},
		{!"Julius Thruway East",          {2536.40, 2442.50, -89.00, 2685.10, 2542.50, 110.90}},
		{!"Julius Thruway East",          {2625.10, 2202.70, -89.00, 2685.10, 2442.50, 110.90}},
		{!"Julius Thruway North",         {2498.20, 2542.50, -89.00, 2685.10, 2626.50, 110.90}},
		{!"Julius Thruway North",         {2237.40, 2542.50, -89.00, 2498.20, 2663.10, 110.90}},
		{!"Julius Thruway North",         {2121.40, 2508.20, -89.00, 2237.40, 2663.10, 110.90}},
		{!"Julius Thruway North",         {1938.80, 2508.20, -89.00, 2121.40, 2624.20, 110.90}},
		{!"Julius Thruway North",         {1534.50, 2433.20, -89.00, 1848.40, 2583.20, 110.90}},
		{!"Julius Thruway North",         {1848.40, 2478.40, -89.00, 1938.80, 2553.40, 110.90}},
		{!"Julius Thruway North",         {1704.50, 2342.80, -89.00, 1848.40, 2433.20, 110.90}},
		{!"Julius Thruway North",         {1377.30, 2433.20, -89.00, 1534.50, 2507.20, 110.90}},
		{!"Julius Thruway South",         {1457.30, 823.20, -89.00, 2377.30, 863.20, 110.90}},
		{!"Julius Thruway South",         {2377.30, 788.80, -89.00, 2537.30, 897.90, 110.90}},
		{!"Julius Thruway West",          {1197.30, 1163.30, -89.00, 1236.60, 2243.20, 110.90}},
		{!"Julius Thruway West",          {1236.60, 2142.80, -89.00, 1297.40, 2243.20, 110.90}},
		{!"Juniper Hill",                 {-2533.00, 578.30, -7.60, -2274.10, 968.30, 200.00}},
		{!"Juniper Hollow",               {-2533.00, 968.30, -6.10, -2274.10, 1358.90, 200.00}},
		{!"K.A.C.C. Military Fuels",      {2498.20, 2626.50, -89.00, 2749.90, 2861.50, 110.90}},
		{!"Kincaid Bridge",               {-1339.80, 599.20, -89.00, -1213.90, 828.10, 110.90}},
		{!"Kincaid Bridge",               {-1213.90, 721.10, -89.00, -1087.90, 950.00, 110.90}},
		{!"Kincaid Bridge",               {-1087.90, 855.30, -89.00, -961.90, 986.20, 110.90}},
		{!"King's",                       {-2329.30, 458.40, -7.60, -1993.20, 578.30, 200.00}},
		{!"King's",                       {-2411.20, 265.20, -9.10, -1993.20, 373.50, 200.00}},
		{!"King's",                       {-2253.50, 373.50, -9.10, -1993.20, 458.40, 200.00}},
		{!"LVA Freight Depot",            {1457.30, 863.20, -89.00, 1777.40, 1143.20, 110.90}},
		{!"LVA Freight Depot",            {1375.60, 919.40, -89.00, 1457.30, 1203.20, 110.90}},
		{!"LVA Freight Depot",            {1277.00, 1087.60, -89.00, 1375.60, 1203.20, 110.90}},
		{!"LVA Freight Depot",            {1315.30, 1044.60, -89.00, 1375.60, 1087.60, 110.90}},
		{!"LVA Freight Depot",            {1236.60, 1163.40, -89.00, 1277.00, 1203.20, 110.90}},
		{!"Las Barrancas",                {-926.10, 1398.70, -3.00, -719.20, 1634.60, 200.00}},
		{!"Las Brujas",                   {-365.10, 2123.00, -3.00, -208.50, 2217.60, 200.00}},
		{!"Las Colinas",                  {1994.30, -1100.80, -89.00, 2056.80, -920.80, 110.90}},
		{!"Las Colinas",                  {2056.80, -1126.30, -89.00, 2126.80, -920.80, 110.90}},
		{!"Las Colinas",                  {2185.30, -1154.50, -89.00, 2281.40, -934.40, 110.90}},
		{!"Las Colinas",                  {2126.80, -1126.30, -89.00, 2185.30, -934.40, 110.90}},
		{!"Las Colinas",                  {2747.70, -1120.00, -89.00, 2959.30, -945.00, 110.90}},
		{!"Las Colinas",                  {2632.70, -1135.00, -89.00, 2747.70, -945.00, 110.90}},
		{!"Las Colinas",                  {2281.40, -1135.00, -89.00, 2632.70, -945.00, 110.90}},
		{!"Las Payasadas",                {-354.30, 2580.30, 2.00, -133.60, 2816.80, 200.00}},
		{!"Las Venturas Airport",         {1236.60, 1203.20, -89.00, 1457.30, 1883.10, 110.90}},
		{!"Las Venturas Airport",         {1457.30, 1203.20, -89.00, 1777.30, 1883.10, 110.90}},
		{!"Las Venturas Airport",         {1457.30, 1143.20, -89.00, 1777.40, 1203.20, 110.90}},
		{!"Las Venturas Airport",         {1515.80, 1586.40, -12.50, 1729.90, 1714.50, 87.50}},
		{!"Last Dime Motel",              {1823.00, 596.30, -89.00, 1997.20, 823.20, 110.90}},
		{!"Leafy Hollow",                 {-1166.90, -1856.00, 0.00, -815.60, -1602.00, 200.00}},
		{!"Liberty City",                 {-1000.00, 400.00, 1300.00, -700.00, 600.00, 1400.00}},
		{!"Lil' Probe Inn",               {-90.20, 1286.80, -3.00, 153.80, 1554.10, 200.00}},
		{!"Linden Side",                  {2749.90, 943.20, -89.00, 2923.30, 1198.90, 110.90}},
		{!"Linden Station",               {2749.90, 1198.90, -89.00, 2923.30, 1548.90, 110.90}},
		{!"Linden Station",               {2811.20, 1229.50, -39.50, 2861.20, 1407.50, 60.40}},
		{!"Little Mexico",                {1701.90, -1842.20, -89.00, 1812.60, -1722.20, 110.90}},
		{!"Little Mexico",                {1758.90, -1722.20, -89.00, 1812.60, -1577.50, 110.90}},
		{!"Los Flores",                   {2581.70, -1454.30, -89.00, 2632.80, -1393.40, 110.90}},
		{!"Los Flores",                   {2581.70, -1393.40, -89.00, 2747.70, -1135.00, 110.90}},
		{!"Los Santos International",     {1249.60, -2394.30, -89.00, 1852.00, -2179.20, 110.90}},
		{!"Los Santos International",     {1852.00, -2394.30, -89.00, 2089.00, -2179.20, 110.90}},
		{!"Los Santos International",     {1382.70, -2730.80, -89.00, 2201.80, -2394.30, 110.90}},
		{!"Los Santos International",     {1974.60, -2394.30, -39.00, 2089.00, -2256.50, 60.90}},
		{!"Los Santos International",     {1400.90, -2669.20, -39.00, 2189.80, -2597.20, 60.90}},
		{!"Los Santos International",     {2051.60, -2597.20, -39.00, 2152.40, -2394.30, 60.90}},
		{!"Marina",                       {647.70, -1804.20, -89.00, 851.40, -1577.50, 110.90}},
		{!"Marina",                       {647.70, -1577.50, -89.00, 807.90, -1416.20, 110.90}},
		{!"Marina",                       {807.90, -1577.50, -89.00, 926.90, -1416.20, 110.90}},
		{!"Market",                       {787.40, -1416.20, -89.00, 1072.60, -1310.20, 110.90}},
		{!"Market",                       {952.60, -1310.20, -89.00, 1072.60, -1130.80, 110.90}},
		{!"Market",                       {1072.60, -1416.20, -89.00, 1370.80, -1130.80, 110.90}},
		{!"Market",                       {926.90, -1577.50, -89.00, 1370.80, -1416.20, 110.90}},
		{!"Market Station",               {787.40, -1410.90, -34.10, 866.00, -1310.20, 65.80}},
		{!"Martin Bridge",                {-222.10, 293.30, 0.00, -122.10, 476.40, 200.00}},
		{!"Missionary Hill",              {-2994.40, -811.20, 0.00, -2178.60, -430.20, 200.00}},
		{!"Montgomery",                   {1119.50, 119.50, -3.00, 1451.40, 493.30, 200.00}},
		{!"Montgomery",                   {1451.40, 347.40, -6.10, 1582.40, 420.80, 200.00}},
		{!"Montgomery Intersection",      {1546.60, 208.10, 0.00, 1745.80, 347.40, 200.00}},
		{!"Montgomery Intersection",      {1582.40, 347.40, 0.00, 1664.60, 401.70, 200.00}},
		{!"Mulholland",                   {1414.00, -768.00, -89.00, 1667.60, -452.40, 110.90}},
		{!"Mulholland",                   {1281.10, -452.40, -89.00, 1641.10, -290.90, 110.90}},
		{!"Mulholland",                   {1269.10, -768.00, -89.00, 1414.00, -452.40, 110.90}},
		{!"Mulholland",                   {1357.00, -926.90, -89.00, 1463.90, -768.00, 110.90}},
		{!"Mulholland",                   {1318.10, -910.10, -89.00, 1357.00, -768.00, 110.90}},
		{!"Mulholland",                   {1169.10, -910.10, -89.00, 1318.10, -768.00, 110.90}},
		{!"Mulholland",                   {768.60, -954.60, -89.00, 952.60, -860.60, 110.90}},
		{!"Mulholland",                   {687.80, -860.60, -89.00, 911.80, -768.00, 110.90}},
		{!"Mulholland",                   {737.50, -768.00, -89.00, 1142.20, -674.80, 110.90}},
		{!"Mulholland",                   {1096.40, -910.10, -89.00, 1169.10, -768.00, 110.90}},
		{!"Mulholland",                   {952.60, -937.10, -89.00, 1096.40, -860.60, 110.90}},
		{!"Mulholland",                   {911.80, -860.60, -89.00, 1096.40, -768.00, 110.90}},
		{!"Mulholland",                   {861.00, -674.80, -89.00, 1156.50, -600.80, 110.90}},
		{!"Mulholland Intersection",      {1463.90, -1150.80, -89.00, 1812.60, -768.00, 110.90}},
		{!"North Rock",                   {2285.30, -768.00, 0.00, 2770.50, -269.70, 200.00}},
		{!"Ocean Docks",                  {2373.70, -2697.00, -89.00, 2809.20, -2330.40, 110.90}},
		{!"Ocean Docks",                  {2201.80, -2418.30, -89.00, 2324.00, -2095.00, 110.90}},
		{!"Ocean Docks",                  {2324.00, -2302.30, -89.00, 2703.50, -2145.10, 110.90}},
		{!"Ocean Docks",                  {2089.00, -2394.30, -89.00, 2201.80, -2235.80, 110.90}},
		{!"Ocean Docks",                  {2201.80, -2730.80, -89.00, 2324.00, -2418.30, 110.90}},
		{!"Ocean Docks",                  {2703.50, -2302.30, -89.00, 2959.30, -2126.90, 110.90}},
		{!"Ocean Docks",                  {2324.00, -2145.10, -89.00, 2703.50, -2059.20, 110.90}},
		{!"Ocean Flats",                  {-2994.40, 277.40, -9.10, -2867.80, 458.40, 200.00}},
		{!"Ocean Flats",                  {-2994.40, -222.50, -0.00, -2593.40, 277.40, 200.00}},
		{!"Ocean Flats",                  {-2994.40, -430.20, -0.00, -2831.80, -222.50, 200.00}},
		{!"Octane Springs",               {338.60, 1228.50, 0.00, 664.30, 1655.00, 200.00}},
		{!"Old Venturas Strip",           {2162.30, 2012.10, -89.00, 2685.10, 2202.70, 110.90}},
		{!"Palisades",                    {-2994.40, 458.40, -6.10, -2741.00, 1339.60, 200.00}},
		{!"Palomino Creek",               {2160.20, -149.00, 0.00, 2576.90, 228.30, 200.00}},
		{!"Paradiso",                     {-2741.00, 793.40, -6.10, -2533.00, 1268.40, 200.00}},
		{!"Pershing Square",              {1440.90, -1722.20, -89.00, 1583.50, -1577.50, 110.90}},
		{!"Pilgrim",                      {2437.30, 1383.20, -89.00, 2624.40, 1783.20, 110.90}},
		{!"Pilgrim",                      {2624.40, 1383.20, -89.00, 2685.10, 1783.20, 110.90}},
		{!"Pilson Intersection",          {1098.30, 2243.20, -89.00, 1377.30, 2507.20, 110.90}},
		{!"Pirates in Men's Pants",       {1817.30, 1469.20, -89.00, 2027.40, 1703.20, 110.90}},
		{!"Playa del Seville",            {2703.50, -2126.90, -89.00, 2959.30, -1852.80, 110.90}},
		{!"Prickle Pine",                 {1534.50, 2583.20, -89.00, 1848.40, 2863.20, 110.90}},
		{!"Prickle Pine",                 {1117.40, 2507.20, -89.00, 1534.50, 2723.20, 110.90}},
		{!"Prickle Pine",                 {1848.40, 2553.40, -89.00, 1938.80, 2863.20, 110.90}},
		{!"Prickle Pine",                 {1938.80, 2624.20, -89.00, 2121.40, 2861.50, 110.90}},
		{!"Queens",                       {-2533.00, 458.40, 0.00, -2329.30, 578.30, 200.00}},
		{!"Queens",                       {-2593.40, 54.70, 0.00, -2411.20, 458.40, 200.00}},
		{!"Queens",                       {-2411.20, 373.50, 0.00, -2253.50, 458.40, 200.00}},
		{!"Randolph Industrial Estate",   {1558.00, 596.30, -89.00, 1823.00, 823.20, 110.90}},
		{!"Redsands East",                {1817.30, 2011.80, -89.00, 2106.70, 2202.70, 110.90}},
		{!"Redsands East",                {1817.30, 2202.70, -89.00, 2011.90, 2342.80, 110.90}},
		{!"Redsands East",                {1848.40, 2342.80, -89.00, 2011.90, 2478.40, 110.90}},
		{!"Redsands West",                {1236.60, 1883.10, -89.00, 1777.30, 2142.80, 110.90}},
		{!"Redsands West",                {1297.40, 2142.80, -89.00, 1777.30, 2243.20, 110.90}},
		{!"Redsands West",                {1377.30, 2243.20, -89.00, 1704.50, 2433.20, 110.90}},
		{!"Redsands West",                {1704.50, 2243.20, -89.00, 1777.30, 2342.80, 110.90}},
		{!"Regular Tom",                  {-405.70, 1712.80, -3.00, -276.70, 1892.70, 200.00}},
		{!"Richman",                      {647.50, -1118.20, -89.00, 787.40, -954.60, 110.90}},
		{!"Richman",                      {647.50, -954.60, -89.00, 768.60, -860.60, 110.90}},
		{!"Richman",                      {225.10, -1369.60, -89.00, 334.50, -1292.00, 110.90}},
		{!"Richman",                      {225.10, -1292.00, -89.00, 466.20, -1235.00, 110.90}},
		{!"Richman",                      {72.60, -1404.90, -89.00, 225.10, -1235.00, 110.90}},
		{!"Richman",                      {72.60, -1235.00, -89.00, 321.30, -1008.10, 110.90}},
		{!"Richman",                      {321.30, -1235.00, -89.00, 647.50, -1044.00, 110.90}},
		{!"Richman",                      {321.30, -1044.00, -89.00, 647.50, -860.60, 110.90}},
		{!"Richman",                      {321.30, -860.60, -89.00, 687.80, -768.00, 110.90}},
		{!"Richman",                      {321.30, -768.00, -89.00, 700.70, -674.80, 110.90}},
		{!"Robada Intersection",          {-1119.00, 1178.90, -89.00, -862.00, 1351.40, 110.90}},
		{!"Roca Escalante",               {2237.40, 2202.70, -89.00, 2536.40, 2542.50, 110.90}},
		{!"Roca Escalante",               {2536.40, 2202.70, -89.00, 2625.10, 2442.50, 110.90}},
		{!"Rockshore East",               {2537.30, 676.50, -89.00, 2902.30, 943.20, 110.90}},
		{!"Rockshore West",               {1997.20, 596.30, -89.00, 2377.30, 823.20, 110.90}},
		{!"Rockshore West",               {2377.30, 596.30, -89.00, 2537.30, 788.80, 110.90}},
		{!"Rodeo",                        {72.60, -1684.60, -89.00, 225.10, -1544.10, 110.90}},
		{!"Rodeo",                        {72.60, -1544.10, -89.00, 225.10, -1404.90, 110.90}},
		{!"Rodeo",                        {225.10, -1684.60, -89.00, 312.80, -1501.90, 110.90}},
		{!"Rodeo",                        {225.10, -1501.90, -89.00, 334.50, -1369.60, 110.90}},
		{!"Rodeo",                        {334.50, -1501.90, -89.00, 422.60, -1406.00, 110.90}},
		{!"Rodeo",                        {312.80, -1684.60, -89.00, 422.60, -1501.90, 110.90}},
		{!"Rodeo",                        {422.60, -1684.60, -89.00, 558.00, -1570.20, 110.90}},
		{!"Rodeo",                        {558.00, -1684.60, -89.00, 647.50, -1384.90, 110.90}},
		{!"Rodeo",                        {466.20, -1570.20, -89.00, 558.00, -1385.00, 110.90}},
		{!"Rodeo",                        {422.60, -1570.20, -89.00, 466.20, -1406.00, 110.90}},
		{!"Rodeo",                        {466.20, -1385.00, -89.00, 647.50, -1235.00, 110.90}},
		{!"Rodeo",                        {334.50, -1406.00, -89.00, 466.20, -1292.00, 110.90}},
		{!"Royal Casino",                 {2087.30, 1383.20, -89.00, 2437.30, 1543.20, 110.90}},
		{!"San Andreas Sound",            {2450.30, 385.50, -100.00, 2759.20, 562.30, 200.00}},
		{!"Santa Flora",                  {-2741.00, 458.40, -7.60, -2533.00, 793.40, 200.00}},
		{!"Santa Maria Beach",            {342.60, -2173.20, -89.00, 647.70, -1684.60, 110.90}},
		{!"Santa Maria Beach",            {72.60, -2173.20, -89.00, 342.60, -1684.60, 110.90}},
		{!"Shady Cabin",                  {-1632.80, -2263.40, -3.00, -1601.30, -2231.70, 200.00}},
		{!"Shady Creeks",                 {-1820.60, -2643.60, -8.00, -1226.70, -1771.60, 200.00}},
		{!"Shady Creeks",                 {-2030.10, -2174.80, -6.10, -1820.60, -1771.60, 200.00}},
		{!"Sobell Rail Yards",            {2749.90, 1548.90, -89.00, 2923.30, 1937.20, 110.90}},
		{!"Spinybed",                     {2121.40, 2663.10, -89.00, 2498.20, 2861.50, 110.90}},
		{!"Starfish Casino",              {2437.30, 1783.20, -89.00, 2685.10, 2012.10, 110.90}},
		{!"Starfish Casino",              {2437.30, 1858.10, -39.00, 2495.00, 1970.80, 60.90}},
		{!"Starfish Casino",              {2162.30, 1883.20, -89.00, 2437.30, 2012.10, 110.90}},
		{!"Temple",                       {1252.30, -1130.80, -89.00, 1378.30, -1026.30, 110.90}},
		{!"Temple",                       {1252.30, -1026.30, -89.00, 1391.00, -926.90, 110.90}},
		{!"Temple",                       {1252.30, -926.90, -89.00, 1357.00, -910.10, 110.90}},
		{!"Temple",                       {952.60, -1130.80, -89.00, 1096.40, -937.10, 110.90}},
		{!"Temple",                       {1096.40, -1130.80, -89.00, 1252.30, -1026.30, 110.90}},
		{!"Temple",                       {1096.40, -1026.30, -89.00, 1252.30, -910.10, 110.90}},
		{!"The Camel's Toe",              {2087.30, 1203.20, -89.00, 2640.40, 1383.20, 110.90}},
		{!"The Clown's Pocket",           {2162.30, 1783.20, -89.00, 2437.30, 1883.20, 110.90}},
		{!"The Emerald Isle",             {2011.90, 2202.70, -89.00, 2237.40, 2508.20, 110.90}},
		{!"The Farm",                     {-1209.60, -1317.10, 114.90, -908.10, -787.30, 251.90}},
		{!"The Four Dragons Casino",      {1817.30, 863.20, -89.00, 2027.30, 1083.20, 110.90}},
		{!"The High Roller",              {1817.30, 1283.20, -89.00, 2027.30, 1469.20, 110.90}},
		{!"The Mako Span",                {1664.60, 401.70, 0.00, 1785.10, 567.20, 200.00}},
		{!"The Panopticon",               {-947.90, -304.30, -1.10, -319.60, 327.00, 200.00}},
		{!"The Pink Swan",                {1817.30, 1083.20, -89.00, 2027.30, 1283.20, 110.90}},
		{!"The Sherman Dam",              {-968.70, 1929.40, -3.00, -481.10, 2155.20, 200.00}},
		{!"The Strip",                    {2027.40, 863.20, -89.00, 2087.30, 1703.20, 110.90}},
		{!"The Strip",                    {2106.70, 1863.20, -89.00, 2162.30, 2202.70, 110.90}},
		{!"The Strip",                    {2027.40, 1783.20, -89.00, 2162.30, 1863.20, 110.90}},
		{!"The Strip",                    {2027.40, 1703.20, -89.00, 2137.40, 1783.20, 110.90}},
		{!"The Visage",                   {1817.30, 1863.20, -89.00, 2106.70, 2011.80, 110.90}},
		{!"The Visage",                   {1817.30, 1703.20, -89.00, 2027.40, 1863.20, 110.90}},
		{!"Unity Station",                {1692.60, -1971.80, -20.40, 1812.60, -1932.80, 79.50}},
		{!"Valle Ocultado",               {-936.60, 2611.40, 2.00, -715.90, 2847.90, 200.00}},
		{!"Verdant Bluffs",               {930.20, -2488.40, -89.00, 1249.60, -2006.70, 110.90}},
		{!"Verdant Bluffs",               {1073.20, -2006.70, -89.00, 1249.60, -1842.20, 110.90}},
		{!"Verdant Bluffs",               {1249.60, -2179.20, -89.00, 1692.60, -1842.20, 110.90}},
		{!"Verdant Meadows",              {37.00, 2337.10, -3.00, 435.90, 2677.90, 200.00}},
		{!"Verona Beach",                 {647.70, -2173.20, -89.00, 930.20, -1804.20, 110.90}},
		{!"Verona Beach",                 {930.20, -2006.70, -89.00, 1073.20, -1804.20, 110.90}},
		{!"Verona Beach",                 {851.40, -1804.20, -89.00, 1046.10, -1577.50, 110.90}},
		{!"Verona Beach",                 {1161.50, -1722.20, -89.00, 1323.90, -1577.50, 110.90}},
		{!"Verona Beach",                 {1046.10, -1722.20, -89.00, 1161.50, -1577.50, 110.90}},
		{!"Vinewood",                     {787.40, -1310.20, -89.00, 952.60, -1130.80, 110.90}},
		{!"Vinewood",                     {787.40, -1130.80, -89.00, 952.60, -954.60, 110.90}},
		{!"Vinewood",                     {647.50, -1227.20, -89.00, 787.40, -1118.20, 110.90}},
		{!"Vinewood",                     {647.70, -1416.20, -89.00, 787.40, -1227.20, 110.90}},
		{!"Whitewood Estates",            {883.30, 1726.20, -89.00, 1098.30, 2507.20, 110.90}},
		{!"Whitewood Estates",            {1098.30, 1726.20, -89.00, 1197.30, 2243.20, 110.90}},
		{!"Willowfield",                  {1970.60, -2179.20, -89.00, 2089.00, -1852.80, 110.90}},
		{!"Willowfield",                  {2089.00, -2235.80, -89.00, 2201.80, -1989.90, 110.90}},
		{!"Willowfield",                  {2089.00, -1989.90, -89.00, 2324.00, -1852.80, 110.90}},
		{!"Willowfield",                  {2201.80, -2095.00, -89.00, 2324.00, -1989.90, 110.90}},
		{!"Willowfield",                  {2541.70, -1941.40, -89.00, 2703.50, -1852.80, 110.90}},
		{!"Willowfield",                  {2324.00, -2059.20, -89.00, 2541.70, -1852.80, 110.90}},
		{!"Willowfield",                  {2541.70, -2059.20, -89.00, 2703.50, -1941.40, 110.90}},
		{!"Yellow Bell Station",          {1377.40, 2600.40, -21.90, 1492.40, 2687.30, 78.00}},
		{!"Los Santos",                   {44.60, -2892.90, -242.90, 2997.00, -768.00, 900.00}},
		{!"Las Venturas",                 {869.40, 596.30, -242.90, 2997.00, 2993.80, 900.00}},
		{!"Bone County",                  {-480.50, 596.30, -242.90, 869.40, 2993.80, 900.00}},
		{!"Tierra Robada",                {-2997.40, 1659.60, -242.90, -480.50, 2993.80, 900.00}},
		{!"Tierra Robada",                {-1213.90, 596.30, -242.90, -480.50, 1659.60, 900.00}},
		{!"San Fierro",                   {-2997.40, -1115.50, -242.90, -1213.90, 1659.60, 900.00}},
		{!"Red County",                   {-1213.90, -768.00, -242.90, 2997.00, 596.30, 900.00}},
		{!"Flint County",                 {-1213.90, -2892.90, -242.90, 44.60, -768.00, 900.00}},
		{!"Whetstone",                    {-2997.40, -2892.90, -242.90, -1213.90, -1115.50, 900.00}}
};
new VehicleNames[212][] = {
{"Landstalker"},{"Bravura"},{"Buffalo"},{"Linerunner"},{"Perrenial"},{"Sentinel"},{"Dumper"},
{"Firetruck"},{"Trashmaster"},{"Stretch"},{"Manana"},{"Infernus"},{"Voodoo"},{"Pony"},{"Mule"},
{"Cheetah"},{"Ambulance"},{"Leviathan"},{"Moonbeam"},{"Esperanto"},{"Taxi"},{"Washington"},
{"Bobcat"},{"Mr Whoopee"},{"BF Injection"},{"Hunter"},{"Premier"},{"Enforcer"},{"Securicar"},
{"Banshee"},{"Predator"},{"Bus"},{"Rhino"},{"Barracks"},{"Hotknife"},{"Trailer 1"},{"Previon"},
{"Coach"},{"Cabbie"},{"Stallion"},{"Rumpo"},{"RC Bandit"},{"Romero"},{"Packer"},{"Monster"},
{"Admiral"},{"Squalo"},{"Seasparrow"},{"Pizzaboy"},{"Tram"},{"Trailer 2"},{"Turismo"},
{"Speeder"},{"Reefer"},{"Tropic"},{"Flatbed"},{"Yankee"},{"Caddy"},{"Solair"},{"Berkley's RC Van"},
{"Skimmer"},{"PCJ-600"},{"Faggio"},{"Freeway"},{"RC Baron"},{"RC Raider"},{"Glendale"},{"Oceanic"},
{"Sanchez"},{"Sparrow"},{"Patriot"},{"Quad"},{"Coastguard"},{"Dinghy"},{"Hermes"},{"Sabre"},
{"Rustler"},{"ZR-350"},{"Walton"},{"Regina"},{"Comet"},{"BMX"},{"Burrito"},{"Camper"},{"Marquis"},
{"Baggage"},{"Dozer"},{"Maverick"},{"News Chopper"},{"Rancher"},{"FBI Rancher"},{"Virgo"},{"Greenwood"},
{"Jetmax"},{"Hotring"},{"Sandking"},{"Blista Compact"},{"Police Maverick"},{"Boxville"},{"Benson"},
{"Mesa"},{"RC Goblin"},{"Hotring Racer A"},{"Hotring Racer B"},{"Bloodring Banger"},{"Rancher"},
{"Super GT"},{"Elegant"},{"Journey"},{"Bike"},{"Mountain Bike"},{"Beagle"},{"Cropdust"},{"Stunt"},
{"Tanker"}, {"Roadtrain"},{"Nebula"},{"Majestic"},{"Buccaneer"},{"Shamal"},{"Hydra"},{"FCR-900"},
{"NRG-500"},{"HPV1000"},{"Cement Truck"},{"Tow Truck"},{"Fortune"},{"Cadrona"},{"FBI Truck"},
{"Willard"},{"Forklift"},{"Tractor"},{"Combine"},{"Feltzer"},{"Remington"},{"Slamvan"},
{"Blade"},{"Freight"},{"Streak"},{"Vortex"},{"Vincent"},{"Bullet"},{"Clover"},{"Sadler"},
{"Firetruck LA"},{"Hustler"},{"Intruder"},{"Primo"},{"Cargobob"},{"Tampa"},{"Sunrise"},{"Merit"},
{"Utility"},{"Nevada"},{"Yosemite"},{"Windsor"},{"Monster A"},{"Monster B"},{"Uranus"},{"Jester"},
{"Sultan"},{"Stratum"},{"Elegy"},{"Raindance"},{"RC Tiger"},{"Flash"},{"Tahoma"},{"Savanna"},
{"Bandito"},{"Freight Flat"},{"Streak Carriage"},{"Kart"},{"Mower"},{"Duneride"},{"Sweeper"},
{"Broadway"},{"Tornado"},{"AT-400"},{"DFT-30"},{"Huntley"},{"Stafford"},{"BF-400"},{"Newsvan"},
{"Tug"},{"Trailer 3"},{"Emperor"},{"Wayfarer"},{"Euros"},{"Hotdog"},{"Club"},{"Freight Carriage"},
{"Trailer 3"},{"Andromada"},{"Dodo"},{"RC Cam"},{"Launch"},{"Police Car (LSPD)"},{"Police Car (SFPD)"},
{"Police Car (LVPD)"},{"Police Ranger"},{"Picador"},{"S.W.A.T. Van"},{"Alpha"},{"Phoenix"},{"Glendale"},
{"Sadler"},{"Luggage Trailer A"},{"Luggage Trailer B"},{"Stair Trailer"},{"Boxville"},{"Farm Plow"},
{"Utility Trailer"}};

#define MAX_OBJE                      (1000)

enum objeInfo
{
	objeID,
	objeModelID,
	objeData,
	bool:objeKullanimda,
	Float:objePos[6]
};

new Obje[MAX_OBJE][objeInfo];
new Iterator: Objeler<MAX_OBJE>;

/*========================================*/

#define MAX_POMPA (200)

enum PompaBilgi
{
	bool:Pompa_Kontrol,
	Pompa_ID,

	Float:Pompa_Pos[6],
	Pompa_Obje,
	Text3D:Pompa_Yazi,
	Pompa_Kullaniliyor
};

new Pompa[MAX_POMPA][PompaBilgi];

/*========================================*/

#define MAX_TAMIRHANE (50)

enum TamirhaneBilgi
{
	bool:Tamirhane_Kontrol,
	Tamirhane_ID,
	Tamirhane_Kullaniliyor,

	Float:Tamirhane_Pos[5],
	Tamirhane_World,
	Tamirhane_Interior,

	Float:Tamirhane_IcPos[3],
	Tamirhane_IcWorld,
	Tamirhane_IcInterior,

	Tamirhane_Vakit,

	Text3D:Tamirhane_Yazi,
	Tamirhane_Pickup,
	Tamirhane_MapIcon
}

new Tamirhane[MAX_TAMIRHANE][TamirhaneBilgi];

/*========================================*/

enum EvData
{
	evID,
	evExists,
	evSahip,
	evFiyat,
	evIsim[30],
	Float:evPos[3],
	evInterior,
	evVergi,
	evVergiSure,
	evKilit,
	evCash,
	evMaksMobilya,
	evSatilik,
	evKiralik,
	evKiraUcret,
	evKiralayan,
	evKiyafetler[5],
	evUyusturucu,
	MobilyaYetki,
	evKendiFiyati,
	evSilahlar[10],
	evMermiler[10],
	evPickup,
	Text3D:houseText
}
new HouseInfo[MAX_EV][EvData];
enum    e_interior
{
	IntName[30],
	Float: intX,
	Float: intY,
	Float: intZ,
	intID,
};

enum furnitureData {
	furnitureID,
	furnitureModel,
	furnitureName[32],
	furnitureMateryalDesen[5],
	Float:furniturePos[3],
	Float:furnitureRot[3],
	furniturePrice,
	furnitureObject
};
new FurnitureData[MAX_EV][MAX_FURNITURE][furnitureData];
enum BirlikData
{
	birlikID,
	birlikExists,
	birlikAd[32],
	birlikColor,
	birlikTip,
	birlikRutbeler,
	birlikOnaylar[5],
	birlikYetkilendirme[8],
	birlikDuyuru[128],
	birlikKasaPara,
	OOCDurum,
	yayinDurum,
	yayinTipi,
	ReklamAlimi,
	ReklamUcreti,
	ReklamSayisi,
	bool:CekilisBasladi,
	cekilisOdul,
	Text3D:reklamLabel,
	reklamPickup,
	Float:reklamPos[3]

};
enum IsyeriData
{
	isyeriID,
	isyeriExists,
	isyeriName[32],
	isyeriMesaj[100],
	isyeriSahip,
	isyeriTip,
	isyeriFiyat,
	isyeriKendiFiyati,
	isyeriSatilik,
	isyeriVergi,
	isyeriVergiSure,
	isyeriGirisUcret,
	isyeriMuzik[256],
	Float:isyeriPos[4],
	Float:isyeriInt[4],
	Float:isyeriSpawn[4],
	isyeriInterior,
	isyeriKilit,
	isyeriKasa,
	isyeriUrunSayisi[20],
	isyeriPickup,
	isyeriFiyatlar[20],
	Text3D:bizText3D
};
new Isyeri[MAX_ISYERI][IsyeriData];
new Birlikler[MAX_BIRLIK][BirlikData];
new BirlikRutbe[MAX_BIRLIK][15][32];
new BirlikDivizyon[MAX_BIRLIK][5][20];
new Float:AksesuarData[MAX_PLAYERS][10][10];
enum E_BUYFURNITURES
{
	oSlot,
	oModelID,
	oStr[100],
	oPrice
};
enum    e_baliklar
{
	TurAdi[32],
	MinAgirlik,
	MaxAgirlik,
	Float: GramFiyat
};
enum s_fiyatlar
{
	silahAdi[20],
	silahFiyat,
	silahID,
	silahMermi
};

new SilahFiyatlar[][s_fiyatlar] =
{
	{"Colt45", 17500, 22, 17},
	{"Desert Eagle", 75000, 24, 7},
	{"Shotgun", 115000, 25, 10},
	{"Mac-10",50000, 28, 30},
	{"Av Tüfeði", 38000, 33, 10}
};

enum z_tarifeler
{
	TarifeAdi[20],
	TarifeFiyat,
	TarifeNet,
	TarifeDakika,
	TarifeSMS
};
new Tarifeler[][z_tarifeler] = {

	{"Genç Tarife", 15, 500, 10, 50},
	{"Kazandýran Tarife", 25, 750, 15, 70},
	{"Platinum Tarife", 40, 1000, 30, 100},
	{"Altin Tarife", 60, 1500, 50, 150}
};

new HouseInteriors[][e_interior] =
{
    // int name, x, y, z, intid
    {"Interior 1", 243.7173,304.9824,999.1484, 1},
    {"Interior 2", 2233.4402,-1115.2444,1050.8828, 5},
    {"Interior 3", 2496.1533,-1692.3638,1014.7422, 3},
    {"Interior 4", 2259.5000,-1135.9023,1050.6328, 10},
    {"Interior 5", 2283.1660,-1140.2847,1050.8984, 11},
    {"Interior 6", 2807.6658,-1174.7454,1025.5703, 8},
    {"Interior 7", 2237.2913,-1081.6389,1049.0234, 2},
    {"Interior 8", 318.7826,1114.4797,1083.8828, 5},
    {"Interior 9", 422.5729,2536.5952,10.0000, 10},
    {"Interior 10", 2270.2322,-1210.7551,1047.5625, 10},
    {"Interior 11", 2196.8503,-1204.4314,1049.0234, 6},
    {"Interior 12", 2365.2947,-1135.5913,1050.8826, 8},
    {"Interior 13", 2324.4143,-1149.2606,1050.7101, 12},
    {"Interior 14", 2318.1616, -1026.3762, 1050.2109, 9},
    {"Interior 15", 295.8826, -1623.8948, 47.0000, 0},
	{"Interior 16", 275.2723, -1620.1610, 47.0000, 0},
	{"Interior 17", 295.7511, -1623.8937, 51.5000, 0},
	{"Interior 18", 275.2629, -1620.2229, 51.5000, 0},
	{"Interior 19", 295.7707, -1623.7933, 56.0000, 0},
	{"Interior 20", 275.2598, -1620.2238, 56.0000, 0},
	{"Interior 21", 295.7737, -1623.7657, 60.5000, 0},
	{"Interior 22", 275.2416, -1620.3180, 60.5000, 0},
	{"Interior 23", 295.7657, -1623.8224, 65.0000, 0},
	{"Interior 24", 275.2863, -1620.2517, 65.0000, 0},
	{"Interior 25", 295.7713, -1623.7953, 69.5000, 0},
	{"Interior 26", 275.2635, -1620.2048, 69.5000, 0},
	{"Interior 27", 295.7694, -1623.7930, 74.0000, 0},
	{"Interior 28", 275.2538, -1620.2587, 74.0000, 0},
	{"Interior 29", 295.7735, -1623.7772, 78.5000, 0},
	{"Interior 30", 275.2496, -1620.2762, 78.5000, 0},
	{"Interior 31", 295.7838, -1623.7264, 83.0000, 0},
	{"Interior 32", 275.2486, -1620.2927, 83.0000, 0},
	{"Interior 33", 295.7667, -1623.8005, 87.5000, 0},
	{"Interior 34", 275.2347, -1620.3698, 87.5000, 0},
	{"Interior 35", 295.7894, -1623.7150, 92.0000, 0},
	{"Interior 36", 275.3253, -1620.3160, 92.0000, 0},
	{"Interior 37", 295.7757, -1623.7634, 96.5000, 0},
	{"Interior 38", 275.2514, -1620.2684, 96.5000, 0}
};

enum g_interior
{
	IntName[25],
	Float:intX,
	Float:intY,
	Float:intZ,
	Float:intA,
	intID
};

new
	GarageInteriors[][g_interior] = {
	{"Lüks Garaj 1", 1374.2854,-41.0466,1001.0511,333.0062, 0},
	{"Otopark |", 1919.3907,-1853.0615,670.3015,186.5063, 0},
	{"2. El", 323.4755,-1618.6658,665.6019,178.5214, 0},
	{"LAPD Garaj", 2300.9902,2497.4778,-7.6005,271.0535, 0}
	};
enum desen_enum
{
	model_id,
	txdname[50],
	texturename[50]
};
enum rBilgi
{
	radyoAd[24],
	radyoLink[128]
}
new Radyolar[][rBilgi] = {
	{"Test", "Test"}


};
new Desenler[][desen_enum] = {
	{18202, "w_towncs_t", "hatwall256hi"},
	{18202, "w_towncs_t", "wall256hi"},
	{18202, "w_towncs_t", "pax256hi"},
	{18202, "w_towncs_t", "Upt_Fence_Mesh"},
	{18202, "w_towncs_t", "wall256hi"},
	{10789, "xenon_sfse", "Alumox64"},
	{10789, "xenon_sfse", "dt_ceiling1"},
	{10789, "xenon_sfse", "hospunder_law"},
	{10789, "xenon_sfse", "newgrnd1brn_128"},
	{10789, "xenon_sfse", "newindow4"},
	{10789, "xenon_sfse", "slab64"},
	{10789, "xenon_sfse", "ws_white_wall1"},
	{3673, "xrf_refineryla", "meetwalv2"},
	{3673, "xrf_refineryla", "Metal1_128"},
	{3673, "xrf_refineryla", "Metal3_128"},
	{3673, "xrf_refineryla", "sanpedocka1"},
	{3673, "xrf_refineryla", "sl_rustyrailing"},
	{3673, "xrf_refineryla", "steel256128"},
	{18265, "w_town3cs_t", "corugwall_sandy"},
	{18265, "w_town3cs_t", "des_ntwnwin5"},
	{18265, "w_town3cs_t", "hilcouwall2"},
	{18265,	"w_town3cs_t", "pierwall06_law"},
	{18265, "w_town3cs_t", "roof04L256"},
	{18265,	"w_town3cs_t",	"sjmscruffhut2"},
	{18265, "w_town3cs_t",	"sw_barnwoodblu"},
	{18265, "w_town3cs_t", "woodroof01_128"},
	{18265, "w_town3cs_t", "ws_boxhouse_wins5"}
};
new const DogumYeri[][] = {
	{"Amerikan"},
	{"ingiliz"},
	{"Meksikan"},
	{"Rus"},
	{"Fransiz"},
	{"isviçreli"},
	{"Hintli"},
	{"Slav"},
	{"Kanadali"},
	{"italyan"},
	{"Çinli"},
	{"Alman"},
	{"Arap"},
	{"iskoçvali"},
	{"Koreli"},
	{"ispanyol"},
	{"irlandali"},
	{"Japon"},
	{"israil"},
	{"isveç"}
};
new const g_aFurnitureTypes[][] = {
	{"Duvarlar"},
	{"Masalar"},
	{"Sandalyeler"},
	{"Yataklar"},
	{"Kanepeler"},
	{"Dekorasyonlar"},
	{"Elektronik"},
	{"Vario"},
	{"Mutfak"},
	{"Banyo"},
	{"siseler, bardaklar ve kaplar"},
	{"Portreler"},
	{"Vazolar"},
	{"Posterler ve Grafiti"},
	{"Çöp bidonlari"},
	{"Giysiler"},
	{"Silindirler ve variller"},
	{"Deniz Nesneleri"},
	{"Tablolar"},
	{"Kutular"},
	{"Sütünlar"},
	{"Gidalar"},
	{"Araçlar"},
	{"Mekanik"},
	{"Özel"},
	{"Beyaz Tahtalar"}

};
static const BuyableFurnitures[][E_BUYFURNITURES] =
{
//Mura
	{0, 9131, "Muretto beige", 100},
	{0, 8175, "Muro biancastro", 200},
	{0, 19426, "Parete piccola 1", 110},
	{0, 19427, "Parete piccola 2", 110},
	{0, 19428, "Parete piccola 3", 110},
	{0, 19429, "Parete piccola 4", 110},
	{0, 19430, "Parete piccola 5", 110},
	{0, 19431, "Parete piccola 6", 110},
	{0, 19432, "Parete piccola 7", 110},
	{0, 19433, "Parete piccola 8", 110},
	{0, 19434, "Parete piccola 9", 110},
	{0, 19435, "Parete piccola 10", 110},
	{0, 19436, "Parete piccola 11", 110},
	{0, 19437, "Parete piccola 12", 110},
	{0, 19438, "Parete piccola 13", 110},
	{0, 19439, "Parete piccola 14", 110},
	{0, 19440, "Parete piccola 15", 110},
	{0, 19441, "Parete piccola 16", 110},
	{0, 19442, "Parete piccola 17", 110},
	{0, 19443, "Parete piccola 18", 110},
	{0, 19444, "Parete piccola 19", 110},
	{0, 19353, "Parete media 1", 155},
	{0, 19354, "Parete media 2", 155},
	{0, 19355, "Parete media 3", 155},
	{0, 19356, "Parete media 4", 155},
	{0, 19357, "Parete media 5", 155},
	{0, 19358, "Parete media 6", 155},
	{0, 19359, "Parete media 7", 155},
	{0, 19360, "Parete media 8", 155},
	{0, 19361, "Parete media 9", 155},
	{0, 19362, "Parete media 10", 155},
	{0, 19363, "Parete media 11", 155},
	{0, 19364, "Parete media 12", 155},
	{0, 19365, "Parete media 13", 155},
	{0, 19366, "Parete media 14", 155},
	{0, 19367, "Parete media 15", 155},
	{0, 19368, "Parete media 16", 155},
	{0, 19369, "Parete media 17", 155},
	{0, 19379, "Parete media 18", 155},
	{0, 19371, "Parete media 19", 155},
	{0, 19372, "Parete media 20", 155},
	{0, 19373, "Parete media 21", 155},
	{0, 19445, "Parete grande 1", 202},
	{0, 19446, "Parete grande 2", 202},
	{0, 19447, "Parete grande 3", 202},
	{0, 19448, "Parete grande 4", 202},
	{0, 19449, "Parete grande 5", 202},
	{0, 19450, "Parete grande 6", 202},
	{0, 19451, "Parete grande 7", 202},
	{0, 19452, "Parete grande 8", 202},
	{0, 19453, "Parete grande 9", 202},
	{0, 19454, "Parete grande 10", 202},
	{0, 19455, "Parete grande 11", 202},
	{0, 19456, "Parete grande 12", 202},
	{0, 19457, "Parete grande 13", 202},
	{0, 19458, "Parete grande 14", 202},
	{0, 19459, "Parete grande 15", 202},
	{0, 19460, "Parete grande 16", 202},
	{0, 19461, "Parete grande 17", 202},
	{0, 19462, "Parete grande 18", 202},
	{0, 19463, "Parete grande 19", 202},
	{0, 19383, "Parete ingresso 1", 120},
	{0, 19384, "Parete ingresso 2", 120},
	{0, 19385, "Parete ingresso 3", 120},
	{0, 19386, "Parete ingresso 4", 120},
	{0, 19387, "Parete ingresso 5", 120},
	{0, 19388, "Parete ingresso 6", 120},
	{0, 19389, "Parete ingresso 7", 120},
	{0, 19390, "Parete ingresso 8", 120},
	{0, 19391, "Parete ingresso 9", 120},
	{0, 19392, "Parete ingresso 10", 120},
	{0, 19393, "Parete ingresso 11", 120},
	{0, 19394, "Parete ingresso 12", 120},
	{0, 19395, "Parete ingresso 13", 120},
	{0, 19396, "Parete ingresso 14", 120},
	{0, 19397, "Parete ingresso 15", 120},
	{0, 19398, "Parete ingresso 16", 120},
	{0, 19399, "Parete con finestra 1", 155},
	{0, 19400, "Parete con finestra 2", 155},
	{0, 19401, "Parete con finestra 3", 155},
	{0, 19402, "Parete con finestra 4", 155},
	{0, 19403, "Parete con finestra 5", 155},
	{0, 19404, "Parete con finestra 6", 155},
	{0, 19405, "Parete con finestra 7", 155},
	{0, 19406, "Parete con finestra 8", 155},
	{0, 19407, "Parete con finestra 9", 155},
	{0, 19408, "Parete con finestra 10", 155},
	{0, 19409, "Parete con finestra 11", 155},
	{0, 19410, "Parete con finestra 12", 155},
	{0, 19411, "Parete con finestra 13", 155},
	{0, 19412, "Parete con finestra 14", 155},
	{0, 19413, "Parete con finestra 15", 155},
	{0, 19414, "Parete con finestra 16", 155},
	{0, 19415, "Parete con finestra 17", 155},
	{0, 19416, "Parete con finestra 18", 155},
	//Tavoli
    {1, 2024, "Tavolo in vetro", 500},
	{1, 1281, "Tavolo con ombrello", 100},
	{1, 1432, "Tavolo con sedie", 120},
	{1, 1594, "Tavolo a scacchi", 200},
	{1, 1827, "Tavolo elegante", 180},
	{1, 1433, "Tavolo da stanza", 150},
	{1, 1516, "Tavolo da stanza 2", 150},
	{1, 2126, "Tavolo da salone", 225},
	{1, 2334, "Tavolo per cucina 1", 150},
	{1, 2335, "Tavolo per cucina 2", 150},
	{1, 2336, "Tavolo per cucina 3", 150},
	{1, 2338, "Tavolo per cucina 4", 120},
	{1, 2311, "Tavolo per TV", 350},
	{1, 2314, "Tavolo per TV 2", 350},
	{1, 2313, "Tavolo per TV 3", 400},
	{1, 2315, "Tavolo per TV 4", 350},
	{1, 2319, "Tavolo Usual", 300},
	{1, 2321, "Tavolo Usual 2", 350},
	{1, 2323, "Banco Tavolo grande", 250},
	{1, 2328, "Banco Tavolo piccolo", 120},
	{1, 2424, "Banco cucina 2", 150},
	{1, 2423, "Banco cucina Angolo 2", 120},
	{1, 2441, "Banco cucina 3", 150},
	{1, 2442, "Banco cucina Angolo 3", 120},
	{1, 2455, "Cucina 4", 150},
	{1, 2454, "Cucina Angolo 4", 120},
	{1, 2130, "Cucina rosso", 150},
	{1, 2128, "Cucina rosso 2", 120},
	{1, 2136, "Cucina in legno", 150},
	{1, 2139, "Cucina in legno 2", 120},
	{1, 2140, "Cucina in legno 3", 120},
	{1, 2346, "Tavolo Hi Fi", 350},
	{1, 2357, "Tavolo Lungo", 400},
	{1, 2368, "Bancone TV", 500},
	{1, 2370, "Tavolo Semplice", 250},
	{1, 2635, "Tavolo Pizza piccolo", 10},
	{1, 2637, "Tavolo Pizza grande", 150},
	{1, 2762, "Tavolo rosso", 150},
	{1, 2799, "Tavolo nero con sedie", 300},
	{1, 1968, "Tavoli bianchi con sedie rosse", 200},
	{1, 1969, "Tavolo bianco con sedia rossea", 200},
	{1, 936, "Superficie argentata, bordi legno", 100},
	{1, 937, "Tre ripiani. Superficie argentata, bordi legno", 100},
	{1, 941, "Tavolo fabbrica del crack", 100},
	{1, 19929, "Scrivania grigia", 100},
	{1, 3393, "Scrivania da laboratorio", 500},
	{1, 3391, "Scrivania da laboratorio 2", 250},
	{1, 1963, "Scrivania bianca (no collision)", 100},
	{1, 2112, "Tavolo quadrato", 200},
	{1, 2117, "Tavolo legno medio", 300},
	//Sedie
	{2, 1663, "Sedia da ufficio", 120},
	{2, 1715, "Sedia da ufficio (nero sbiadito)", 350},
	{2, 1704, "Poltrona legno con cuscini neri", 250},
	{2, 1705, "Poltrona legno con cuscini violacei", 250},
	{2, 1708, "Poltrona nera", 250},
	{2, 1711, "Poltrona beige (crack house)", 100},
	{2, 1810, "Sedia grigiastra arrugginita", 50},
	{2, 2121, "Sedia rossa", 65},
	{2, 1735, "Poltrona usurata e antica", 170},
	{2, 1714, "Poltrona elegante", 350},
	{2, 1811, "Sedia legno", 35},
	{2, 1716, "Sgabello nero", 40},
	{2, 2125, "Sgabello rosso", 40},
	{2, 2723, "Sgabello legno con cuscino nero", 120},
	{2, 1720, "Sedia legno con cuscino bianco", 220},
	{2, 1721, "Sedia grigia con cuscini neri(da sala d'attesa)", 25},
	{2, 1739, "Sedia legno (da cucina elegante)", 250},
	{2, 1806, "Sedia blu con rotelline(da ufficio 3)", 85},
	{2, 2120, "Segna legno, cuscini scuri (da cucina)", 90},
	{2, 2079, "Sedia da cucina ", 100},
	{2, 2120, "Sedia da cucina media", 120},
	{2, 2123, "Sedia con cuscini bianchi e legno scuro", 200},
	{2, 2124, "Segna legno chiaro, cuscini rossi", 150},
	{2, 1369, "Sedia a rotelle", 60},
	{2, 2343, "Sedia barbiere", 120},
	{2, 1825, "Sedia tavolo eleganti", 350},
	//Letti
	{3, 1700, "Letto matrimoniale", 255},
	{3, 1701, "Letto matrimoniale 2", 275},
	{3, 1745, "Letto matrimoniale 3", 270},
	{3, 1793, "Materasso",  100},
	{3, 1794, "Letto singolo",  120},
	{3, 1796, "Letto matrimoniale", 150},
	{3, 1797, "Letto usual", 210},
	{3, 1798, "Letto usual 2", 230},
	{3, 1799, "Letto medio", 225},
	{3, 1802, "Letto medio 2", 220},
	{3, 1803, "Letto a castello",  230},
	{3, 1800, "Brandina",  80},
	{3, 2299, "Letto elegante", 270},
	{3, 2563, "Letto con kit", 995},
	//Divani
	{4, 11717, "Divano moderno", 150},
	{4, 1726, "Divano nero elegante", 700},
	{4, 1727, "Poltrona elegante nera", 500},
	{4, 1702, "Divano legno con cuscini bianchi", 270},
	{4, 1703, "Divano legno con cuscini neri", 270},
	{4, 1706, "Divano legno con cuscini violacei", 230},
	{4, 1709, "Divano beige allungato - crack house", 150},
	{4, 1710, "Divano beige a quattro posti - crack house", 130},
	{4, 1712, "Divano beige a due posti - crack house", 100},
	{4, 1712, "Divano classico 4", 175},
	{4, 1713, "Divano nero, semplice", 200},
	{4, 1707, "Divano grigio con cuscini rossi", 450},
	{4, 1753, "Divano in pelle", 520},
	{4, 1756, "Divano usato", 170},
	{4, 1757, "Divano usato 2", 180},
	{4, 1760, "Divano medio", 160},
	{4, 1761, "Divano medio 2", 170},
	{4, 1768, "Divano medio 3", 185},
	{4, 1763, "Divano rosa e legno di bassa qualità", 125},
	{4, 1764, "Divano giallastro", 170},
	{4, 1766, "Divano bassa qualità", 160},
	{4, 1768, "Divano legno con cuscini azzurri", 130},
	{4, 1704, "Poltroncina", 50},
	{4, 11717, "Divano rosso elegante", 350},
	{4, 2638, "Divani pizzastack", 300},
 	//Decorazioni
 	{5, 1580, "Pacco droga rosso", 100},
	{5, 1576, "Pacco droga arancione", 100},
	{5, 1577, "Pacco droga giallo", 100},
	{5, 1578, "Pacco droga verde", 100},
 	{5, 14781, "Ring box", 5000},
 	{5, 1808, "Distributore acqua", 200},
	{5, 1667, "Bicchiere 3", 10},
	{5, 1510, "Posa cenere", 20},
	{5, 19896, "Pacchetto di sigarette rosso", 2},
	{5, 19897, "Pacchetto di sigarette blu", 2},
	{5, 2814, "Wellstacked scatola singola vuota", 3},
	{5, 2768, "Confezione cluck bell vuota 2", 5},
	{5, 2837, "Cluckin' Bell, 2 confezioni d'hamburger e 2 panini", 3},
	{5, 2838, "Wellstacked scatole vuote", 3},
	{5, 2840, "Confezioni di panini e bibite vuote del Burgershot", 3},
	{5, 2866, "Confezioni vuote 1", 5},
	{5, 2821, "Confezione vuote di cibo cinese", 3},
	{5, 2858, "Pacchetto di patatine finite", 3},
	{5, 2821, "Confezione di cereali", 3},
	{5, 2805, "Busta marroncina contenente della carne", 10},
	{5, 2803, "Busta contenente della carne", 20},
	{5, 2745, "Statua", 1000},
	{5, 2809, "Busto in granito di una statua", 500},
	{5, 19611, "Asta del microfono", 100},
	{5, 19617, "Disco d'oro", 300},
	{5, 1665, "Posacenere", 30},
	{5, 19466, "Vetro semitrasparente", 200},
	{5, 1649, "Vetro con bordi neri", 200},
	{5, 2828, "Fotografie", 5},
	{5, 2827, "Pila di giornaletti", 5},
	{5, 2826, "Pila di giornaletti", 5},
	{5, 2825, "Vari libri sovrapposti tra loro", 5},
	{5, 2894, "Libro", 10},
	{5, 2725, "Spray di qualcosa", 5},
	{5, 2751, "Confezione di qualcosa", 5},
	{5, 2767, "Vassoio vuoto", 10},
	{5, 2221, "Vassoio ciambelle", 15},
	{5, 2222, "Vassoio ciambelle", 15},
	{5, 2223, "Vassoio ciambelle", 15},
	{5, 2212, "Vassoio", 15},
	{5, 2213, "Vassoio burgershot ", 15},
	{5, 2214, "Vassoio burgershot", 15},
	{5, 2218, "Vassoio pizzeria", 15},
	{5, 2219, "Vassoio pizzeria", 15},
	{5, 2220, "Vassoio pizzeria - scatola chiusa", 15},
	{5, 19473, "Piantina di Cannabis", 100},
	{5, 19636, "Cassa mele rosse", 20},
	{5, 19637, "Cassa mele verdi", 20},
	{5, 19638, "Cassa mele arancioni", 20},
	{5, 19639, "Cassa legno vuota", 10},
	{5, 2773, "Divisore con corda rossa", 50},
	{5, 1485, "Sigaro", 50},
	{5, 1550, "Borsone contenente banconote", 50},
	{5, 19471, "Cartellone in vendita", 50},
	{5, 2558, "Tenda blu", 40},
	{5, 11245, "Bandiera USA", 30},
	{5, 967, "Guardiola", 200},
	{5, 19632, "Legno che brucia", 120},
	{5, 2435, "Bancone frontale", 120},
	{5, 2434, "Bancone laterale", 120},
	{5, 2188, "Tavolo blackjack", 200},
	{5, 625, "Pianta 1", 5},
	{5, 630, "Pianta 2", 5},
	{5, 644, "Pianta 3", 5},
	{5, 1361, "Pianta con vascone", 50},
	{5, 2001, "Pianta con vaso 1", 5},
	{5, 2241, "Pianta con vaso 2", 5},
	{5, 2245, "Pianta con vaso 3", 5},
	{5, 2811, "Pianta con vaso 4", 5},
	{5, 2670, "Rifiuti per terra 1", 20},
	{5, 2671, "Rifiuti per terra 2", 20},
	{5, 2672, "Rifiuti per terra 3", 20},
	{5, 2673, "Rifiuti per terra 4", 20},
	{5, 2674, "Rifiuti per terra 5", 20},
	{5, 2675, "Rifiuti per terra 6", 20},
	{5, 2676, "Rifiuti per terra 7", 20},
	{5, 2677, "Rifiuti per terra 8", 20},
	{5, 2342, "Rifiuti per terra 9", 20},
	{5, 11686,  "Bancone da bar", 1400},
	{5, 2784, "Bancone con Arco d'oro", 2000},
	{5, 11725,  "Camino 1", 500},
	{5, 11724, "Camino 2", 500},
	{5, 997, "Sbarre", 500},
	{5, 3850, "Divisore in vetro", 250},
	{5, 19624, "Valigia", 30},
	{5, 1738, "Termosifone", 100},
	{5, 2146, "Barella", 50},
	{5, 2609, "Cassetti", 50},
	{5, 2919, "Borsone", 10},
	{5, 1665, "Posacenere e sigarette", 5},
	{5, 2891, "Pacco", 20},
	{5, 19273, "Pannello ", 150},
	{5, 2663, "Busta", 5},
	{5, 2222, "Vassoio colazione", 10},
	{5, 19054, "Pacco regalo 1", 5},
	{5, 19055, "Pacco regalo 2", 5},
	{5, 19056, "Pacco regalo 3", 5},
	{5, 19057, "Pacco regalo 4", 5},
	{5, 19058, "Pacco regalo 5", 5},
	{5, 19619, "Cassaforte aperta", 1500},
	{5, 2645, "Menu da muro - pizzastack", 200},
	{5, 2453, "Pizza da esposizione - pizzastack", 100},
	{5, 2439, "Bancone pizzastack", 500},
	{5, 2451, "Grill Pizzastack", 500},
	{5, 19054, "Pacco rosso", 10},
	{5, 19055, "Pacco 2", 10},
	{5, 19056, "Pacco 3", 10},
	{5, 19057, "Pacco 4", 10},
	{5, 19058, "Pacco 5", 10},
	{5, 19059, "Palla Natalizia 1", 10},
	{5, 19060, "Palla Natalizia 2", 10},
	{5, 19061, "Palla Natalizia 3", 10},
	{5, 19062, "Palla Natalizia 4", 10},
	{5, 19063, "Palla Natalizia 5", 10},
	{5, 14467, "Statua gigante Carter", 1500},
	{5, 1513, "Porta oggetti parete", 140},
	{5, 1481, "Barbecue 2", 300},
	//Elettronica
	{6, 2412, "Metal Detector", 500},
	{6, 18872, "Cellulare blu", 600},
	{6, 18867, "Cellulare rosso", 600},
	{6, 2344, "Telecomando bianco", 200},
	{6, 14391, "Postazione grande deejay", 800},
	{6, 957, "Lampada chic", 200},
	{6, 2026, "Lampadario", 100},
	{6, 2074, "Lampadario", 100},
	{6, 921, "Luce Industriale", 150},
	{6, 1429, "TV Normale", 220},
	{6, 1518, "TV Normale 2", 225},
	{6, 2297, "TV Usual", 450},
	{6, 1750, "TV Bassa qualità", 210},
	{6, 1752, "TV Bassa qualità 2", 210},
	{6, 2224, "TV Sferica", 650},
	{6, 1786, "TV Grande", 435},
	{6, 2606, "4 televisori affiancati", 900},
	{6, 2921, "Telecamera", 2405},
	{6, 1622, "Telecamera con Altoparlante", 2900},
	{6, 2332, "Cassaforte", 225},
	{6, 1719, "Console", 200},
	{6, 1782, "Lettore DVD", 150},
	{6, 1783, "Lettore DVD 2", 150},
	{6, 2229, "Stereo", 300},
	{6, 2231, "Stereo 2", 350},
	{6, 2232, "Stereo 3", 550},
	{6, 2202, "Fotocopiatrice",300},
	{6, 1208, "Lavatrice 1", 200},
	{6, 2337, "Lavatrice 2", 220},
	{6, 2425, "Macchinetta Sprunk", 200},
	{6, 2131, "Frigo bianco", 450},
	{6, 2452, "Frigo per drinks doppio", 1500},
	{6, 2531, "Frigo per drinks singolo", 750},
	{6, 2426, "Forno pizzastack", 1000},
	{6, 2417, "2 forno Pizzastack", 1000},
	{6, 2132, "Lavabo cucina", 240},
	{6, 2170, "Fornello cucina", 230},
	{6, 19915, "Fornello cucina arruginito", 100},
	{6, 2340, "Banco per cucinare", 250},
	{6, 2421, "Microonde", 345},
	{6, 2627, "Tapis Roulant", 345},
	{6, 2069, "Lampada", 215},
	{6, 2108, "Lampada 2", 220},
	{6, 2239, "Lampada 3", 225},
	{6, 16780, "Lampada con ventilatore", 200},
	{6, 1731, "Lampadina", 135},
	{6, 2074, "Lampadina 2", 135},
	{6, 1734, "Lampione", 140},
	{6, 1893, "Lampione 2", 145},
	{6, 1515, "Slot Machine",1200},
	{6, 2226, "Stereo rosso e nero", 200},
	{6, 19807, "Telefono", 110},
	{6, 19808, "Tastiera nera computer", 110},
	{6, 2750, "Cellulare", 20},
	{6, 19614, "Amplificatore chitarra", 250},
	{6, 19612, "Amplificatore chitarra piccolo", 150},
	{6, 19613, "Amplificatore chitarra nero", 250},
	{6, 19610, "Microfono", 50},
	{6, 19609, "Batteria", 250},
	{6, 2192, "Ventilatore", 100},
	{6, 2196, "Abat-jour", 100},
	{6, 2131, "Doppio frigo bianco", 200},
	{6, 19893, "Laptop aperto", 190},
	{6, 19894, "Laptop chiuso", 170},
	{6, 19814, "Presa elettrica", 100},
	{6, 19813, "Presa elettrica 2", 100},
	{6, 19826, "Interruttore 1", 100},
	{6, 19827, "Interruttore 2", 100},
	{6, 19828, "Interruttore 3", 100},
	{6, 19829, "Interruttore 4", 100},
	{6, 18647, "Neon rosso", 100},
	{6, 18648, "Neon blu", 100},
	{6, 18649, "Neon verde", 100},
	{6, 18650, "Neon giallo", 100},
	{6, 18651, "Neon viola", 100},
	{6, 18652, "Neon bianco", 100},
	{6, 14820, "Set Deejay", 300},
	{6, 3804, "Condizionatore", 200},
	{6, 1958, "Mixer Deejay", 300},
	{6, 927, "Impianto elettrico", 500},
	{6, 1697, "Impianto fotovoltaico", 500},
	{6, 19121, "Paletto con luce bianca", 250},
	{6, 19122, "Paletto con luce blu", 250},
	{6, 19123, "Paletto con luce verde", 250},
	{6, 19124, "Paletto con luce rossa", 250},
	{6, 19125, "Paletto con luce gialla", 250},
	{6, 19126, "Paletto con luce azzurra", 250},
	{6, 19127, "Paletto con luce viola", 250},
	{6, 19317, "Chitarra elettrica 1", 250},
	{6, 19318, "Chitarra elettrica 2", 250},
	{6, 19319, "Chitarra elettrica 3", 250},
	{6, 19129, "Pista da ballo grande", 500},
	{6, 19128, "Pista da ballo piccola", 250},
	{6, 18655, "Faretto da discoteca (bianco)", 200},
	{6, 18656, "Faretto da discoteca (verde)", 200},
	{6, 18657, "Faretto da discoteca (rosso)", 200},
	{6, 18646, "Sirena polizia", 500},
	{6, 11728, "Citofono", 200},
	{6, 2421, "Forno a micro onde", 40},
	{6, 2962, "Allarme anti incendio", 40},
	{6, 19279, "Luce potente", 100},
	{6, 2196, "Lampada", 30},
	{6, 11743, "Macchina del caffè", 80},
	{6, 2149, "Microonde", 80},
	{6, 19786, "TV grande", 500},
	{6, 2202, "Stampante", 30},
	{6, 1661, "Lampadario 7", 150},
	{6, 19806, "Lampadario 5", 100},
	{6, 11726, "Lampadario 6", 100},
	{6, 19830, "Frullatore", 50},
	{6, 2415, "Friggitrice pizzastack", 1300},
	{6, 2771, "Registratore di cassa 1", 700},
	{6, 1514, "Registratore di cassa 2", 700},
	{6, 1959, "Registatore di cassa 3", 700},
	{6, 955, "Distributore automatico sprunk", 500},
	{6, 956, "Distributore automatico merendine", 500},
	{6, 1209, "Soda Machine", 500},
	{6, 2238, "Lava Lamp", 500},
	{6, 2002, "Distributore Automatico Acqua", 150},
	{6, 14807, "2 paletti con luci", 150},
	{6, 2076, "Lampadario Tondeggiante", 150},
	{6, 1954, "Mixer Deejay 2", 300},
	{6, 2176, "Luce Casinò", 350},
	{6, 2103, "Low HiFi", 300},
	{6, 2105, "Lampada", 100},
	{6, 19806, "Lampadario luxury", 100},
	{6, 1718, "Macchinetta soldi", 45},
	//Vario
	{7, 3120, "Palla da basket", 50},
	{7, 2330, "Armadio", 140},
	{7, 1417, "Armadio semi-aperto", 140},
	{7, 2708, "Ripiano esposizione", 140},
	{7, 2573, "Armadio e Scrivania", 500},
	{7, 2087, "Comò legno", 250},
	{7, 2020, "Comò 2", 200},
	{7, 1743, "Comò 3", 200},
	{7, 2385, "Scaffale Trofei",230},
	{7, 3497, "Canestro",340},
	{7, 2629, "Panca piana",190},
	{7, 2630, "Ciclette",240},
	{7, 2964, "Tavolo da biliardo", 680},
	{7, 14651, "Tavolo da biliardo con lampadario", 800},
	{7, 1689, "Tavolo da bar", 390},
	{7, 2027, "Tavolo da bar 2", 390},
	{7, 2614, "Bandiera Americana",135},
	{7, 2204, "Scaffale con Armadietto",535},
	{7, 1742, "Libreria 1",260},
	{7, 2161, "Libreria  2",250},
	{7, 2167, "Armadietto ufficio",235},
	{7, 2169, "Scrivania",320},
	{7, 2173, "Scrivania 2",335},
	{7, 2205, "Scrivania 3",330},
	{7, 2197, "Cassettiera ufficio",160},
	{7, 1736, "Renna",385},
	{7, 2833, "Tappeto 1",210},
	{7, 2834, "Tappeto 2",180},
	{7, 2835, "Tappeto 3",180},
	{7, 2836, "Tappeto 4",180},
	{7, 2841, "Tappeto 5",180},
	{7, 2510, "Aeroplanino",250},
	{7, 19816, "Bombola d'ossigeno", 200},
	{7, 1549, "Cestino grigio", 100},
	{7, 19831, "Barbue", 100},
	{7, 11729, "Armadietto verde chiuso", 120},
	{7, 11730, "Armadietto verde aperto", 120},
	{7, 11712, "Crocifisso", 50},
	{7, 19623, "Macchina fotografica", 100},
	{7, 19339, "Bara legno", 200},
	{7, 1428, "Scala portatile", 100},
	{7, 1212, "Banconote", 10},
	{7, 1073, "Ruota", 40},
	{7, 19320, "Zucca halloween", 10},
	{7, 19076, "Albero di Natale", 50},
	{7, 14882, "Tubature", 150},
	{7, 19088, "Corda 3", 20},
	{7, 19087, "Corda 2", 20},
	{7, 19089, "Corda 1", 20},
	{7, 1572, "Carrello Aeroporto", 20},
	{7, 1349, "Carrello", 20},
	{7, 1369, "Sedia a rotelle arruginita", 20},
	{7, 334, "Manganello", 500},
	{7, 2060, "Sacco Contenente Sabbia", 150},
	{7, 19468, "Secchio", 50},
	{7, 19092, "Pompom Verde", 50},
	{7, 3470, "Impianto di ventilazione", 2500},
	{7, 1579, "Confezione Blu",  400},
	{7, 2057, "Taniche arruginite", 20},
	{7, 2057, "Scatola in ferro", 100},
	{7, 1650, "Tanica Rossa", 100},
	//Cucina
	{8, 2822, "Pila di piatti e piattini", 5},
	{8, 2829, "Piatto 1", 7},
	{8, 2830, "Piatto 2", 7},
	{8, 2831, "2 piatti", 8},
	{8, 2832, "3 piatti", 10},
	{8, 19851, "Padella", 50},
	{8, 19582, "Pezzo di carne", 20},
	{8, 19583, "Coltello", 15},
	{8, 19584, "Pentola 1", 30},
	{8, 19585, "Pentola 2", 35},
	{8, 19586, "Spatola", 20},
	{8, 11718, "Pentola 3", 20},
	{8, 11719, "Pentola 4", 20},
	{8, 2013, "Cucina 1 - lavandino", 100},
	{8, 2014, "Cucina 1 - ripiano centrale 1", 100},
	{8, 2015, "Cucina 1 - ripiano centrale 2", 100},
	{8, 2016, "Cucina 1 - ripiano laterale sinistro", 100},
	{8, 2017, "Cucina 1 - fornelli", 120},
	{8, 2018, "Cucina 1 - lavatrice", 120},
	{8, 2019, "Cucina 1 - ripiano laterale destro", 100},
	{8, 2127, "Cucina 2 - doppio frigo", 230},
	{8, 2128, "Cucina 2 - tre cassetti", 230},
	{8, 2129, "Cucina 2 - ripiano", 230},
	{8, 2130, "Cucina 2 - lavandino e superficie", 230},
	{8, 2141, "Cucina 3 - frigo", 250},
	{8, 2131, "Cucina 3 - doppio frigo", 320},
	{8, 2132, "Cucina 3 - lavandino e superficie", 300},
	{8, 2133, "Cucina 3 - quattro cassetti", 300},
	{8, 2134, "Cucina 3 - ripiano con cassetto e sportello", 300},
	{8, 2135, "Cucina 4 - fornello", 450},
	{8, 2136, "Cucina 4 - lavandino", 450},
	{8, 2137, "Cucina 4 - tre cassetti", 450},
	{8, 2138, "Cucina 4 - sportello inferiore", 450},
	{8, 2139, "Cucina 4 - ripiano in granito", 450},
	{8, 2142, "Cucina 5 - ripiano", 120},
	{8, 2143, "Cucina 5 - fornello e sportello", 150},
	{8, 2148, "Cucina 5 - ripiano vuoto", 250},
	{8, 2144, "Fornello grigio", 120},
	{8, 2145, "Cucina 6 - 3 ripiani, uno sopra l'altro", 130},
	{8, 2147, "Frigorifero grigio", 120},
	{8, 2150, "Lavandino grigio", 120},
	{8, 2151, "Cucina 7 - ripiano con sportello e 2 cassetti", 360},
	{8, 2152, "Cucina 7 - doppio ripiano", 320},
	{8, 2154, "Cucina 7 - lavandino", 330},
	{8, 2155, "Cucina 7 - ripiano piccolo", 310},
	{8, 2153, "Frigorifero bianco e grigio", 200},
	{8, 2156, "Cucina 8 - doppio ripiano", 110},
	{8, 2158, "Cucina 8 - frigorifero", 130},
	{8, 2159, "Cucina 8 - 3 cassetti e ripiano vuoto", 115},
	{8, 2160, "Cucina 8 - lavandino", 120},
	{8, 2445, "Ripiano in granito", 700},
	{8, 2303, "Ripiano in granito 2", 600},
	{8, 2305, "Cucina - ripiano ad angolo", 500},
	//Bagno
	{9, 2514, "WC 1", 200},
	{9, 2528, "WC 2", 150},
	{9, 2521, "WC 3", 200},
	{9, 2515, "Lavandino 1", 150},
	{9, 2516, "Vasca da bagno 1", 250},
	{9, 2526, "Vasca da bagno 2", 250},
	{9, 2520, "Doccia 1", 250},
	{9, 2527, "Doccia 2", 300},
	{9, 2517, "Doccia 3", 200},
	{9, 2518, "Lavandino 2", 100},
	{9, 2523, "Lavandino 3", 100},
	{9, 2524, "Lavandino 4", 100},
	{9, 2602, "Urinatorio Prigione", 100},
	{9, 19873, "Carta igienica", 20},
	{9, 19874, "Sapone", 20},
	{9, 2741, "Contenitore sapone liquido", 20},
	{9, 2742, "Asciugamani elettronico", 20},
	//Bottiglie, bicchieri e tazze
	{10, 1509, "Bottiglia verdastra con fondo rotondo", 100},
	{10, 1512, "Bottiglia verdastra ", 100},
	{10, 1520, "Bottiglia marrone di whisky", 100},
	{10, 1543, "Bottiglia di birra", 100},
	{10, 1544, "Bottiglia giallastra", 100},
	{10, 1546, "Bicchiere cartonificato di sprunk", 50},
	{10, 1551, "Bottiglia verdastra 1", 100},
	{10, 16668, "Bottiglia bianca", 100},
	{10, 16669, "Bottiglia verdastra", 100},
	{10, 19818, "Bicchiere", 100},
	{10, 19819, "Bicchiere da cocktail", 100},
	{10, 19835, "CoffeeCup", 20},
	{10, 19820, "Bottiglia alcolica 1", 20},
	{10, 19821, "Bottiglia alcolica 2", 20},
	{10, 19822, "Bottiglia alcolica 3", 20},
	{10, 19823, "Bottiglia alcolica 4", 20},
	{10, 19824, "Bottiglia alcolica 5", 20},
	//Porte
	{11, 2875, "Porta Zip", 200},
	{11, 2876, "Porta Sport", 230},
	{11, 2879, "Porta Ds", 210},
	{11, 2878, "Porta Rain", 220},
	{11, 1502, "Porta legno", 75},
	{11, 1491, "Porta legno scuro", 75},
	{11, 3089, "Porta legno con vetro",75},
	{11, 1492, "Porta verde", 75},
	{11, 1494, "Porta bluastra", 75},
	{11, 1493, "Porta rossa con reticola", 80},
	{11, 1495, "Porta blu con reticola", 75},
	{11, 1498, "Porta bianca arruginita", 75},
	{11, 1499, "Porta grigia arruginita", 80},
	{11, 1535, "Porta rosa", 75},
	{11, 1537, "Porta grigia (alhambra)", 175},
	{11, 1536, "Porta villa Maddogg", 175},
	{11, 1557, "Porta di lusso", 175},
	{11, 1504, "Porta rossa", 100},
	{11, 1507, "Porta gialla", 100},
	{11, 1567, "Porta guardaroba", 100},
	{11, 1555, "Porta blu (stanza motel)", 100},
	{11, 2963, "Porta cella frigorifera", 520},
	{11, 1569, "Porta con vetro", 80},
	{11, 19302, "Sbarra prigione 1", 700},
	{11, 19303, "Sbarra prigione 2", 700},
	{11, 19304, "Sbarre prigione 3", 900},
	{11, 2930, "Sbarre", 100},
	{11, 3055, "Porta garage 1", 300},
	{11, 17951, "Porta garage 2", 300},
	{11, 19862, "Porta garage 3", 300},
	{11, 19861, "Porta garage 4", 300},
	{11, 9093, "Porta garage 5", 300},
	{11, 10149, "Porta garage 6", 300},
	{11, 11313, "Porta garage 7", 300},
	//Vasi
	{12, 741, "Vaso piccolo (rosastro)", 50},
	{12, 742, "Vaso (rosastro)", 50},
	{12, 743, "Vaso (rossiccio)", 50},
	{12, 741, "Vaso piccolo (rosastro)", 50},
	{12, 14705, "Vaso", 30},
	//Poster e graffiti
	{13, 18659, "Graffito Groove", 10},
	{13, 18660, "Graffito Seville Families", 10},
	{13, 18661, "Graffito varrio Aztecas", 10},
	{13, 18662, "Graffito Kilo Tray Ballas", 10},
	{13, 18663, "Graffito San Fierro Rifa", 10},
	{13, 18664, "Graffito Temple Drive Ballas", 10},
	{13, 18665, "Graffito Vagos", 10},
	{13, 18666, "Graffito Front Yard Ballas", 10},
	{13, 18667, "Graffito Rollin Heights Ballas", 10},
	{13, 1529, "Graffito Ballas-Groove", 10},
	{13, 1530, "Graffito Aztecas-Groove", 10},
	{13, 1531, "Graffito Aztecas-Groove", 10},
	{13, 2695, "Poster con rapper", 40},
	{13, 2696, "Poster con un cane", 40},
	{13, 2691, "Poster con vari rapper", 40},
	{13, 2685, "Cartello verde (lavarsi le mani)", 10},
	{13, 2687, "Cartello igiene", 10},
	{13, 2684, "Attestato", 10},
	{13, 2662, "Poster bobo", 10},
	{13, 2615, "Poster raffigurate varie armi", 60},
	{13, 2580, "Poster XXX 1", 50},
	{13, 2587, "Poster XXX 2", 50},
	{13, 2588, "Poster XXX 3", 50},
	{13, 2667, "Menu The Buster", 30},
	{13, 2668, "Menu The Full Rack", 30},
	{13, 2666, "Menu Doubled Luxe", 30},
	{13, 2665, "Menu completo", 30},
	{13, 2599, "Sex Shop Double Poster", 30},
	//Contenitori rifiuti
	{14, 3035, "Cassonetto nero", 100},
	{14, 1415, "Cassonetto verde aperto", 100},
	{14, 1439, "Cassonetto verde chiuso", 100},
	{14, 1329, "Cassonetto verde aperto", 100},
	{14, 1330, "Cassonetto verde chiuso", 100},
	{14, 1345, "Cassonetto nero chiuso", 100},
	{14, 1333, "Cassonetto rosso chiuso", 100},
	{14, 1334, "Cassonetto blu chiuso", 100},
	{14, 1344, "Cassonetto verde e nero chiuso", 100},
	{14, 1331, "Contenitore blu", 100},
	{14, 1332, "Cestino nero", 100},
	{14, 1409, "Contenitore blu", 100},
	{14, 1328, "Cestino nero", 100},
	{14, 2613, "Cestino bianco", 100},
	{14, 1337, "Contenitore blu scuro con rotelle", 100},
	{14, 1339, "Contenitore blu con rotelle", 100},
	{14, 1328, "Cestino in metallo", 30},
	{14, 1330, "Cestino 1", 30},
	{14, 1329, "Cestino 2", 30},
	//Vestiti
	{15, 19825, "Orologio", 20},
	{15, 2391, "Pantaloni beige", 50},
	{15, 2819, "Vestiti beige", 50},
	{15, 2843, "Vestiti blu e gialli", 50},
	{15, 2844, "Vestiti grigi, bianchi e rossi", 50},
	{15, 2845, "Vestiti blu e gialli", 50},
	{15, 2846, "Vestiti bianchi e grigi", 50},
	{15, 2869, "Felpa grigia", 50},
	{15, 2704, "Felpa arancione e nera", 50},
	{15, 2705, "Canottiera bianca con numero 7", 90},
	{15, 2706, "Canottiera rossa col numero 69", 90},
	{15, 2374, "Camice blu", 50},
	{15, 2377, "Jeans scuri", 50},
	{15, 2378, "Jeans blu", 50},
	{15, 2383, "Maglie gialle", 50},
	{15, 2384, "Pila di jeans beige", 50},
    {15, 371, "Zaino", 50},
    {15, 2391, "Vestiti 1", 200},
    {15, 2396, "Vestiti 2", 200},
    {15, 2399, "Vestiti 3", 200},
    {15, 11735, "Stivale", 50},
    {15, 18094, "Pila di vestiti", 150},
	{15, 2386, "Pila di jeans blu", 50},
	{15, 2411, "Busto manichino (legno)", 120},
	{15, 2407, "Busto manichino (in plastica nera)", 120},
	{15, 2408, "2 gambe di manichino (in plastica bianca)", 100},
	{15, 19064, "Cappello di natale 1", 20},
	{15, 19065, "Cappello di natale 2", 20},
	{15, 19066, "Cappello di natale 3", 20},
	{15, 19472, "Maschera Anti-Gas", 500},
	//Bombole e barili
	{16, 918, "Bombola blu", 100},
	{16, 925, "Gabbia con vari barili", 200},
	{16, 930, "6 bombole rosse e nere", 150},
	{16, 1217, "Barile azzurro arruginito", 100},
	{16, 1218, "Barile giallo", 300},
	{16, 1222, "Barile rossiccio", 100},
	{16, 1225, "Barile rosso", 300},
	{16, 3632, "Barile rosso 2", 250},
	{16, 3633, "4 barili rossi", 600},
	{16, 931, "Gabbia a due ripiani", 100},
	{16, 1370, "Bombola del gas", 40},
	{16, 1348, "8 bombole nere e rosse", 80},
	//Oggetti per il mare
	{17, 1639, "Rete da tennis", 250},
	{17, 1640, "Telo da mare bianco e verde", 50},
	{17, 1641, "Telo da mare azzurrino", 50},
	{17, 1642, "Telo da mare rosso", 50},
	{17, 1644, "Crema abbronzante", 20},
	{17, 1645, "Sdraio", 50},
	{17, 1646, "Sdraio con telo bianco e verde", 50},
	{17, 1647, "Lettino", 50},
	{17, 2404, "Tavoletta Surf 1", 125},
	{17, 2405, "Tavoletta Surf 2", 125},
	{17, 2406, "Tavoletta Surf 3", 125},
	//Quadri
	{18, 2255, "Quadro ragazza nuda di spalle", 100},
	{18, 2256, "Quadro palme", 120},
	{18, 2257, "Quadro vari colori", 200},
	{18, 2258, "Quadro grattacieli", 300},
	{18, 2259, "Quadro blu", 100},
	{18, 2260, "Quadro grigio", 100},
	{18, 2261, "Quadro grigio di un ponte", 100},
	{18, 2262, "Quadro grigio", 100},
	{18, 2263, "Quadro varie luci", 100},
	{18, 2264, "Quadro Santa Maria Beach", 100},
	{18, 2265, "Quadro deserto Las Venturas", 100},
	{18, 2266, "Quadro palazzi di Los Santos", 100},
	{18, 2267, "Quadro legno nave", 100},
	{18, 2268, "Quadro legno gatto nero", 100},
	{18, 2269, "Quadro legno lago", 210},
	{18, 2270, "Quadro  tre foglie", 100},
	{18, 2271, "Quadro bianco", 110},
	{18, 2272, "Quadro legno paese", 200},
	{18, 2273, "Quadro delle rose", 100},
	{18, 2274, "Quadro delle rose", 106},
	{18, 2275, "Quadro dei frutti", 111},
	{18, 2276, "Quadro  il ponte di San Fierro", 100},
	{18, 2277, "Quadro legno gatto bianco", 106},
	{18, 2278, "Quadro legno nave", 130},
	{18, 2279, "Quadro il chilliad", 120},
	{18, 2280, "Quadro legno spiaggia", 110},
	{18, 2281, "Quadro legno ponte. (Cielo arancione)", 100},
	{18, 2282, "Quadro legno paesaggio", 100},
	{18, 2283, "Quadro vari colori", 110},
	{18, 2284, "Quadro vari palazzi", 300},
	{18, 2285, "Quadro con varie tonalità chiare di colori", 700},
	{18, 2286, "Quadro legno nave", 110},
	{18, 2287, "Quadro due barche a vela", 400},
	{18, 2288, "Quadro legno nave", 100},
	{18, 2289, "Quadro il chilliad", 100},
	//Scatole
	{19, 3630, "12 scatoloni sovrapposti in due file", 400},
	{19, 2972, "Scatola blu", 100},
	{19, 2973, "Casse coperte da reti rosse", 150},
	{19, 2795, "Casse azzurrine", 150},
	{19, 1428, "Scale medie dimensioni", 100},
	{19, 1437, "Scale di grosse dimensioni", 200},
	{19, 964,  "Box argentato, singolo", 100},
	{19, 1264, "Sacco spazzatura", 20},
	{19, 1271, "Scatola legno chiusa", 30},
	{19, 2040, "Scatola piccola", 30},
	{19, 2328, "Scatola piccola 2", 30},
	{19, 2654,  "Scatole eris", 30},
	{19, 2969, "Scatola in legno", 30},
	{19, 1558, "Scatola in cartone chiusa", 30},
	{19, 1685, "Varie scatole", 30},
	{19, 2065, "Archivio verdastro, 3 cassetti", 50},
	{19, 2066, "Archivio marrone e beige, 3 cassetti", 50},
	{19, 2067, "Archivio azzurro e beige, 3 cassetti", 50},
	{19, 939, "Scatoloni in vari ripiani", 120},
	{19, 942, "Scatoloni in vari ripiani 2", 120},
	{19, 1230, "Scatola rotta 1", 20},
	{19, 926, "Scatola rotta 2", 20},
	{19, 928, "Scatola rotta 3", 20},
	{19, 1220, "Scatolone 1", 20},
	{19, 1221, "Scatolone 2", 20},
	{19, 3761, "Scaffale con scatole", 100},
	{19, 2063, "Scaffale senza scatole", 80},
	{19, 2583, "Scaffale 1 Sex Shop", 500},
	{19, 2581, "Scaffale 2 Sex Shop", 500},
	//Colonne
	{20, 3440, "Colonna arrotondata di medie dimensioni", 150},
	{20, 3494, "Colonna in marmo beige", 600},
	{20, 3529, "Colonna in mattoni e ferro", 250},
	{20, 3530, "Colonna in mattoni e ferro 2", 450},
	{20, 19943, "Colonna caligulas", 600},
	{20, 2774, "Colonna grande", 200},
	{20, 3675, "Tubo Ventilazione", 3000},
	//Cibo
	{21, 1582, "Cartone della pizza 1", 10},
	{21, 19571, "Cartone della pizza 2", 10},
	{21, 19525, "Torta nuziale", 120},
	{21, 19563, "Succo all'arancia", 10},
	{21, 19564, "Succo alla mela", 10},
	{21, 19572, "Cassa di bibite", 20},
	{21, 19574, "Arancia", 10},
	{21, 19575, "Mela rossa", 10},
	{21, 19576, "Mela verde", 10},
	{21, 19577, "Pomodoro", 10},
	{21, 19578, "Banana", 10},
	{21, 19579, "Pane in cassetta", 10},
	{21, 19561, "Scatola di cereali 1", 10},
	{21, 19562, "Scatola di cereali 2", 10},
	{21, 19569, "Cartone di latte", 10},
	{21, 19570, "Bottiglia di latte", 10},
	{21, 19565, "Cibo surgelato 1", 10},
	{21, 19566, "Cibo surgelato 2", 10},
	{21, 11722, "Contenitore Ketchup", 10},
	{21, 11723, "Contenitore senape", 10},
	//Utensili
    {22, 2332, "Cassaforte", 3500},
	{22, 18635, "Martello", 10},
	{22, 19631, "Martello grosso", 50},
	{22, 18644, "Cacciavite", 10},
	{22, 18633, "Chiave inglese", 10},
	{22, 19627, "Chiave inglese", 10},
	{22, 19622, "Scopa", 20},
	{22, 19804, "Lucchetto", 5},
	{22, 2680, "Lucchetto con catena", 20},
	{22, 11746, "Chiave", 20},
	{22, 19904, "Giubbotto arancione catarifrangente", 20},
	{22, 19621, "Contenitore olio", 30},
	//Meccanica
	{23, 19872, "Elevatore giallo", 1500},
	{23, 19899, "Contenitore utensili", 200},
	{23, 19903, "Computer controllo pressione", 500},
	{23, 19815, "Ripiano a parete", 100},
	{23, 1000,  "Spoiler", 200},
	{23, 1001,  "Spoiler 2", 200},
	{23, 1002,  "Spoiler 3", 200},
	{23, 1003,  "Spoiler 4", 200},
	{23, 1008,  "1x bombole NOS", 200},
	{23, 1009,  "5x bombole NOS", 500},
	{23, 1010, "10x bombole NOS", 1000},
	{23, 1013, "Fari", 200},
	{23, 1018, "Marmitta 1", 100},
	{23, 1019, "Marmitta 2", 100},
	{23, 1020, "Marmitta 3", 100},
	{23, 929, "Macchinario 1", 250},
	{23, 934, "Macchinario 2", 250},
	{23, 14584 , "Macchinario 3", 400},
	{23, 920, "Macchinario 4", 250},
	{23, 1353, "Macchinario 5", 200},
	{23, 1635, "Macchinario 6", 210},
	//Speciali
	{24, 19474, "Tavolo da poker", 5000},
	{24, 9831, "Acqua 1", 1000},
	{24, 6964, "Acqua 2", 1000},
	{24, 16088, "Pali costruzione", 50},
	{24, 14434, "Luci", 20},
	{24, 18688, "Fuoco 1", 200},
    {24, 18689, "Fuoco 2", 200},
    {24, 18690, "Fuoco 3", 200},
    {24, 18691, "Fuoco 4", 200},
    {24, 18692, "Fuoco 5", 200},
    {24, 18694, "Fuoco 6", 200},
    {24, 18695, "Sparo 1", 200},
    {24, 18696, "Sparo 2", 200},
    {24, 18697, "Sparo 3", 200},
    {24, 18698, "Insetti", 200},
    {24, 18699, "Jetpack gas 1", 200},
    {24, 18700, "Jetpack gas 2", 200},
    {24, 18701, "Molotov fiamma", 200},
    {24, 18702, "Jetpack gas 3", 200},
    {24, 18703, "Fumo bianco auto", 200},
    {24, 18704, "Fumo bianco auto 2", 200},
    {24, 18705, "Liquido a zampilli", 200},
    {24, 18672, "Cemento betoniera", 200},
    {24, 18668, "Schizzi di sangue", 200},
    {24, 18682, "Esplosione 1", 200},
    {24, 18683, "Esplosione 2", 200},
    {24, 18684, "Esplosione 3", 200},
    {24, 18685, "Esplosione 4", 200},
    {24, 18686, "Esplosione 5", 200},
    {24, 18725, "Fumo bianco 2", 200},
    {24, 18726, "Fumo nero 2", 200},
    {24, 18727, "Fumo grigio 1", 200},
    {24, 18728, "Fumo rosso (flag)", 200},
    {24, 18729, "Spraycan", 200},
    {24, 18725, "Fumo", 200},
    {24, 18715, "Sabbia 1", 200},
    {24, 18716, "Sabbia 2", 200},
    {24, 18693, "Fiamma 1", 200},
    {24, 18723, "Fumo nero", 200},
	{24, 3865, "Tubo cantiere 1", 100},
	{24, 3502, "Tubo cantiere 2", 100},
	{24, 3066, "Casse coperte da telo verde", 50},
	{24, 3502, "Tubo cantiere 2", 100},
	{24, 2960, "Trave acciaio", 300},
	{24, 19912, "Cancello elettrico", 200},
	{24, 998, "Cancello elettrico 2", 200},
	{24, 989, "Cancello elettrico 3", 200},
	{24, 5463, "Cantiere grande", 200},
	{24, 11495, "Banchine porto", 200},
	{24, 11693, "Erba grande", 500},
	{24, 18863, "Erba grande 2", 500},
	{24, 19003, "Suolo grande", 400},
	{24, 19531, "Suolo grande 3", 400},
	{24, 19530, "Sabbia grande", 700},
	{24, 19593, "Palazzo gigante", 1000},
	{24, 3584, "Palazzine Harmony Oaks", 50},
	{24, 7017, "Recinzioni muratori rom", 50},
	{24, 3887, "Edificio rotto con cerotto", 50},
	{24, 3270, "Aereo rotto", 3000},
	{24, 10757, "Aereo", 10000},
	{24, 9618, "Impalcature", 500},
	{24, 1521, "Impalcature blu", 200},
	{24, 7089, "Impalcature per edifici", 2000},
	{24, 18720, "Spruzzo Acqua 1", 100},
	{24, 18739, "Spruzzo Acqua 2", 100},
	{24, 18742, "Spruzzo Acqua 3", 100},
	{24, 18743, "Spruzzo Acqua 4", 100},
	{24, 355, "AK-47", 100},
	{24, 356, "M4", 100},
	{24, 348, "Desert Eagle", 100},
	{24, 352, "UZI", 100},
	{24, 349, "Chromegun", 100},
	{24, 344, "Molotov", 100},
	{24, 2710, "Pacco Orologio", 100},
	{24, 3082, "Capsula", 100},
	{24, 1583, "Bersaglio 1", 100},
	{24, 1584, "Bersaglio 2", 100},
	{24, 1585, "Bersaglio 3", 100},
	{24, 1586, "Bersaglio 4", 100},
	{24, 3496, "Canestro 2", 500},
	{24, 2905, "Gamba Umana", 100},
	{24, 2906, "Braccio Umano", 100},
	{24, 2907, "Torso Umano", 100},
	{24, 2908, "Testa Umana", 100},
	//Lavagne
	{25, 19787, "Lavagna nera", 40},
	{25, 2737, "Lavagna - sfondo blu", 100},
	{25, 3077, "Lavagna integrale", 300},
	{25, 19805, "Board bianca", 100}
};
enum AttachmentEnum
    {
        attachmodel,
        attachname[24]
    }

    new AttachmentObjects[][AttachmentEnum] = {
    {18632, "FishingRod"},
    {18633, "GTASAWrench1"},
    {18634, "GTASACrowbar1"},
    {18635, "GTASAHammer1"},
    {18638, "HardHat1"},
    {18639, "BlackHat1"},
    {18640, "Hair1"},
    {18975, "Hair2"},
    {19136, "Hair4"},
    {19274, "Hair5"},
    {18644, "Screwdriver1"},
    {18645, "MotorcycleHelmet1"},
    {18865, "MobilePhone1"},
    {18866, "MobilePhone2"},
    {18867, "MobilePhone3"},
    {18868, "MobilePhone4"},
    {18869, "MobilePhone5"},
    {18870, "MobilePhone6"},
    {18871, "MobilePhone7"},
    {18872, "MobilePhone8"},
    {18873, "MobilePhone9"},
    {18874, "MobilePhone10"},
    {18875, "Pager1"},
    {18890, "Rake1"},
    {18891, "Bandana1"},
    {18892, "Bandana2"},
    {18893, "Bandana3"},
    {18894, "Bandana4"},
    {18895, "Bandana5"},
    {18896, "Bandana6"},
    {18897, "Bandana7"},
    {18898, "Bandana8"},
    {18899, "Bandana9"},
    {18900, "Bandana10"},
    {18901, "Bandana11"},
    {18902, "Bandana12"},
    {18903, "Bandana13"},
    {18904, "Bandana14"},
    {18905, "Bandana15"},
    {18906, "Bandana16"},
    {18907, "Bandana17"},
    {18908, "Bandana18"},
    {18909, "Bandana19"},
    {18910, "Bandana20"},
    {18911, "Mask1"},
    {18912, "Mask2"},
    {18913, "Mask3"},
    {18914, "Mask4"},
    {18915, "Mask5"},
    {18916, "Mask6"},
    {18917, "Mask7"},
    {18918, "Mask8"},
    {18919, "Mask9"},
    {18920, "Mask10"},
    {18921, "Beret1"},
    {18922, "Beret2"},
    {18923, "Beret3"},
    {18924, "Beret4"},
    {18925, "Beret5"},
    {18926, "Hat1"},
    {18927, "Hat2"},
    {18928, "Hat3"},
    {18929, "Hat4"},
    {18930, "Hat5"},
    {18931, "Hat6"},
    {18932, "Hat7"},
    {18933, "Hat8"},
    {18934, "Hat9"},
    {18935, "Hat10"},
    {18936, "Helmet1"},
    {18937, "Helmet2"},
    {18938, "Helmet3"},
    {18939, "CapBack1"},
    {18940, "CapBack2"},
    {18941, "CapBack3"},
    {18942, "CapBack4"},
    {18943, "CapBack5"},
    {18944, "HatBoater1"},
    {18945, "HatBoater2"},
    {18946, "HatBoater3"},
    {18947, "HatBowler1"},
    {18948, "HatBowler2"},
    {18949, "HatBowler3"},
    {18950, "HatBowler4"},
    {18951, "HatBowler5"},
    {18952, "BoxingHelmet1"},
    {18953, "CapKnit1"},
    {18954, "CapKnit2"},
    {18955, "CapOverEye1"},
    {18956, "CapOverEye2"},
    {18957, "CapOverEye3"},
    {18958, "CapOverEye4"},
    {18959, "CapOverEye5"},
    {18960, "CapRimUp1"},
    {18961, "CapTrucker1"},
    {18962, "CowboyHat2"},
   // {18963, "CJElvisHead"},
    {18964, "SkullyCap1"},
    {18965, "SkullyCap2"},
    {18966, "SkullyCap3"},
    {18967, "HatMan1"},
    {18968, "HatMan2"},
    {18969, "HatMan3"},
    {18970, "HatTiger1"},
    {18971, "HatCool1"},
    {18972, "HatCool2"},
    {18973, "HatCool3"},
    {18974, "MaskZorro1"},
    {18976, "MotorcycleHelmet2"},
    {18977, "MotorcycleHelmet3"},
    {18978, "MotorcycleHelmet4"},
    {18979, "MotorcycleHelmet5"},
    {19006, "GlassesType1"},
    {19007, "GlassesType2"},
    {19008, "GlassesType3"},
    {19009, "GlassesType4"},
    {19010, "GlassesType5"},
    {19011, "GlassesType6"},
    {19012, "GlassesType7"},
    {19013, "GlassesType8"},
    {19014, "GlassesType9"},
    {19015, "GlassesType10"},
    {19016, "GlassesType11"},
    {19017, "GlassesType12"},
    {19018, "GlassesType13"},
    {19019, "GlassesType14"},
    {19020, "GlassesType15"},
    {19021, "GlassesType16"},
    {19022, "GlassesType17"},
    {19023, "GlassesType18"},
    {19024, "GlassesType19"},
    {19025, "GlassesType20"},
    {19026, "GlassesType21"},
    {19027, "GlassesType22"},
    {19028, "GlassesType23"},
    {19029, "GlassesType24"},
    {19030, "GlassesType25"},
    {19031, "GlassesType26"},
    {19032, "GlassesType27"},
    {19033, "GlassesType28"},
    {19034, "GlassesType29"},
    {19035, "GlassesType30"},
    {19036, "HockeyMask1"},
    {19037, "HockeyMask2"},
    {19038, "HockeyMask3"},
    {19039, "WatchType1"},
    {19040, "WatchType2"},
    {19041, "WatchType3"},
    {19042, "WatchType4"},
    {19043, "WatchType5"},
    {19044, "WatchType6"},
    {19045, "WatchType7"},
    {19046, "WatchType8"},
    {19047, "WatchType9"},
    {19048, "WatchType10"},
    {19049, "WatchType11"},
    {19050, "WatchType12"},
    {19051, "WatchType13"},
    {19052, "WatchType14"},
    {19053, "WatchType15"},
    {19085, "EyePatch1"},
    {19090, "PomPomBlue"},
    {19091, "PomPomRed"},
    {19092, "PomPomGreen"},
    {19093, "HardHat2"},
    {19094, "BurgerShotHat1"},
    {19095, "CowboyHat1"},
    {19096, "CowboyHat3"},
    {19097, "CowboyHat4"},
    {19098, "CowboyHat5"},
    {19113, "SillyHelmet1"},
    {19114, "SillyHelmet2"},
    {19115, "SillyHelmet3"},
    {19116, "PlainHelmet1"},
    {19117, "PlainHelmet2"},
    {19118, "PlainHelmet3"},
    {19119, "PlainHelmet4"},
    {19120, "PlainHelmet5"},
    {19137, "CluckinBellHat1"},
    {19160, "HardHat3"},
    {19163, "GimpMask1"},
    {19317, "bassguitar01"},
    {19318, "flyingv01"},
    {19319, "warlock01"},
    {19330, "fire_hat01"},
    {19331, "fire_hat02"},
    {19348, "cane01"},
    {19349, "monocle01"},
    {19350, "moustache01"},
    {19351, "moustache02"},
    {19352, "tophat01"},
    {19487, "tophat02"},
    {19488, "HatBowler6"},
    {19513, "Beyaz Telefon"},
    {3044, "Cigar"},
    {1210, "Briefcase"},
    {19559, "Dag â¬antasi"},
    {19904, "Insaat Yelegi"},
    {19517, "Sari Saâ¡"},
    {19077, "Siyah Saâ¡"},
    {18641, "El Feneri"},
    {19317, "Gitar 1"},
    {19318, "Gitar 2"},
    {19319, "Gitar 3"},
    {19553, "Kovboy Sapkasi"},
    {19554, "Siyah Bere"},
    {19623, "Kamera"},
    {19610, "Mikrofon"},
    {19624, "Bavul"},
    {11745, "Bavul 2"},
	{19625, "Sigara"}
    };

    enum a_CopEnum
    {
        olusumamodel,
        olusumaname[24]
    }

    new AttachCops[][a_CopEnum] = {
	{19141, "SWAT Kaski1"},
	{19142, "SWAT Zirhi1"},
	{-2007, "Polis Zirhi"},
	{18636, "Polis Kepi1"},
	{19099, "Polis Kepi2"},
	{19100, "Polis Kepi3"},
	{18637, "Polis Kalkani1"},
	{19161, "Polis sapkasi1"},
	{19162, "Polis sapkasi2"},
	{19200, "Polis Kaski1"},
	{19138, "Polis Gözlügü1"},
	{19139, "Polis Gözlügü2"},
	{19140, "Polis Gözlügü3"},
	{19347, "Rozet"},
	{19472, "Gaz Maskesi"},
	{19773, "Kilif"},
	{19785, "Senior Arma"},
	{19521, ""},
	{19520, ""}
	};
	new AttachmentBones[][24] = {
    {"Omurga"},
    {"Kafa"},
    {"Sol Üst Kol"},
    {"Sag Üst Kol"},
    {"Sol El"},
    {"Sag El"},
    {"Sol Uyluk"},
    {"Sag Uyluk"},
    {"Sol Ayak"},
    {"Sag Ayak"},
    {"Sag Baldir"},
    {"Sol Baldir"},
    {"Sol Önkol"},
    {"Sag Önkol"},
    {"Sol Köprücük"},
    {"Sag Köprücük"},
    {"Boyun"},
    {"Çene"}
    };
	enum e_InteriorData {
    e_InteriorName[32],
    e_InteriorID,
    Float:e_InteriorX,
    Float:e_InteriorY,
    Float:e_InteriorZ
};
	new const g_arrInteriorData[][e_InteriorData] = {
    {"24/7 1", 17, -25.884498, -185.868988, 1003.546875},
    {"24/7 2", 10, 6.091179, -29.271898, 1003.549438},
    {"24/7 3", 18, -30.946699, -89.609596, 1003.546875},
    {"24/7 4", 16, -25.132598, -139.066986, 1003.546875},
    {"24/7 5", 4, -27.312299, -29.277599, 1003.557250},
    {"24/7 6", 6, -26.691598, -55.714897, 1003.546875},
    {"Airport Ticket", 14, -1827.147338, 7.207417, 1061.143554},
    {"Airport Baggage", 14, -1861.936889, 54.908092, 1061.143554},
    {"Shamal", 1, 1.808619, 32.384357, 1199.593750},
    {"Andromada", 9, 315.745086, 984.969299, 1958.919067},
    {"Ammunation 1", 1, 286.148986, -40.644397, 1001.515625},
    {"Ammunation 2", 4, 286.800994, -82.547599, 1001.515625},
    {"Ammunation 3", 6, 296.919982, -108.071998, 1001.515625},
    {"Ammunation 4", 7, 314.820983, -141.431991, 999.601562},
    {"Ammunation 5", 6, 316.524993, -167.706985, 999.593750},
    {"Ammunation Booths", 7, 302.292877, -143.139099, 1004.062500},
    {"Ammunation Range", 7, 298.507934, -141.647048, 1004.054748},
    {"Blastin Fools Hallway", 3, 1038.531372, 0.111030, 1001.284484},
    {"Budget Inn Motel Room", 12, 444.646911, 508.239044, 1001.419494},
    {"Jefferson Motel", 15, 2215.454833, -1147.475585, 1025.796875},
    {"Off Track Betting Shop", 3, 833.269775, 10.588416, 1004.179687},
    {"Sex Shop", 3, -103.559165, -24.225606, 1000.718750},
    {"Meat Factory", 1, 963.418762, 2108.292480, 1011.030273},
    {"Zero's RC shop", 6, -2240.468505, 137.060440, 1035.414062},
    {"Dillimore Gas", 0, 663.836242, -575.605407, 16.343263},
    {"Catigula's Basement", 1, 2169.461181, 1618.798339, 999.976562},
    {"FC Janitor Room", 10, 1889.953369, 1017.438293, 31.882812},
    {"Woozie's Office", 1, -2159.122802, 641.517517, 1052.381713},
    {"Binco", 15, 207.737991, -109.019996, 1005.132812},
    {"Didier Sachs", 14, 204.332992, -166.694992, 1000.523437},
    {"Prolaps", 3, 207.054992, -138.804992, 1003.507812},
    {"Suburban", 1, 203.777999, -48.492397, 1001.804687},
    {"Rain", 5, 226.293991, -7.431529, 1002.210937},
    {"Zip", 18, 161.391006, -93.159156, 1001.804687},
    {"Club", 17, 493.390991, -22.722799, 1000.679687},
    {"Bar", 11, 501.980987, -69.150199, 998.757812},
    {"Lil' Probe Inn", 18, -227.027999, 1401.229980, 27.765625},
    {"Jay's Diner", 4, 457.304748, -88.428497, 999.554687},
    {"Gant Bridge Diner", 5, 454.973937, -110.104995, 1000.077209},
    {"Secret Valley Diner", 6, 435.271331, -80.958938, 999.554687},
    {"World of Coq", 1, 452.489990, -18.179698, 1001.132812},
    {"Welcome Pump", 1, 681.557861, -455.680053, -25.609874},
    {"Burger Shot", 10, 375.962463, -65.816848, 1001.507812},
    {"Cluckin' Bell", 9, 369.579528, -4.487294, 1001.858886},
    {"Well Stacked Pizza", 5, 373.825653, -117.270904, 1001.499511},
    {"Rusty Browns Donuts", 17, 381.169189, -188.803024, 1000.632812},
    {"Denise's Room", 1, 244.411987, 305.032989, 999.148437},
    {"Katie's Room", 2, 271.884979, 306.631988, 999.148437},
    {"Helena's Room", 3, 291.282989, 310.031982, 999.148437},
    {"Michelle's Room", 4, 302.180999, 300.722991, 999.148437},
    {"Barbara's Room", 5, 322.197998, 302.497985, 999.148437},
    {"Millie's Room", 6, 346.870025, 309.259033, 999.155700},
    {"Sherman Dam", 17, -959.564392, 1848.576782, 9.000000},
    {"Planning Dept", 3, 384.808624, 173.804992, 1008.382812},
    {"Area 51", 0, 223.431976, 1872.400268, 13.734375},
    {"LS Gym", 5, 772.111999, -3.898649, 1000.728820},
    {"SF Gym", 6, 774.213989, -48.924297, 1000.585937},
    {"LV Gym", 7, 773.579956, -77.096694, 1000.655029},
    {"B-Dup's House", 3, 1527.229980, -11.574499, 1002.097106},
    {"B-Dup's Crack Pad", 2, 1523.509887, -47.821197, 1002.130981},
    {"CJ's House", 3, 2496.049804, -1695.238159, 1014.742187},
    {"Madd Doggs Mansion", 5, 1267.663208, -781.323242, 1091.906250},
    {"OG Loc's House", 3, 513.882507, -11.269994, 1001.565307},
    {"Ryders House", 2, 2454.717041, -1700.871582, 1013.515197},
    {"Sweet's House", 1, 2527.654052, -1679.388305, 1015.498596},
    {"Crack Factory", 2, 2543.462646, -1308.379882, 1026.728393},
    {"Big Spread Ranch", 3, 1212.019897, -28.663099, 1000.953125},
    {"Fanny batters", 6, 761.412963, 1440.191650, 1102.703125},
    {"Strip Club", 2, 1204.809936, -11.586799, 1000.921875},
    {"Strip Club (Private Room)", 2, 1204.809936, 13.897239, 1000.921875},
    {"Unnamed Brothel", 3, 942.171997, -16.542755, 1000.929687},
    {"Tiger Skin Brothel", 3, 964.106994, -53.205497, 1001.124572},
    {"Pleasure Domes", 3, -2640.762939, 1406.682006, 906.460937},
    {"Liberty City Outside", 1, -729.276000, 503.086944, 1371.971801},
    {"Liberty City Inside", 1, -794.806396, 497.738037, 1376.195312},
    {"Gang House", 5, 2350.339843, -1181.649902, 1027.976562},
    {"Colonel Furhberger's", 8, 2807.619873, -1171.899902, 1025.570312},
    {"Crack Den", 5, 318.564971, 1118.209960, 1083.882812},
    {"Warehouse 1", 1, 1412.639892, -1.787510, 1000.924377},
    {"Warehouse 2", 18, 1302.519897, -1.787510, 1001.028259},
    {"Sweet's Garage", 0, 2522.000000, -1673.383911, 14.866223},
    {"Lil' Probe Inn Toilet", 18, -221.059051, 1408.984008, 27.773437},
    {"Unused Safe House", 12, 2324.419921, -1145.568359, 1050.710083},
    {"RC Battlefield", 10, -975.975708, 1060.983032, 1345.671875},
    {"Barber 1", 2, 411.625976, -21.433298, 1001.804687},
    {"Barber 2", 3, 418.652984, -82.639793, 1001.804687},
    {"Barber 3", 12, 412.021972, -52.649898, 1001.898437},
    {"Tatoo Parlor 1", 16, -204.439987, -26.453998, 1002.273437},
    {"Tatoo Parlor 2", 17, -204.439987, -8.469599, 1002.273437},
    {"Tatoo Parlor 3", 3, -204.439987, -43.652496, 1002.273437},
    {"LS Police HQ", 6, 246.783996, 63.900199, 1003.640625},
    {"SF Police HQ", 10, 246.375991, 109.245994, 1003.218750},
    {"LV Police HQ", 3, 288.745971, 169.350997, 1007.171875},
    {"3 School", 3, -2029.798339, -106.675910, 1035.171875},
    {"8-Track", 7, -1398.065307, -217.028900, 1051.115844},
    {"Bloodbowl", 15, -1398.103515, 937.631164, 1036.479125},
    {"Dirt Track", 4, -1444.645507, -664.526000, 1053.572998},
    {"Kickstart", 14, -1465.268676, 1557.868286, 1052.531250},
    {"Vice Stadium", 1, -1401.829956, 107.051300, 1032.273437},
    {"SF Garage", 0, -1790.378295, 1436.949829, 7.187500},
    {"LS Garage", 0, 1643.839843, -1514.819580, 13.566620},
    {"SF Bomb Shop", 0, -1685.636474, 1035.476196, 45.210937},
    {"Blueberry Warehouse", 0, 76.632553, -301.156829, 1.578125},
    {"LV Warehouse 1", 0, 1059.895996, 2081.685791, 10.820312},
    {"LV Warehouse 2 (hidden part)", 0, 1059.180175, 2148.938720, 10.820312},
    {"Caligula's Hidden Room", 1, 2131.507812, 1600.818481, 1008.359375},
    {"Bank", 0, 2315.952880, -1.618174, 26.742187},
    {"Bank (Behind Desk)", 0, 2319.714843, -14.838361, 26.749565},
    {"LS Atrium", 18, 1710.433715, -1669.379272, 20.225049}
};
new Float:CarLastPos[MAX_VEHICLES][3];
new Float:TaxiLastPos[MAX_VEHICLES][3];
new Float:DeathPos[MAX_PLAYERS][4];
new Text3D:Vehicle3DText[MAX_VEHICLES];
new VehicleText[MAX_VEHICLES][24];
new VehicleCallSign[MAX_VEHICLES];
new DeathInterior[MAX_PLAYERS];
new DeathWorld[MAX_PLAYERS];
new BirlikAdi[MAX_PLAYERS][32];
new BalikTimer[MAX_PLAYERS];
new bool:SigaraDurum[MAX_PLAYERS];
new MobilyaListeleme[MAX_PLAYERS][200];
new OzelModelListeleme[MAX_PLAYERS][20];
new RehberListeleme[MAX_PLAYERS][50];
new ModifiyeListeleme[MAX_PLAYERS][30];
new CezaListele[MAX_PLAYERS][MAX_PLAYER_TICKETS];
new KeyListeleme[MAX_PLAYERS][MAX_HOUSE_KEYS+1];
new KeyListelemeTip[MAX_PLAYERS][MAX_HOUSE_KEYS+1];
new AjansListeleme[MAX_PLAYERS][16];
new ParkedilenAraclar[MAX_PLAYERS][60];
new AracCekiyor[MAX_PLAYERS];
new PlayerText:adminduty[MAX_PLAYERS];
new PlayerText:helperduty[MAX_PLAYERS];
new PlayerText:godduty[MAX_PLAYERS];
new Float:VehicleLastCoords[MAX_VEHICLES][3];

new PlayerText:AracHUD[MAX_PLAYERS][5];

new Iterator:CCTVIter<MAX_CCTV>;
new Iterator:CekilisKatilimcilar[MAX_BIRLIK]<300>;
new Text:carMDC[MAX_VEHICLES][5];
new timerMDC[MAX_VEHICLES];
new bool:vehRadar[MAX_VEHICLES];
new vehRadarLimit[MAX_VEHICLES];
new EMSKabul[MAX_PLAYERS];
new PlayerText:HapisTD[MAX_PLAYERS];
new vergitime = 0;
new walktime[MAX_PLAYERS];
new Float:specPos[MAX_PLAYERS][3];
new
	UsingPumpID[MAX_PLAYERS] = {-1, ...},
	RefuelTimer[MAX_PLAYERS] = {-1, ...},
	Float:FuelBought[MAX_PLAYERS];

new AracYuk[MAX_VEHICLES];
new AracCP[MAX_VEHICLES];

new MeslekCP[MAX_PLAYERS];


new Text3D: NameTag[MAX_PLAYERS];
new Text3D: Rozet[MAX_PLAYERS];

new AracRespawnTimer[MAX_VEHICLES];
new Harfler[][] ={"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"};

new const Float:KamyoncuCP[][] = {
	{2228.2339,-2629.5271,13.8342},
	{2228.4280,-2531.8545,13.8048},
	{2201.4536,-2492.8625,13.8572},
	{2176.9192,-2480.7263,13.8119},
	{2193.5913,-2392.6721,13.8120},
	{2318.7632,-2259.1211,13.8119},
	{2494.7539,-2172.9131,13.8489},
	{2713.6196,-2173.0166,11.3667},
	{2831.7568,-2100.2991,11.3659},
	{2840.5540,-1912.5792,11.3742},
	{2898.5815,-1599.7433,11.3105},
	{2904.2808,-1255.5166,11.3117},
	{2899.2761, -666.3978,11.2738},
	{2750.9995,-369.7902,25.3942},
	{2758.6624,-162.8305,32.8053},
	{2776.2361,179.7258,20.7562},
	{2584.4829,321.9626,28.3470},
	{2441.2246,329.3220,32.9299},
	{2299.2166,334.8299,33.1065},
	{2333.3291,385.7862,27.2680},
	{2341.7451,253.0041,26.7729},
	{2322.6448,216.6518,26.4624},
	{2073.0813,254.9289,24.7374},
	{1977.8964,353.8431,25.2841},
	{1754.2161,388.9669,19.9847},
	{1241.8773,517.4143,20.3210},
	{851.4498,349.1355,20.3265},
	{625.6870,315.8381,20.3424},
	{598.1831,367.3200,19.3666},
	{375.3819,672.0900,12.2588},
	{252.9019,916.6117,25.1352},
	{243.7129,974.8514,28.6319},
	{357.8513,1008.3330,29.0042},
	{369.7576,959.3511,28.1705},
	{372.1660,870.9702,20.8428},
	{379.7599,986.1159,30.0649},
	{321.4233,1005.3398,28.7815},
	{228.2411,958.2357,28.4530},
	{455.3981,560.5348,19.3536},
	{582.3673,378.1483,19.3664},
	{637.3568,306.7249,20.3207},
	{965.2622,387.2213,20.3197},
	{1070.1218,552.4399,20.3190},
	{1373.6045,444.8365,20.3059},
	{1723.4396,382.9993,20.2205},
	{1974.2020,349.4459,24.8054},
	{2078.0266,248.6019,23.9968},
	{2347.3599,234.4625,26.7722},
	{2367.0049,280.7308,27.0708},
	{2596.5740,299.2724,34.1414},
	{2757.9021,133.7666,21.9505},
	{2749.5432,-89.5900,35.5404},
	{2760.3154,-413.8541,23.7922},
	{2872.7268,-720.2823,11.2729},
	{2872.1135,-1205.3190,11.3191},
	{2866.3943,-1621.8361,11.3122},
	{2820.5420,-1985.3038,11.3734},
	{2565.7192,-2152.8359,13.4352},
	{2236.6895,-2314.7891,13.8119},
	{2166.2292,-2498.1587,13.8118},
	{2222.2388,-2508.0510,13.8212},
	{2222.9700,-2621.3020,13.8481}
};

new const Float:EhliyetCP[][] = {
	{2084.1077,-1908.9332,13.2578},
	{2084.5288,-1797.6880,13.2598},
	{2115.2310,-1626.9464,21.3835},
	{2115.3118,-1519.5063,23.5479},
	{2092.6084,-1458.4644,23.6608},
	{1955.8335,-1458.1879,13.2594},
	{1825.9026,-1458.2108,13.2417},
	{1698.1720,-1437.7385,13.2554},
	{1510.0217,-1438.6819,13.2579},
	{1427.4281,-1438.3937,13.2595},
	{1402.6311,-1392.6240,13.2579},
	{1340.0104,-1425.7045,13.2579},
	{1310.9464,-1510.0569,13.2627},
	{1295.6052,-1615.2964,13.2579},
	{1295.2092,-1783.5271,13.2579},
	{1312.0317,-1854.0789,13.2578},
	{1487.6927,-1874.5087,13.2575},
	{1648.2369,-1874.1407,13.2579},
	{1708.3229,-1814.2795,13.2376},
	{1802.4403,-1834.4406,13.2627},
	{1819.4551,-1871.6906,13.2891},
	{1860.3688,-1934.6678,13.2554},
	{1999.2208,-1934.5435,13.2089},
	{2064.0466,-1941.3208,13.2400}
};

new EhliyetAracCP[MAX_VEHICLES];

/************************************************/

enum OtobusData
{
	Otobus_ID,
	Float:OtobusPosX,
	Float:OtobusPosY,
	Float:OtobusPosZ,
	bool:Otobus_Durak
};

#define OtobusX 2098.09
#define OtobusY -1788.78
#define OtobusZ 13.55


new OtobusCP[][OtobusData] =
{
	//{0, 2097.9980,-1788.9056,13.5538, false},
	{1, 1909.91,-1597.41,14.31, false},
	{2, 1972.25,-1633.99,15.97, false},
	{3, 2012.28,-1656.40,13.55, false},
	{4, 2067.75,-1731.42,13.88, false},
	{5, 2122.20,-1742.89,13.55, false},
	{6, 2331.69,-1681.10,13.92, false},
	{7, 2281.38,-1643.29,15.25, false},
	{8, 2167.59,-1671.64,15.08, false},
	{9, 2098.06,-1788.93,13.55, false}
};

new OtobusAracCP[MAX_VEHICLES];

/************************************************/

#define TircilikX 2220.7766
#define TircilikY -2666.3394
#define TircilikZ 13.5409

enum TirciData
{
	Tirci_ID,
	Float:TirciX,
	Float:TirciY,
	Float:TirciZ,
	Tirci_Deger
};

new TirCheckpoint[][TirciData] =
{
	{0, 2300.0583,-2365.5566,14.3746, 0},
	{1, 2317.8152,-2332.6753,14.4020, 0},
	{2, 2294.6921,-2283.7356,14.3962, 0},
	{3, 2375.5820,-2205.4370,14.3928, 0},
	{4, 2532.6050,-2172.4453,14.3529, 0},
	{5, 2706.5190,-2172.7529,11.9489, 0},
	{6, 2840.5535,-1996.9087,11.9570, 0},
	{7, 2863.6255,-1717.2380,11.9008, 0},
	{8, 2925.3591,-1493.2064,11.8944, 0},
	{9, 2901.4924,-1237.9292,11.8951, 0},
	{10, 2892.4365,-1004.2118,11.8947, 0},
	{11, 2897.9519,-705.3826,11.8570, 0},
	{12, 2877.3235,-520.3942,15.4791, 0},
	{13, 2748.4915,-366.1269,26.1581, 0},
	{14, 2728.6941,-250.0282,29.2043, 0},
	{15, 2774.8525,0.0266,36.0581, 0},
	{16, 2768.7375,223.8046,21.2853, 0},
	{17, 2490.1150,321.4969,31.5920, 0},
	{18, 2342.4172,328.6472,33.6828, 0},
	{19, 2278.4395,347.8638,33.7095, 0},
	{20, 2341.3625,347.8564,27.3735, 0},
	{21, 2322.5081,215.9597,27.0318, 0},
	{22, 2095.3582,252.2182,21.7286, 0},
	{23, 2030.0591,308.7093,27.9720, 0},
	{24, 1924.5345,356.5601,21.6172, 0},
	{25, 1639.6213,384.3568,20.8154, 0},
	{26, 1399.6028,436.4738,20.8997, 0},
	{27, 1180.1156,548.2399,20.9013, 0},
	{28, 1046.6150,532.9732,20.9023, 0},
	{29, 956.4698,388.7555,20.9073, 0},
	{30, 670.1312,315.6372,20.9038, 0},
	{31, 526.3243,250.6129,15.7737, 0},
	{32, 239.1591,53.9091,3.4811, 0},
	{33, -23.1886,177.2337,3.1009, 0},
	{34, -190.1257,238.4884,13.0297, 0},
	{35, -438.5996,284.1133,3.1032, 0},
	{36, -639.2526,271.7180,3.0992, 0},
	{37, -776.9931,171.5175,5.2148, 0},
	{38, -727.1702,111.9370,16.0937, 0},
	{39, -707.1425,32.7436,34.9799, 0},
	{40, -886.3401,-25.6880,34.3253, 0},
	{41, -731.3472,-5.0207,57.2272, 0},
	{42, -686.4803,-36.8992,71.3956, 0},
	{43, -876.1467,-128.9847,59.6497, 0},
	{44, -951.8159,-244.6945,38.7245, 0},
	{45, -1040.6490,-448.4758,36.9786, 0},
	{46, -1181.5216,-678.5141,50.4770, 0},
	{47, -1280.3459,-796.6709,70.3432, 0},
	{48, -1549.8844,-809.8951,54.5577, 0},
	{49, -1757.8539,-643.8329,19.9222, 0},
	{50, -1788.6946,-577.4257,17.3161, 0},
	{51, -1816.5371,-552.7521,17.0032, 0},
	{52, -1807.5341,-380.1896,18.7585, 0},
	{53, -1797.0291,-213.6264,17.9491, 0},
	{54, -1766.9023,-118.4572,4.6172, 0},
	{55, -1736.6946,-42.0143,4.5731, 0},

	{56, -1603.1508,51.6397,4.5730, 1},

	{57, -1666.7487,9.4440,4.5808, 0},
	{58, -1723.5912,-29.7951,4.5870, 0},
	{59, -1751.6316,-86.8644,4.5724, 0},
	{60, -1785.1654,-113.8878,6.0445, 0},
	{61, -1802.2408,-142.3780,7.3612, 0},
	{62, -1813.7227,-391.0642,17.9215, 0},
	{63, -1821.6390,-554.8946,17.0720, 0},
	{64, -1783.3706,-583.5837,17.3638, 0},
	{65, -1763.5787,-628.7078,18.5165, 0},
	{66, -1673.5844,-771.2073,43.0138, 0},
	{67, -1402.6235,-820.3255,82.4262, 0},
	{68, -1171.3267,-665.7290,47.3376, 0},
	{69, -1103.7345,-502.0333,33.3478, 0},
	{70, -966.2605,-353.6579,37.1464, 0},
	{71, -936.5840,-200.9653,42.8135, 0},
	{72, -706.9041,-66.4110,70.6003, 0},
	{73, -745.8486,-4.9921,54.4853, 0},
	{74, -858.8449,-45.1644,41.7351, 0},
	{75, -786.0406,15.7615,34.3307, 0},
	{76, -665.6688,66.2439,30.4543, 0},
	{77, -728.7685,117.2390,16.1009, 0},
	{78, -746.3333,200.9355,3.5528, 0},
	{79, -521.9609,281.2970,3.0975, 0},
	{80, -291.8189,258.8541,5.8810, 0},
	{81, -155.6519,222.9881,10.6583, 0},
	{82, 109.5619,90.3332,3.1002, 0},
	{83, 265.0513,49.7628,3.1131, 0},
	{84, 497.2043,217.6244,13.6525, 0},
	{85, 657.5763,308.5949,20.9029, 0},
	{86, 935.5549,371.1489,20.9004, 0},
	{87, 1036.9768,499.5271,20.9009, 0},
	{88, 1197.4467,534.2026,20.9024, 0},
	{89, 1531.6925,384.2696,20.9025, 0},
	{90, 1857.1381,363.1436,20.6044, 0},
	{91, 2007.3956,332.9671,29.2198, 0},
	{92, 2055.9238,257.8054,26.2130, 0},
	{93, 2272.6721,211.5998,20.8784, 0},
	{94, 2346.5923,247.3749,27.3535, 0},
	{95, 2406.5146,290.0473,32.6939, 0},
	{96, 2584.9717,295.8464,33.3193, 0},
	{97, 2706.5745,273.9231,38.9286, 0},
	{98, 2756.4976,83.1126,26.7050, 0},
	{99, 2702.4331,-250.2357,30.7208, 0},
	{100, 2872.8796,-712.4454,11.8556, 0},
	{101, 2865.7246,-1100.1636,11.9023, 0},
	{102, 2900.3044,-1497.5983,11.8949, 0},
	{103, 2820.7986,-1861.7852,11.9838, 0},
	{104, 2820.9561,-2043.6825,11.9554, 0},
	{105, 2660.7349,-2153.9873,11.9395, 0},
	{106, 2406.2246,-2165.3481,14.3921, 0},
	{107, 2243.6914,-2306.9370,14.3951, 0},
	{108, 2157.5698,-2459.4133,14.3916, 0},
	{109, 2165.4583,-2494.8142,14.3866, 0},
	{110, 2225.4265,-2490.0596,14.3906, 0},
	{111, 2244.6362,-2420.5652,14.4442, 0},

	{112, 2306.8098,-2380.1912,14.5644, 1}
};

new TirciYuk[MAX_VEHICLES];
new Dorse[MAX_PLAYERS];

/************************************************/

#define BenzinlikX 270.3441
#define BenzinlikY 1423.6077
#define BenzinlikZ 10.5859

enum BenzinlikData
{
	Float:BenzinX,
	Float:BenzinY,
	Float:BenzinZ,
	Benzin_Durum
};

new BenzinlikCheckpoint[][BenzinlikData] =
{
	{304.2611,1407.3945,9.1655, 0},
	{343.5543,1401.3259,6.6937, 0},
	{289.2606,1254.5234,14.9779, 0},
	{182.1352,1131.1055,14.6112, 0},
	{228.5705,956.4364,27.9663, 0},
	{269.5628,839.2468,18.3980, 0}, // 6
	{233.6702,768.5726,6.1797, 0}, // 7
	{144.5675,719.9549,6.1951, 0}, // 8
	{-3.6115,634.4021,8.8881, 0}, // 9
	{-247.5585,576.4882,15.7454, 0}, // 10
	{-451.1196,591.5338,17.1900, 0}, // 11
	{-671.0628,681.1381,16.6513, 0}, // 12
	{-826.8737,822.0189,18.7047, 0}, // 13
	{-846.3521,1012.8203,24.6138, 0}, // 14
	{-881.3189,1159.1228,29.1761, 0}, // 15
	{-886.6227,1293.3693,35.3875, 0}, // 16
	{-1078.2225,1216.0183,39.4059, 0}, // 17
	{-1149.3823,1105.4604,38.3814, 0}, // 18
	{-1340.8214,903.5708,46.2733, 0}, // 19
	{-1619.8936,608.0722,40.8568, 0}, // 20
	{-1762.0192,477.3627,35.8514, 0}, // 21
	{-1823.6670,380.3729,16.7393, 0}, // 22
	{-1741.6425,307.5975,6.7583, 0},
	{-1692.4164,367.4977,6.7583, 0}, // 24
	{-1673.5533,414.9706,6.9068, 1}, // 25 benzin birakma noktasi benzin bosaltiliyor yazsin ekranin ortasinda(10 saniye freezelensin) ve kisi 375$ versin ardindan geri dönüs noktalari gelsin benzin bosaltilinca
	{-1638.4429,427.6110,6.7813, 0}, // 26
	{-1662.3638,394.2417,6.7583, 0},// 27
	{-1721.9039,335.2151,6.7583, 0}, // 28
	{-1788.9600,355.5833,16.3985, 0}, // 29
	{-1786.9495,391.0656,17.2022, 0}, // 30
	{-1700.4856,490.4435,37.9800, 0}, // 31
	{-1527.4038,676.7751,44.4406, 0}, // 32
	{-1340.5659,874.4394,46.5119, 0}, // 33
	{-1156.2869,1068.3655,39.7034, 0}, // 34
	{-1062.6476,1169.2258,38.4014, 0}, // 35
	{-982.0383,1134.0154,30.4033, 0}, // 36
	{-907.1122,932.6288,18.4101, 0}, // 37
	{-730.3460,685.5203,17.2096, 0}, // 38
	{-490.3193,578.3218,16.5885, 0}, // 39
	{-240.9598,550.2591,15.7586, 0}, // 40
	{66.4898,646.1534,6.0401, 0}, // 41
	{233.1940,722.5233,6.0578, 0}, // 42
	{340.7895,700.5938,8.2517, 0}, // 43
	{337.7086,732.5682,9.5315, 0}, // 44
	{261.2856,896.8509,22.5991, 0}, // 45
	{209.7798,1019.0688,25.0353, 0}, // 46
	{195.9991,1155.8545,14.4677, 0}, // 47
	{331.7010,1336.5107,8.9976, 0}, // 48
	{335.2443,1413.4310,6.5271, 0}, // 449
	{244.4521,1418.0536,10.2936, 2} // 50 bitis noktasi kisiye 375$ versin ve chat ekranina benzin tasimaciligi meslegini bitirdin kazancin 375$ gibisinden mesaj versin
};

new BenzinlikYuk[MAX_VEHICLES];


/************************************************/

new stock g_arrVehicleNames[][] = {
    "Landstalker", "Bravura", "Buffalo", "Linerunner", "Perrenial", "Sentinel", "Dumper", "Firetruck", "Trashmaster",
    "Stretch", "Manana", "Infernus", "Voodoo", "Pony", "Mule", "Cheetah", "Ambulance", "Leviathan", "Moonbeam",
    "Esperanto", "Taxi", "Washington", "Bobcat", "Whoopee", "BF Injection", "Hunter", "Premier", "Enforcer",
    "Securicar", "Banshee", "Predator", "Bus", "Rhino", "Barracks", "Hotknife", "Trailer", "Previon", "Coach",
    "Cabbie", "Stallion", "Rumpo", "RC Bandit", "Romero", "Packer", "Monster", "Admiral", "Squalo", "Seasparrow",
    "Pizzaboy", "Tram", "Trailer", "Turismo", "Speeder", "Reefer", "Tropic", "Flatbed", "Yankee", "Caddy", "Solair",
    "Berkley's RC Van", "Skimmer", "PCJ-600", "Faggio", "Freeway", "RC Baron", "RC Raider", "Glendale", "Oceanic",
    "Sanchez", "Sparrow", "Patriot", "Quad", "Coastguard", "Dinghy", "Hermes", "Sabre", "Rustler", "ZR-350", "Walton",
    "Regina", "Comet", "BMX", "Burrito", "Camper", "Marquis", "Baggage", "Dozer", "Maverick", "News Chopper", "Rancher",
    "FBI Rancher", "Virgo", "Greenwood", "Jetmax", "Hotring", "Sandking", "Blista Compact", "Police Maverick",
    "Boxville", "Benson", "Mesa", "RC Goblin", "Hotring Racer A", "Hotring Racer B", "Bloodring Banger", "Rancher",
    "Super GT", "Elegant", "Journey", "Bike", "Mountain Bike", "Beagle", "Cropduster", "Stunt", "Tanker", "Roadtrain",
    "Nebula", "Majestic", "Buccaneer", "Shamal", "Hydra", "FCR-900", "NRG-500", "HPV1000", "Cement Truck", "Tow Truck",
    "Fortune", "Cadrona", "SWAT Truck", "Willard", "Forklift", "Tractor", "Combine", "Feltzer", "Remington", "Slamvan",
    "Blade", "Streak", "Freight", "Vortex", "Vincent", "Bullet", "Clover", "Sadler", "Firetruck", "Hustler", "Intruder",
    "Primo", "Cargobob", "Tampa", "Sunrise", "Merit", "Utility", "Nevada", "Yosemite", "Windsor", "Monster", "Monster",
    "Uranus", "Jester", "Sultan", "Stratum", "Elegy", "Raindance", "RC Tiger", "Flash", "Tahoma", "Savanna", "Bandito",
    "Freight Flat", "Streak Carriage", "Kart", "Mower", "Dune", "Sweeper", "Broadway", "Tornado", "AT-400", "DFT-30",
    "Huntley", "Stafford", "BF-400", "News Van", "Tug", "Trailer", "Emperor", "Wayfarer", "Euros", "Hotdog", "Club",
    "Freight Box", "Trailer", "Andromada", "Dodo", "RC Cam", "Launch", "LSPD Car", "SFPD Car", "LVPD Car",
    "Police Rancher", "Picador", "S.W.A.T", "Alpha", "Phoenix", "Glendale", "Sadler", "Luggage", "Luggage", "Stairs",
    "Boxville", "Tiller", "Utility Trailer"
};
new g_aMaleSkins[185] =
{
	2, 3, 4, 5, 6, 7, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 32, 33, 34, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 60,
	61, 62, 66, 68, 72, 73, 78, 79, 80, 81, 82, 83, 84, 94, 95, 96, 97, 98, 99, 100, 101, 102,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 132, 133, 134, 135, 136, 137, 142, 143, 144, 146,
	147, 153, 154, 155, 156, 158, 159, 160, 161, 162, 167, 168, 170, 171, 173, 174, 175, 176,
	177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 200, 202, 203, 204, 206,
	208, 209, 210, 212, 213, 217, 220, 221, 222, 223, 228, 229, 230, 234, 235, 236, 239, 240,
	241, 242, 247, 248, 249, 250, 253, 254, 255, 258, 259, 260, 261, 262, 268, 272, 273, 289,
	290, 291, 292, 293, 294, 295, 296, 297, 299
};

new g_aFemaleSkins[73] =
{
   9, 10, 11, 12, 13, 38, 39, 40 , 41, 54, 55, 56,63, 64, 69, 75, 76, 77, 75, 87, 89, 90, 91,237, 238, 243, 244, 245,
   92, 93, 129, 130, 131, 138, 139, 140, 141, 145, 148, 150, 151, 152, 157, 169, 178, 190, 191,246, 251, 256, 257, 263,
   192, 193, 194, 195, 196, 197, 198, 199, 201, 211, 214, 216, 219, 224, 225, 226, 231, 232, 233, 298, 304,
    };

new OzelErkekKiyafetler[32] =
{
    20012, 20013, 20014, 20015, 20016, 20017, 20018, 20019, 20020, 20021, 20022, 20023, 20024, 20025, 20026, 20027, 20028
    , 20029, 20045, 20046, 20047, 20048, 20049, 20051, 20052, 20053, 20054, 20055, 20056, 20057, 20058, 20058
	};

new OzelBayanKiyafetler[15] =
{
	20030, 20031, 20032, 20033, 20034, 20035, 20036, 20037, 20038, 20039, 20040, 20041, 20042, 20043, 20044
};

new PolisSkinler[47] =
{
	20060, 20061, 20062, 20063, 20064, 20065, 20066, 20067, 20068, 20069, 20070, 20071, 20072, 20073, 20074, 20075, 20076, 20077, 20078
	, 20079, 20080, 20081, 20082, 20083, 20084, 20085, 20086, 20087, 20088, 20089, 20090, 20091, 20092, 20093, 20094, 20095, 20096, 20097
	, 20098, 20099, 200100, 200101, 200102, 200103, 200104, 200105, 200106
};

new SerifSkinler[2] =
{
	282, 283
};

new DoktorSkinler[8] =
{
	276, 275, 274, 308, 277, 278, 279, 70,
};

new ModName[][64] = {
{"Pro Spoiler"},                                    //1000
{"Win Spoiler"},                                    //1001
{"Drag Spoiler"},                                   //1002
{"Alpha Spoiler"},                                  //1003
{"Champ Scoop Hood"},                               //1004
{"Fury Scoop Hood"},                                //1005
{"Roof Scoop"},                                     //1006
{"Right Sideskirt"},                                //1007
{"5x Nitro"},                                       //1008
{"2x Nitro"},                                       //1009
{"10x Nitro"},                                      //1010
{"Race Scoop Hood"},                                //1011
{"Worx Scoop Hood"},                                //1012
{"Round Fog Lamps"},                                //1013
{"Champ Spoiler"},                                  //1014
{"Race Spoiler"},                                   //1015
{"Worx Spoiler"},                                   //1016
{"Left Sideskirt"},                                 //1017
{"Upswept Exhaust"},                                //1018
{"Twin Exhaust"},                                   //1019
{"Large Exhaust"},                                  //1020
{"Medium Exhaust"},                                 //1021
{"Small Exhaust"},                                  //1022
{"Fury Spoiler"},                                   //1023
{"Square Fog Lamps"},                               //1024
{"Offroad Wheels"},                                 //1025
{"Right Alien Sideskirt 'Sultan'"},                 //1026
{"Left Alien Sideskirt 'Sultan'"},                  //1027
{"Alien Exhaust 'Sultan'"},                         //1028
{"X-Flow Exhaust 'Sultan'"},                        //1029
{"Left X-Flow Sideskirt 'Sultan'"},                 //1030
{"Right X-Flow Sideskirt 'Sultan'"},                //1031
{"Alien Roof Vent 'Sultan'"},                       //1032
{"X-Flow Roof Vent 'Sultan'"},                      //1033
{"Alien Exhaust 'Elegy'"},                          //1034
{"X-Flow Roof Vent 'Elegy'"},                       //1035
{"Right Alien Sideskirt 'Elegy'"},                  //1036
{"X-Flow Exhaust 'Elegy'"},                         //1037
{"Alien Roof Vent 'Elegy'"},                        //1038
{"Right X-Flow Sideskirt 'Elegy'"},                 //1039
{"Left Alien Sideskirt 'Elegy'"},                   //1040
{"Right X-Flow Sideskirt 'Elegy'"},                 //1041
{"Right Chrome Sideskirt 'Broadway'"},              //1042
{"Slamin Exhaust 'Broadway'"},                      //1043
{"Chrome Exhaust 'Broadway'"},                      //1044
{"X-Flow Exhaust 'Flash'"},                         //1045
{"Alien Exhaust 'Flash'"},                          //1046
{"Right Alien Sideskirt 'Flash'"},                  //1047
{"Right X-Flow Sideskirt 'Flash'"},                 //1048
{"Alien Spoiler 'Flash'"},                          //1049
{"X-Flow Spoiler 'Flash'"},                         //1050
{"Left Alien Sideskirt 'Flash'"},                   //1051
{"Left X-Flow Sideskirt 'Flash'"},                  //1052
{"X-Flow Roof 'Flash'"},                            //1053
{"Alien Roof 'Flash'"},                             //1054
{"Alien Roof 'Stratum'"},                           //1055
{"Right Alien Sideskirt 'Stratum'"},                //1056
{"Right X-Flow Sideskirt 'Stratum'"},               //1057
{"Alien Spoiler 'Stratum'"},                        //1058
{"X-Flow Exhaust 'Stratum'"},                       //1059
{"X-Flow Spoiler 'Stratum'"},                       //1060
{"X-Flow Roof 'Stratum'"},                          //1061
{"Left Alien Sideskirt 'Stratum'"},                 //1062
{"Left X-Flow Sideskirt 'Stratum'"},                //1063
{"Alien Exhaust 'Stratum'"},                        //1064
{"Alien Exhaust 'Jester'"},
{"X-Flow Exhaust 'Jester'"},
{"Alien Roof 'Jester'"},
{"X-Flow Roof 'Jester'"},
{"Right Alien Sideskirt 'Jester'"},
{"Right X-Flow Sideskirt 'Jester'"},                //1070
{"Left Alien Sideskirt 'Jester'"},
{"Left X-Flow Sideskirt 'Jester'"},
{"Shadow Wheels"},
{"Mega Wheels"},
{"Rimshine Wheels"},
{"Wires Wheels"},
{"Classic Wheels"},
{"Twist Wheels"},
{"Cutter Wheels"},
{"Switch Wheels"},                                  //1080
{"Grove Wheels"},
{"Import Wheels"},
{"Dollar Wheels"},
{"Trance Wheels"},
{"Atomic Wheels"},
{"Stereo Sound"},
{"Hydraulics"},
{"Alien Roof 'Uranus'"},
{"X-Flow Exhaust 'Uranus'"},
{"Right Alien Sideskirt 'Uranus'"},                 //1090
{"X-Flow Roof 'Uranus'"},
{"Alien Exhaust 'Uranus'"},
{"Right X-Flow Sideskirt 'Uranus'"},
{"Left Alien Sideskirt 'Uranus'"},
{"Right X-Flow Sideskirt 'Uranus'"},
{"Ahab Wheels"},
{"Virtual Wheels"},
{"Access Wheels"},
{"Left Chrome Sideskirt 'Broadway'"},
{"Chrome Grill Bullbar 'Remington'"},               //1100
{"Left 'Chrome Flames' Sideskirt 'Remington'"},
{"Left 'Chrome Strip' Sideskirt 'Savanna'"},
{"Corvetible Roof 'Blade'"},
{"Chrome Exhaust 'Blade'"},
{"Slamin Exhaust 'Blade'"},
{"Right 'Chrome Arches' Sideskirt 'Remington'"},
{"Left 'Chrome Strip' Sideskirt 'Blade'"},
{"Right 'Chrome Strip' Sideskirt 'Blade'"},
{"Chrome Rear Bullbars 'Slamvan'"},
{"Slamin Rear Bullbars 'Slamvan'"},                 //1110
{"Little Front Sign? 'Slamvan'"},
{"Little Front Sign? 'Slamvan'"},
{"Chrome Exhaust 'Slamvan'"},
{"Slamin Exhaust 'Slamvan'"},
{"Chrome Front Bullbars 'Slamvan'"},
{"Slamin Front Bullbars 'Slamvan'"},
{"Chrome Front Bumper 'Slamvan'"},
{"Right 'Chrome Trim' Sideskirt 'Slamvan'"},
{"Right 'Wheelcovers' Sideskirt 'Slamvan'"},
{"Left 'Chrome Trim' Sideskirt 'Slamvan'"},         //1120
{"Left 'Wheelcovers' Sideskirt 'Slamvan'"},
{"Right 'Chrome Flames' Sideskirt 'Remington'"},
{"Bullbar Chrome Bars 'Remington'"},
{"Left 'Chrome Arches' Sideskirt 'Remington'"},
{"Bullbar Chrome Lights 'Remongton'"},
{"Chrome Exhaust 'Remington'"},
{"Slamin Exhaust 'Remington'"},
{"Vinyl Hardtop 'Blade'"},
{"Chrome Exhaust 'Savanna'"},
{"Hardtop Roof 'Savanna'"},                         //1130
{"Softtop Roof 'Savanna'"},
{"Slamin Exhaust 'Savanna'"},
{"Right 'Chrome Strip' Sideskirt 'Savanna'"},
{"Right 'Chrome Strip' Sideskirt 'Tornado'"},
{"Slamin Exhaust 'Tornado'"},
{"Chrome Exhaust 'Tornado'"},
{"Left 'Chrome Strip' Sideskirt 'Tornado'"},
{"Alien Spoiler 'Sultan'"},
{"X-Flow Spoiler 'Sultan'"},
{"X-Flow Rear Bumper 'Sultan'"},                    //1140
{"Alien Rear Bumper 'Sultan'"},
{"Left Oval Vents"},
{"Right Oval Vents"},
{"Left Square Vents"},
{"Right Square Vents"},
{"X-Flow Spoiler 'Elegy'"},
{"Alien Spoiler 'Elegy'"},
{"X-Flow Rear Bumper 'Elegy'"},
{"Alien Rear Bumper 'Elegy'"},
{"Alien Rear Bumper 'Flash'"},                      //1150
{"X-Flow Rear Bumper 'Flash'"},
{"X-Flow Front Bumper 'Flash'"},
{"Alien Front Bumper 'Flash'"},
{"Alien Rear Bumper 'Stratum'"},
{"Alien Front Bumper 'Stratum'"},
{"X-Flow Rear Bumper 'Stratum'"},
{"X-Flow Front Bumper 'Stratum'"},
{"X-Flow Spoiler 'Jester'"},
{"Alien Rear Bumper 'Jester'"},
{"Alien Front Bumper 'Jester'"},                    //1160
{"X-Flow Rear Bumper 'Jester'"},
{"Alien Spoiler 'Jester'"},
{"X-Flow Spoiler 'Uranus'"},
{"Alien Spoiler 'Uranus'"},
{"X-Flow Front Bumper 'Uranus'"},
{"Alien Front Bumper 'Uranus'"},
{"X-Flow Rear Bumper 'Uranus'"},
{"Alien Rear Bumper 'Uranus'"},
{"Alien Front Bumper 'Sultan'"},
{"X-Flow Front Bumper 'Sultan'"},                   //1170
{"Alien Front Bumper 'Elegy'"},
{"X-Flow Front Bumper 'Elegy'"},
{"X-Flow Front Bumper 'Jester'"},
{"Chrome Front Bumper 'Broadway'"},
{"Slamin Front Bumper 'Broadway'"},
{"Chrome Rear Bumper 'Broadway'"},
{"Slamin Rear Bumper 'Broadway'"},
{"Slamin Rear Bumper 'Remington'"},
{"Chrome Front Bumper 'Remington'"},
{"Chrome Rear Bumper 'Remington'"},                 //1180
{"Slamin Front Bumper 'Blade'"},
{"Chrome Front Bumper 'Blade'"},
{"Slamin Rear Bumper 'Blade'"},
{"Chrome Rear Bumper 'Blade'"},
{"Slamin Front Bumper 'Remington'"},
{"Slamin Rear Bumper 'Savanna'"},
{"Chrome Rear Bumper 'Savanna'"},
{"Slamin Front Bumper 'Savanna'"},
{"Chrome Front Bumper 'Savanna'"},
{"Slamin Front Bumper 'Tornado'"},                  //1190
{"Chrome Front Bumper 'Tornado'"},
{"Chrome Rear Bumper 'Tornado'"},
{"Slamin Rear Bumper 'Tornado'"}
};
// -----------------------------------------------------------------------------------
#define COLOR_FADE1 0xFFFFFFFF
#define COLOR_FADE2 0xC8C8C8C8
#define COLOR_FADE3 0xAAAAAAAA
#define COLOR_FADE4 0x8C8C8C8C
#define COLOR_FADE5 0x6E6E6E6E

#define COLOR_GREY 0xAFAFAFAA
#define COLOR_DEPARTMENT  (0xF0CC00FF)
#define COLOR_GREEN 0x33AA33AA
#define COLOR_LIGHTGREEN  (0x9ACD32FF)
#define COLOR_RED 0xAA3333AA
#define COLOR_WHITE 0xFFFFFFAA
#define COLOR_BLUE 0x0000BBAA
#define COLOR_LIGHTBLUE 0x33CCFFAA
#define COLOR_ORANGE 0xFF9900AA
#define COLOR_RED 0xAA3333AA
#define COLOR_LIME 0x10F441AA
#define COLOR_MAGENTA 0xFF00FFFF
#define COLOR_NAVY 0x000080AA
#define COLOR_AQUA 0xF0F8FFAA
#define COLOR_CRIMSON 0xDC143CAA
#define COLOR_RADIO       (0x8D8DFFFF)
#define COLOR_PURPLE      (0xD0AEEBFF)
#define COLOR_FLBLUE 0x6495EDAA
#define COLOR_BISQUE 0xFFE4C4AA
#define COLOR_BLACK 0x000000AA
#define COLOR_CHARTREUSE 0x7FFF00AA
#define COLOR_BROWN 0XA52A2AAA
#define COLOR_CORAL 0xFF7F50AA
#define COLOR_GOLD 0xB8860BAA
#define COLOR_GREENYELLOW 0xADFF2FAA
#define COLOR_INDIGO 0x4B00B0AA
#define COLOR_IVORY 0xFFFF82AA
#define COLOR_LAWNGREEN 0x7CFC00AA
#define COLOR_LIMEGREEN 0x32CD32AA
#define COLOR_MIDNIGHTBLUE 0X191970AA
#define COLOR_MAROON 0x800000AA
#define COLOR_OLIVE 0x808000AA
#define COLOR_ORANGERED   (0xFF4500AA)
#define COLOR_PINK        (0xFFC0CBAA)
#define COLOR_SEAGREEN 	  (0x2E8B57AA)
#define COLOR_SPRINGGREEN (0x00FF7FAA)
#define COLOR_LIGHTRED    (0xFF6347AA)
#define COLOR_ADMINCHATT   (0x33EE33FF)
#define COLOR_CLIENT      (0xAAC4E5FF)
#define COLOR_CYAN        (0xC2A2DAAA)
#define COLOR_ADMINCHAT   (0xAA3333AA)
#define COLOR_DEPARTMENT  (0xF0CC00FF)
#define COLOR_DARKBLUE    (0x1394BFFF)
#define COLOR_SARI      (0xF0F2A5)
#define COLOR_KOYUSARI (0xF5DEB3FF)
#define COLOR_MECHANIC (0x005A83FF)
#define COLOR_TURQUOISE (0x40E0D0FF)
#define COLOR_TAXI (0xB8860BFF)
#define COLOR_EMOTE (0xC2A2DAFF)
#define COLOR_ERROR (0xa52a2aff)
#define COLOR_ADMIN (0xFF6347FF)
#define COLOR_PURPLE (0xD0AEEBFF)
#define COLOR_HOUSE (0xE0EA64AA)
#define COLOR_BIZ (0x33CCFFFF)
#define COLOR_SENDPM (0xFFE536FF)
#define COLOR_RECEIVEPM (0xFCF545AA)
#define COLOR_LGREEN (0x33CC33FF)
#define COLOR_MODCHAT (0xE1A400FF)
#define COLOR_LIGHTGREEN (0x9ACD32FF)
#define COLOR_SUPPORTER (0xe9de98ff)
#define COLOR_SUPPORTERNICK (0xa52a2aff)
#define COLOR_SLATEBLUE (0x6A5ACDFF)
#define COLOR_BREEZEADMIN (0x62869dFF)
#define COLOR_RUFIOGREY (0x00FF00FF)
#define COLOR_YENI1 (0xBFC0C2FF)
#define COLOR_BRHELP (0x919FAFFF)
#define RENK_KULLANIM (0x007DFAFF)
#define RENK_LSPD (0x9999FFFF)
#define RENK_LSFD (0xFF8282FF)
#define COLOR_GREY1 (0xE6E6E6FF)
#define COLOR_GREY2  (0xC8C8C8FF)
#define COLOR_GREY3 (0xAAAAAAFF)
#define COLOR_GREY4 (0x8C8C8CFF)
#define COLOR_GREY5 (0x6E6E6EFF)
#define COLOR_GRAD1 (0xCCE6E6FF)
#define COLOR_GRAD2 (0xE2FFFFFF)
#define COLOR_ACIKMAVI (0x00FFFFFF)
#define COLOR_YELLOW (0xFFFF00AA)

main() {}

#pragma warning disable 239
#pragma warning disable 214
#pragma warning disable 217
#pragma warning disable 219
#pragma warning disable 203
#pragma warning disable 202
#pragma warning disable 215

public OnGameModeInit()
{
    AntiDeAMX();
    WasteDeAMXersTime();
    DisableInteriorEnterExits();
    EnableStuntBonusForAll(0);
    //ShowNameTags(1);
    SetNameTagDrawDistance(25.0);
    ShowPlayerMarkers(PLAYER_MARKERS_MODE_OFF);
    ManualVehicleEngineAndLights();
	KelepceciOlustur();
    //SetTimer("UpdateNametag", 500, true);
	CreateDynamic3DTextLabel("[Reklam Verme Alaný]\n{bebebe}/reklamver", -1, 1128.8870, -1488.9548, 22.7614, 10.0);
	CreateDynamicPickup(1239, 23, 1128.8870, -1488.9548, 22.7614);

	CreateDynamic3DTextLabel("[Araç Galerisi]\n{bebebe}/satinal", -1, 542.1227,-1292.7203,17.2422, 10.0);
	CreateDynamicPickup(2485, 23, 542.1227,-1292.7203,17.2422);

	actors[3] = CreateActor(30, MermiX, MermiY, MermiZ, MermiA);
	CreateDynamic3DTextLabel("{FF0A0A}Silah Satýcýsý\n{ffffff}[ALT]", -1, MermiX, MermiY, MermiZ, 10.0);

    FerrisWheelObjects[10]=CreateObject(18877,389.7734,-2028.4688,22,0,0,90,300);
	FerrisWheelObjects[11]=CreateObject(18878,389.7734,-2028.4688,22,0,0,90,300);

	for (new x = 0; x < (sizeof FerrisWheelObjects)-2; x++)
	{
		FerrisWheelObjects[x] = CreateObject(18879,389.7734,-2028.4688,22,0,0,90,300);
		AttachObjectToObject(FerrisWheelObjects[x], FerrisWheelObjects[10],gFerrisCageOffsets[x][0],gFerrisCageOffsets[x][1],gFerrisCageOffsets[x][2],0.0, 0.0, 90, 0 );
	}

	SetTimer("RotateFerrisWheel", FERRIS_WHEEL_WAIT_TIME, false);

	for (new playerid = 0; playerid < MAX_PLAYERS; playerid++)
	{
		RemoveBuildingForPlayer(playerid, 6463, 389.7734, -2028.4688, 19.8047, 0.5);
		RemoveBuildingForPlayer(playerid, 3751, 389.8750, -2035.3828, 29.9531, 50);
		RemoveBuildingForPlayer(playerid, 6298, 389.7734, -2028.4688, 19.8047, 0.5);
		RemoveBuildingForPlayer(playerid, 6461, 389.7734, -2028.5000, 20.1094, 0.5);
		RemoveBuildingForPlayer(playerid, 3752, 389.8750, -2028.5000, 32.2266, 50);
		RemoveBuildingForPlayer(playerid, 13759, 1413.4141, -804.7422, 83.4375, 0.25);
		RemoveBuildingForPlayer(playerid, 13722, 1413.4141, -804.7422, 83.4375, 0.25);
		RemoveBuildingForPlayer(playerid, 13831, 1413.4141, -804.7422, 83.4375, 0.25);
		//PlayerData[playerid][whitelist] = 1;
	}

    AddPlayerClass(0, 1958.33, 1343.12, 15.36, 269.15, 26, 36, 28, 150, 0, 0); // CJ
    AddPlayerClass(1, 1958.33, 1343.12, 15.36, 269.15, 26, 36, 28, 150, 0, 0); // The Truth

	SetGameModeText("v1.0.0-R1");

	g_SQL = mysql_connect(MYSQL_HOST,MYSQL_USER,MYSQL_PASS,MYSQL_BASE);

	BlockGarages(true, GARAGE_TYPE_PAINT, "KAPALI");

	SetVehiclePassengerDamage(true);
    SetDisableSyncBugs(true);
    SetDamageFeed(false);
    SetDamageSounds(0, 0);
    SetCustomArmourRules(true, true);
    SetWeaponArmourRule(22, true, true);
    SetWeaponArmourRule(24, true, true);
    SetWeaponArmourRule(25, true, true);
    SetWeaponArmourRule(27, true, true);
    SetWeaponArmourRule(28, true, true);
    SetWeaponArmourRule(29, true, true);
    SetWeaponArmourRule(30, true, true);
    SetWeaponArmourRule(31, true, true);
    SetWeaponArmourRule(32, true, true);
    SetWeaponArmourRule(34, true, true);
    KomutYukle();

	if (mysql_errno(g_SQL) == 0)
	{
	    print("MySQL ile baglanti basarili.");
	    mysql_set_charset("latin5");
	    mysql_set_charset("latin5");
	    mysql_set_charset("latin5");
	    mysql_log(ERROR);
	    mysql_tquery(g_SQL,	"CREATE TABLE IF NOT EXISTS `kuponlar` (`kod` varchar(20) NOT NULL, `para` int(11) NOT NULL)");

		SetTimer("MinuteUpdate",60000,true);
	    SetTimer("SecondUpdate",900,true);
		SetTimer("TarihUpdate",500,true);
	    SetTimer("ConsumeFuel", 500, true);

	    SetTimer("PetUpdate", 500, true);
	    SetTimer("YatUpdate", 1000, true);
		SetTimer("OnServerUpdate", 1000, true);
		SetTimer("EhliyetUpdate", 3000, true);
		SetTimer("AntiInvisible", 3000, true);

    	mysql_tquery(g_SQL, "SELECT * FROM `objeler`", "Objeleri_Yukle", "");
	}
	else
	{
	    print("MySQL ile baglanti basarisiz. Sunucu kapatiliyor...");
	    SendRconCommand("exit");
	}

    for (new i; i<MAX_TOHUM; i++)
    {
        Tohumlar[i][tohumArsa] = -1;
        Tohumlar[i][tohumTip] = 0;
        Tohumlar[i][tohumBuyume] = 0;
        Tohumlar[i][tohumSayi] = 0;
    }

	// ------------------------ TEXTDRAWLAR -----------------------------------

	Karanlik = TextDrawCreate(644.000000, 0.000000, "                                                                                                                             ");
	TextDrawBackgroundColor(Karanlik,255);
	TextDrawFont(Karanlik,1);
	TextDrawLetterSize(Karanlik, 0.500000, 1.000000);
	TextDrawColor(Karanlik, -1);
	TextDrawSetOutline(Karanlik,0);
	TextDrawSetProportional(Karanlik,1);
	TextDrawSetShadow(Karanlik,1);
	TextDrawUseBox(Karanlik,1);
	TextDrawBoxColor(Karanlik,255);
	TextDrawTextSize(Karanlik, -11.000000, 0.000000);

	GirisTD = TextDrawCreate(-1.250000, -1.333335, "mdl-2001:rainbg");
	TextDrawLetterSize(GirisTD, 0.000000, 0.000000);
	TextDrawTextSize(GirisTD, 651.000000, 452.000000);
	TextDrawAlignment(GirisTD, 1);
	TextDrawColor(GirisTD, -1);
	TextDrawSetShadow(GirisTD, 0);
	TextDrawSetOutline(GirisTD, 0);
	TextDrawBackgroundColor(GirisTD, 255);
	TextDrawFont(GirisTD, 4);
	TextDrawSetProportional(GirisTD, 0);
	TextDrawSetShadow(GirisTD, 0);

	// ------------------------------------------------------------------------

	TDEditor_TD[0] = TextDrawCreate(258.333465, 84.221939, "(YUKLendi)");
	TextDrawLetterSize(TDEditor_TD[0], 0.728332, 2.740739);
	TextDrawAlignment(TDEditor_TD[0], 1);
	TextDrawColor(TDEditor_TD[0], -1);
	TextDrawSetShadow(TDEditor_TD[0], 0);
	TextDrawSetOutline(TDEditor_TD[0], 1);
	TextDrawBackgroundColor(TDEditor_TD[0], 255);
	TextDrawFont(TDEditor_TD[0], 3);
	TextDrawSetProportional(TDEditor_TD[0], 1);
	TextDrawSetShadow(TDEditor_TD[0], 0);

	TDEditor_TD[1] = TextDrawCreate(238.000091, 84.221939, "(YUKLeniyor)");
	TextDrawLetterSize(TDEditor_TD[1], 0.728332, 2.740739);
	TextDrawAlignment(TDEditor_TD[1], 1);
	TextDrawColor(TDEditor_TD[1], -1);
	TextDrawSetShadow(TDEditor_TD[1], 0);
	TextDrawSetOutline(TDEditor_TD[1], 1);
	TextDrawBackgroundColor(TDEditor_TD[1], 255);
	TextDrawFont(TDEditor_TD[1], 3);
	TextDrawSetProportional(TDEditor_TD[1], 1);
	TextDrawSetShadow(TDEditor_TD[1], 0);

    for (new i; i < MAX_PLANTS; i++)
	{
		PlantData[i][plantObj] = PlantData[i][plantTimer] = -1;
		PlantData[i][plantLabel] = Text3D: -1;
	}

	for (new i; i < MAX_DEALERS; i++)
	{
	    DealerData[i][dealerActorID] = -1;
	    DealerData[i][dealerLabel] = Text3D: -1;
	}

	ArsaDB = db_open("arsa.db");
	db_query(ArsaDB, "CREATE TABLE IF NOT EXISTS arsalar (id INTEGER, sahip INTEGER, arsaX FLOAT, arsaY FLOAT, arsaZ FLOAT, tip INTEGER, fiyat INTEGER, KiraSure INTEGER, Metrekare INTEGER, MaxTohum INTEGER)");

	LoadArsa = db_prepare(ArsaDB, "SELECT * FROM arsalar");
	AddArsa = db_prepare(ArsaDB, "INSERT INTO arsalar (id, sahip, arsaX, arsaY, arsaZ, tip, fiyat, KiraSure, Metrekare, MaxTohum) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
	UpdateArsa = db_prepare(ArsaDB, "UPDATE arsalar SET sahip=?, arsaX=?, arsaY=?, arsaZ=?, tip=?, fiyat=?, KiraSure=?, Metrekare=?, MaxTohum=? WHERE id=?");
	RemoveArsa = db_prepare(ArsaDB, "DELETE FROM arsalar WHERE id=?");
	new arsaid, arsasahip, Float:arsapos[3], arsatip, arsametrekare, arsatohum, fiyat, kirasure;
	stmt_bind_result_field(LoadArsa, 0, DB::TYPE_INTEGER, arsaid);
	stmt_bind_result_field(LoadArsa, 1, DB::TYPE_INTEGER, arsasahip);
	stmt_bind_result_field(LoadArsa, 2, DB::TYPE_FLOAT, arsapos[0]);
	stmt_bind_result_field(LoadArsa, 3, DB::TYPE_FLOAT, arsapos[1]);
	stmt_bind_result_field(LoadArsa, 4, DB::TYPE_FLOAT, arsapos[2]);
	stmt_bind_result_field(LoadArsa, 5, DB::TYPE_INTEGER, arsatip);
	stmt_bind_result_field(LoadArsa, 6, DB::TYPE_INTEGER, fiyat);
	stmt_bind_result_field(LoadArsa, 7, DB::TYPE_INTEGER, kirasure);
	stmt_bind_result_field(LoadArsa, 8, DB::TYPE_INTEGER, arsametrekare);
	stmt_bind_result_field(LoadArsa, 9, DB::TYPE_INTEGER, arsatohum);
	if (stmt_execute(LoadArsa))
	{
	    while (stmt_fetch_row(LoadArsa))
	    {
	        ArsaBilgi[arsaid][arsaExists] = 1;
	        ArsaBilgi[arsaid][arsaSahip] = arsasahip;
	        ArsaBilgi[arsaid][arsaTip] = arsatip;
	        ArsaBilgi[arsaid][arsaFiyat] = fiyat;
	        ArsaBilgi[arsaid][arsaPos][0] = arsapos[0];
	        ArsaBilgi[arsaid][arsaPos][1] = arsapos[1];
	        ArsaBilgi[arsaid][arsaPos][2] = arsapos[2];
	        ArsaBilgi[arsaid][KiraSure] = kirasure;
	        ArsaBilgi[arsaid][Metrekare] = arsametrekare;
	        ArsaBilgi[arsaid][arsaMaxTohum] = arsatohum;

	        ArsaUpdate(arsaid);

	    }
	}

	DrugDB = db_open("drugs.db");
	db_query(DrugDB, "CREATE TABLE IF NOT EXISTS playerdrugs (Sqlid INTEGER, Drugs INTEGER, Seeds INTEGER, TotalUsed INTEGER, TotalPlanted INTEGER, TotalHarvestedPlants INTEGER, TotalHarvestedGrams INTEGER, TotalGiven INTEGER, TotalReceived INTEGER, TotalBought INTEGER, TotalBoughtPrice INTEGER, TotalSold INTEGER, TotalSoldPrice INTEGER)");
	db_query(DrugDB, "CREATE TABLE IF NOT EXISTS dealers (ID INTEGER, Skin INTEGER, PosX FLOAT, PosY FLOAT, PosZ FLOAT, PosA FLOAT)");

	// prepare player queries
	LoadPlayer = db_prepare(DrugDB, "SELECT Drugs, Seeds, TotalUsed, TotalPlanted, TotalHarvestedPlants, TotalHarvestedGrams, TotalGiven, TotalReceived, TotalBought, TotalBoughtPrice, TotalSold, TotalSoldPrice FROM playerdrugs WHERE Sqlid=?");
	InsertPlayer = db_prepare(DrugDB, "INSERT INTO playerdrugs (Sqlid) VALUES (?)");
	SavePlayer = db_prepare(DrugDB, "UPDATE playerdrugs SET Drugs=?, Seeds=?, TotalUsed=?, TotalPlanted=?, TotalHarvestedPlants=?, TotalHarvestedGrams=?, TotalGiven=?, TotalReceived=?, TotalBought=?, TotalBoughtPrice=?, TotalSold=?, TotalSoldPrice=? WHERE Sqlid=?");

	// prepare dealer queries

	// initialize connected players
	foreach (new i : Player)
	{
	    if (GetPVarInt(i, "Logged") == 1) Player_Init(i);
	}

    new id, Float;

	RoadblockList = LoadModelSelectionMenu("roadblocks.txt");
	SignList = LoadModelSelectionMenu("signs.txt");
	DroneList = LoadModelSelectionMenu("drones.txt");

	ObjectDB = db_open("cop_objects.db");
    db_query(ObjectDB, "CREATE TABLE IF NOT EXISTS objects (id INTEGER, owner INTEGER, type INTEGER, data INTEGER, model INTEGER, posx FLOAT, posy FLOAT, posz FLOAT, rotx FLOAT, roty FLOAT, rotz FLOAT, interior INTEGER, virtualworld INTEGER)");

    LoadObjects = db_prepare(ObjectDB, "SELECT * FROM objects");
    AddObject = db_prepare(ObjectDB, "INSERT INTO objects (id, owner, type, data, model, posx, posy, posz, rotx, roty, rotz, interior, virtualworld) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
    UpdateObject = db_prepare(ObjectDB, "UPDATE objects SET posx=?, posy=?, posz=?, rotx=?, roty=?, rotz=? WHERE id=?");
	RemoveObject = db_prepare(ObjectDB, "DELETE FROM objects WHERE id=?");

	new objid, type, data, model, owner, Float: poss[3], Float: rot[3], interior, vworld;
	stmt_bind_result_field(LoadObjects, 0, DB::TYPE_INTEGER, objid);
	stmt_bind_result_field(LoadObjects, 1, DB::TYPE_INTEGER, owner);
	stmt_bind_result_field(LoadObjects, 2, DB::TYPE_INTEGER, type);
	stmt_bind_result_field(LoadObjects, 3, DB::TYPE_INTEGER, data);
	stmt_bind_result_field(LoadObjects, 4, DB::TYPE_INTEGER, model);
	stmt_bind_result_field(LoadObjects, 5, DB::TYPE_FLOAT, poss[0]);
	stmt_bind_result_field(LoadObjects, 6, DB::TYPE_FLOAT, poss[1]);
	stmt_bind_result_field(LoadObjects, 7, DB::TYPE_FLOAT, poss[2]);
	stmt_bind_result_field(LoadObjects, 8, DB::TYPE_FLOAT, rot[0]);
	stmt_bind_result_field(LoadObjects, 9, DB::TYPE_FLOAT, rot[1]);
	stmt_bind_result_field(LoadObjects, 10, DB::TYPE_FLOAT, rot[2]);
	stmt_bind_result_field(LoadObjects, 11, DB::TYPE_INTEGER, interior);
	stmt_bind_result_field(LoadObjects, 12, DB::TYPE_INTEGER, vworld);

	if (stmt_execute(LoadObjects))
	{
	    new label[150];
	    while (stmt_fetch_row(LoadObjects))
	    {
            CopObjectData[objid][ObjCreated] = true;
          //  CopObjectData[objid][Owner] = owner;
            format(CopObjectData[objid][Owner],32,ReturnName(id, 0));
		    CopObjectData[objid][Type] = type;
		    CopObjectData[objid][ObjData] = data;
		    CopObjectData[objid][ObjModel] = model;
		    CopObjectData[objid][ObjInterior] = interior;
		    CopObjectData[objid][ObjVirtualWorld] = vworld;
			CopObjectData[objid][ObjX] = poss[0];
			CopObjectData[objid][ObjY] = poss[1];
			CopObjectData[objid][ObjZ] = poss[2];
			CopObjectData[objid][ObjRX] = rot[0];
			CopObjectData[objid][ObjRY] = rot[1];
			CopObjectData[objid][ObjRZ] = rot[2];
			CopObjectData[objid][ObjID] = CreateDynamicObject(model, poss[0], poss[1], poss[2], rot[0], rot[1], rot[2], vworld, interior);
			CopObjectData[objid][ObjArea] = -1;

			switch (type)
			{
			    case OBJECT_TYPE_ROADBLOCK: format(label, sizeof(label), "Barikat (ID: %d)", objid);
			    case OBJECT_TYPE_SIGN: format(label, sizeof(label), "Tabela (ID: %d)", objid);
			    case OBJECT_TYPE_POLICELINE: format(label, sizeof(label), "Olay Yeri seridi (ID: %d)", objid);
			    case OBJECT_TYPE_SPIKE:
				{
					format(label, sizeof(label), "{FFFFFF}Çivi (ID: %d)", objid);
					CopObjectData[objid][ObjArea] = CreateDynamicSphere(poss[0], poss[1], poss[2], 2.5, vworld, interior);
				}

				case OBJECT_TYPE_SPEEDCAM:
				{
					format(label, sizeof(label), "{FFFFFF}Hiz Kamerasi (ID: %d)\n{FFFFFF}Hiz Limiti: %d", objid, data);
					CopObjectData[objid][ObjArea] = CreateDynamicSphere(poss[0], poss[1], poss[2], SPEEDCAM_RANGE, vworld, interior);
				}
			}

			CopObjectData[objid][ObjLabel] = CreateDynamic3DTextLabel(label, 0xFFFFFFAA, poss[0], poss[1], poss[2] + zOffsets[type], streamDistances[type], INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, vworld, interior);
		}
	}
	for (new i; i < MAX_BANKERS; i++)
    {
        BankerData[i][bankerActorID] = -1;

        #if defined BANKER_USE_MAPICON
        BankerData[i][bankerIconID] = -1;
        #endif

        BankerData[i][bankerLabel] = Text3D: -1;
    }

    for (new i; i < MAX_ATMS; i++)
    {
        ATMData[i][atmObjID] = -1;

        #if defined ATM_USE_MAPICON
        ATMData[i][atmIconID] = -1;
        #endif

        #if defined ROBBABLE_ATMS
        ATMData[i][atmTimer] = ATMData[i][atmPickup] = -1;
        ATMData[i][atmHealth] = ATM_HEALTH;
        #endif

        ATMData[i][atmLabel] = Text3D: -1;
    }
    mysql_tquery(g_SQL, "CREATE TABLE IF NOT EXISTS `bankers` (\
	  `ID` int(11) NOT NULL,\
	  `Skin` smallint(3) NOT NULL,\
	  `PosX` float NOT NULL,\
	  `PosY` float NOT NULL,\
	  `PosZ` float NOT NULL,\
	  `PosA` float NOT NULL\
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;");

    mysql_tquery(g_SQL, "CREATE TABLE IF NOT EXISTS `bank_atms` (\
	  `ID` int(11) NOT NULL,\
	  `PosX` float NOT NULL,\
	  `PosY` float NOT NULL,\
	  `PosZ` float NOT NULL,\
	  `RotX` float NOT NULL,\
	  `RotY` float NOT NULL,\
	  `RotZ` float NOT NULL\
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;");

	mysql_tquery(g_SQL, "CREATE TABLE IF NOT EXISTS `bank_accounts` (\
	  `ID` int(11) NOT NULL auto_increment,\
	  `Owner` int(12) NOT NULL,\
	  `Password` varchar(32) NOT NULL,\
	  `Balance` int(11) NOT NULL,\
	  `CreatedOn` int(11) NOT NULL,\
	  `LastAccess` int(11) NOT NULL,\
	  `Disabled` smallint(1) NOT NULL,\
	  PRIMARY KEY  (`ID`)\
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;");

	new query[512];

	mysql_format(g_SQL, query, sizeof(query), "CREATE TABLE IF NOT EXISTS `bank_logs` (\
	  	`ID` int(11) NOT NULL auto_increment,\
	  	`AccountID` int(11) NOT NULL,\
	  	`ToAccountID` int(11) NOT NULL default '-1',\
	  	`Type` smallint(1) NOT NULL,\
	  	`Player` varchar(24) NOT NULL,\
	  	`Amount` int(11) NOT NULL,\
	  	`Date` int(11) NOT NULL, ");

	mysql_format(g_SQL, query, sizeof(query), "%s\
 		PRIMARY KEY  (`ID`),\
 		KEY `bank_logs_ibfk_1` (`AccountID`),\
 		CONSTRAINT `bank_logs_ibfk_1` FOREIGN KEY (`AccountID`) REFERENCES `bank_accounts` (`ID`) ON DELETE CASCADE ON UPDATE CASCADE\
		) ENGINE=InnoDB DEFAULT CHARSET=utf8;", query);

	mysql_tquery(g_SQL, query);

	mysql_tquery(g_SQL, "SELECT * FROM bankers", "LoadBankers");
	mysql_tquery(g_SQL, "SELECT * FROM bank_atms", "LoadATMs");

	new label[128];
	for(new i; i < sizeof(TrashData); i++)
	{
	    format(label, sizeof(label), "%s\n{ffffff}/cop komutu ile alabilirsiniz.", (TrashData[i][TrashType] == TYPE_BIN) ? ("Çöp Kutusu") : ("Çöp Kutusu"));
		TrashData[i][TrashLabel] = CreateDynamic3DTextLabel(label, 0x2ECC71FF, TrashData[i][TrashX], TrashData[i][TrashY], TrashData[i][TrashZ]+1.25, 15.0, .testlos = 1);
		TrashData[i][TrashLevel] = (TrashData[i][TrashType] == TYPE_BIN) ? 1 : 2;
	}

	for(new i; i < sizeof(FactoryData); i++)
	{
	    format(label, sizeof(label), "Geridönüsüm Fabrikasi - %s\n\n{FFFFFF}Mevcut Çöp Torbalari: {F39C12}0\n{FFFFFF}Çöpleri geridönüsüm fabrikalarina teslim ederek para kazanbilirsiniz!", FactoryData[i][FactoryName], FactoryData[i][FactoryCurrent]);
		FactoryData[i][FactoryLabel] = CreateDynamic3DTextLabel(label, 0x2ECC71FF, FactoryData[i][FactoryX], FactoryData[i][FactoryY], FactoryData[i][FactoryZ] + 0.5, 15.0, .testlos = 1);
		FactoryData[i][FactoryCP] = CreateDynamicCP(FactoryData[i][FactoryX], FactoryData[i][FactoryY], FactoryData[i][FactoryZ], 6.0);
	}

	for(new i, m = GetPlayerPoolSize(); i <= m; i++)
	{
	    if(!IsPlayerConnected(i)) continue;
		Trash_InitPlayer(i);
	}

	foreach (new i : Player) Player_Init(i);

	CreateDynamicPickup(1239, 23, 1345.2136, 51.2352, 1004.6422, -1, -1);
	CreateDynamic3DTextLabel("{8D8DFF}LAPD Dolap\n{8D8DFF}/dolap ile açabilirsiniz.", -1, 1345.2136, 51.2352, 1004.6422, 10.0,INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1,-1);

	CreateDynamicPickup(1239, 23, 267.1242, 109.7113, 1004.6172, -1, -1);
	CreateDynamic3DTextLabel("{65b473}LASD Dolap\n{8D8DFF}/dolap ile açabilirsiniz.", -1, 267.1242, 109.7113, 1004.6172, 10.0,INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1,-1);

	CreateDynamic3DTextLabel("{8D8DFF}Araç Baglama\n{8D8DFF}/aracibagla ile araci baglayabilirsiniz.",-1, 1600.2130, -1609.2825, 13.4653, 10.0,INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, 0);

	CreateDynamic3DTextLabel("{1394BF}/cctv", 2,1488.1561,-1691.2668,-70.0371, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, 0);

	CreateDynamicPickup(1239, 23, 1142.4302,-1330.7209,13.5374, 0);
	CreateDynamic3DTextLabel("Yarali Teslim Noktasi\n/yteslim ile yaraliyi teslim edebilirsiniz.", 0xFF8282AA, 1142.4302,-1330.7209,13.5374, 10.0, INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 0, 0);

    CreateDynamicPickup(1239, 2, 1160.1326, -1329.4207, 1019.4266, 75, 75);
	CreateDynamic3DTextLabel("LSMD Dolap\n/dolap ile açabilirsiniz.", 0xFF8282AA, 1160.1326, -1329.4207, 1019.4266, 10.0, INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 75, 75, 75);

	CreateDynamicPickup(1239, 2, 1152.2201, -1305.1233, 1019.4307, 75, 75);
	CreateDynamic3DTextLabel("/lsmdlobi", 0xFF8282AA, 1152.2201, -1305.1233, 1019.4307, 10.0, INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 75, 75, 75);

	CreateDynamicPickup(1220, 23, 2197.5737, -2661.0642, 13.5469, 0);
	CreateDynamic3DTextLabel("{D12E2E}[Yük Yükleme Noktasi]\n{D12E2E}/koli", -1, 2197.5737, -2661.0642, 13.5469, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, 0);

	CreateDynamicPickup(1314, 23, -2027.0787, 1122.2255, 53.9859);
    CreateDynamic3DTextLabel("[Evlilik]\n{FFFFFF}Evlenmek için /evlen [ID] yazin.", COLOR_DARKBLUE, -2027.0787,1122.2255,53.9859, 10.0);

    CreateDynamicPickup(1581, 23, -2033.0245, -117.5572, 1035.1719);
    CreateDynamic3DTextLabel("/ehliyetal", COLOR_WHITE, -2033.0245, -117.5572, 1035.1719, 10.0);

    CreateDynamicPickup(1239, 23, 2098.06,-1788.93,13.55);
    CreateDynamic3DTextLabel("/pizzabasla", COLOR_WHITE, 2098.06,-1788.93,13.55, 20.0);

	// ------------------------------------ TEXTDRAWS ----------------------------
	aTolls[FlintToll][E_tLocked] = 0;
    aTolls[RichmanToll][E_tLocked] = 0;
    aTolls[LVToll][E_tLocked] = 0;
    aTolls[BlueberryTollR][E_tLocked] = 0;
    aTolls[BlueberryTollL][E_tLocked] = 0;
    GateleriYukle();
    EvleriYukle();
    BirlikleriYukle();
    IsyerleriYukle();
    Arrest_Load();
    CCTV_Yukle();
    Lokasyon_Yukle();
    BinalariYukle();
    AraclariYukle();
    GarajlariYukle();
    DroppedWeapons_Load();
    PetleriYukle();
    HoodlariYukle();
    GraffitiYukle();
    SorulariYukle();

	mysql_tquery(g_SQL, "SELECT * FROM `pompalar`", "PompalariYukle", "");
	mysql_tquery(g_SQL, "SELECT * FROM `tamirhaneler`", "TamirhaneleriYukle", "");
    mysql_tquery(g_SQL, "SELECT * FROM `giseler`", "GiseleriYukle", "");
    mysql_tquery(g_SQL, "SELECT * FROM `uyusturucusaticilari`", "UyusturucuSaticilariniYukle", "");

	NPCYukle();

	Iter_Init(CekilisKatilimcilar);
	Iter_Init(Mobilyalar);

	for (new i; i < MAX_BIRLIK; i++)
	{
 		Iter_Clear(CekilisKatilimcilar[i]);
	}

	return 1;
}

public OnGameModeExit()
{
    TextDrawHideForAll(Karanlik);
	TextDrawDestroy(Karanlik);
    for (new i = 0; i != MAX_ARAC; i ++)
    {
        if (AracInfo[i][aracExists])
        {
            Arac_Kaydet(i);
        }
    }
    foreach (new i : Player)
	{
     	Oyuncu_Kaydet(i, 0);
	    Player_SaveDrugs(i);
	    OnPlayerDisconnect(i, 1);
	}
	foreach (new i : Dealers) DestroyActor(DealerData[i][dealerActorID]);
	foreach (new i : Bankers)
	{
	    if (IsValidActor(BankerData[i][bankerActorID])) DestroyActor(BankerData[i][bankerActorID]);
	}
	for(new i, m = GetPlayerPoolSize(); i <= m; i++)
	{
	    if(!IsPlayerConnected(i)) continue;
	    Trash_ResetPlayer(i, 1);
	}
	db_close(DrugDB);
	db_close(ObjectDB);
    mysql_close();
	return 1;
}

stock GetPlayerChannel(playerid) return PlayerData[playerid][pFrekans];
stock ShowRadioTextDraw(playerid)
{
	PlayerTextDrawShow(playerid, RadioDraw[playerid]);
	PlayerTextDrawShow(playerid, ChannelDraw[playerid]);
	SetRadioChannel(playerid, GetPlayerChannel(playerid));
	return 1;
}

stock HideRadioTextDraw(playerid)
{
	PlayerTextDrawHide(playerid, RadioDraw[playerid]);
	PlayerTextDrawHide(playerid, ChannelDraw[playerid]);
	return 1;
}

stock SetRadioChannel(playerid, channel)
{
	new msg[256];
	if(channel == 0)
	{
		format(msg, sizeof(msg), "~b~Frekans: ~h~~g~0");
	}
	else
	{
		format(msg, sizeof(msg), "~b~Frekans: ~h~~g~%d", channel);
	}
	PlayerTextDrawSetString(playerid, ChannelDraw[playerid], msg);
	PlayerData[playerid][pFrekans] = channel;
	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
    TogglePlayerSpectating(playerid, 1);
	if (GetPVarInt(playerid, "Logged") == 0) EkranTemizle(playerid);
	if (GetPVarInt(playerid, "Logged") == 1) SpawnPlayer(playerid);
	return 0;
}

public FCNPC_OnDeath(npcid, killerid, reason)
{
	foreach (new i:Petler) if (PetBilgi[i][NPCID] == npcid)
	{
	    PetBilgi[i][petYarali] = 1;
	    SetTimerEx("PetDelete", 1000, false, "i", i);
	}
	return 1;
}

public FCNPC_OnGiveDamage(npcid, damagedid, Float:amount, weaponid, bodypart)
{
	return 1;
}

stock GetPlayerSpeed2(playerid)
{
    new Float:ST[4];
    if(IsPlayerInAnyVehicle(playerid))
    GetVehicleVelocity(GetPlayerVehicleID(playerid),ST[0],ST[1],ST[2]);
    else GetPlayerVelocity(playerid,ST[0],ST[1],ST[2]);
    ST[3] = floatsqroot(floatpower(floatabs(ST[0]), 2.0) + floatpower(floatabs(ST[1]), 2.0) + floatpower(floatabs(ST[2]), 2.0)) * 179.28625;
    return floatround(ST[3]);
}

forward AntiCheat(playerid);
public AntiCheat(playerid)
{
    new vehicleid = GetPlayerVehicleID(playerid);
    new anim[2][32];
    GetAnimationName(GetPlayerAnimationIndex(playerid), anim[0], 32, anim[1], 32);
    if(GetPlayerSpeed2(playerid) < 2 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
        new Float:distance = GetPlayerDistanceFromPoint(playerid, LastPosition[playerid][0], LastPosition[playerid][1], LastPosition[playerid][2]);
        if (distance >= 3.0 && distance < 50.0)
        {
            //AdminMessage(COLOR_LIGHTRED, "CheatLog: %s, airbreak (driver) kullanmaya çalýþtýðý için sunucudan atýldý.", ReturnName(playerid));
            Log_Write("logs/AntiCheat.log", "[%s] %s, airbreak (driver) kullanmaya çalýþtýðý için sunucudan atýldý.", ReturnDate(), ReturnName(playerid));
            Kick(playerid);
		}
    }
    if (Airbreak[playerid] == 5)
    {
   	    //AdminMessage(COLOR_LIGHTRED, "CheatLog: %s, airbreak kullanmaya çalýþtýðý için sunucudan atýldý.", ReturnName(playerid));
        Log_Write("logs/AntiCheat.log", "[%s] %s, airbreak kullanmaya çalýþtýðý için sunucudan atýldý.", ReturnDate(), ReturnName(playerid));
        Kick(playerid);
    }
    if(GetPlayerAnimationIndex(playerid))
    {
        if(!strcmp(anim[0], "BEACH", true) && !strcmp(anim[1], "ParkSit_W_loop", true) && GetPlayerSpeed2(playerid) > 5)
        {
            AdminMessage(COLOR_LIGHTRED, "CheatLog: %s, fly hack kullanmaya çalýþtýðý için sunucudan atýldý.", ReturnName(playerid));
            Log_Write("logs/AntiCheat.log", "[%s] %s, fly hack kullanmaya çalýþtýðý için sunucudan atýldý.", ReturnDate(), ReturnName(playerid));
            Kick(playerid);
        }
        else if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && !strcmp(anim[0], "BMX", true) && !strcmp(anim[1], "BMX_PEDAL", true))
        {
            AdminMessage(COLOR_LIGHTRED, "CheatLog: %s, fly hack kullanmaya çalýþtýðý için sunucudan atýldý.", ReturnName(playerid));
            Log_Write("logs/AntiCheat.log", "[%s] %s, fly hack kullanmaya çalýþtýðý için sunucudan atýldý.", ReturnDate(), ReturnName(playerid));
            Kick(playerid);
        }
    }
    if(GetPlayerAnimationIndex(playerid) == 970 || GetPlayerAnimationIndex(playerid) == 966 || GetPlayerAnimationIndex(playerid) == 516)
    {
		AdminMessage(COLOR_LIGHTRED, "CheatLog: %s, troll hack (troll animasyon) kullanmaya çalýþtýðý için sunucudan atýldý.", ReturnName(playerid));
		Log_Write("logs/AntiCheat.log", "[%s] %s, troll hack (troll animasyon) kullanmaya çalýþtýðý için sunucudan atýldý.", ReturnDate(), ReturnName(playerid));
        Kick(playerid);
    }
    if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER && GetVehicleModel(vehicleid) != 522 && GetPlayerSpeed2(playerid) >= 300)
    {
        AdminMessage(COLOR_LIGHTRED, "CheatLog: %s, speed hack kullanmaya çalýþtýðý için sunucudan atýldý (%d KM).", ReturnName(playerid), GetPlayerSpeed2(playerid));
        Log_Write("logs/AntiCheat.log", "[%s] %s, speed hack kullanmaya çalýþtýðý için sunucudan atýldý (%d KM).", ReturnDate(), ReturnName(playerid), GetPlayerSpeed2(playerid));
        Kick(playerid);
    }
    if (PlayerData[playerid][pJetpack] == 0 && PlayerData[playerid][pAdmin] < 1 && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USEJETPACK)
    {
        AdminMessage(COLOR_LIGHTRED, "CheatLog: %s, jetpack hilesi kullanmaya çalýþtýðý için jetpacki silindi.", ReturnName(playerid));
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
    }
    return 1;
}

forward OnCheatDetected(playerid, ip_address[], type, code);
public OnCheatDetected(playerid, ip_address[], type, code)
{
	new hileadi[30];
	switch (code)
	{
	    case 0: hileadi = "AirBreak";
	    case 1: hileadi = "AirBreak";
	    case 2..6: hileadi = "Teleport Hack";
	    case 7,8: hileadi = "FlyHack";
	    case 9,10: hileadi = "Speed Hack/Fly Hack/Surf Hack";
	    case 15: hileadi = "Weapon Hack";
	    case 16, 17: hileadi = "Ammo Hack";
	    case 18: hileadi = "Special Action Hack";
	    case 21: hileadi = "Invisible Hack";
	    case 22: hileadi = "Lagcomp-spoof";
	    case 23: hileadi = "Tuning Hack";
	    case 25: hileadi = "Quick Turn";
	    case 26: hileadi = "Rapid Fire";
	    case 27: hileadi = "FakeSpawn";
	    case 28: hileadi = "FakeKill";
	    case 29: hileadi = "Pro Aim";
	    case 30: hileadi = "CJ Run";
	    case 31: hileadi = "CarShot";
	    case 34: hileadi = "AFK Ghost";
	    case 35: hileadi = "Full Aiming";
	    case 37: hileadi = "Reconnect Hack";
	    case 39: hileadi = "Dialog Hack";
	    case 40: hileadi = "Sandbox";
	    case 41: hileadi = "Invalid Version";
	    case 42: hileadi = "RCON Hack";
	    case 43: hileadi = "Tuning Crasher";
	    case 44: hileadi = "Invalid Seat Crasher";
	    case 45: hileadi = "Dialog Crasher";
	    case 46: hileadi = "Attached Object Crasher";
	    case 47: hileadi = "Weapon Crasher";
	    case 52: hileadi = "NOP";
	    case 51: hileadi = "DDOS";
	    default: hileadi = "Bilinmeyen";
	}

	/*if (code == 1 && PlayerData[playerid][pDragged] != 1 || code == 2 && PlayerData[playerid][pDragged] != 1)
	{
		AdminMessage(COLOR_LIGHTRED, "CheatLog: %s, airbreak kullanmaya çalýþtýðý için sunucudan atýldý.", ReturnName(playerid));
        Log_Write("logs/AntiCheat.log", "[%s] %s, airbreak kullanmaya çalýþtýðý için sunucudan atýldý.", ReturnDate(), ReturnName(playerid));
        Kick(playerid);
	}*/
	if (code == 47)
	{
		Kick(playerid);
		return 0;
	}
	return 1;
}

public OnPlayerFinishedDownloading(playerid, virtualworld)
{
    if (Download[playerid] == 0)
    {
        Download[playerid] = 1;
        if (GetServerBilgi("bakimModu") == 1)
		{
			Dialog_Show(playerid, BakimModu, DIALOG_STYLE_INPUT, "Bakim", "Sunucumuz bakim modundadir, giris yapmak için bakim sifresini girin:", "Gir", "Kapat");
		}
		else
		{
		    TextDrawShowForPlayer(playerid, GirisTD);
			SetTimerEx("Giris_Yap",2500,false, "i",playerid);
		}
    }
    return 1;
}
/* forward WhitelistKontrol(playerid);
public WhitelistKontrol(playerid)
{
	new rows = cache_num_rows();
	if(!rows)
	{
		new text[512];
		format(text, sizeof(text), "{FFFFFF}Bu sunucu karakter baþvurusu sistemi kullanmaktadýr. {FF0000}%s{FFFFFF} adlý karakteriniz beyaz liste içerisinde bulunmadý.\n \nDiscord üzerinden istediðiniz zaman karakter baþvurusu yapabilirsiniz.", ReturnName(playerid, 0));
	    Dialog_Show(playerid, LSPD, DIALOG_STYLE_MSGBOX, "Whitelist", text, "Tamam", "");
	    SendClientMessageEx(playerid, COLOR_RED, "[KARAKTER-KAYIT] {FFFFFF}Karakterinizin giriþ kodu %d, lütfen adminlere bu kodu bildiriniz.", PlayerData[playerid][pID]);
		Kick(playerid);
	}
	return 1;
} */
forward ClientBanKontrol(playerid);
public ClientBanKontrol(playerid)
{
	new rows = cache_num_rows();

	if(rows)
	{
		new banned_zaman;

		cache_get_value_index_int(0, 0, banned_zaman);


		if(banned_zaman < 1)
			HataMesajGonder(playerid, "Clientiniz yasaklandigi için oyuna devam edemiyorsunuz.");

		else HataMesajGonder(playerid, "Clientiniz %s tarihine kadar yasaklandigi için oyuna devam edemiyorsunuz.", convertDatex(banned_zaman));

		Kick(playerid);
	}


	return 1;
}
stock ClientKontrol(playerid)
{
	new query[124];
	format(query, sizeof(query), "SELECT * FROM `serials` WHERE `username` = '%s'", Player_GetName(playerid));
	new Cache: Radless = mysql_query(g_SQL, query);
	new rows;
	cache_get_row_count(rows);
	if (!rows) return 0;
	if (rows)
	{
	    new onaylandi;
	    cache_get_value_name_int(0, "onaylandi", onaylandi);
	    if (onaylandi == 0) return 0;
	    else
	    {
	        new serial[75];
	        cache_get_value_name(0, "macid", serial, 75);
	        cache_delete(Radless);
	        format(PlayerData[playerid][pSerial], 75, serial);

			new query2[256];
            		format(query2, sizeof(query2), "UPDATE `serials` SET `onaylandi` = '0' WHERE `username` = '%s'", Player_GetName(playerid));
			mysql_query(g_SQL, query2, false);
	        return 1;
	        }
   }
 	return 0;
}

new PlayerText:RadioDraw[MAX_PLAYERS];
new PlayerText:ChannelDraw[MAX_PLAYERS];
public OnPlayerConnect(playerid)
{
	for (new i = 0; i < MAX_VEHICLES; i++)
	{
	    g_fSpeedCap[ playerid ][ i ] = 0.0;
	}

    PlayerTextDrawHide(playerid, adminduty[playerid]);
    PlayerTextDrawHide(playerid, helperduty[playerid]);
    PlayerTextDrawHide(playerid, godduty[playerid]);

    Airbreak[playerid] = 0;
    Airbreak2[playerid] = 0;
    cNametag[playerid] = CreateDynamic3DTextLabel("Nametag yukleniyor...", 0xFFFFFFFF, 0.0, 0.0, 0.1, NT_DISTANCE, .attachedplayer = playerid, .testlos = 1);
    if(IsValidDynamic3DTextLabel(cNametag[playerid]))
              DestroyDynamic3DTextLabel(cNametag[playerid]);
    SetTimerEx("AntiCheat", 1000, true, "d", playerid);

	/*if (!ClientKontrol(playerid) && strcmp(GetIP(playerid), "127.0.0.1") != 0)
	{
	    HataMesajGonder(playerid, "Sunucumuza giris yapmak için client kullanmalisiniz. Forum sitemizden clienti indirebilirsiniz.");
	    Kick(playerid);
	    return 1;
	}*/
	if (IsPlayerNPC(playerid)) return 0;

	new isim[MAX_PLAYER_NAME + 1];

	GetPlayerName(playerid, isim, sizeof(isim));

	if (!IsValidRoleplayName(isim))
    {
        HataMesajGonder(playerid, "Ýsminiz Ad_Soyad formatýnda olmalidir. Ýsminizi degistirip tekrar giris yapiniz. (Adiniz: %s)", isim);
        Kick(playerid);
        return 1;
 	}

	new query[300];

	mysql_format(g_SQL, query, sizeof(query), "SELECT banned_zaman FROM serials WHERE `username` = '%s' AND `banned` > 0 AND `banned_zaman` > %d", Player_GetName(playerid), gettime());
	mysql_tquery(g_SQL, query, "ClientBanKontrol", "d", playerid);

	pDrunkLevelLast[playerid] = 0;
    pFPS[playerid] = 0;
    Download[playerid] = 0;

	ABS[playerid] = 0;
    EmniyetKemeri[playerid] = false;

	SetPVarInt(playerid, "DuzenlenenObjeID", -1);
	SetPVarInt(playerid, "Hasari", 0);
    SetPVarInt(playerid, "OdunYolu", 0);
	SetPVarInt(playerid, "OdunGotur", 0);
    SetPVarInt(playerid, "MadenYolu", 0);
    SetPVarInt(playerid, "GiseGate", -1);
    SetPVarInt(playerid, "GiseKapali", -1);
    SetPVarInt(playerid, "GiseAcik", -1);

	Player_Init(playerid);

	PlayerDrugData[playerid][DrugsOfferedBy] = INVALID_PLAYER_ID;
	BilgiSifirla(playerid);
	Trash_InitPlayer(playerid);
	EkranTemizle(playerid);
	RemoveBuildings(playerid);

	if (IsValidDynamic3DTextLabel(NameTag[playerid]))
		DestroyDynamic3DTextLabel(NameTag[playerid]);

    if (IsValidDynamic3DTextLabel(Rozet[playerid]))
		DestroyDynamic3DTextLabel(Rozet[playerid]);

	NameTag[playerid] = Text3D: -1;
	NameTag[playerid] = CreateDynamic3DTextLabel("", -1, 0.0, 0.0, 0.1, 10.0, playerid, INVALID_VEHICLE_ID, 0, -1, -1, -1, STREAMER_3D_TEXT_LABEL_SD, -1, 0);

	Rozet[playerid] = Text3D: -1;
	Rozet[playerid] = CreateDynamic3DTextLabel("", -1, 0.0, 0.0, 0.1, 25.0, playerid, INVALID_VEHICLE_ID, 0, -1, -1, -1, STREAMER_3D_TEXT_LABEL_SD, -1, 0);

	SetPlayerColor(playerid,COLOR_GREY);

 	RadioDraw[playerid] = CreatePlayerTextDraw(playerid, 520.000000, 103.000000, "~b~Telsiz Bilgileri");
	PlayerTextDrawBackgroundColor(playerid, RadioDraw[playerid], 0x000000ff);
	PlayerTextDrawFont(playerid, RadioDraw[playerid], 3);
	PlayerTextDrawLetterSize(playerid, RadioDraw[playerid], 0.40, 1.0);
	PlayerTextDrawColor(playerid, RadioDraw[playerid], 0xffffffff);
	PlayerTextDrawSetShadow(playerid, RadioDraw[playerid], 1);

	ChannelDraw[playerid] = CreatePlayerTextDraw(playerid, 520.000000, 112.000000, "~b~Frekans: ~h~~g~0");
	PlayerTextDrawBackgroundColor(playerid, ChannelDraw[playerid], 0x000000ff);
	PlayerTextDrawFont(playerid, ChannelDraw[playerid], 3);
	PlayerTextDrawLetterSize(playerid, ChannelDraw[playerid], 0.40, 1.0);
	PlayerTextDrawColor(playerid, ChannelDraw[playerid], 0xffffffff);
	PlayerTextDrawSetShadow(playerid, ChannelDraw[playerid], 1);

	HapisTD[playerid] = CreatePlayerTextDraw(playerid, 499.000000, 101.000000, "~g~Kalan Sure:~w~ 00:00:00");
	PlayerTextDrawBackgroundColor(playerid, HapisTD[playerid], 255);
	PlayerTextDrawFont(playerid, HapisTD[playerid], 1);
	PlayerTextDrawLetterSize(playerid, HapisTD[playerid], 0.270000, 1.000000);
	PlayerTextDrawColor(playerid, HapisTD[playerid], -1);
	PlayerTextDrawSetOutline(playerid, HapisTD[playerid], 1);
	PlayerTextDrawSetProportional(playerid, HapisTD[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, HapisTD[playerid], 0);

	MesafeTD[playerid] = CreatePlayerTextDraw(playerid, 13.000000, 431.000000, "~g~Mesafe:~w~ Calculating...");
	PlayerTextDrawBackgroundColor(playerid, MesafeTD[playerid], 255);
	PlayerTextDrawFont(playerid, MesafeTD[playerid], 1);
	PlayerTextDrawLetterSize(playerid, MesafeTD[playerid], 0.270000, 1.000000);
	PlayerTextDrawColor(playerid, MesafeTD[playerid], -1);
	PlayerTextDrawSetOutline(playerid, MesafeTD[playerid], 1);
	PlayerTextDrawSetProportional(playerid, MesafeTD[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, MesafeTD[playerid], 0);

		destekiste[playerid] = CreatePlayerTextDraw(playerid, 3.999968, 210.281402, "Destek geliyor...");
    PlayerTextDrawLetterSize(playerid, destekiste[playerid], 0.186999, 0.998518);
    PlayerTextDrawAlignment(playerid, destekiste[playerid], 1);
    PlayerTextDrawColor(playerid, destekiste[playerid], -5963521);
    PlayerTextDrawSetShadow(playerid, destekiste[playerid], 0);
    PlayerTextDrawSetOutline(playerid, destekiste[playerid], 1);
    PlayerTextDrawBackgroundColor(playerid, destekiste[playerid], 255);
    PlayerTextDrawFont(playerid, destekiste[playerid], 1);
    PlayerTextDrawSetProportional(playerid, destekiste[playerid], 1);
    PlayerTextDrawSetShadow(playerid, destekiste[playerid], 0);

    hizgostergesi0[playerid] = CreatePlayerTextDraw(playerid, 552.000000, 358.000000, "100%");
	PlayerTextDrawFont(playerid, hizgostergesi0[playerid], 2);
	PlayerTextDrawLetterSize(playerid, hizgostergesi0[playerid], 0.187500, 1.350000);
	PlayerTextDrawTextSize(playerid, hizgostergesi0[playerid], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, hizgostergesi0[playerid], 1);
	PlayerTextDrawSetShadow(playerid, hizgostergesi0[playerid], 0);
	PlayerTextDrawAlignment(playerid, hizgostergesi0[playerid], 1);
	PlayerTextDrawColor(playerid, hizgostergesi0[playerid], -1523963137);
	PlayerTextDrawBackgroundColor(playerid, hizgostergesi0[playerid], 255);
	PlayerTextDrawBoxColor(playerid, hizgostergesi0[playerid], 50);
	PlayerTextDrawUseBox(playerid, hizgostergesi0[playerid], 0);
	PlayerTextDrawSetProportional(playerid, hizgostergesi0[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, hizgostergesi0[playerid], 0);

	hizgostergesi1[playerid] = CreatePlayerTextDraw(playerid, 553.000000, 369.000000, "km/h");
	PlayerTextDrawFont(playerid, hizgostergesi1[playerid], 2);
	PlayerTextDrawLetterSize(playerid, hizgostergesi1[playerid], 0.166666, 1.100000);
	PlayerTextDrawTextSize(playerid, hizgostergesi1[playerid], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, hizgostergesi1[playerid], 1);
	PlayerTextDrawSetShadow(playerid, hizgostergesi1[playerid], 0);
	PlayerTextDrawAlignment(playerid, hizgostergesi1[playerid], 1);
	PlayerTextDrawColor(playerid, hizgostergesi1[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, hizgostergesi1[playerid], 255);
	PlayerTextDrawBoxColor(playerid, hizgostergesi1[playerid], 50);
	PlayerTextDrawUseBox(playerid, hizgostergesi1[playerid], 0);
	PlayerTextDrawSetProportional(playerid, hizgostergesi1[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, hizgostergesi1[playerid], 0);

	hizgostergesi2[playerid] = CreatePlayerTextDraw(playerid, 518.000000, 360.000000, "000");
	PlayerTextDrawFont(playerid, hizgostergesi2[playerid], 3);
	PlayerTextDrawLetterSize(playerid, hizgostergesi2[playerid], 0.529165, 2.149998);
	PlayerTextDrawTextSize(playerid, hizgostergesi2[playerid], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, hizgostergesi2[playerid], 1);
	PlayerTextDrawSetShadow(playerid, hizgostergesi2[playerid], 0);
	PlayerTextDrawAlignment(playerid, hizgostergesi2[playerid], 1);
	PlayerTextDrawColor(playerid, hizgostergesi2[playerid], -3841);
	PlayerTextDrawBackgroundColor(playerid, hizgostergesi2[playerid], 255);
	PlayerTextDrawBoxColor(playerid, hizgostergesi2[playerid], 50);
	PlayerTextDrawUseBox(playerid, hizgostergesi2[playerid], 0);
	PlayerTextDrawSetProportional(playerid, hizgostergesi2[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, hizgostergesi2[playerid], 0);

	OnayliHoodGirisTD[playerid][0] = CreatePlayerTextDraw(playerid, 16.222177, 253.715576, "Bu_bolge_----- adli_birlige_aittir. Korku_rolu_yapmaktan kacinmayiniz.");
	PlayerTextDrawLetterSize(playerid, OnayliHoodGirisTD[playerid][0], 0.168444, 1.152000);
	PlayerTextDrawAlignment(playerid, OnayliHoodGirisTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, OnayliHoodGirisTD[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, OnayliHoodGirisTD[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, OnayliHoodGirisTD[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, OnayliHoodGirisTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, OnayliHoodGirisTD[playerid][0], 2);
	PlayerTextDrawSetProportional(playerid, OnayliHoodGirisTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, OnayliHoodGirisTD[playerid][0], 0);

	OnayliHoodGirisTD[playerid][1] = CreatePlayerTextDraw(playerid, 58.888862, 238.284408, "ONAYLI_HOOD");
	PlayerTextDrawLetterSize(playerid, OnayliHoodGirisTD[playerid][1], 0.400000, 1.600000);
	PlayerTextDrawAlignment(playerid, OnayliHoodGirisTD[playerid][1], 2);
	PlayerTextDrawColor(playerid, OnayliHoodGirisTD[playerid][1], -1523963137);
	PlayerTextDrawSetShadow(playerid, OnayliHoodGirisTD[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, OnayliHoodGirisTD[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, OnayliHoodGirisTD[playerid][1], 255);
	PlayerTextDrawFont(playerid, OnayliHoodGirisTD[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, OnayliHoodGirisTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, OnayliHoodGirisTD[playerid][1], 0);

	helperduty[playerid] = CreatePlayerTextDraw(playerid,3.333302, 241.851715, "Supporter_Duty");
	PlayerTextDrawLetterSize(playerid,helperduty[playerid], 0.186999, 0.998518);
	PlayerTextDrawAlignment(playerid,helperduty[playerid], 1);
	PlayerTextDrawColor(playerid,helperduty[playerid], -936181846);
	PlayerTextDrawSetShadow(playerid,helperduty[playerid], 0);
	PlayerTextDrawSetOutline(playerid,helperduty[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid,helperduty[playerid], 255);
	PlayerTextDrawFont(playerid,helperduty[playerid], 1);
	PlayerTextDrawSetProportional(playerid,helperduty[playerid], 1);
	PlayerTextDrawSetShadow(playerid,helperduty[playerid], 0);

	adminduty[playerid] = CreatePlayerTextDraw(playerid, 3.666635, 230.651733, "Admin_Duty");
	PlayerTextDrawLetterSize(playerid, adminduty[playerid], 0.186999, 0.998518);
	PlayerTextDrawAlignment(playerid, adminduty[playerid], 1);
	PlayerTextDrawColor(playerid, adminduty[playerid], -2147483393);
	PlayerTextDrawSetShadow(playerid, adminduty[playerid], 0);
	PlayerTextDrawSetOutline(playerid, adminduty[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, adminduty[playerid], 255);
	PlayerTextDrawFont(playerid, adminduty[playerid], 1);
	PlayerTextDrawSetProportional(playerid, adminduty[playerid], 1);
	PlayerTextDrawSetShadow(playerid, adminduty[playerid], 0);

	godduty[playerid] = CreatePlayerTextDraw(playerid, 3.999968, 220.281402, "GODMODE");
	PlayerTextDrawLetterSize(playerid, godduty[playerid], 0.186999, 0.998518);
	PlayerTextDrawAlignment(playerid, godduty[playerid], 1);
	PlayerTextDrawColor(playerid, godduty[playerid], -2147483393);
	PlayerTextDrawSetShadow(playerid, godduty[playerid], 0);
	PlayerTextDrawSetOutline(playerid, godduty[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, godduty[playerid], 255);
	PlayerTextDrawFont(playerid, godduty[playerid], 1);
	PlayerTextDrawSetProportional(playerid, godduty[playerid], 1);
	PlayerTextDrawSetShadow(playerid, godduty[playerid], 0);

	OnayliHoodGirisTD[playerid][2] = CreatePlayerTextDraw(playerid, 45.444435, 204.279983, "hud:arrow");
	PlayerTextDrawLetterSize(playerid, OnayliHoodGirisTD[playerid][2], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, OnayliHoodGirisTD[playerid][2], 35.000000, 36.000000);
	PlayerTextDrawAlignment(playerid, OnayliHoodGirisTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, OnayliHoodGirisTD[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, OnayliHoodGirisTD[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, OnayliHoodGirisTD[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, OnayliHoodGirisTD[playerid][2], 255);
	PlayerTextDrawFont(playerid, OnayliHoodGirisTD[playerid][2], 4);
	PlayerTextDrawSetProportional(playerid, OnayliHoodGirisTD[playerid][2], 0);
	PlayerTextDrawSetShadow(playerid, OnayliHoodGirisTD[playerid][2], 0);

/*	OyuncuHUD_0 = TextDrawCreate(621.000000, 6.000000, "00: 07/06/2021");
	TextDrawFont(OyuncuHUD_0, 2);
	TextDrawLetterSize(OyuncuHUD_0, 0.166666, 1.149999);
	TextDrawTextSize(OyuncuHUD_0, 400.000000, 17.000000);
	TextDrawSetOutline(OyuncuHUD_0, 1);
	TextDrawSetShadow(OyuncuHUD_0, 0);
	TextDrawAlignment(OyuncuHUD_0, 3);
	TextDrawColor(OyuncuHUD_0, -1);
	TextDrawBackgroundColor(OyuncuHUD_0, 255);
	TextDrawBoxColor(OyuncuHUD_0, 50);
	TextDrawUseBox(OyuncuHUD_0, 0);
	TextDrawSetProportional(OyuncuHUD_0, 1);
	TextDrawSetSelectable(OyuncuHUD_0, 0);*/

/*	OyuncuHUD_5 = TextDrawCreate(11.000000, 427.000000, "   www.losangelesrpg.com");
	TextDrawFont(OyuncuHUD_5, 2);
	TextDrawLetterSize(OyuncuHUD_5, 0.166666, 1.149999);
	TextDrawTextSize(OyuncuHUD_5, 400.000000, 17.000000);
	TextDrawSetOutline(OyuncuHUD_5, 1);
	TextDrawSetShadow(OyuncuHUD_5, 0);
	TextDrawAlignment(OyuncuHUD_5, 1);
	TextDrawColor(OyuncuHUD_5, -1);
	TextDrawBackgroundColor(OyuncuHUD_5, 255);
	TextDrawBoxColor(OyuncuHUD_5, 50);
	TextDrawUseBox(OyuncuHUD_5, 0);
	TextDrawSetProportional(OyuncuHUD_5, 1);
	TextDrawSetSelectable(OyuncuHUD_5, 0);*/

	TaxiTD[playerid][0] = CreatePlayerTextDraw(playerid, 0.799992, 199.360031, "Taksimetre:");
	PlayerTextDrawLetterSize(playerid, TaxiTD[playerid][0], 0.214000, 1.114665);
	PlayerTextDrawAlignment(playerid, TaxiTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, TaxiTD[playerid][0], -1061109505);
	PlayerTextDrawSetShadow(playerid, TaxiTD[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, TaxiTD[playerid][0], 1);
	PlayerTextDrawBackgroundColor(playerid, TaxiTD[playerid][0], 51);
	PlayerTextDrawFont(playerid, TaxiTD[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, TaxiTD[playerid][0], 1);

	TaxiTD[playerid][1] = CreatePlayerTextDraw(playerid, 45.799987, 200.360031, "$1000 ($30/km)");
	PlayerTextDrawLetterSize(playerid, TaxiTD[playerid][1], 0.214000, 1.114665);
	PlayerTextDrawAlignment(playerid, TaxiTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, TaxiTD[playerid][1], 16711935);
	PlayerTextDrawSetShadow(playerid, TaxiTD[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, TaxiTD[playerid][1], 1);
	PlayerTextDrawBackgroundColor(playerid, TaxiTD[playerid][1], 51);
	PlayerTextDrawFont(playerid, TaxiTD[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, TaxiTD[playerid][1], 1);

	AracHUD[playerid][0] = CreatePlayerTextDraw(playerid, 519.666381, 133.155456, "hiz: ");
	PlayerTextDrawLetterSize(playerid, AracHUD[playerid][0], 0.453999, 1.004148);
	PlayerTextDrawAlignment(playerid, AracHUD[playerid][0], 0);
	PlayerTextDrawColor(playerid, AracHUD[playerid][0], -2139062017);
	PlayerTextDrawSetShadow(playerid, AracHUD[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, AracHUD[playerid][0], 1);
	PlayerTextDrawBackgroundColor(playerid, AracHUD[playerid][0], 51);
	PlayerTextDrawFont(playerid, AracHUD[playerid][0], 3);
	PlayerTextDrawSetProportional(playerid, AracHUD[playerid][0], 1);

	AracHUD[playerid][1] = CreatePlayerTextDraw(playerid, 498.666748, 100.740737, "100KM/H");
	PlayerTextDrawFont(playerid, AracHUD[playerid][1], 3);
	PlayerTextDrawLetterSize(playerid, AracHUD[playerid][1], 0.453999, 1.004148);
	PlayerTextDrawTextSize(playerid, AracHUD[playerid][1], 838.000000, 287.000000);
	PlayerTextDrawSetOutline(playerid, AracHUD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, AracHUD[playerid][1], 0);
	PlayerTextDrawAlignment(playerid, AracHUD[playerid][1], 0);
	PlayerTextDrawColor(playerid, AracHUD[playerid][1], -2139062017);
	PlayerTextDrawBackgroundColor(playerid, AracHUD[playerid][1], 51);
	PlayerTextDrawBoxColor(playerid, AracHUD[playerid][1], 50);
	PlayerTextDrawUseBox(playerid, AracHUD[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid, AracHUD[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, AracHUD[playerid][1], 0);

	AracHUD[playerid][2] = CreatePlayerTextDraw(playerid, 498.666748, 110.740737, "100%");
	PlayerTextDrawFont(playerid, AracHUD[playerid][2], 3);
	PlayerTextDrawLetterSize(playerid, AracHUD[playerid][2], 0.453999, 1.004148);
	PlayerTextDrawTextSize(playerid, AracHUD[playerid][2], 838.000000, 287.000000);
	PlayerTextDrawSetOutline(playerid, AracHUD[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, AracHUD[playerid][2], 0);
	PlayerTextDrawAlignment(playerid, AracHUD[playerid][2], 0);
	PlayerTextDrawColor(playerid, AracHUD[playerid][2], -2139062017);
	PlayerTextDrawBackgroundColor(playerid, AracHUD[playerid][2], 51);
	PlayerTextDrawBoxColor(playerid, AracHUD[playerid][2], 50);
	PlayerTextDrawUseBox(playerid, AracHUD[playerid][2], 0);
	PlayerTextDrawSetProportional(playerid, AracHUD[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, AracHUD[playerid][2], 0);

	AracHUD[playerid][3] = CreatePlayerTextDraw(playerid, 498.666748, 120.740737, "0KM");
	PlayerTextDrawFont(playerid, AracHUD[playerid][3], 3);
	PlayerTextDrawLetterSize(playerid, AracHUD[playerid][3], 0.453999, 1.004148);
	PlayerTextDrawTextSize(playerid, AracHUD[playerid][3], 838.000000, 287.000000);
	PlayerTextDrawSetOutline(playerid, AracHUD[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, AracHUD[playerid][3], 0);
	PlayerTextDrawAlignment(playerid, AracHUD[playerid][3], 0);
	PlayerTextDrawColor(playerid, AracHUD[playerid][3], -2139062017);
	PlayerTextDrawBackgroundColor(playerid, AracHUD[playerid][3], 51);
	PlayerTextDrawBoxColor(playerid, AracHUD[playerid][3], 50);
	PlayerTextDrawUseBox(playerid, AracHUD[playerid][3], 0);
	PlayerTextDrawSetProportional(playerid, AracHUD[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, AracHUD[playerid][3], 0);

	AracHUD[playerid][4] = CreatePlayerTextDraw(playerid, 498.666748, 130.740737, "100.0LT");
	PlayerTextDrawFont(playerid, AracHUD[playerid][4], 3);
	PlayerTextDrawLetterSize(playerid, AracHUD[playerid][4], 0.453999, 1.004148);
	PlayerTextDrawTextSize(playerid, AracHUD[playerid][4], 838.000000, 287.000000);
	PlayerTextDrawSetOutline(playerid, AracHUD[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, AracHUD[playerid][4], 0);
	PlayerTextDrawAlignment(playerid, AracHUD[playerid][4], 0);
	PlayerTextDrawColor(playerid, AracHUD[playerid][4], -2139062017);
	PlayerTextDrawBackgroundColor(playerid, AracHUD[playerid][4], 51);
	PlayerTextDrawBoxColor(playerid, AracHUD[playerid][4], 50);
	PlayerTextDrawUseBox(playerid, AracHUD[playerid][4], 0);
	PlayerTextDrawSetProportional(playerid, AracHUD[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, AracHUD[playerid][4], 0);

	TDYukle(playerid);

	Fuel_InitPlayer(playerid);

	new oyuncuip[20];
	GetPlayerIp(playerid, oyuncuip, sizeof(oyuncuip));
    format(query, sizeof(query), "SELECT * FROM `bans` WHERE `Ad` = '%s' OR `IP` = '%s'", Player_GetName(playerid), oyuncuip);
    mysql_tquery(g_SQL, query, "BanKontrol", "ds", playerid, oyuncuip);

    new name[MAX_PLAYER_NAME];

    GetPlayerName(playerid, name, MAX_PLAYER_NAME);

    for (new i; i < 17; i++)
    {
        WeaponSettings[playerid][i][Position][0] = -0.116;
        WeaponSettings[playerid][i][Position][1] = 0.189;
        WeaponSettings[playerid][i][Position][2] = 0.088;
        WeaponSettings[playerid][i][Position][3] = 0.0;
        WeaponSettings[playerid][i][Position][4] = 44.5;
        WeaponSettings[playerid][i][Position][5] = 0.0;
        WeaponSettings[playerid][i][Bone] = 1;
        WeaponSettings[playerid][i][Hidden] = false;
        WeaponSettings[playerid][i][duzenlendi] = 0;
    }
    WeaponTick[playerid] = 0;
    EditingWeapon[playerid] = 0;

    gPlayerAnimLibsPreloaded[playerid] = 0;
    if (!gPlayerAnimLibsPreloaded[playerid])
    {
    PreloadAnimLib(playerid, "AIRPORT");
    PreloadAnimLib(playerid, "Attractors");
    PreloadAnimLib(playerid, "BAR");
    PreloadAnimLib(playerid, "BASEBALL");
    PreloadAnimLib(playerid, "BD_FIRE");
    PreloadAnimLib(playerid, "benchpress");
    PreloadAnimLib(playerid, "BF_injection");
    PreloadAnimLib(playerid, "BIKED");
    PreloadAnimLib(playerid, "BIKEH");
    PreloadAnimLib(playerid, "BIKELEAP");
    PreloadAnimLib(playerid, "BIKES");
    PreloadAnimLib(playerid, "BIKEV");
    PreloadAnimLib(playerid, "BIKE_DBZ");
    PreloadAnimLib(playerid, "BMX");
    PreloadAnimLib(playerid, "BOX");
    PreloadAnimLib(playerid, "BSKTBALL");
    PreloadAnimLib(playerid, "BUDDY");
    PreloadAnimLib(playerid, "BUS");
    PreloadAnimLib(playerid, "CAMERA");
    PreloadAnimLib(playerid, "CAR");
    PreloadAnimLib(playerid, "CAR_CHAT");
    PreloadAnimLib(playerid, "CASINO");
    PreloadAnimLib(playerid, "CHAINSAW");
    PreloadAnimLib(playerid, "CHOPPA");
    PreloadAnimLib(playerid, "CLOTHES");
    PreloadAnimLib(playerid, "COACH");
    PreloadAnimLib(playerid, "COLT45");
    PreloadAnimLib(playerid, "COP_DVBYZ");
    PreloadAnimLib(playerid, "CRIB");
    PreloadAnimLib(playerid, "DAM_JUMP");
    PreloadAnimLib(playerid, "DANCING");
    PreloadAnimLib(playerid, "DILDO");
    PreloadAnimLib(playerid, "DODGE");
    PreloadAnimLib(playerid, "DOZER");
    PreloadAnimLib(playerid, "DRIVEBYS");
    PreloadAnimLib(playerid, "FAT");
    PreloadAnimLib(playerid, "FIGHT_B");
    PreloadAnimLib(playerid, "FIGHT_C");
    PreloadAnimLib(playerid, "FIGHT_D");
    PreloadAnimLib(playerid, "FIGHT_E");
    PreloadAnimLib(playerid, "FINALE");
    PreloadAnimLib(playerid, "FINALE2");
    PreloadAnimLib(playerid, "Flowers");
    PreloadAnimLib(playerid, "FOOD");
    PreloadAnimLib(playerid, "Freeweights");
    PreloadAnimLib(playerid, "GANGS");
    PreloadAnimLib(playerid, "GHANDS");
    PreloadAnimLib(playerid, "GHETTO_DB");
    PreloadAnimLib(playerid, "goggles");
    PreloadAnimLib(playerid, "GRAFFITI");
    PreloadAnimLib(playerid, "GRAVEYARD");
    PreloadAnimLib(playerid, "GRENADE");
    PreloadAnimLib(playerid, "GYMNASIUM");
    PreloadAnimLib(playerid, "HAIRCUTS");
    PreloadAnimLib(playerid, "HEIST9");
    PreloadAnimLib(playerid, "INT_HOUSE");
    PreloadAnimLib(playerid, "INT_OFFICE");
    PreloadAnimLib(playerid, "INT_SHOP");
    PreloadAnimLib(playerid, "JST_BUISNESS");
    PreloadAnimLib(playerid, "KART");
    PreloadAnimLib(playerid, "KISSING");
    PreloadAnimLib(playerid, "KNIFE");
    PreloadAnimLib(playerid, "LAPDAN1");
    PreloadAnimLib(playerid, "LAPDAN2");
    PreloadAnimLib(playerid, "LAPDAN3");
    PreloadAnimLib(playerid, "LOWRIDER");
    PreloadAnimLib(playerid, "MD_CHASE");
    PreloadAnimLib(playerid, "MEDIC");
    PreloadAnimLib(playerid, "MD_END");
    PreloadAnimLib(playerid, "MISC");
    PreloadAnimLib(playerid, "MTB");
    PreloadAnimLib(playerid, "MUSCULAR");
    PreloadAnimLib(playerid, "NEVADA");
    PreloadAnimLib(playerid, "ON_LOOKERS");
    PreloadAnimLib(playerid, "OTB");
    PreloadAnimLib(playerid, "PARACHUTE");
    PreloadAnimLib(playerid, "PARK");
    PreloadAnimLib(playerid, "PAULNMAC");
    PreloadAnimLib(playerid, "PED");
    PreloadAnimLib(playerid, "PLAYER_DVBYS");
    PreloadAnimLib(playerid, "PLAYIDLES");
    PreloadAnimLib(playerid, "POLICE");
    PreloadAnimLib(playerid, "POOL");
    PreloadAnimLib(playerid, "POOR");
    PreloadAnimLib(playerid, "PYTHON");
    PreloadAnimLib(playerid, "QUAD");
    PreloadAnimLib(playerid, "QUAD_DBZ");
    PreloadAnimLib(playerid, "RIFLE");
    PreloadAnimLib(playerid, "RIOT");
    PreloadAnimLib(playerid, "ROB_BANK");
    PreloadAnimLib(playerid, "ROCKET");
    PreloadAnimLib(playerid, "RUSTLER");
    PreloadAnimLib(playerid, "RYDER");
    PreloadAnimLib(playerid, "SCRATCHING");
    PreloadAnimLib(playerid, "SHAMAL");
    PreloadAnimLib(playerid, "SHOTGUN");
    PreloadAnimLib(playerid, "SILENCED");
    PreloadAnimLib(playerid, "SKATE");
    PreloadAnimLib(playerid, "SPRAYCAN");
    PreloadAnimLib(playerid, "STRIP");
    PreloadAnimLib(playerid, "SUNBATHE");
    PreloadAnimLib(playerid, "SWAT");
    PreloadAnimLib(playerid, "SWEET");
    PreloadAnimLib(playerid, "SWIM");
    PreloadAnimLib(playerid, "SWORD");
    PreloadAnimLib(playerid, "TANK");
    PreloadAnimLib(playerid, "TATTOOS");
    PreloadAnimLib(playerid, "TEC");
    PreloadAnimLib(playerid, "TRAIN");
    PreloadAnimLib(playerid, "TRUCK");
    PreloadAnimLib(playerid, "UZI");
    PreloadAnimLib(playerid, "VAN");
    PreloadAnimLib(playerid, "VENDING");
    PreloadAnimLib(playerid, "VORTEX");
    PreloadAnimLib(playerid, "WAYFARER");
    PreloadAnimLib(playerid, "WEAPONS");
    PreloadAnimLib(playerid, "WUZI");
    PreloadAnimLib(playerid, "SNM");
    PreloadAnimLib(playerid, "BLOWJOBZ");
    PreloadAnimLib(playerid, "SEX");
    PreloadAnimLib(playerid, "BOMBER");
    PreloadAnimLib(playerid, "RAPPING");
    PreloadAnimLib(playerid, "SHOP");
    PreloadAnimLib(playerid, "BEACH");
    PreloadAnimLib(playerid, "SMOKING");
    PreloadAnimLib(playerid, "FOOD");
    PreloadAnimLib(playerid, "ON_LOOKERS");
    PreloadAnimLib(playerid, "DEALER");
    PreloadAnimLib(playerid, "CRACK");
    PreloadAnimLib(playerid, "CARRY");
    PreloadAnimLib(playerid, "COP_AMBIENT");
    PreloadAnimLib(playerid, "PARK");
    PreloadAnimLib(playerid, "INT_HOUSE");
    PreloadAnimLib(playerid, "FOOD");
    gPlayerAnimLibsPreloaded[playerid] = 1;
    }
	return 1;
}

public OnPlayerDisconnect(playerid, reason)
{
	if(IsValidVehicle(DroneCar[playerid]))
		DestroyVehicle(DroneCar[playerid]), DroneCar[playerid] = 0;

	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    new id = Car_GetID(GetPlayerVehicleID(playerid));

		if (id != -1)
		{
			if( (AracInfo[id][aracTip] == 2 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 408) || AracInfo[id][aracTip] == 6)
			{
			    Arac_Spawn(id);
			}
		}
	}

	if(GetPVarInt(playerid, "pnsID") != -1)
		Tamirhane[GetPVarInt(playerid, "pnsID")][Tamirhane_Kullaniliyor] = 0;

    if (HasTrash[playerid]) Trash_ResetPlayer(playerid);

	if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER && GetVehicleModel(GetPlayerVehicleID(playerid)) == 574)
    {
        SetVehicleToRespawn(GetPlayerVehicleID(playerid));

        SetPlayerPos(playerid,2091.1765,-2026.0604,13.5469);
       	SetPlayerInterior(playerid,0);
       	SetPlayerVirtualWorld(playerid,0);
    }

	if (IsPlayerInsideTaxi(playerid))
    {
        LeaveTaxi(playerid, GetVehicleDriver(GetPlayerVehicleID(playerid)));
    }
	if (PetKontrol[playerid] != -1) cmd_pet(playerid);

    foreach (new i : Player)
	{
	    if (PlayerData[playerid][pDraggedBy] == i)
	    {
	        if (IsValidDynamicObject(Sedye[i]))
	        	DestroyDynamicObject(Sedye[i]);
	    }
	}

	for (new i = 0; i < 10; i++)
    	PlayerData[playerid][pTSlot][i] = false;

	SetPVarInt(playerid, "DuzenlenenObjeID", -1);
	SetPVarInt(playerid, "YeniHasari", 0);
    SetPVarInt(playerid, "OdunYolu", 0);
    SetPVarInt(playerid, "OdunGotur", 0);
    SetPVarInt(playerid, "MadenYolu", 0);
    SetPVarInt(playerid, "GiseGate", -1);
    SetPVarInt(playerid, "GiseKapali", -1);
    SetPVarInt(playerid, "GiseAcik", -1);

    //KillTimer(NT_Timer[playerid]);

    KillTimer(KelepceTimer[playerid]);

	foreach (new i:Petler) if (PetBilgi[i][petSahip] == PlayerData[playerid][pID] && PetBilgi[i][petDurum] == true)
	{
	    PetBilgi[i][petSaglik] = FCNPC_GetHealth(PetBilgi[i][NPCID]);
     	FCNPC_Destroy(PetBilgi[i][NPCID]);
      	PetBilgi[i][petTakip] = -1;
       	PetBilgi[i][NPCID] = -1;
        PetBilgi[i][petDurum] = false;
        DestroyDynamic3DTextLabel(PetBilgi[i][petText]);
        Pet_Kaydet(i);
	}
	if (PlayerData[playerid][pStand] == true)
	{
	    PlayerData[playerid][pStand] = false;
	    DestroyDynamicObject(PlayerData[playerid][pStandObject]);
	    DestroyDynamic3DTextLabel(PlayerData[playerid][pStandText]);
	}
	if (PlayerData[playerid][pIyilestiriyor] != -1)
	{
	    SetPVarInt(PlayerData[playerid][pIyilestiriyor], "Iyilestiriliyor", 0);
	}
	if(HasTrash[playerid]) Trash_ResetPlayer(playerid);
	new odaid = OdasiVarmi(playerid);
	if (odaid != -1)
	{
	    Paintball[odaid][odaExists] = false;
	    format(Paintball[odaid][odaIsim], 30, "");
	    format(Paintball[odaid][odaSifre], 30, "");
	    Paintball[odaid][odaSahip] = -1;
	    format(Paintball[odaid][odaTakim1Ad], 20, "");
	    format(Paintball[odaid][odaTakim2Ad], 20, "");
	    Paintball[odaid][odaZirh] = 0;
	    Paintball[odaid][odaSure] = 0;
	    Paintball[odaid][odaOyunTuru] = 1;
	    Paintball[odaid][odaArena] = 1;
	    Paintball[odaid][odaPuan][0] = 0;
	    Paintball[odaid][odaPuan][1] = 0;
	    Paintball[odaid][odaSayac] = 0;
	    foreach (new i:Player)
	    {
	        if (pbOda[i] == odaid && i != playerid)
	        {
	            SunucuMesaji(i, "Oda sahibi oyundan çiktigi için oda silindi.");
	            OdadanAt(i, 3);
	        }
	    }
	}
	if (pbOda[playerid] != -1)
	{
	    SetPVarInt(playerid, "inPaintball", 1);
	    OdadanAt(playerid, 0);
	}

    if (RegenTimer[playerid] != -1)
	{
	    KillTimer(RegenTimer[playerid]);
	    RegenTimer[playerid] = -1;
	}

	if (IsValidDynamic3DTextLabel(NameTag[playerid]))
		DestroyDynamic3DTextLabel(NameTag[playerid]);

    NameTag[playerid] = Text3D: -1;

	foreach (new i : Player)
	{
	    if (PlayerDrugData[i][DrugsOfferedBy] == playerid)
	    {
	        PlayerDrugData[i][DrugsOfferedBy] = INVALID_PLAYER_ID;
	        ShowPlayerDialog(i, -1, DIALOG_STYLE_MSGBOX, "Title", "Content", "Button1", "Button2");

            SunucuMesaji(i, "Uyusturucu satmaya çalistiginiz kisi oyundan çikti.");
	    }
	    if (PlayerData[i][pTaksiKabul] == playerid)
	    {
	        MesajGonder(i, "Müsteri oyundan çikis yapti.");
	        PlayerData[i][pTaksiKabul] = -1;
	        DisablePlayerCheckpoint(i);
	    }
	}
	foreach (new i:Player) if (PlayerData[i][pAdmin] >= 1 && PlayerData[i][pSpecID] == playerid)
	{
	    IzlemeBitir(i);
	    GameTextForPlayer(i, "~r~Oyundan Cikti", 1000, 4);
	}
	RemoveEffects(playerid);
	Player_SaveDrugs(playerid);
    new cadirid = CadirID(playerid);
   	if (cadirid != -1)
   	{
   	    foreach (new i:Player) if (PlayerData[i][pCadir] == cadirid)
        {
            SetPlayerPos(i, CadirData[cadirid][cadirPos][0], CadirData[cadirid][cadirPos][1], CadirData[cadirid][cadirPos][2]);
            SetPlayerInterior(i, 0);
            SetPlayerVirtualWorld(i, 0);
            PlayerData[i][pCadir] = -1;
        }
        Cadir_Sil(playerid);
  	}
  	for (new i; i<MAX_TALEP; i++) if (Talep[i][tExists] == true && Talep[i][tGonderen] == playerid)
  	{
  	    Talep[i][tExists] = false;
  	    format(Talep[i][tIcerik], 128, "");
  	    Talep[i][tGonderen] = -1;
  	    Talep[i][tIlgilenen] = -1;
  	}
    KumarReset(playerid, 1);
    KumarReset(GetPVarInt(playerid, "kumar_id"), 1);

	Oyuncu_Kaydet(playerid, 0);

	if (BalikTimer[playerid] != -1)
	{
	    KillTimer(BalikTimer[playerid]);
	    BalikTimer[playerid] = -1;
     	RemovePlayerAttachedObject(playerid, GetPVarInt(playerid, "OltaSlot"));
 		SetPVarInt(playerid, "OltaSlot", -1);
   		ClearAnimations(playerid);
   	}
   	if (PlayerData[playerid][pDestek] > 0)
   	{
   	    PlayerData[playerid][pDestek] = 0;
   	    DestekKapat(playerid, 1);
   	}
   	if (PlayerData[playerid][pBaygin] == 1)
   	{
   	    foreach (new i:Player)
	    {
	        if (EMSKabul[i] == playerid)
	        {
				EMSKabul[i] = INVALID_PLAYER_ID;
				DisablePlayerCheckpoint(i);
				SunucuMesaji(playerid, "Kabul ettiginiz yarali oyundan çikti.");
	        }
	    }
   	}
   	if (PlayerData[playerid][pMangalKuruldu] == true)
   	{
   	    PlayerData[playerid][pMangalKuruldu] = false;
		DestroyDynamicObject(PlayerData[playerid][pMangalObject][0]);
		DestroyDynamicObject(PlayerData[playerid][pMangalObject][1]);
		DestroyDynamic3DTextLabel(PlayerData[playerid][MangalText]);
		PlayerData[playerid][pYemekPisiriliyor] = 0;
		PlayerData[playerid][pPisirilenYemek] = 0;

   	}
   	if (PlayerData[playerid][pKampAtesi] == true)
   	{
   	    PlayerData[playerid][pKampAtesi] = false;
        DestroyDynamicObject(PlayerData[playerid][pKampAtesiObject]);
        //MesajGonder(playerid, "Kamp Atesi kaldirildi.");
  	}
   	foreach (new i:Player)
   	{
   	    if (PlayerData[i][yayinKonuk] == playerid)
   	    {
   	        PlayerData[i][yayinKonuk] = -1;
   	        SunucuMesaji(i, "Sizi yayina konuk eden kisi oyundan çiktigi için yayindan otomatik olarak çikarildiniz.");
   	    }
   	}
   	if (PlayerData[playerid][pAramada] != 0)
   	{
   		if (PlayerData[playerid][pAramada] == ARAMA_ARANIYOR)
   		{
   			SunucuMesaji(PlayerData[playerid][pCallLine], "Gelen çagri reddedildi ((Oyundan çikti))");
   			DeletePVar(playerid, "Arayan");
   			DeletePVar(PlayerData[playerid][pCallLine], "Arayan");
   			PlayerData[playerid][pAramada] = 0;
   			PlayerData[PlayerData[playerid][pCallLine]][pAramada] = 0;
   			PlayerData[PlayerData[playerid][pCallLine]][pCallLine] = 0;
   			PlayerData[playerid][pCallLine] = 0;
   		}
   		else if (PlayerData[playerid][pAramada] == ARAMA_ARIYOR)
   		{
   		    DeletePVar(playerid, "Arayan");
   			DeletePVar(PlayerData[playerid][pCallLine], "Arayan");
   			PlayerData[playerid][pAramada] = 0;
   			PlayerData[PlayerData[playerid][pCallLine]][pAramada] = 0;
   			PlayerData[PlayerData[playerid][pCallLine]][pCallLine] = 0;
   			PlayerData[playerid][pCallLine] = 0;
   		}
   		else if (PlayerData[playerid][pAramada] == ARAMA_KONUSUYOR)
   		{
   			SunucuMesaji(PlayerData[playerid][pCallLine], "Konustugunuz kisi telefonu kapatti. (( Oyundan çikti ))");
   			DeletePVar(playerid, "Arayan");
   			DeletePVar(PlayerData[playerid][pCallLine], "Arayan");
   			PlayerData[playerid][pAramada] = 0;
   			PlayerData[PlayerData[playerid][pCallLine]][pAramada] = 0;
   			PlayerData[PlayerData[playerid][pCallLine]][pCallLine] = 0;
   			PlayerData[playerid][pCallLine] = 0;
   		}
   	}
   	if (!IsPlayerNPC(playerid))
   	{
	   	new sebep[30];
	   	switch (reason)
	   	{
			case 0: sebep = "Zaman Aþýmý/Crash";
            case 1: sebep = "Kendi Ýsteðiyle";
            case 2: sebep = "kicklendi/banlandi";
            default: sebep = "Bilinmiyor";
	   	}
	   	SendNearbyMessage(playerid, 10.0, 0xAFAFAFFF, "%s sunucudan ayrildi. (%s)", ReturnName(playerid, 0), sebep);
   	}
   	if (BoomboxData[playerid][boomboxPlaced])
		Boombox_Destroy(playerid);
	Fuel_ResetPlayer(playerid);
	return 1;
}

public OnPlayerSpawn(playerid)
{
	StopAudioStreamForPlayer(playerid);

    //TextDrawShowForPlayer(playerid, OyuncuHUD_0);
	//TextDrawShowForPlayer(playerid, OyuncuHUD_5);

	if (GetPVarInt(playerid, "Kayit") == 1)
	{
	    SetPVarInt(playerid, "Kayit", 0);
	    SetPVarInt(playerid, "Logged",1);
        SetPVarInt(playerid, "GirisYapti", 0);
		SetPlayerColor(playerid,COLOR_WHITE);
        PlayerData[playerid][pTackle] = 0;

		TogglePlayerSpectating(playerid, 0);
        SetPlayerInterior(playerid,0);
        SetPlayerPos(playerid, 291.6912, 310.0609, 999.1484);
        SetPlayerFacingAngle(playerid, 268.7956);
        SetPlayerVirtualWorld(playerid,0);
        SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);
        SetCameraBehindPlayer(playerid);

        PlayerData[playerid][pLevel] = 1;

        SetPlayerScore(playerid, PlayerData[playerid][pLevel]);

  		new yazi[200];
		if(PlayerData[playerid][pCinsiyet] == 1)
		{
	  		for(new i; i<sizeof(g_aMaleSkins); i++)
	  		{
	  		    format(yazi, sizeof(yazi), "%s%d\n", yazi, g_aMaleSkins[i]);
	  		}
			ShowPlayerDialog(playerid, 75, DIALOG_STYLE_PREVMODEL, "Kiyafetler", yazi, "Sec", "Geri");
		}
		else
		{
		    for(new i; i<sizeof(g_aFemaleSkins); i++)
	  		{
	  		    format(yazi, sizeof(yazi), "%s%d\n", yazi, g_aFemaleSkins[i]);
	  		}
			ShowPlayerDialog(playerid, 75, DIALOG_STYLE_PREVMODEL, "Kiyafetler", yazi, "Sec", "Geri");
		}

        NT_Timer[playerid] = SetTimerEx("NT_Update", 500, true, "d", playerid);

        SetPlayerPos(playerid, 1764.9613,-1341.6626,15.7578,356.8369);
		for (new i; i < 8; i++)
		{
			//PlayerTextDrawShow(playerid, RainHUD[playerid][i]);
		}

		PlayerData[playerid][pHealth] = 100.0;
		PlayerData[playerid][pArmour] = 0.0;
		PlayerData[playerid][pSilahHakki] = SilahAveraj(playerid);
		PlayerData[playerid][pSilahSuresi] = 0;
		SetPlayerHealth(playerid, 100.0);
		SetPlayerArmour(playerid, 0.0);
	}
	if (GetPVarInt(playerid, "GirisYapti") == 1)
	{
	    DeletePVar(playerid, "GirisYapti");
	    SetPVarInt(playerid, "Logged", 1);
	    Player_Init(playerid);

		if (PlayerData[playerid][pBaygin] == 1)
	    {
	        DeathPos[playerid][0] = PlayerData[playerid][pCikisPos][0];
	        DeathPos[playerid][1] = PlayerData[playerid][pCikisPos][1];
	        DeathPos[playerid][2] = PlayerData[playerid][pCikisPos][2];
	        DeathInterior[playerid] = PlayerData[playerid][pCikisInt];
	        DeathWorld[playerid] = PlayerData[playerid][pCikisVw];
	    }

  		if (PlayerData[playerid][pKelepce] == 1)
		{
		    new str[256];
			format(str, sizeof str, "%d 60 Kelepçeliyken baglanti kopmasi", playerid);
			cmd_jail(INVALID_PLAYER_ID, str);
			MesajGonder(playerid, "Kelepçeliyken baglantin koptugu için 1 saat hapise atildin.");
		}

	    if (PlayerData[playerid][pHapisSure] > 0)
	    {
	        if (PlayerData[playerid][pHapis] == 1)
	        {
	            SetPlayerInPrison(playerid);
	            ObjelerYukleniyor(playerid);
	            SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);
	            SetPlayerHealth(playerid,PlayerData[playerid][pHealth]);
	    		SetPlayerArmour(playerid,PlayerData[playerid][pArmour]);
	    		SetPlayerFightingStyle(playerid, PlayerData[playerid][pDovusStili]);
	    		PlayerTextDrawShow(playerid, HapisTD[playerid]);

	    		SunucuMesaji(playerid, "Bitmemis hapis cezaniz var, tekrar hapise gönderildiniz.");
	    		ResetWeapons(playerid);
	    		if (Bildirim_OkunmamisBildirimler(PlayerData[playerid][pID]) > 0)
	    		{
	        		SunucuMesaji(playerid, "Okunmamis %d adet bildiriminiz var. (/bildirimler)",Bildirim_OkunmamisBildirimler(PlayerData[playerid][pID]));
	    		}
	    		return 1;
	        }
	        else
	        {
	            SetPlayerPos(playerid, 197.6346, 175.3765, 1003.0234);
    			SetPlayerInterior(playerid, 3);

    			SetPlayerVirtualWorld(playerid, (playerid + 100));
    			SetPlayerFacingAngle(playerid, 0.0);

    			SetCameraBehindPlayer(playerid);
    			ObjelerYukleniyor(playerid);
    			SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);
	            SetPlayerHealth(playerid,PlayerData[playerid][pHealth]);
	    		SetPlayerArmour(playerid,PlayerData[playerid][pArmour]);
	    		SetPlayerFightingStyle(playerid, PlayerData[playerid][pDovusStili]);
	    		PlayerTextDrawShow(playerid, HapisTD[playerid]);

	    		SunucuMesaji(playerid, "Bitmemis hapis cezaniz var, tekrar hapise gönderildiniz. (Sebep: %s, Admin: %s)", PlayerData[playerid][pHapisSebep], PlayerData[playerid][pHapiseAtan]);
	    		if (Bildirim_OkunmamisBildirimler(PlayerData[playerid][pID]) > 0)
	    		{
	        		SunucuMesaji(playerid, "Okunmamis %d adet bildiriminiz var. (/bildirimler)",Bildirim_OkunmamisBildirimler(PlayerData[playerid][pID]));
	    		}
	    		return 1;
	        }
	    }
	    SetPlayerInterior(playerid,PlayerData[playerid][pCikisInt]);
	    SetPlayerPos(playerid,PlayerData[playerid][pCikisPos][0],PlayerData[playerid][pCikisPos][1],PlayerData[playerid][pCikisPos][2]);
	    SetPlayerVirtualWorld(playerid,PlayerData[playerid][pCikisVw]);
	    ObjelerYukleniyor(playerid);
	    SetPlayerFightingStyle(playerid, PlayerData[playerid][pDovusStili]);
	    if (PlayerData[playerid][pOnDuty] == 1 && PlayerData[playerid][pOnDutySkin] > 0 && PlayerData[playerid][pFaction] != -1)
	    {
	        SetFactionColor(playerid);
	        SetPlayerSkin(playerid,PlayerData[playerid][pOnDutySkin]);
	    }
	    else
	    {
	        SetPlayerSkin(playerid,PlayerData[playerid][pSkin]);
	    }

		SetPlayerHealth(playerid,PlayerData[playerid][pHealth]);
	    SetPlayerArmour(playerid,PlayerData[playerid][pArmour]);

		new queryx[256];
  		mysql_format(g_SQL, queryx, sizeof(queryx), "SELECT * FROM weaponsettings WHERE sOwner = '%d'", PlayerData[playerid][pID]);
        mysql_tquery(g_SQL, queryx, "OnLoadWeapons", "d", playerid);

		AksesuarAyarla(playerid);
	    if (GetServerBilgi("2xpayday") == 1) SendClientMessage(playerid, COLOR_LIGHTBLUE, "2X payday aktiftir. (iki katý tecrübe puaný, para ve saati)");
	    if (GetServerBilgi("2xBalik") == 1) SendClientMessage(playerid, COLOR_YELLOW, "2x Balik Eventi (iki katý balýk fiyatlarý) aktif.");
	    if (PlayerData[playerid][pAdmin] > 0) AdminMessage(-1, "{ff6600}%s (%s), %s olarak giriþ yaptý.", ReturnName(playerid, 0), PlayerData[playerid][pAdminName], GetAdminRank(playerid));
	    if (PlayerData[playerid][pAdmin] > 0) SendClientMessageEx(playerid, -1, "{ff6600}%s olarak giriþ yaptýnýz, iyi görevler.", GetAdminRank(playerid));
	    if (PlayerData[playerid][pFaction] != -1 && strlen(Birlikler[PlayerData[playerid][pFaction]][birlikDuyuru]) > 0)
	    {
	        SendClientMessageEx(playerid,-1, "{C2A2DA}[BIRLIK DUYURUSU]: {FFFFFF}%s",Birlikler[PlayerData[playerid][pFaction]][birlikDuyuru]);
		}
		SetPlayerWantedLevel(playerid, PlayerData[playerid][pAranma]);
	    if (Bildirim_OkunmamisBildirimler(PlayerData[playerid][pID]) > 0)
	    {
	        SunucuMesaji(playerid, "Okunmamýþ %d adet bildiriminiz var. (/bildirimler)",Bildirim_OkunmamisBildirimler(PlayerData[playerid][pID]));
	    }

        SetTimerEx("SilahlariniVer", 5000, false, "d", playerid);
	}
	if (PetKontrol[playerid] != -1)
	{
 		SetPlayerSkin(playerid, GetPVarInt(playerid, "LastSkin"));
 		SetPlayerPos(playerid, LastPos[playerid][0], LastPos[playerid][1], LastPos[playerid][2]);
 		SetPlayerInterior(playerid, GetPVarInt(playerid, "LastInterior"));
	    SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "LastVw"));
	    SetPlayerHealth(playerid, GetPVarFloat(playerid, "LastHealth"));
	    SetPlayerArmour(playerid, GetPVarFloat(playerid, "LastArmour"));
	    DeletePVar(playerid, "LastSkin");
	    LastPos[playerid][0] = 0.0;
	    LastPos[playerid][1] = 0.0;
	    LastPos[playerid][2] = 0.0;
	    DeletePVar(playerid, "LastInterior");
	    DeletePVar(playerid, "LastVw");
	    DeletePVar(playerid, "LastHealth");
	    DeletePVar(playerid, "LastArmour");
        PetKontrol[playerid] = -1;
	}
	if (PlayerData[playerid][pHapisSure] > 0)
 	{
	        if (PlayerData[playerid][pHapis] == 1)
	        {
	            SetPlayerInPrison(playerid);
	            ObjelerYukleniyor(playerid);
	            SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);
	            CanAyarla(playerid, 100);
	    		SetPlayerArmour(playerid, 0);
	    		SetPlayerFightingStyle(playerid, PlayerData[playerid][pDovusStili]);
	    		PlayerTextDrawShow(playerid, HapisTD[playerid]);
	    		return 1;
	        }
	        else
	        {
	            SetPlayerPos(playerid, 197.6346, 175.3765, 1003.0234);
    			SetPlayerInterior(playerid, 3);

    			SetPlayerVirtualWorld(playerid, (playerid + 100));
    			SetPlayerFacingAngle(playerid, 0.0);

    			SetCameraBehindPlayer(playerid);
    			ObjelerYukleniyor(playerid);
    			SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);
	            SetPlayerHealth(playerid, 100);
	    		SetPlayerArmour(playerid, 0);
	    		SetPlayerFightingStyle(playerid, PlayerData[playerid][pDovusStili]);
	    		PlayerTextDrawShow(playerid, HapisTD[playerid]);
	    		return 1;
	        }
	}
	if (pbOda[playerid] != -1 && pbTakim[playerid] != 0)
	{
	    PaintballSpawn(playerid);
	}
	if (PlayerData[playerid][pBaygin] == 2 && GetPVarInt(playerid, "Logged") == 1)
	{
	    SetPlayerPos(playerid, PlayerData[playerid][pCikisPos][0], PlayerData[playerid][pCikisPos][1], PlayerData[playerid][pCikisPos][2]);
	    ResetWeapons(playerid);
		if (GetFactionType(playerid) == BIRLIK_LSPD || GetFactionType(playerid) == BIRLIK_LSMD || GetFactionType(playerid) == BIRLIK_FBI)
		{
		    ResetPlayerWeapons(playerid);
		    SetWeapons(playerid);

		    PlayerData[playerid][pTopallama] = false;
		    PlayerData[playerid][pTopallamaSayac] = 0;

		    //SendClientMessage(playerid, 0xFF8282AA, "Hastane masraflari devlet tarafindan ödendi, iyi günler.");
		    if (PlayerData[playerid][pAranma] > 0)
		    {
		        SendBirlikMessageEx(BIRLIK_LSPD, COLOR_DEPARTMENT, "** DEPARTMAN: All Saints Hastanesi %s adli kisiyi aranan olarak bildirdi.",ReturnName(playerid,0));
		        SendBirlikMessageEx(BIRLIK_FBI, COLOR_DEPARTMENT, "** DEPARTMAN: All Saints Hastanesi %s adli kisiyi aranan olarak bildirdi.",ReturnName(playerid,0));
		    }
		}
		else
		{
            PlayerData[playerid][pTopallama] = false;
		    PlayerData[playerid][pTopallamaSayac] = 0;
			ResetWeapons(playerid);
		    if (PlayerData[playerid][pAranma] > 0)
		    {
		        SendBirlikMessageEx(BIRLIK_LSPD, COLOR_DEPARTMENT, "** DEPARTMAN: All Saints Hastanesi %s adli kisiyi aranan olarak bildirdi.",ReturnName(playerid,0));
		        SendBirlikMessageEx(BIRLIK_FBI, COLOR_DEPARTMENT, "** DEPARTMAN: All Saints Hastanesi %s adli kisiyi aranan olarak bildirdi.",ReturnName(playerid,0));

    new cstring[64];
    format(cstring, sizeof(cstring), "~w~Hos geldin ~n~~y~ %s", ReturnName(playerid));
    GameTextForPlayer(playerid, cstring, 1000, 1);
		    }
		}
	}
	return 1;
}

forward SilahlariniVer(playerid);
public SilahlariniVer(playerid)
{
    SetWeapons(playerid);
	return 1;
}

public OnPlayerPrepareDeath(playerid, animlib[32], animname[32], &anim_lock, &respawn_time)
{
    if (IsPlayerNPC(playerid)) return 0;
    if (PetKontrol[playerid] != -1)
	{
	    PetBilgi[PetKontrol[playerid]][petYarali] = 1;
	    FCNPC_Destroy(PetBilgi[PetKontrol[playerid]][NPCID]);
      	PetBilgi[PetKontrol[playerid]][petTakip] = -1;
       	PetBilgi[PetKontrol[playerid]][NPCID] = -1;
        PetBilgi[PetKontrol[playerid]][petDurum] = false;
        DestroyDynamic3DTextLabel(PetBilgi[PetKontrol[playerid]][petText]);
        return 1;
	}
    PlayerDrugData[playerid][DrugsCooldown] = 0;

    foreach (new i : Player)
	{
	    if (PlayerData[playerid][pDraggedBy] == i)
	    {
	        if (IsValidDynamicObject(Sedye[i]))
	        	DestroyDynamicObject(Sedye[i]);
	    }
	}

	SetPVarInt(playerid, "DuzenlenenObjeID", -1);
    SetPVarInt(playerid, "OdunYolu", 0);
	SetPVarInt(playerid, "OdunGotur", 0);
    SetPVarInt(playerid, "MadenYolu", 0);
    SetPVarInt(playerid, "GiseGate", -1);
    SetPVarInt(playerid, "GiseKapali", -1);
    SetPVarInt(playerid, "GiseAcik", -1);

    EmniyetKemeri[playerid] = false;

    KillTimer(KelepceTimer[playerid]);

    if (RegenTimer[playerid] != -1)
	{
	    KillTimer(RegenTimer[playerid]);
	    RegenTimer[playerid] = -1;
	}
	if (EffectTimer[playerid] != -1)
	{
	    KillTimer(EffectTimer[playerid]);
	    EffectTimer[playerid] = -1;
	}
	foreach (new i : Player)
	{
	    if (PlayerDrugData[i][DrugsOfferedBy] == playerid)
	    {
	        PlayerDrugData[i][DrugsOfferedBy] = INVALID_PLAYER_ID;
	        ShowPlayerDialog(i, -1, DIALOG_STYLE_MSGBOX, "Title", "Content", "Button1", "Button2");

            SunucuMesaji(i, "Uyusturucu satmak istediginiz oyuncu öldü.");
	    }
	}
	DisablePlayerCheckpoint(playerid);
	if (GetPVarInt(playerid, "IpBaglandi") == 1)
	{
	    SetPVarInt(playerid, "IpBaglandi", 0);
	    TogglePlayerControllable(playerid, true);
	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	}
	if (GetPVarInt(playerid, "GozBaglandi") == 1)
	{
	    SetPVarInt(playerid, "GozBaglandi", 0);
	    TextDrawHideForPlayer(playerid, Karanlik);
	}
	if (PlayerData[playerid][pDragged])
	{
	    PlayerData[playerid][pDragged] = 0;
	    PlayerData[playerid][pDraggedBy] = INVALID_PLAYER_ID;
	    KillTimer(PlayerData[playerid][pDragTimer]);
	}
	foreach (new i: Player)
	{
	    if (PlayerData[i][pDragged] ==1 && PlayerData[i][pDraggedBy] == playerid)
	    {
	        PlayerData[i][pDragged] = 0;
	        PlayerData[i][pDraggedBy] = INVALID_PLAYER_ID;
	        KillTimer(PlayerData[i][pDragTimer]);
	    }
	}
	new killerid = PlayerData[playerid][pLastShot];
	if (pbOda[playerid] == -1)
	{
	    if (killerid != INVALID_PLAYER_ID) PlayerData[killerid][pOldurme]++;
	    PlayerData[playerid][pOlme]++;
	}
	if (killerid != INVALID_PLAYER_ID && pbOda[playerid] != -1 && pbOda[playerid] == pbOda[killerid])
	{
	    pbOldurme[killerid]++;
	    pbOlme[playerid]++;
	    if (Paintball[pbOda[playerid]][odaOyunTuru] == 1)
	    {
	        switch (pbTakim[killerid])
	        {
	            case 1: Paintball[pbOda[killerid]][odaPuan][0]++;
	            case 2: Paintball[pbOda[killerid]][odaPuan][1]++;
	        }
	    }
	}
	if (IsPlayerInAnyVehicle(playerid)) AractanIndir(playerid);
	if (PlayerData[playerid][pBaygin] == 1)
	{
	    animlib = "";
	    respawn_time = 100;
	    SaveWeapons(playerid);
	    PlayerData[playerid][pBaygin] = 2;
		return 1;
	}
	if (PlayerData[playerid][pHapisSure] < 1 && PlayerData[playerid][pBaygin] == 0 && pbOda[playerid] == -1)
	{
	    if (PlayerData[playerid][pAramada] != 0) CagriKapat(playerid);
	    SaveWeapons(playerid);
	    SetPVarInt(playerid, "CPsineGelindi", 0);
	    new Float:xcamera, Float:ycamera, Float:zcamera;
        GetPlayerPos(killerid, xcamera, ycamera, zcamera);
		if (GetPlayerWeapon(killerid) == 0 && GetPlayerDistanceFromPoint(killerid, xcamera, ycamera, zcamera) >= 3.0)
		{
            AdminMessage(COLOR_LIGHTRED, "AdmLog: %s adlý orospu çocu herkesi öldürmeye çalýþtýðý için sunucudan atýldý.",ReturnName(killerid, 0), ReturnName(killerid, 0));
	        Log_Write("logs/AntiCheat.log", "[%s] %s adlý orospu çocu herkesi öldürmeye çalýþtýðý için sunucudan atýldý.", ReturnDate(), ReturnName(killerid, 0));
			Kick(killerid);
			PlayerData[playerid][pBaygin] = 0;
			return 0;
		}
		else
		{
		    PlayerData[playerid][pBaygin] = 1;
		    if (killerid != INVALID_PLAYER_ID) SunucuMesaji(playerid, "%s adli kisi sizi yere düsürdü.", ReturnName(killerid, 0));
		}
		new id = GetNearestCCTV(playerid);
	    new Float:pos[3];
	    GetPlayerPosEx(playerid, pos[0], pos[1], pos[2]);
		if (id != -1)
		{
			SendBirlikMessageEx(BIRLIK_LSMD, 0xFF8282AA, "%s adli kisinin %s bölgesinde yarali oldugu tespit edildi. (/yaralilar)", ReturnName(playerid, 0), GetLocation(pos[0], pos[1], pos[2]));
		}
	}
	if (PlayerData[playerid][pShootedBody] != -1)
	{
		switch (PlayerData[playerid][pShootedBody])
		{
		    case 4, 3:
		    {
		        if (killerid != INVALID_PLAYER_ID)
		        {
			        animlib = "PED";
			    	animname = "KO_shot_stom";
		    	}
		    }
		    case 9:
		    {
		        animlib = "PED";
		    	animname = "KO_shot_face";
		    }
		    default:
		    {
		        animlib = "PED";
	    		animname = "KO_skid_back";
		    }
		}
	}
	else
	{
	    animlib = "PED";
	    animname = "KO_skid_back";
	}
	PlayerData[playerid][pShootedBody] = -1;
	PlayerData[playerid][pLastShot] = INVALID_PLAYER_ID;

	if (PlayerData[playerid][pKelepce] == 1)
	{
	 	PlayerData[playerid][pKelepce] = 0;
		PlayerData[playerid][pDragged] = 0;
		PlayerData[playerid][pDraggedBy] = INVALID_PLAYER_ID;
		KillTimer(PlayerData[playerid][pDragTimer]);
	    SetPlayerCuffed(playerid, false);
    }
	return 1;
}

public OnPlayerDeathFinished(playerid, bool:cancelable)
{
	if (PlayerData[playerid][pBaygin] != 2 && PetKontrol[playerid] == -1 && pbOda[playerid] == -1 && PlayerData[playerid][pHapisSure] < 1 && cancelable) return 0;

	return 1;
}

public OnVehicleSpawn(vehicleid)
{
	for (new i; i<5; i++)
	{
	    if (IsValidDynamicObject(AracTohumObjeler[vehicleid][i]))
			DestroyDynamicObject(AracTohumObjeler[vehicleid][i]);
	}

	AracTohumlar[vehicleid][0] = 0;
	AracTohumlar[vehicleid][1] = 0;
	AracTohumlar[vehicleid][2] = 0;

    CarUpdate[vehicleid] = 0;
	Flasher[vehicleid] = 0;
    FlasherState[vehicleid] = 0;

	Delete3DTextLabel(Vehicle3DText[vehicleid]);

	AracYuk[vehicleid] = 0;
	OtobusAracCP[vehicleid] = 0;
	EhliyetAracCP[vehicleid] = 0;
	TirciYuk[vehicleid] = 0;
	BenzinlikYuk[vehicleid] = 0;
	AracCP[vehicleid] = -1;

	KillTimer(AracRespawnTimer[vehicleid]);

 	VehicleCallSign[vehicleid] = 0;

  	format(VehicleText[vehicleid], 24, "");

  	LoadedTrash[vehicleid] = 0;

  	Vehicle_RemoveLogs(vehicleid);
	return 1;
}

public OnVehicleDeath(vehicleid, killerid)
{
    Vehicle_RemoveLogs(vehicleid);

    if(IsPlayerConnected(killerid))
    {
    	OnPlayerExitVehicle(killerid, vehicleid);
    }

	return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	if (IsPlayerNearPNS(playerid) != -1)
	{
	    new id = Car_GetID(vehicleid);
	    ChangeVehicleColor(vehicleid, AracInfo[id][aracRenkler][0],  AracInfo[id][aracRenkler][1]);
	}
	else
	{
		new id = Car_GetID(vehicleid);

	    AracInfo[id][aracRenkler][0] = color1;
    	AracInfo[id][aracRenkler][1] = color2;

        ChangeVehicleColor(vehicleid, AracInfo[id][aracRenkler][0],  AracInfo[id][aracRenkler][1]);

		Arac_Kaydet(id);
	}
    return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
	if (GetPlayerInterior(playerid) == 0)
	{
	    return Ban(playerid);
	}

    new
        id = Car_GetID(vehicleid);

    if (id != -1)
    {
        ParaVer(playerid, -GetComponentPrice(componentid));
        AracInfo[id][aracMods][GetVehicleComponentType(componentid)] = componentid;
        Arac_Kaydet(id);
    }
    return 1;
}

public OnEnterExitModShop(playerid, enterexit, interiorid)
{
    if (enterexit == 0)
    {
        new id = Car_GetID(GetPlayerVehicleID(playerid));

        if (id == -1)
            return false;

        for (new i = 0; i < 14; i++)
        {
            AracInfo[id][aracMods][i] = GetVehicleComponentInSlot(GetPlayerVehicleID(playerid), i);
        }

        Arac_Kaydet(id);
    }
	return true;
}

public OnActorStreamIn(actorid, forplayerid)
{
	for (new i; i<10; i++)
	{
	    if (i < 2)
	    {
		    if (actorid == DealerData[i][dealerActorID])
		    {
		        SetActorPos(actorid, DealerData[i][dealerX], DealerData[i][dealerY], DealerData[i][dealerZ]);
		    }
	    }
	    if (actorid == BankerData[i][bankerActorID])
	    {
	        SetActorPos(actorid, BankerData[i][bankerX], BankerData[i][bankerY], BankerData[i][bankerZ]);
	    }
	}
	return 1;
}
public OnPlayerText(playerid, text[])
{
	if (!OyundaDegil(playerid))
	{
	    HataMesajGonder(playerid, "Þu an konuþamazsýn.");
	    return 0;
	}
	if (!strcmp(text, ":D", true))
	{
		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s kahkaha atar.", ReturnName(playerid, 0));
		return 0;
	}
	if (!strcmp(text, ":P", true))
	{
		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s dil çýkarýr.", ReturnName(playerid, 0));
		return 0;
	}
	if (!strcmp(text, ":)", true))
	{
		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s gülümser.", ReturnName(playerid, 0));
		return 0;
	}
	if (!strcmp(text, ":S", true))
	{
		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s yüzünü buruþturur.", ReturnName(playerid, 0));
		return 0;
	}
	if (!strcmp(text, ":(", true))
	{
		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s yüzünü üzgün bir ifade yapar.", ReturnName(playerid, 0));
		return 0;
	}
	if (PlayerData[playerid][yayinKonuk] != -1 && GetFactionType(PlayerData[playerid][yayinKonuk]) == BIRLIK_HABER && IsPlayerInAnyVehicle(playerid) && IsNewsVehicle(GetPlayerVehicleID(playerid)))
	{
	    foreach (new i: Player) if ((PlayerData[i][pDinle] == PlayerData[PlayerData[playerid][yayinKonuk]][pFaction] || i == playerid) && PlayerData[i][pAyarlar][2] == 0)
	    {
	        if (strlen(text) > 64)
	        {
	            SendClientMessageEx(i, 0x42f445FF, "[%s] Konuk %s: %.64s", Birlikler[PlayerData[PlayerData[playerid][yayinKonuk]][pFaction]][birlikAd], ReturnName(playerid, 0), text);
	            SendClientMessageEx(i, 0x42f445FF, "...%s", text[64]);
	        }
	        else
	        {
	            SendClientMessageEx(i, 0x42f445FF, "[%s] Konuk %s: %s", Birlikler[PlayerData[PlayerData[playerid][yayinKonuk]][pFaction]][birlikAd], ReturnName(playerid, 0), text);
	        }
	    }
	    return 0;
	}

	new str[128];
	format(str, sizeof(str), "%s: %s", ReturnName(playerid, 0), text);
	if (strlen(str) > 64)
	{
/*	  format(str, sizeof(str), "%s: ...%.64s", ReturnName(playerid, 0), text);
	  SendClientMessageEx(playerid, -1, str);*/
	  format(str, sizeof(str), "%s: ...%s", ReturnName(playerid, 0), text[64]);
	  SendClientMessageEx(playerid, -1, str);
	}
/*	else
	{
	  format(str, sizeof(str), "%s: %s", ReturnName(playerid, 0), text);
	  SendClientMessage(playerid, -1, str);
	}*/
	if (PlayerData[playerid][pAdminDuty] == 1 && PlayerData[playerid][pAdmin] >= 1)
 		format(str, sizeof(str), "{F3F3F3}(({cc0000} %s %s{cc0000}: {FFFFFF}%s ))", GetAdminRank(playerid), PlayerData[playerid][pAdminName], text);

    if (PlayerData[playerid][pHelperDuty] == 1 && PlayerData[playerid][pHelper] >= 1)
		format(str, sizeof(str), "{F3F3F3}(( {FF8C00}(Lv. %d) Supporter %s: {FFFFFF}%s ))", PlayerData[playerid][pHelper], PlayerData[playerid][pAdminName], text);

	if (IsPlayerInAnyVehicle(playerid))
	{
        if (PlayerData[playerid][pAramada] == ARAMA_KONUSUYOR && OyundaDegil(PlayerData[playerid][pCallLine]))
        {
            if (!AracInfo[Car_GetID(GetPlayerVehicleID(playerid))][aracCamlar])
            {
                SendVehicleMessage(-1, GetPlayerVehicleID(playerid), COLOR_WHITE, "(Cep Telefonu) %s: %s", ReturnName(playerid, 0), text);
                if (PlayerData[PlayerData[playerid][pCallLine]][pTelefonAyar][2] == 1)
				{
					if (IsPlayerInAnyVehicle(PlayerData[playerid][pCallLine]) && !AracInfo[Car_GetID(GetPlayerVehicleID(PlayerData[playerid][pCallLine]))][aracCamlar]) SendVehicleMessage(PlayerData[playerid][pCallLine], GetPlayerVehicleID(PlayerData[playerid][pCallLine]), COLOR_YELLOW, "(Telefon Höparlörü)? %s", text);
					SendClientMessageEx(PlayerData[playerid][pCallLine], COLOR_YELLOW, "(Cep Telefonu) %s: %s", TelNo(PlayerData[playerid][pCallLine], playerid), text);
				}
				else
				{
				    SendClientMessageEx(PlayerData[playerid][pCallLine], COLOR_YELLOW, "(Cep Telefonu) %s: %s", TelNo(PlayerData[playerid][pCallLine], playerid), text);

				}
            }
            else
            {
                SendNearbyMessage(playerid, 11.0, COLOR_WHITE, "(Cep Telefonu) %s: %s", ReturnName(playerid, 0), text);
                if (IsPlayerInAnyVehicle(PlayerData[playerid][pCallLine]) && !AracInfo[Car_GetID(GetPlayerVehicleID(PlayerData[playerid][pCallLine]))][aracCamlar] && PlayerData[PlayerData[playerid][pCallLine]][pTelefonAyar][2] == 1) SendVehicleMessage(PlayerData[playerid][pCallLine], GetPlayerVehicleID(PlayerData[playerid][pCallLine]), COLOR_YELLOW, "(Telefon Höparlörü)? %s", text);
				SendClientMessageEx(PlayerData[playerid][pCallLine], COLOR_YELLOW, "(Cep Telefonu) %s: %s", TelNo(PlayerData[playerid][pCallLine], playerid), text);
			}
		}
		else
		{
		    if (IsWindowedVehicle(GetPlayerVehicleID(playerid)) && !AracInfo[Car_GetID(GetPlayerVehicleID(playerid))][aracCamlar]) SendVehicleMessage(-1, GetPlayerVehicleID(playerid), 0x18D1F2AA, "{18d1f2}[Araç Ýçi] %s: %s", ReturnName(playerid, 0), text);
		    else
		    {
		        ProxDetector2(30.0, playerid, str, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
		    }
		}
	}
	else
	{
		if (PlayerData[playerid][pAramada] == ARAMA_KONUSUYOR && OyundaDegil(PlayerData[playerid][pCallLine]))
		{
			if (PlayerData[PlayerData[playerid][pCallLine]][pTelefonAyar][2] == 1)
			{
				if (IsPlayerInAnyVehicle(PlayerData[playerid][pCallLine]) && !AracInfo[Car_GetID(GetPlayerVehicleID(PlayerData[playerid][pCallLine]))][aracCamlar]) SendVehicleMessage(PlayerData[playerid][pCallLine], GetPlayerVehicleID(PlayerData[playerid][pCallLine]), COLOR_YELLOW, "(hoparlor) (cep telefonu): %s", text);
				else SendNearbyMessage2(PlayerData[playerid][pCallLine], 11.0, COLOR_YELLOW, "(Hoparlör) (Cep Telefonu): %s", text);
				SendClientMessageEx(PlayerData[playerid][pCallLine], COLOR_YELLOW, "(Cep Telefonu) %s: %s", TelNo(PlayerData[playerid][pCallLine], playerid), text);

			}
			else
			{
				SendClientMessageEx(PlayerData[playerid][pCallLine], COLOR_YELLOW, "(Cep Telefonu) %s: %s", TelNo(PlayerData[playerid][pCallLine], playerid), text);
			}
		}
		if (PlayerData[playerid][pAramada] == 0) ProxDetector2(30.0, playerid, str, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
		else
		{
				SendNearbyMessage(playerid, 11.0, COLOR_WHITE, "(cep telefonu) %s: %s", ReturnName(playerid, 0), text);
		}
	}
	if (!IsPlayerInAnyVehicle(playerid) && PlayerData[playerid][pAramada] == 0 && PlayerData[playerid][pBaygin] == 0 && PlayerData[playerid][pKelepce] == 0 && PlayerData[playerid][pSoklandi] == 0 && PlayerData[playerid][pYereYatirildi] == 0 && PlayerData[playerid][pAyarlar][4] == 0 && PetKontrol[playerid] == -1)
	{
	    ApplyAnimation(playerid, "PED", "IDLE_CHAT",4.0,0,1,1,0,strlen(text)*80);
	    ApplyAnimation(playerid, "PED", "IDLE_CHAT",4.0,0,1,1,0,strlen(text)*80);
	}
	new id = PetYakin(playerid, 15.0);
	if (id != -1 && PetBilgi[id][petDurum] == true && PetBilgi[id][petSahip] == PlayerData[playerid][pID] && PetBilgi[id][petAclik] > 5)
	{
	    if (strfind(text, PetBilgi[id][petAdi], true) != -1)
	    {
	        if (strfind(text, "Gel", true) != -1)
			{
			    FCNPC_ClearAnimations(PetBilgi[id][NPCID]);
			    PetBilgi[id][petTakip] = -1;
			    PetBilgi[id][petSaldir] = -1;
			    FCNPC_GoToPlayer(PetBilgi[id][NPCID], playerid);
			}
	        if (strfind(text, "Takip", true) != -1)
	        {
	            FCNPC_ClearAnimations(PetBilgi[id][NPCID]);
	            FCNPC_StopAttack(PetBilgi[id][NPCID]);
                PetBilgi[id][petTakip] = playerid;
		    	PetBilgi[id][petSaldir] = -1;
	        }
	        if (strfind(text, "Dur", true) != -1)
	        {
	            FCNPC_ClearAnimations(PetBilgi[id][NPCID]);
	            PetBilgi[id][petTakip] = -1;
	            PetBilgi[id][petSaldir] = -1;
	            FCNPC_Stop(PetBilgi[id][NPCID]);
	            FCNPC_StopAttack(PetBilgi[id][NPCID]);
	        }
	        if (strfind(text, "Otur", true) != -1)
	        {
	            PetBilgi[id][petTakip] = -1;
	            PetBilgi[id][petSaldir] = -1;
	            FCNPC_Stop(PetBilgi[id][NPCID]);
	            FCNPC_StopAttack(PetBilgi[id][NPCID]);
	            FCNPC_ApplyAnimation(PetBilgi[id][NPCID], "PED", "SEAT_idle", 4.0, 1, 0, 0, 0, 0);
             	FCNPC_ApplyAnimation(PetBilgi[id][NPCID], "PED", "SEAT_idle", 4.0, 1, 0, 0, 0, 0);
	        }
	        if (strfind(text, "Kalk", true) != -1)
	        {
	            FCNPC_ClearAnimations(PetBilgi[id][NPCID]);
	        }
	        if (strfind(text, "Bana bak", true) != -1)
	        {
				FCNPC_SetAngleToPlayer(PetBilgi[id][NPCID], playerid);
	        }
		}
	}
	Log_Write("logs/chat.log", "%s: %s",ReturnName(playerid, 0), trcar(text));
	return 0;
}

forward FreezeJacker(playerid); public FreezeJacker(playerid)
{
	TogglePlayerControllable(playerid, 1);
	return 1;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	if (PlayerData[playerid][pKelepce] == 1 && !ispassenger)
		AractanIndir(playerid);

	/*if (Vehicle_IsANoFuelVehicle(GetVehicleModel(vehicleid)) && PlayerData[playerid][pVip] < 1)
		return AractanIndir(playerid),
		       HataMesajGonder(playerid, "Bisiklet kullanabilmek için Donator olmalýsýnýz.");*/

	if(!ispassenger)
	{
	    if(GetVehicleDriver(vehicleid) != INVALID_PLAYER_ID)
	    {
	        new Float:x, Float:y, Float:z;

	        GetPlayerPos(playerid, x, y, z);
	        SetPlayerPos(playerid, x, y, z+1.5);
	        TogglePlayerControllable(playerid, 0);

	        SetTimerEx("FreezeJacker", 2000, false, "i", playerid);

	        return HataMesajGonder(playerid, "Car Jack yasaktýr.");
	    }
	}

    PlayerData[playerid][pSonBindigiArac] = vehicleid;

    if (PetKontrol[playerid] != -1) return ClearAnimations(playerid);
	PlayerData[playerid][pLastCar] = vehicleid;

	new id = Car_GetID(vehicleid);

	if (id != -1 && AracInfo[id][aracTip] == 1)
	{
	    if (AracInfo[id][aracKilit] && AracInfo[id][aracFactionType] != GetFactionType(playerid))
	    {
	        ClearAnimations(playerid);
	        HataMesajGonder(playerid, "Araç kilitli.");
	    }
	}

	if (id != -1 && AracInfo[id][aracKilit] && ispassenger)
	{
	    ClearAnimations(playerid);
	    HataMesajGonder(playerid, "Araç kilitli.");
	}

	if (AracInfo[id][aracTip] == 1 && AracInfo[id][aracFactionType] != GetFactionType(playerid) && !ispassenger)
	{
	    ClearAnimations(playerid);
	    HataMesajGonder(playerid, "Bu aracýn anahtarýna sahip deðilsin.");
	}

	if(GetVehicleModel(vehicleid) == 431 && AracInfo[id][aracTip] == 2)
	{
	    if(PlayerData[playerid][pCash] < 2)
	    {
	        ClearAnimations(playerid);
	        return HataMesajGonder(playerid, "Yeterli paranýz yok! ($2)");
		}

		new driver = GetVehicleDriver(vehicleid);

		if(driver != INVALID_PLAYER_ID)
		{
		    ParaVer(playerid, -2);
		    ParaVer(driver, 2);

		    SunucuMesaji(driver, "%s adlý kiþi aracýnýza bindi. (+$2)", ReturnName(playerid, 0));
		    SunucuMesaji(playerid, "%s adlý otobüs þöförünün aracýna bindiniz. (-$2)", ReturnName(driver, 0));
		}
	}

	if (PlayerData[playerid][pBaygin] == 1)
	{
	    if (IsPlayerInAnyVehicle(playerid))
	    {
        if(!IsPlayerInAnyVehicle(playerid)) ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.0, 0, 0, 0, 1, 0, 1);
        else ApplyAnimation(playerid, "PED", "CAR_dead_LHS", 4.1, 0, 1, 1, 1, 0, 1);
	    }
	    else if (!IsPlayerInAnyVehicle(playerid))
	    {
        if(!IsPlayerInAnyVehicle(playerid)) ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.0, 0, 0, 0, 1, 0, 1);
        else ApplyAnimation(playerid, "PED", "CAR_dead_LHS", 4.1, 0, 1, 1, 1, 0, 1);
	    }
	}
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	new id = Car_GetID(vehicleid);

	if (PlayerData[playerid][pTaxiDuty] == true)
	{
        foreach (new i : Player) if (PlayerData[i][pTaxiPlayer] == playerid && IsPlayerInVehicle(i, GetPlayerVehicleID(playerid))) {
	        LeaveTaxi(i, playerid);
	    }

        PlayerData[playerid][pTaxiDuty] = false;
        AracInfo[id][OturumKazanci] = 0;
        AracInfo[id][Taksimetre] = 30;
        SunucuMesaji(playerid, "Araçtan indiðin için iþbasýndan çýktýn.");
	}

	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && GetVehicleModel(GetPlayerVehicleID(playerid)) == 448 && AracInfo[id][aracTip] == 2)
	{
		DisablePlayerCheckpoint(playerid);
	    OtobusAracCP[vehicleid] = 0;
	    AracCP[vehicleid] = -1;

	    Arac_Spawn(id);
	    RemovePlayerFromVehicle(playerid);

	    SetPlayerPos(playerid, OtobusX, OtobusY, OtobusZ);
	    HataMesajGonder(playerid, "Araçtan indiðiniz için pizza taþýmacýlýðý iptal edildi.");
	}
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && PlayerData[playerid][pEhliyetSinavinda] != 0 && AracInfo[id][aracTip] == 6 && GetEngineStatus(vehicleid) == 1 && GetPlayerSpeed(vehicleid) != 0)
	{
		DisablePlayerCheckpoint(playerid);
	    EhliyetAracCP[vehicleid] = 0;
	    AracCP[GetPlayerVehicleID(playerid)] = -1;

	    Arac_Spawn(id);
	    HataMesajGonder(playerid, "Araçtan indiðiniz için ehliyet sinavi iptal edildi.");

	    SetPlayerPos(playerid, EhliyetX, EhliyetY, EhliyetZ);
	    PlayerData[playerid][pEhliyetSinavinda] = 0;
	    PlayerData[playerid][pEhliyetUyari] = 0;
	}
	return 1;
}
stock LeaveTaxi(playerid, driverid)
{
    if (driverid != INVALID_PLAYER_ID && IsPlayerConnected(driverid))
    {
        ParaVer(playerid, -floatround(PlayerData[playerid][pTaksiUcret]));
        ParaVer(driverid, floatround(PlayerData[playerid][pTaksiUcret]));
		AracInfo[Car_GetID(GetPlayerVehicleID(driverid))][OturumKazanci] += floatround(PlayerData[playerid][pTaksiUcret]);
        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s taksi þöförüne $%d dolar para verir.", ReturnName(playerid, 0), floatround(PlayerData[playerid][pTaksiUcret]));

        PlayerData[playerid][pTaksiUcret] = 0;
        PlayerData[playerid][pTaxiPlayer] = -1;
        PlayerData[playerid][pTaksiKabul] = -1;
        DisablePlayerCheckpoint(playerid);
        DisablePlayerCheckpoint(driverid);
        PlayerTextDrawHide(playerid, TaxiTD[playerid][0]);
        PlayerTextDrawHide(playerid, TaxiTD[playerid][1]);
        PlayerTextDrawHide(driverid, TaxiTD[driverid][0]);
        PlayerTextDrawHide(driverid, TaxiTD[driverid][1]);
    }
    return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
    if (newstate != PLAYER_STATE_WASTED)
	{
	}
	if (newstate == PLAYER_STATE_DRIVER)
	{
	    foreach (new i: Player) if (PlayerData[i][pAdmin] >= 1 && PlayerData[i][pSpecID] == playerid)
	    {
	        PlayerSpectateVehicle(i, GetPlayerVehicleID(playerid));
	    }
    	PlayerTextDrawShow(playerid, hizgostergesi0[playerid]);
        PlayerTextDrawShow(playerid, hizgostergesi1[playerid]);
        PlayerTextDrawShow(playerid, hizgostergesi2[playerid]);
        HizGostergesi(playerid);

	    new vehicleid = GetPlayerVehicleID(playerid);
	    new id = Car_GetID(vehicleid);
	    PlayerData[playerid][pLastCar] = vehicleid;
		if (id != -1)
		{
		            if (AracInfo[id][aracHurda] == 1)
		    {
					RemovePlayerFromVehicle(playerid);
					return HataMesajGonder(playerid, "Bu araç hurdada olduðu için sürülemiyor.");
			}
			if(PlayerData[playerid][pLevel] < 7)
			{
			    if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 515)
			    {
			    	HataMesajGonder(playerid, "7 seviye altý kiþiler bu araca binemez.");
					RemovePlayerFromVehicle(playerid);
			    }
			}

			if(AracInfo[id][aracTip] == 2 && PlayerData[playerid][pEhliyet] == 0)
			{
			    HataMesajGonder(playerid, "Ehliyetiniz olmadiði için meslek araçlarýna binemezsiniz.");
			    RemovePlayerFromVehicle(playerid);
			    return 1;
			}

		    KillTimer(AracRespawnTimer[vehicleid]);

			new zirh[20];
      		if (AracInfo[id][aracZirhVarMi] > 0) zirh = "{3bff00}Var{FFFFFF}";
        	else zirh = "{ff0000}Yok";
        	//if (strlen(RadyoLink[GetPlayerVehicleID(playerid)]) > 3) PlayAudioStreamForPlayer(playerid, RadyoLink[GetPlayerVehicleID(playerid)]);

            SetPVarInt(playerid, "KiraSoruldu", 0);

			if (GetVehicleModel(AracInfo[id][aracVehicle]) == 481 || GetVehicleModel(AracInfo[id][aracVehicle]) == 509 || GetVehicleModel(AracInfo[id][aracVehicle]) == 510)
			{
				SetEngineStatus(AracInfo[id][aracVehicle], true);
			}

			if (AracInfo[id][aracSahip] > 0 && AracInfo[id][aracSahip] != PlayerData[playerid][pID] && AracInfo[id][aracFiyat] > 0 && AracInfo[id][aracSatilik] == 1 && AracInfo[id][aracModel] != 509)
		    {
		        Dialog_Show(playerid, AracAlimOnay, DIALOG_STYLE_MSGBOX, "Araç Alým", "{FFFFFF}Bulunduðunuz araç {C2A2DA}%s {FFFFFF}tarafýndan {C2A2DA}%s'a {FFFFFF}satýlýktýr, aracý satýn almak istiyor musunuz?\n\nAraç Modeli : %s\nAraç KM: %.1f\nVergi: %s/%s\nZirh: %s\nTaksi Plakasi: %s\nGüvenlik Seviyesi: %d\n", "Satin al", "iptal",
				SQLName(AracInfo[id][aracSahip], 0), FormatNumber(AracInfo[id][aracFiyat]), ReturnVehicleModelName(GetVehicleModel(vehicleid)), AracInfo[id][aracKM],FormatNumber(AracInfo[id][aracVergi]), FormatNumber(GetAracMaksVergi(GetVehicleModel(vehicleid))), zirh, (AracInfo[id][TaksiPlaka] == 1) ? ("{3bff00}Var{FFFFFF}") : ("{ff0000}Yok{FFFFFF}"), AracInfo[id][aracSeviye]);
		    }
		    else if (AracInfo[id][aracSahip] == -1 && AracInfo[id][aracFiyat] > 0 && AracInfo[id][aracSatilik] == 1 && AracInfo[id][aracModel] != 509)
		    {
		        Dialog_Show(playerid, AracAlimOnay, DIALOG_STYLE_MSGBOX, "Araç Alým", "{FFFFFF}Bulunduðunuz araç {C2A2DA}%s'a {FFFFFF}satýlýktýr, aracý satýn almak istiyor musunuz?\n\nAraç Modeli : %s\nAraç KM : %.1f\nVergi: %s/%s\nZirh: %s\nTaksi Plakasi: %s\nGüvenlik Seviyesi: %d\n", "Satin al", "iptal",
				FormatNumber(AracInfo[id][aracFiyat]), ReturnVehicleModelName(GetVehicleModel(vehicleid)), AracInfo[id][aracKM],FormatNumber(AracInfo[id][aracVergi]), FormatNumber(GetAracMaksVergi(GetVehicleModel(vehicleid))), zirh, (AracInfo[id][TaksiPlaka] == 1) ? ("{3bff00}Var{FFFFFF}") : ("{ff0000}Yok{FFFFFF}"), AracInfo[id][aracSeviye]);
		    }
		    if (AracInfo[id][aracFaction] >= 1 && AracInfo[id][aracSahip] > 0 && AracInfo[id][aracTip] != 2 && AracInfo[id][aracModel] != 509)
		    {
		        SendClientMessageEx(playerid,-1, "{C0C0C0} {FFFFFF}Sahip: {C0C0C0}%s {FFFFFF}| {FFFFFF}Birlik: {C0C0C0}%s",SQLName(AracInfo[id][aracSahip], 0), Birlikler[GetFactionByID(AracInfo[id][aracFaction])][birlikAd]);
		    }
		    else if (AracInfo[id][aracFaction] >= 1 && AracInfo[id][aracModel] != 509)
		    {
		        SendClientMessageEx(playerid,-1, "{C0C0C0}Birlik: {FFFFFF}%s {C0C0C0}| Plaka: {FFFFFF}%s",Birlikler[GetFactionByID(AracInfo[id][aracFaction])][birlikAd], AracInfo[id][aracPlaka]);
		    }
		    else if (AracInfo[id][aracTip] == 5)
		    {
		        if (PlayerData[playerid][pVip] < 1)
		        {
		            HataMesajGonder(playerid, "Bu araç viplere özeldir, kullanabilmek için Donator olmanýz gerekir.");
		            return RemovePlayerFromVehicle(playerid);
		        }
		    }
		    else if(AracInfo[id][aracTip] == 6)
		    {
		    	if(PlayerData[playerid][pEhliyetSinavinda] == 0)
		    	{
		    		HataMesajGonder(playerid, "Bu araç ehliyet aracýdýr.");
		    		return RemovePlayerFromVehicle(playerid);
		    	}else{
		    		KillTimer(AracRespawnTimer[vehicleid]);

		    		if(GetEngineStatus(vehicleid) == 0)
		    			SunucuMesaji(playerid, "Sýnavý baþlatmak için motoru çalýþtýrýn.");
		    	}
		    }

	    	if (AracYuk[vehicleid] == 1)
				SetPlayerCheckpoint(playerid,KamyoncuCP[AracCP[vehicleid]][0], KamyoncuCP[AracCP[vehicleid]][1], KamyoncuCP[AracCP[vehicleid]][2],5.0);

	    	if (OtobusAracCP[vehicleid] == 1)
				SetPlayerCheckpoint(playerid, OtobusCP[AracCP[vehicleid]][OtobusPosX], OtobusCP[AracCP[vehicleid]][OtobusPosY], OtobusCP[AracCP[vehicleid]][OtobusPosZ], 5.0);

	    	if (GetVehicleModel(vehicleid) == 448 && AracInfo[id][aracTip] == 2)
	    	{
	    	    KillTimer(AracRespawnTimer[vehicleid]);

    			if (OtobusAracCP[vehicleid] == 0)
					SunucuMesaji(playerid, "Pizza Kuryesi: Mesleðe baþlamak için /pizzabasla yazmalýsýnýz.");
	    	}

		 	if (AracInfo[id][aracExists] && AracInfo[id][aracKira] > 0)
			{
			    if (AracInfo[id][aracKiralayan] == -1)
			    {
       				SendClientMessageEx(playerid, -1,"{C0C0C0}ARAÇ: {FFFFFF}Plaka: {C0C0C0}%s {FFFFFF}Vergi: {C0C0C0}N/A",AracInfo[id][aracPlaka]);
			        SendClientMessageEx(playerid, -1,"{C0C0C0}ARAÇ: {FFFFFF}Bulunduðunuz araç kiralýk bir araçtýr, 30 dakika boyunca kiralamak istiyorsanýz %s ödemek zorundasýnýz.",FormatNumber(AracInfo[id][aracKira]));
			        SendClientMessageEx(playerid, -1,"{C0C0C0}ARAÇ: {FFFFFF}Kiralamak için /akirala yazýnýz.");
			    }
			    else
			    {
			         SendClientMessageEx(playerid, -1,"{C0C0C0}ARAÇ: {FFFFFF}Bu araç %s tarafindan kiralanmýþ. %d dakika sonra kira bitecek.", SQLName(AracInfo[id][aracKiralayan],0),AracInfo[id][aracKiraZaman]);
			    }
			}

			if (AracInfo[id][aracExists] && AracInfo[id][aracFaction] == -1 && AracInfo[id][aracKira] < 1 && AracInfo[id][aracTip] == 4 && AracInfo[id][aracModel] != 509)
			{
			    SendClientMessageEx(playerid, -1, "{C0C0C0}{FFFFFF}Sahip: {C0C0C0}%s {FFFFFF}| Plaka: {C0C0C0}%s", SQLName(AracInfo[id][aracSahip], 0), AracInfo[id][aracPlaka]);
			}

		}
		if (IsSpeedoVehicle(vehicleid))
		{
		    for (new i = 0; i < 5; i ++)
		    {
		        PlayerTextDrawHide(playerid, AracHUD[playerid][i]);
		    }
		}
		GetVehiclePos(GetPlayerVehicleID(playerid), VehicleLastCoords[vehicleid][0], VehicleLastCoords[vehicleid][1], VehicleLastCoords[vehicleid][2]);
	}
	else
    {
        PlayerTextDrawHide(playerid, hizgostergesi0[playerid]);
        PlayerTextDrawHide(playerid, hizgostergesi1[playerid]);
        PlayerTextDrawHide(playerid, hizgostergesi2[playerid]);
    }
	if (oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER)
	{
	    foreach (new i: Player) if (PlayerData[i][pAdmin] >= 1 && PlayerData[i][pSpecID] == playerid)
	    {
	        SetPlayerInterior(i, GetPlayerInterior(playerid));
         	SetPlayerVirtualWorld(i, GetPlayerVirtualWorld(playerid));
	        PlayerSpectatePlayer(i, playerid);
	    }
	    for (new i = 0; i < 5; i ++)
	    {
	        TextDrawHideForPlayer(playerid, carMDC[PlayerData[playerid][pLastCar]][i]);
	        PlayerTextDrawHide(playerid, AracHUD[playerid][i]);
	    }
	    if (strlen(RadyoLink[GetPlayerVehicleID(playerid)]) > 3) StopAudioStreamForPlayer(playerid);
	}
	if (oldstate == PLAYER_STATE_DRIVER && newstate == PLAYER_STATE_ONFOOT)
	{
	    new id = Car_GetID(PlayerData[playerid][pLastCar]);

	    if (EmniyetKemeri[playerid] == true)
	    {
	        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s emniyet kemerini çýkartýr.", ReturnName(playerid, 0));
	    }

	    EmniyetKemeri[playerid] = false;

		for (new i; i < sizeof(FactoryData); i++)
		{
		    if (IsValidDynamicMapIcon(FactoryIcons[playerid][i]))
		    {
		        DestroyDynamicMapIcon(FactoryIcons[playerid][i]);
		        FactoryIcons[playerid][i] = -1;
		    }

			TogglePlayerDynamicCP(playerid, FactoryData[i][FactoryCP], 0);
		}

		if (GetVehicleModel(PlayerData[playerid][pLastCar]) == 554 && AracInfo[id][aracTip] == 2)
	    {
    		DisablePlayerCheckpoint(playerid);
    		RemovePlayerFromVehicle(playerid);
    		SetPlayerPos(playerid, 2183.0583, -2668.0005, 17.8828);
     		AracRespawnTimer[PlayerData[playerid][pLastCar]] = SetTimerEx("AracRespawn", 400, false, "i", PlayerData[playerid][pLastCar]);
      		SunucuMesaji(playerid, "Kamyoncu aracýndan ayrýldýðýnýz için aracýnýz spawnlandý.");
		}

		if (GetVehicleModel(PlayerData[playerid][pLastCar]) == 524 && AracInfo[id][aracTip] == 2)
	    {
    		DisablePlayerCheckpoint(playerid);
    		RemovePlayerFromVehicle(playerid);
    		SetPlayerPos(playerid, 2154.8013,-2147.4253,13.5469);
     		AracRespawnTimer[PlayerData[playerid][pLastCar]] = SetTimerEx("AracRespawn", 400, false, "i", PlayerData[playerid][pLastCar]);
      		SunucuMesaji(playerid, "Çimento aracýndan ayrýldýðýnýz için aracýnýz spawnlandý.");
		}

		PlayerTextDrawHide(playerid, CapacityText[playerid]);
		HidePlayerProgressBar(playerid, CapacityBar[playerid]);
	    Fuel_ResetPlayer(playerid);
	}
	if (newstate == PLAYER_STATE_PASSENGER)
    {
        if (strlen(RadyoLink[GetPlayerVehicleID(playerid)]) > 3) PlayAudioStreamForPlayer(playerid, RadyoLink[GetPlayerVehicleID(playerid)]);
		if (IsPlayerInsideTaxi(playerid))
		{
	        new driverid = GetVehicleDriver(GetPlayerVehicleID(playerid));
	        new vehicleid = GetPlayerVehicleID(playerid);
	        GetVehiclePos(vehicleid, TaxiLastPos[vehicleid][0], TaxiLastPos[vehicleid][1], TaxiLastPos[vehicleid][2]);
	        PlayerData[playerid][pTaksiUcret] = 0;
	        PlayerData[playerid][pTaxiPlayer] = driverid;
	        PlayerData[driverid][pTaksiKabul] = -1;
	        DisablePlayerCheckpoint(driverid);
	        MesajGonder(driverid, "%s taksiye yolcu olarak bindi.", ReturnName(playerid, 0));
	        MesajGonder(playerid, "%s'nin taksisine bindin, gitmek istediðin noktayý haritadan iþaretle, iþaretlediðin nokta þöförde görünecektir.", ReturnName(driverid, 0));
	        PlayerTextDrawShow(playerid, TaxiTD[playerid][0]);
	        PlayerTextDrawShow(playerid, TaxiTD[playerid][1]);
	        PlayerTextDrawShow(driverid, TaxiTD[driverid][0]);
	        PlayerTextDrawShow(driverid, TaxiTD[driverid][1]);
	        PlayerTextDrawSetString(playerid, TaxiTD[playerid][1], "0");
	        PlayerTextDrawSetString(driverid, TaxiTD[driverid][1], "0");
        }
        if (GetWeapon(playerid) != 31 && GetWeapon(playerid) != 30 && GetWeapon(playerid) != 29 && GetWeapon(playerid) != 28)
        {
            SetPlayerArmedWeapon(playerid, 0);
        }
    }
    if (oldstate == PLAYER_STATE_PASSENGER && PlayerData[playerid][pTaxiPlayer] != -1)
    {
        LeaveTaxi(playerid, PlayerData[playerid][pTaxiPlayer]);
    }
   	if(newstate == PLAYER_STATE_DRIVER)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
	    if(GetVehicleModel(vehicleid) == 408)
	    {
		    if(LoadedTrash[vehicleid] > 0) {
				SunucuMesaji(playerid, "Bu araçta {F39C12}%d {FFFFFF}çöp torbasý bulunuyor. Deðeri:{2ECC71}$%d{ffffff}.", LoadedTrash[vehicleid], LoadedTrash[vehicleid] * TRASH_BAG_VALUE);
				SunucuMesaji(playerid, "Çöpleri geri dönüþüm fabrikalarýnda satarak paranýzý alabilirsiniz.");

				for(new i; i < sizeof(FactoryData); i++)
				{
				    FactoryIcons[playerid][i] = CreateDynamicMapIcon(FactoryData[i][FactoryX], FactoryData[i][FactoryY], FactoryData[i][FactoryZ], 51, 0, _, _, playerid, 8000.0, MAPICON_GLOBAL);
					TogglePlayerDynamicCP(playerid, FactoryData[i][FactoryCP], 1);
				}
		    }else{
			        MesajGonder(playerid, "Çöpleri toplayýp geri dönüþüm fabrikalarýnda satarak para kazanabilirsiniz.");
			        MesajGonder(playerid, "Çöp kutusu bulmak için (/copbul) komutunu kullanabilirsiniz.");
		    }

			Trash_ShowCapacity(playerid);
		}

		SetPVarInt(playerid, "LastVehicleID", vehicleid);
	}
/*		if(NetStats_GetConnectedTime(playerid) - WeaponTick[playerid] >= 150)
  		{
    		new weaponid, ammo, objectslot, index;

			for (new i = 0; i <= 17; i++)
		    {
      			GetPlayerWeaponData(playerid, i, weaponid, ammo);
		        index = weaponid - 22;

		        if(weaponid && ammo && !WeaponSettings[playerid][index][Hidden] && IsWeaponWearable(weaponid) && EditingWeapon[playerid] != weaponid)
		        {
		           	objectslot = GetWeaponObjectSlot(weaponid);

		            if(GetPlayerWeapon(playerid) != weaponid) SetPlayerAttachedObject(playerid, objectslot, GetWeaponModel(weaponid), WeaponSettings[playerid][index][Bone], WeaponSettings[playerid][index][Position][0], WeaponSettings[playerid][index][Position][1], WeaponSettings[playerid][index][Position][2], WeaponSettings[playerid][index][Position][3], WeaponSettings[playerid][index][Position][4], WeaponSettings[playerid][index][Position][5], 1.0, 1.0, 1.0);

		            else if (IsPlayerAttachedObjectSlotUsed(playerid, objectslot)) RemovePlayerAttachedObject(playerid, objectslot);

		        }
		    }

			WeaponTick[playerid] = NetStats_GetConnectedTime(playerid);
   		}*/
	if(oldstate == PLAYER_STATE_DRIVER)
	{
		for(new i; i < sizeof(FactoryData); i++)
		{
		    if(IsValidDynamicMapIcon(FactoryIcons[playerid][i]))
		    {
		        DestroyDynamicMapIcon(FactoryIcons[playerid][i]);
		        FactoryIcons[playerid][i] = -1;
		    }

			TogglePlayerDynamicCP(playerid, FactoryData[i][FactoryCP], 0);
		}

		PlayerTextDrawHide(playerid, CapacityText[playerid]);
		HidePlayerProgressBar(playerid, CapacityBar[playerid]);
	}
	if(oldstate == PLAYER_STATE_DRIVER)
	{
		for(new i; i < sizeof(FactoryData); i++)
		{
		    if(IsValidDynamicMapIcon(FactoryIcons[playerid][i]))
		    {
		        DestroyDynamicMapIcon(FactoryIcons[playerid][i]);
		        FactoryIcons[playerid][i] = -1;
		    }

			TogglePlayerDynamicCP(playerid, FactoryData[i][FactoryCP], 0);
		}

		PlayerTextDrawHide(playerid, CapacityText[playerid]);
		HidePlayerProgressBar(playerid, CapacityBar[playerid]);
		foreach (new i : Player) if (GetFactionType(i) == BIRLIK_LSPD) {
	 		RemovePlayerMapIcon(i, playerid);
	 		KillTimer(connect_arac[playerid]);
		}
	}
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
        new id = Car_GetID(GetPlayerVehicleID(playerid));
        if (id != -1)
        {
            if(AracInfo[id][aracFactionType] == BIRLIK_LSPD)
            {
                if(GetFactionType(playerid) == BIRLIK_LSPD)
            		connect_arac[playerid] = SetTimerEx("AracRender", 500, true, "i", playerid);
            	else
            	{
            		//AdminMessage(COLOR_LIGHTRED, "ADM: %s adlý kiþi bir birlikte olmamasýna raðmen birlik aracýna binmeye çalýþtý ve atýldý.", ReturnName(playerid, 0));
               	    //Kick(playerid); //araca binme hilesi
            	}

            }
        }
    }
	Trash_ResetPlayer(playerid);
	return 1;
}

HizGostergesi(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid);
	new id = Car_GetID(vehicleid);
	new Float:benzin;
	if (id == -1)
	{
 		benzin = 100.0;
	}
	else
	{
 		benzin = AracInfo[id][aracBenzin];
	}
    if(IsValidVehicle(id))
    {
		new string[256];
		format(string, sizeof(string), "%d%", benzin);
		PlayerTextDrawSetString(playerid, hizgostergesi0[playerid], string);

	    new string2[256];
		if(GetVehicleSpeed(id) < 10)
		{
			format(string2, sizeof(string2), "00%d", GetVehicleSpeed(id));
			PlayerTextDrawSetString(playerid, hizgostergesi2[playerid], string2);
		}
		else if(GetVehicleSpeed(id) < 100)
		{
			format(string2, sizeof(string2), "0%d", GetVehicleSpeed(id));
			PlayerTextDrawSetString(playerid, hizgostergesi2[playerid], string2);
		}
		else if(GetVehicleSpeed(id) > 100)
		{
			format(string2, sizeof(string2), "%d", GetVehicleSpeed(id));
			PlayerTextDrawSetString(playerid, hizgostergesi2[playerid], string2);
		}
 	}
	return true;
}

IsPlayerInsideTaxi(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid);
	new id = Car_GetID(vehicleid);
	if (id == -1) return 0;
	new bool:musterivar, bool:taksicivar;
	if (GetVehicleModel(vehicleid) == 420 || AracInfo[id][TaksiPlaka] == 1)
	{
     	foreach (new i : Player)
		{
		    if (i != playerid && PlayerData[i][pTaxiDuty] == false && GetPlayerVehicleID(i) == vehicleid && GetPlayerVehicleSeat(i) != 0) musterivar = true;
			if ((i != playerid) && (PlayerData[i][pTaxiDuty] == true && GetPlayerState(i) == PLAYER_STATE_DRIVER) && GetPlayerVehicleID(i) == vehicleid) taksicivar = true;
		}
	}
	if (musterivar == false && taksicivar == true) return 1;
	else return 0;
}

public OnPlayerEnterCheckpoint(playerid)
{
	if(MeslekCP[playerid] != -1)
	{
	    MeslekCP[playerid] = -1;
	    DisablePlayerCheckpoint(playerid);
	    return SunucuMesaji(playerid, "Meslek noktasina vardiniz.");
	}
	if (GetPVarInt(playerid, "MadenYolu") == 1)
	{
	    DisablePlayerCheckpoint(playerid);
	    MesajGonder(playerid, "Cevherlerin bulundugu bölgeye ulastiniz, /meslek yardim yazarak meslek hakkinda yardim alabilirsiniz.");
	}
	if (PlayerData[playerid][pTaksiKabul] != -1)
	{
	    PlayerData[playerid][pTaksiKabul] = -1;
	    DisablePlayerCheckpoint(playerid);
	    return 1;
	}
	if (PlayerData[playerid][pGPS] != -1 || GetPVarInt(playerid, "EvBuluyor") != -1 || GetPVarInt(playerid, "IsyeriBuluyor") != -1 || GetPVarInt(playerid, "BinaBuluyor") != -1)
	{
	    SetPVarInt(playerid, "EvBuluyor", -1);
	    SetPVarInt(playerid, "IsyeriBuluyor", -1);
	    SetPVarInt(playerid, "BinaBuluyor", -1);
	    PlayerData[playerid][pGPS] = -1;
	    DisablePlayerCheckpoint(playerid);
	    PlayerTextDrawHide(playerid, MesafeTD[playerid]);
	    return 1;
	}
	if (EMSKabul[playerid] != INVALID_PLAYER_ID)
	{
	    DisablePlayerCheckpoint(playerid);
	    SetPlayerHealth(EMSKabul[playerid], 100);

        SetPVarInt(EMSKabul[playerid], "CPsineGelindi", 1);
		ClearAnimations(EMSKabul[playerid]);

	    ApplyAnimation(EMSKabul[playerid], "SWAT", "gnstwall_injurd", 4.1, true, false, false, false, 0, false);

		MesajGonder(playerid, "Hedefe ulastiniz, gerekli rolleri yaptiktan sonra /yaracaat ile ambulans aracina atiniz.");
	    return 1;
	}
	if (GetPVarInt(playerid, "AracSakliyor") >= 0 && IsPlayerInVehicle(playerid, AracInfo[GetPVarInt(playerid, "AracSakliyor")][aracVehicle]))
	{
	    new carid = GetPVarInt(playerid, "AracSakliyor");
	    AracInfo[carid][aracDisplay] = false;
	    SetVehicleVirtualWorld(AracInfo[carid][aracVehicle], 1000);
	    SetEngineStatus(AracInfo[carid][aracVehicle], false);
	    AracInfo[carid][aracKilit] = true;
		Arac_Kaydet(carid);
		static
	        engine,
	        lights,
	        alarm,
	        doors,
	        bonnet,
	        boot,
	        objective;

	    GetVehicleParamsEx(AracInfo[carid][aracVehicle], engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(AracInfo[carid][aracVehicle], engine, lights, alarm, 1, bonnet, boot, objective);
	    MesajGonder(playerid, "Araç saklandi.");
	    DisablePlayerCheckpoint(playerid);
	    SetPVarInt(playerid, "AracSakliyor", -1);
	    return 1;
	}
	if (GetPVarInt(playerid, "AraciniBuluyor") == 1)
	{
	    DisablePlayerCheckpoint(playerid);
	    DeletePVar(playerid, "AraciniBuluyor");
	    return 1;
	}

	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && GetVehicleModel(GetPlayerVehicleID(playerid)) == 440 && AracYuk[GetPlayerVehicleID(playerid)] == 1)
	{
	    AracCP[GetPlayerVehicleID(playerid)]++;
	    if(AracCP[GetPlayerVehicleID(playerid)] < sizeof(KamyoncuCP))
	    {
	    	if(KamyoncuCP[AracCP[GetPlayerVehicleID(playerid)]][0] == 379.7599 && KamyoncuCP[AracCP[GetPlayerVehicleID(playerid)]][1] == 986.1159 && KamyoncuCP[AracCP[GetPlayerVehicleID(playerid)]][2] == 30.0649)
	    	{
	    		TogglePlayerControllable(playerid, false);

				GameTextForPlayer(playerid, "~r~Mallar bosaltiliyor, lutfen bekleyin.", 2000, 8);

				PlayerData[playerid][Timer_Yuk] = SetTimerEx("MallarBosaltiliyor", 10*1000, false, "i", playerid);
	    	}else{
	        	SetPlayerCheckpoint(playerid, KamyoncuCP[AracCP[GetPlayerVehicleID(playerid)]][0],KamyoncuCP[AracCP[GetPlayerVehicleID(playerid)]][1],KamyoncuCP[AracCP[GetPlayerVehicleID(playerid)]][2],5.0);
	    	}
	    }
	    else
	    {
	        DisablePlayerCheckpoint(playerid);
	        AracYuk[GetPlayerVehicleID(playerid)] = 0;
	        AracCP[GetPlayerVehicleID(playerid)] = -1;
	        ParaVer(playerid, 500);
	        MesajGonder(playerid, "Yük baþarýyla teslim edildi. (Kazanýlan Para: 500$.)");
	    }
	}

	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && GetVehicleModel(GetPlayerVehicleID(playerid)) == 448 && OtobusAracCP[GetPlayerVehicleID(playerid)] == 1)
	{
	    AracCP[GetPlayerVehicleID(playerid)]++;
	    if(AracCP[GetPlayerVehicleID(playerid)] < sizeof(OtobusCP))
	    {
	    	if(OtobusCP[AracCP[GetPlayerVehicleID(playerid)]-1][Otobus_Durak] == true)
	    	{
	    	    GameTextForPlayer(playerid, "~w~Devam etmek için.~n~~b~Bekleyin.", 4*1000, 3);
	    		TogglePlayerControllable(playerid, false);
				PlayerData[playerid][Timer_Yuk] = SetTimerEx("OtobusDurak", 4*1000, false, "i", playerid);
	    	}else{
	        	SetPlayerCheckpoint(playerid, OtobusCP[AracCP[GetPlayerVehicleID(playerid)]][OtobusPosX], OtobusCP[AracCP[GetPlayerVehicleID(playerid)]][OtobusPosY], OtobusCP[AracCP[GetPlayerVehicleID(playerid)]][OtobusPosZ], 5.0);
			}
	    }
	    else
	    {
	        DisablePlayerCheckpoint(playerid);
	        OtobusAracCP[GetPlayerVehicleID(playerid)] = 0;
	        AracCP[GetPlayerVehicleID(playerid)] = -1;

			//ParaVer(playerid, 400);
	        //MesajGonder(playerid, "Pizza taþýmacýlýðý seferi bitti. (para: $400)");

	        PlayerData[playerid][pSeferSayi]++;

	        if(PlayerData[playerid][pSeferSayi] % 1 == 0)
	        {
	            SunucuMesaji(playerid, "Pizzalarý baþarýyla daðýttýn. (Kazanýlan Para: 250$.)");
	            ParaVer(playerid, 250);
	        }
	    }
	}

	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && GetVehicleModel(GetPlayerVehicleID(playerid)) == 514 && BenzinlikYuk[GetPlayerVehicleID(playerid)] == 1)
	{
		AracCP[GetPlayerVehicleID(playerid)]++;

		if(BenzinlikCheckpoint[AracCP[GetPlayerVehicleID(playerid)] - 1][Benzin_Durum] == 0)
		{
		    if(!IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
			    return HataMesajGonder(playerid, "Dorseniz yok!");

			SetPlayerCheckpoint(playerid, BenzinlikCheckpoint[AracCP[GetPlayerVehicleID(playerid)]][BenzinX], BenzinlikCheckpoint[AracCP[GetPlayerVehicleID(playerid)]][BenzinY], BenzinlikCheckpoint[AracCP[GetPlayerVehicleID(playerid)]][BenzinZ], 5.0);
		}

		else if(BenzinlikCheckpoint[AracCP[GetPlayerVehicleID(playerid)]-1][Benzin_Durum] == 2)
		{
			BenzinlikYuk[GetPlayerVehicleID(playerid)] = 0;
			AracCP[GetPlayerVehicleID(playerid)] = 0;
			ParaVer(playerid, 275);
			DisablePlayerCheckpoint(playerid);

			SunucuMesaji(playerid, "Benzin tasimaciligi meslegini bitirdiniz ve $275 kazandiniz.");

			if(IsValidVehicle(Dorse[playerid]))
			{
				DestroyVehicle(Dorse[playerid]);
				SunucuMesaji(playerid, "Dorseniz teslim alinmistir.");
			}
		}

		else if(BenzinlikCheckpoint[AracCP[GetPlayerVehicleID(playerid)]-1][Benzin_Durum] == 1)
		{
		    if(!IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
			    return HataMesajGonder(playerid, "Dorseniz yok!");

	    	GameTextForPlayer(playerid, "~y~Benzin bosaltiliyor.~n~~b~Bekleyin. (10 saniye)", 10*1000, 3);
	    	TogglePlayerControllable(playerid, false);
			PlayerData[playerid][Timer_Yuk] = SetTimerEx("Benzin", 10*1000, false, "i", playerid);
			SetPlayerCheckpoint(playerid, BenzinlikCheckpoint[AracCP[GetPlayerVehicleID(playerid)]][BenzinX], BenzinlikCheckpoint[AracCP[GetPlayerVehicleID(playerid)]][BenzinY], BenzinlikCheckpoint[AracCP[GetPlayerVehicleID(playerid)]][BenzinZ], 5.0);
		}
	}

	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && GetVehicleModel(GetPlayerVehicleID(playerid)) == 515 && TirciYuk[GetPlayerVehicleID(playerid)] == 1)
	{
		AracCP[GetPlayerVehicleID(playerid)]++;

		if(TirCheckpoint[AracCP[GetPlayerVehicleID(playerid)]-1][Tirci_Deger] == 0)
		{
		    if(!IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
			    return HataMesajGonder(playerid, "Dorseniz yok!");

			SetPlayerCheckpoint(playerid, TirCheckpoint[AracCP[GetPlayerVehicleID(playerid)]][TirciX], TirCheckpoint[AracCP[GetPlayerVehicleID(playerid)]][TirciY], TirCheckpoint[AracCP[GetPlayerVehicleID(playerid)]][TirciZ], 5.0);
		}
		else if(TirCheckpoint[AracCP[GetPlayerVehicleID(playerid)]-1][Tirci_Deger] == 1)
		{
		    if(!IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
			    return HataMesajGonder(playerid, "Dorseniz yok!");

	    	GameTextForPlayer(playerid, "~y~Mallar bosaltiliyor.~n~~b~Bekleyin. (10 saniye)", 10*1000, 3);
	    	TogglePlayerControllable(playerid, false);
			PlayerData[playerid][Timer_Yuk] = SetTimerEx("Tirci", 10*1000, false, "i", playerid);
		}
	}

	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && PlayerData[playerid][pEhliyetSinavinda] != 0)
	{
		AracCP[GetPlayerVehicleID(playerid)]++;

		if(AracCP[GetPlayerVehicleID(playerid)] < sizeof(EhliyetCP))
		{
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);

			SetPlayerCheckpoint(playerid, EhliyetCP[AracCP[GetPlayerVehicleID(playerid)]][0], EhliyetCP[AracCP[GetPlayerVehicleID(playerid)]][1], EhliyetCP[AracCP[GetPlayerVehicleID(playerid)]][2], 5.0);
		}else{
	        DisablePlayerCheckpoint(playerid);

	        EhliyetAracCP[GetPlayerVehicleID(playerid)] = 0;
	        AracCP[GetPlayerVehicleID(playerid)] = -1;

	        MesajGonder(playerid, "Sinav basariyla tamamlandi!");

	        if(PlayerData[playerid][pEhliyetSinavinda] == 2)
	        {
	        	PlayerData[playerid][pEhliyet] = 1;
	        	GameTextForPlayer(playerid, "~g~+Ehliyet", 3000, 3);
	        }
	        else if(PlayerData[playerid][pEhliyetSinavinda] == 1)
	        {
	        	PlayerData[playerid][pMotorEhliyet] = 1;
	        	GameTextForPlayer(playerid, "~g~+Motor ehliyeti", 3000, 3);
	        }

	    	PlayerData[playerid][pEhliyetSinavinda] = 0;
	    	PlayerData[playerid][pEhliyetUyari] = 0;
	        Arac_Spawn(Car_GetID(GetPlayerVehicleID(playerid)));

	    	SetPlayerPos(playerid, EhliyetX, EhliyetY, EhliyetZ);
	    	Oyuncu_Kaydet(playerid, 0);
		}
	}
	return 1;
}

forward Benzin(playerid); public Benzin(playerid)
{
	PlayerData[playerid][Timer_Yuk] = -1;

	if(GetPlayerVehicleID(playerid) == INVALID_VEHICLE_ID)
		return HataMesajGonder(playerid, "Bir sorun olustu. (/rapor)");

	TogglePlayerControllable(playerid, true);
	SunucuMesaji(playerid, "Yük bosaltildi.");
	ParaVer(playerid, 275);

	return 1;
}

forward MallarBosaltiliyor(playerid); public MallarBosaltiliyor(playerid)
{
	PlayerData[playerid][Timer_Yuk] = -1;

	if(GetPlayerVehicleID(playerid) == INVALID_VEHICLE_ID)
		return HataMesajGonder(playerid, "Bir sorun olustu. (/rapor)");

	TogglePlayerControllable(playerid, true);
	GameTextForPlayer(playerid, "~g~MALLAR BOSALTILDI.", 2000, 3);
	SetPlayerCheckpoint(playerid,KamyoncuCP[AracCP[GetPlayerVehicleID(playerid)]][0],KamyoncuCP[AracCP[GetPlayerVehicleID(playerid)]][1],KamyoncuCP[AracCP[GetPlayerVehicleID(playerid)]][2],5.0);
	return 1;
}

forward OtobusDurak(playerid); public OtobusDurak(playerid)
{
	PlayerData[playerid][Timer_Yuk] = -1;

	if(GetPlayerVehicleID(playerid) == INVALID_VEHICLE_ID)
		return HataMesajGonder(playerid, "Bir sorun oluþtu. (/rapor)");

	TogglePlayerControllable(playerid, true);
	GameTextForPlayer(playerid, "~g~Devam edin.", 2000, 3);
	SetPlayerCheckpoint(playerid, OtobusCP[AracCP[GetPlayerVehicleID(playerid)]][OtobusPosX], OtobusCP[AracCP[GetPlayerVehicleID(playerid)]][OtobusPosY], OtobusCP[AracCP[GetPlayerVehicleID(playerid)]][OtobusPosZ], 5.0);
	return 1;
}

public OnPlayerLeaveCheckpoint(playerid)
{
	return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
	return 1;
}

public OnPlayerLeaveRaceCheckpoint(playerid)
{
	return 1;
}

public OnRconCommand(cmd[])
{
	return 1;
}

public OnPlayerRequestSpawn(playerid)
{
	if (GetPVarInt(playerid, "Logged") == 0)
	{
	    HataMesajGonder(playerid, "su an bunu yapamazsin.");
	    return 0;
	}
	return 1;
}

public OnPlayerObjectMoved(playerid, objectid)
{
	return 1;
}

public OnPlayerPickUpPickup(playerid, pickupid)
{
	return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	new id = Car_GetID(vehicleid);
	if (id != -1)
	{
	    AracInfo[id][aracPaintjob] = paintjobid;
	    ChangeVehiclePaintjob(vehicleid, paintjobid);

	    Arac_Kaydet(id);
	}
	return 1;
}

public OnPlayerSelectedMenuRow(playerid, row)
{
	return 1;
}

public OnPlayerExitedMenu(playerid)
{
	return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
    foreach (new i : Player)
    {
        if (PlayerData[i][pAdmin] >= 1 && PlayerData[i][pSpecID] == playerid)
        {
            SetPlayerInterior(i, GetPlayerInterior(playerid));
            SetPlayerVirtualWorld(i, GetPlayerVirtualWorld(playerid));
            PlayerSpectatePlayer(i, playerid);
        }
    }

	return 1;
}
/*public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
	if (response)
	{
		if (fScaleX < 0.1) fScaleX = 0.1;
		if (fScaleX > 1.5) fScaleX = 1.5;
		if (fScaleY < 0.1) fScaleY = 0.1;
		if (fScaleY > 1.5) fScaleY = 1.5;
		if (fScaleZ < 0.1) fScaleZ = 0.1;
		if (fScaleZ > 1.5) fScaleZ = 1.5;
		if (fOffsetX < -100) fOffsetX = 0;
		if (fOffsetX > 100) fOffsetX = 100;
		if (fOffsetY < -100) fOffsetY = 0;
		if (fOffsetY > 100) fOffsetY = 100;
		if (fOffsetZ < -100) fOffsetZ = 0;
		if (fOffsetZ > 100) fOffsetZ = 100;
	    AksesuarData[playerid][index][0] = fOffsetX;
	    AksesuarData[playerid][index][1] = fOffsetY;
	    AksesuarData[playerid][index][2] = fOffsetZ;
	   	AksesuarData[playerid][index][3] = fRotX;
	   	AksesuarData[playerid][index][4] = fRotY;
	    AksesuarData[playerid][index][5] = fRotZ;
	    AksesuarData[playerid][index][6] = (fScaleX > 3.0) ? (3.0) : (fScaleX);
	    AksesuarData[playerid][index][7] = (fScaleY > 3.0) ? (3.0) : (fScaleY);
		AksesuarData[playerid][index][8] = (fScaleZ > 3.0) ? (3.0) : (fScaleZ);
		AksesuarData[playerid][index][9] = boneid;
		PlayerData[playerid][pTSlot][index] = true;
		PlayerData[playerid][pASlot][index] = modelid;
        PlayerData[playerid][pABone][index] = boneid;
		AksesuarTak(playerid, index);
	    SunucuMesaji(playerid, "Aksesuar düzenlendi.");
	    SQL_AksesuarKaydet(playerid);
	}
	return 1;
}*/
stock AksesuarTak(playerid, index)
{
	if (PlayerData[playerid][pARenk][index] == 0) return SetPlayerAttachedObject(playerid,index,PlayerData[playerid][pASlot][index],PlayerData[playerid][pABone][index],AksesuarData[playerid][index][0],AksesuarData[playerid][index][1],AksesuarData[playerid][index][2],AksesuarData[playerid][index][3],AksesuarData[playerid][index][4],AksesuarData[playerid][index][5],AksesuarData[playerid][index][6],AksesuarData[playerid][index][7],AksesuarData[playerid][index][8]);
	switch (PlayerData[playerid][pARenk][index])
	{
	    case 1: SetPlayerAttachedObject(playerid,index,PlayerData[playerid][pASlot][index],PlayerData[playerid][pABone][index],AksesuarData[playerid][index][0],AksesuarData[playerid][index][1],AksesuarData[playerid][index][2],AksesuarData[playerid][index][3],AksesuarData[playerid][index][4],AksesuarData[playerid][index][5],AksesuarData[playerid][index][6],AksesuarData[playerid][index][7],AksesuarData[playerid][index][8], RGBAToARGB(0x000000FF), RGBAToARGB(0x000000FF));
	    case 2: SetPlayerAttachedObject(playerid,index,PlayerData[playerid][pASlot][index],PlayerData[playerid][pABone][index],AksesuarData[playerid][index][0],AksesuarData[playerid][index][1],AksesuarData[playerid][index][2],AksesuarData[playerid][index][3],AksesuarData[playerid][index][4],AksesuarData[playerid][index][5],AksesuarData[playerid][index][6],AksesuarData[playerid][index][7],AksesuarData[playerid][index][8], RGBAToARGB(0xFF0000FF), RGBAToARGB(0xFF0000FF));
	    case 3: SetPlayerAttachedObject(playerid,index,PlayerData[playerid][pASlot][index],PlayerData[playerid][pABone][index],AksesuarData[playerid][index][0],AksesuarData[playerid][index][1],AksesuarData[playerid][index][2],AksesuarData[playerid][index][3],AksesuarData[playerid][index][4],AksesuarData[playerid][index][5],AksesuarData[playerid][index][6],AksesuarData[playerid][index][7],AksesuarData[playerid][index][8], RGBAToARGB(0x0000BBFF), RGBAToARGB(0x0000BBFF));
	    case 4: SetPlayerAttachedObject(playerid,index,PlayerData[playerid][pASlot][index],PlayerData[playerid][pABone][index],AksesuarData[playerid][index][0],AksesuarData[playerid][index][1],AksesuarData[playerid][index][2],AksesuarData[playerid][index][3],AksesuarData[playerid][index][4],AksesuarData[playerid][index][5],AksesuarData[playerid][index][6],AksesuarData[playerid][index][7],AksesuarData[playerid][index][8], RGBAToARGB(0xFF9900FF), RGBAToARGB(0xFF9900FF));
	    case 5: SetPlayerAttachedObject(playerid,index,PlayerData[playerid][pASlot][index],PlayerData[playerid][pABone][index],AksesuarData[playerid][index][0],AksesuarData[playerid][index][1],AksesuarData[playerid][index][2],AksesuarData[playerid][index][3],AksesuarData[playerid][index][4],AksesuarData[playerid][index][5],AksesuarData[playerid][index][6],AksesuarData[playerid][index][7],AksesuarData[playerid][index][8], RGBAToARGB(0xa126edFF), RGBAToARGB(0xa126edFF));
	    case 6: SetPlayerAttachedObject(playerid,index,PlayerData[playerid][pASlot][index],PlayerData[playerid][pABone][index],AksesuarData[playerid][index][0],AksesuarData[playerid][index][1],AksesuarData[playerid][index][2],AksesuarData[playerid][index][3],AksesuarData[playerid][index][4],AksesuarData[playerid][index][5],AksesuarData[playerid][index][6],AksesuarData[playerid][index][7],AksesuarData[playerid][index][8], RGBAToARGB(0xffff00FF), RGBAToARGB(0xffff00FF));
	    case 7: SetPlayerAttachedObject(playerid,index,PlayerData[playerid][pASlot][index],PlayerData[playerid][pABone][index],AksesuarData[playerid][index][0],AksesuarData[playerid][index][1],AksesuarData[playerid][index][2],AksesuarData[playerid][index][3],AksesuarData[playerid][index][4],AksesuarData[playerid][index][5],AksesuarData[playerid][index][6],AksesuarData[playerid][index][7],AksesuarData[playerid][index][8], RGBAToARGB(0x33AA33FF), RGBAToARGB(0x33AA33FF));
	}
	return 1;
}

forward Float:AracHizKontrol(playerid);
stock Float:AracHizKontrol(playerid)
{
    if (IsPlayerInAnyVehicle(playerid)) {
        static Float:fSpeed, Float:fVelocity[3];
        GetVehicleVelocity(GetPlayerVehicleID(playerid), fVelocity[0], fVelocity[1], fVelocity[2]);
        fSpeed = floatmul(floatsqroot((fVelocity[0] * fVelocity[0]) + (fVelocity[1] * fVelocity[1]) + (fVelocity[2] * fVelocity[2])), 100.0);
        return fSpeed;
    }
    return 0.0;
}

stock SetVehicleSpeed(vehicleid, Float:speed)
{
	new Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2, Float:a;
	GetVehicleVelocity(vehicleid, x1, y1, z1);
	GetVehiclePos(vehicleid, x2, y2, z2);
	GetVehicleZAngle(vehicleid, a); a = 360 - a;
	x1 = (floatsin(a, degrees) * (speed/100) + floatcos(a, degrees) * 0 + x2) - x2;
	y1 = (floatcos(a, degrees) * (speed/100) + floatsin(a, degrees) * 0 + y2) - y2;
	SetVehicleVelocity(vehicleid, x1, y1, z1);
}

forward absfren(playerid);
public absfren(playerid)
{
 	if (AracHizKontrol(playerid) < 6)
 	{

	}
	else
	{
		SetVehicleSpeed(GetPlayerVehicleID(playerid), AracHizKontrol(playerid) - 6);
	 	SetTimerEx("absfren", 75, false, "i", playerid);
	}
	return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	/* if(!pCBugging[playerid] && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		if(PRESSED(KEY_FIRE))
		{
			switch(GetPlayerWeapon(playerid))
			{
				case WEAPON_DEAGLE, WEAPON_SHOTGUN, WEAPON_SNIPER:
				{
					ptsLastFiredWeapon[playerid] = gettime();
				}
			}
		}
		else if(PRESSED(KEY_CROUCH))
		{
			if((gettime() - ptsLastFiredWeapon[playerid]) < 1)
			{
				TogglePlayerControllable(playerid, false);

				pCBugging[playerid] = true;

				GameTextForPlayer(playerid, "~r~C-BUG yapmayin!", 3000, 4);

				KillTimer(ptmCBugFreezeOver[playerid]);
				ptmCBugFreezeOver[playerid] = SetTimerEx("CBugFreezeOver", 1500, false, "i", playerid);
			}
		}
	} */

	if ((newkeys & KEY_YES) && (GetPlayerState(playerid) == PLAYER_STATE_DRIVER))
	{
		new pns = IsPlayerNearPNS(playerid);

		if (pns != -1 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			if(Tamirhane[pns][Tamirhane_Kullaniliyor] == 1)
				return HataMesajGonder(playerid, "Bu tamirhane su anda kullaniliyor.");

			if(Tamirhane[pns][Tamirhane_IcPos][0] == 0.0 && Tamirhane[pns][Tamirhane_IcPos][1] == 0.0 && Tamirhane[pns][Tamirhane_IcPos][2] == 0.0)
				return HataMesajGonder(playerid, "Bu tamirhanenin iç pozisyonu ayarlanmamis. (/rapor)");

			new Float:vHealth, vid = Car_GetID(GetPlayerVehicleID(playerid));
			GetVehicleHealth(GetPlayerVehicleID(playerid), vHealth);

			if (vid == -1) return HataMesajGonder(playerid, "Bu araci tamir edemezsiniz.");
			if (vHealth >= 999) return HataMesajGonder(playerid, "Bu aracin tamire ihtiyaci yok.");
			if (PlayerData[playerid][pCash] < TAMIRCI_UCRET) return HataMesajGonder(playerid, "Yeterli paraniz yok.");

			ParaVer(playerid, -TAMIRCI_UCRET);
			SetPVarInt(playerid, "pnsID", pns);

			SetPlayerVirtualWorld(playerid, Tamirhane[pns][Tamirhane_IcWorld]);
			SetPlayerInterior(playerid, Tamirhane[pns][Tamirhane_IcInterior]);

			new Float:zpos = Tamirhane[pns][Tamirhane_IcPos][2] + 1.5,
			    vehicleid = GetPlayerVehicleID(playerid);

			SetVehiclePos(vehicleid, Tamirhane[pns][Tamirhane_IcPos][0], Tamirhane[pns][Tamirhane_IcPos][1], zpos);
			SetVehicleZAngle(vehicleid, Tamirhane[pns][Tamirhane_Pos][4]);

    		SetVehicleVirtualWorld(vehicleid, Tamirhane[pns][Tamirhane_IcWorld]);
    		LinkVehicleToInteriorEx(vehicleid, Tamirhane[pns][Tamirhane_IcInterior]);

			foreach(new i: Player)
			{
	            if (i != playerid && IsPlayerInVehicle(i, vehicleid) && GetPlayerVehicleSeat(i) != 128 && GetPlayerVehicleSeat(i) != 0)
				{
				    TogglePlayerControllable(i, false);

					SetPlayerPos(i, Tamirhane[pns][Tamirhane_IcPos][0], Tamirhane[pns][Tamirhane_IcPos][1], zpos);

					SetPlayerInterior(i, Tamirhane[pns][Tamirhane_IcInterior]);
	                SetPlayerVirtualWorld(i, Tamirhane[pns][Tamirhane_IcWorld]);

					PutPlayerInVehicle(i, vehicleid, GetPlayerVehicleSeat(i));
	            }
			}
            TogglePlayerControllable(playerid, 0);
			SetTimerEx("TamirExit", Tamirhane[pns][Tamirhane_Vakit]*1000, false, "ii", playerid, GetPlayerVehicleID(playerid));
			SunucuMesaji(playerid, "Tamirhanede yapilan islem %d saniye sürecek.", Tamirhane[pns][Tamirhane_Vakit]);

			Tamirhane[pns][Tamirhane_Kullaniliyor] = 1;
			return 1;
		}
	}
	else if (newkeys & KEY_CROUCH)
	{
	    new id = Gate_Nearest(playerid);
	    if (id != -1)
		{
		    if (PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1  || PlayerData[playerid][pSoklandi] > 0) return HataMesajGonder(playerid, "Bunu su an yapamazsiniz.");
		    cmd_kapi(playerid);
		}
	}
	else if (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && (newkeys & KEY_WALK))
	{
        new dealerid = GetClosestDealer(playerid);
        new npc = NPC_Nearest(playerid);
	    if (IsPlayerInRangeOfPoint(playerid, 5.0, MermiX, MermiY, MermiZ))
	    {
	        if (GetFactionType(playerid) == BIRLIK_LSPD || GetFactionType(playerid) == BIRLIK_LSMD || GetFactionType(playerid) == BIRLIK_FBI) return HataMesajGonder(playerid, "Bu oluþum türü silah alamaz.");
	        Dialog_Show(playerid, SilahTuccari, DIALOG_STYLE_LIST, "Silah/Mermi Satýcýsý", "{AFAFAF}> {FFFFFF}Silah Satýn Al\n{AFAFAF}> {FFFFFF}Mermi Satýn Al\n{AFAFAF}> {FFFFFF}Þarjör Satýn Al", "Seç", "Kapat");
	    }
	    else if (IsPlayerInRangeOfPoint(playerid, 3.0, 1457.8317,-1777.6063,1815.9910))
	    {
	        if (GetTicketCount(playerid) > 0) return HataMesajGonder(playerid, "Devlet hizmetlerinden yararlanmak için PD binasýndan kiþisel cezanýzý ödemelisiniz.");
	        Dialog_Show(playerid, HukumetBinasi, DIALOG_STYLE_LIST, "{FFFFFF}Hükümet Binasý", "{FFFFFF}Araç Vergisi Sorgula\n{FFFFFF}Ýþyeri Vergisi Sorgula\n{FFFFFF}Ev Vergisi Sorgula\n{FFFFFF}Boþanma Ýþlemleri {2ECC71}($1500)\n{FFFFFF}Maaþ Çek {2ECC71}(%s)", "Seç", "Kapat",FormatNumber(PlayerData[playerid][pMaas]));
	    }
        else if (IsPlayerInRangeOfPoint(playerid, 3.0, 1462.7961,-1682.5978,-70.0371))
	    {
	        Dialog_Show(playerid, LSPD, DIALOG_STYLE_LIST, "{C9A527}LSPD Halkla iliskiler", "{FFFFFF}Kisisel Cezalar\n{FFFFFF}Araç Cezalari\n{FFFFFF}Haczedilen Araçlarim\n{FFFFFF}Kefalet Öde\n{FFFFFF}Memur Çagir\n{FFFFFF}Hurdadaki araçlarým", "Seç", "Kapat");
	    }
	    else if (dealerid != -1)
	    {
	        if (PlayerData[playerid][pFaction] == -1 || Birlikler[PlayerData[playerid][pFaction]][birlikOnaylar][2] == 0) return HataMesajGonder(playerid, "Uyusturucu onayli bir birligin üyesi degilsiniz!");
	        PlayerDrugData[playerid][DealerID] = dealerid;
			ShowDealerMenu(playerid);
	    }
	    else if (GetClosestATM(playerid) != -1)
	    {
	        SetPVarInt(playerid, "usingATM", 1);
			Bank_ShowMenu(playerid);
	    }
	    else if (IsPlayerNearBanker(playerid))
	    {
	        SetPVarInt(playerid, "usingATM", 0);
			Bank_ShowMenu(playerid);
	    }
	    else if (npc != -1)
	    {
	        new str[750], count;
		    for (new i; i<MAX_SECENEK; i++) if (strcmp(NPCSecenekler[npc][i], "Yok", true) != 0)
		    {
		        count++;
				format(str, sizeof(str), "%s{FFFFFF}%s\n", str, NPCSecenekler[npc][i]);
		    }
		    SetPVarInt(playerid, "NPCEtkilesimID", npc);
		    if (count > 0) Dialog_Show(playerid, NPCEtkilesim, DIALOG_STYLE_LIST, "Etkilesim", str, "Seç", "Kapat");
	    }
	}
	if (newkeys & KEY_YES)
	{
  		new sid = Gise_Kontrol(playerid);

		if (sid != -1)
		{
			if (PlayerData[playerid][pCash] >= GISE_UCRET)
			{
				if (AcilDurum != 1)
				{
					if (Gise[sid][gs_Durum] == GISE_KAPALI)
					{
						Gise[sid][gs_Durum] = GISE_ACIK;

						SunucuMesaji(playerid, "Giþe açýldý, 3 saniye içerisinde kapanacaktýr.");

						ParaVer(playerid, -GISE_UCRET);
						MoveDynamicObject(Gise[sid][gs_Obje], Gise[sid][gs_Acik][0], Gise[sid][gs_Acik][1], Gise[sid][gs_Acik][2], 5.0,  Gise[sid][gs_Acik][3], Gise[sid][gs_Acik][4], Gise[sid][gs_Acik][5]);
						return 1;
					}
				}
			}
		}

		new controller = 0;

		if(Entrance_Nearest(playerid) != -1 || Business_Nearest(playerid) != -1 || House_Nearest(playerid) != -1 || Garage_Nearest(playerid) != -1)
		{
			cmd_gir(playerid);
			controller++;
			return 1;
		}

		if(Entrance_Inside(playerid) != -1 || Business_Inside(playerid, true) != -1 || House_Inside(playerid, true) != -1 || Garage_Inside(playerid, true) != -1)
		{
			cmd_cik(playerid);
			controller++;
			return 1;
		}

		if(controller == 0)
		    return cmd_envanter(playerid);
 	}
    if (newkeys & KEY_HANDBRAKE)
    {
        if (IsPlayerInAnyVehicle(playerid))
        {
			if (ABS[playerid] == 1)
			{
				if (AracHizKontrol(playerid) > 6)
				{
					SetTimerEx("absfren", 10, false, "i", playerid);
					new mesaj[40];
					format(mesaj, sizeof(mesaj), "~r~ABS ~w~devreye girdi!");
					GameTextForPlayer(playerid, mesaj, 2000, 3);
				}
			}
		}
    }
     if ((newkeys & KEY_FIRE) && (oldkeys & KEY_CROUCH) && !((oldkeys & KEY_FIRE) || (newkeys & KEY_HANDBRAKE)) || (oldkeys & KEY_FIRE) && (newkeys & KEY_CROUCH) && !((newkeys & KEY_FIRE) || (newkeys & KEY_HANDBRAKE)) ) {
        switch (GetPlayerWeapon(playerid)) {
                    case 23..25, 27, 29..34, 41: {
                        /* if (Ammo[playerid][GetPlayerWeapon(playerid)] > GetPlayerAmmo(playerid)) {
                                        OnPlayerCBug(playerid);
                                } */
                                return 1;
                        }
                }
        }

        if (CheckCrouch[playerid] == 1) {
                switch (WeaponID[playerid]) {
                    case 23..25, 27, 29..34, 41: {
                        if ((newkeys & KEY_CROUCH) && !((newkeys & KEY_FIRE) || (newkeys & KEY_HANDBRAKE)) && GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK ) {
                                /* if (Ammo[playerid][GetPlayerWeapon(playerid)] > GetPlayerAmmo(playerid)) {
                                                OnPlayerCBug(playerid);
                                        } */
                        }
                    }
                }
        }

        //if (newkeys & KEY_CROUCH || (oldkeys & KEY_CROUCH)) return 1;

	else if (((newkeys & KEY_FIRE) && (newkeys & KEY_HANDBRAKE) && !((newkeys & KEY_SPRINT) || (newkeys & KEY_JUMP))) ||
        (newkeys & KEY_FIRE) && !((newkeys & KEY_SPRINT) || (newkeys & KEY_JUMP)) ||
        (NotMoving[playerid] && (newkeys & KEY_FIRE) && (newkeys & KEY_HANDBRAKE)) ||
        (NotMoving[playerid] && (newkeys & KEY_FIRE)) ||
        (newkeys & KEY_FIRE) && (oldkeys & KEY_CROUCH) && !((oldkeys & KEY_FIRE) || (newkeys & KEY_HANDBRAKE)) ||
        (oldkeys & KEY_FIRE) && (newkeys & KEY_CROUCH) && !((newkeys & KEY_FIRE) || (newkeys & KEY_HANDBRAKE)) ) {
                SetTimerEx("CrouchCheck", 3000, 0, "d", playerid);
                CheckCrouch[playerid] = 1;
                WeaponID[playerid] = GetPlayerWeapon(playerid);
                Ammo[playerid][GetPlayerWeapon(playerid)] = GetPlayerAmmo(playerid);
                return 1;
	}

    static id = -1;
    if (((newkeys & KEY_WALK && newkeys & KEY_UP) || (newkeys & KEY_WALK && newkeys & KEY_DOWN) || (newkeys & KEY_WALK && newkeys & KEY_LEFT) || (newkeys & KEY_WALK && newkeys & KEY_RIGHT))
		|| ((oldkeys & KEY_WALK && newkeys & KEY_UP) || (oldkeys & KEY_WALK && newkeys & KEY_DOWN) || (oldkeys & KEY_WALK && newkeys & KEY_LEFT) || (oldkeys & KEY_WALK && newkeys & KEY_RIGHT))
		|| ((newkeys & KEY_WALK && oldkeys & KEY_UP) || (newkeys & KEY_WALK && oldkeys & KEY_DOWN) || (newkeys & KEY_WALK && oldkeys & KEY_LEFT) || (newkeys & KEY_WALK && oldkeys & KEY_RIGHT))
		&& GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && PlayerData[playerid][pBaygin] == 0 && PlayerData[playerid][pKelepce] == 0 && PlayerData[playerid][pSoklandi] == 0 && PlayerData[playerid][pYereYatirildi] == 0 && PlayerData[playerid][pAyarlar][9] > 0 && PlayerData[playerid][pAyarlar][9] < 14 && !IsPlayerAiming(playerid))
		    walktime[playerid] = SetTimerEx("WalkAnim",200,0, "d",playerid);

	if((newkeys & KEY_NO) && HasTrash[playerid])
	{
		Trash_ResetPlayer(playerid);
		SunucuMesaji(playerid, "Çöp torbasi silindi.");
	}
	else if (newkeys & KEY_NO)
	{
		if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			cmd_arac(playerid);
		    return 1;
		}

	    if (PlayerData[playerid][pMangalKuruldu] == true && PlayerData[playerid][pPisirilenYemek] > 0 && PlayerData[playerid][pYemekPisiriliyor] == 1 && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	    {
	        new Float:pos[3];
	        GetDynamicObjectPos(PlayerData[playerid][pMangalObject][0], pos[0], pos[1], pos[2]);
	        if (IsPlayerInRangeOfPoint(playerid, 4.0, pos[0], pos[1], pos[2]))
	        {
	            SetPVarInt(playerid, "PisirilenYemek", PlayerData[playerid][pPisirilenYemek]);
	            PlayerData[playerid][pPisirilenYemek] = 0;
	            PlayerData[playerid][pYemekPisiriliyor] = 0;
	            Dialog_Show(playerid, BarbekuYemek, DIALOG_STYLE_INPUT, "Barbekü", "{ff0000}> {FFFFFF}Yemegi vermek istediginiz oyuncunun ID'sini girin (Kendi ID'nizi yazarsaniz siz yersiniz ID: %d):", "Ver", "Kapat", playerid);
	        }
	        return 1;
	    }
        if (GetPlayerWeapon(playerid) == WEAPON_CHAINSAW && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	    {

		    if (id != -1)
		    {
		{
			TogglePlayerControllable(playerid, 0);
			SetPlayerArmedWeapon(playerid, WEAPON_CHAINSAW);
			ApplyAnimation(playerid, "CHAINSAW", "WEAPON_csaw", 4.1, 1, 0, 0, 1, 0, 1);
		        }
		        return 1;
		    }

	    }
	}
	if (newkeys & KEY_FIRE && PlayerData[playerid][pDrinking])
	{
	    if (GetPlayerAnimationIndex(playerid) != 15 && GetPlayerAnimationIndex(playerid) != 16)
	    {
	        if (GetPlayerProgressBarValue(playerid, PlayerData[playerid][pDrinkBar]) >= 100.0)
	        {
	            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				DestroyPlayerProgressBar(playerid, PlayerData[playerid][pDrinkBar]);

				PlayerData[playerid][pDrinking] = 0;
				MesajGonder(playerid, "Suyunuz bitti.");
	        }
		}
		else
		{
			 if (!spamProtect(playerid, "DrinkTime",2)) return 1;
 			 SetPlayerProgressBarValue(playerid, PlayerData[playerid][pDrinkBar], GetPlayerProgressBarValue(playerid, PlayerData[playerid][pDrinkBar]) + 10.0);
		}
	}
	if (newkeys & KEY_SPRINT && IsPlayerSpawnedEx(playerid) && PlayerData[playerid][pLoopAnim] && PlayerData[playerid][pBaygin] == 0)
    {
        ClearAnimations(playerid);

        StopLoopingAnim(playerid);
    }
	if ((newkeys == KEY_SPRINT || newkeys == KEY_JUMP) && PlayerData[playerid][pTopallama] == true && PlayerData[playerid][pBaygin] == 0)
	{
	    ApplyAnimation(playerid, "PED", "FALL_COLLAPSE", 4.0, 0, 1, 1, 0, 500, 1);
	    ApplyAnimation(playerid, "PED", "FALL_COLLAPSE", 4.0, 0, 1, 1, 0, 500, 1);
	}
	return 1;
}
stock NPC_Nearest(playerid)
{
	for (new i; i<MAXIMUM_NPC; i++) if (NPCBilgi[i][npcExists] == true && GetPlayerDistanceFromPoint(playerid, NPCBilgi[i][npcPos][0], NPCBilgi[i][npcPos][1], NPCBilgi[i][npcPos][2]) < 4.0)
 	{
  		return i;
  	}
   	return -1;
}
forward WalkAnim(playerid);
public  WalkAnim(playerid)
{
	new keys, updown, leftright;
	GetPlayerKeys(playerid,keys,updown,leftright);
	if (GetPlayerWalkingStyle(playerid) == WALK_NORMAL)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid, "PED", "WALK_player",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0, "d",playerid);
		}
		else ApplyAnimation(playerid, "PED", "WALK_player",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_PED)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid, "PED", "WALK_civi",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0, "d",playerid);
		}
		else ApplyAnimation(playerid, "PED", "WALK_civi",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
 	else if (GetPlayerWalkingStyle(playerid) == WALK_GANGSTA)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid, "PED", "WALK_gang1",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0, "d",playerid);
		}
		else ApplyAnimation(playerid, "PED", "WALK_gang1",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_GANGSTA2)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid, "PED", "WALK_gang2",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0, "d",playerid);
		}
		else ApplyAnimation(playerid, "PED", "WALK_gang2",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_OLD)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid, "PED", "WALK_old",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0, "d",playerid);
		}
		else ApplyAnimation(playerid, "PED", "WALK_old",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_FAT_OLD)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid, "PED", "WALK_fatold",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0, "d",playerid);
		}
		else ApplyAnimation(playerid, "PED", "WALK_fatold",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_FAT)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid, "PED", "WALK_fat",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0, "d",playerid);
		}
		else ApplyAnimation(playerid, "PED", "WALK_fat",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_LADY)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid, "PED", "WOMAN_walknorm",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0, "d",playerid);
		}
		else ApplyAnimation(playerid, "PED", "WOMAN_walknorm",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_LADY2)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid, "PED", "WOMAN_walkbusy",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0, "d",playerid);
		}
		else ApplyAnimation(playerid, "PED", "WOMAN_walkbusy",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_WHORE)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid, "PED", "WOMAN_walkpro",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0, "d",playerid);
		}
		else ApplyAnimation(playerid, "PED", "WOMAN_walkpro",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_WHORE2)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid, "PED", "WOMAN_walksexy",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0, "d",playerid);
		}
		else ApplyAnimation(playerid, "PED", "WOMAN_walksexy",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_DRUNK)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid, "PED", "WALK_drunk",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0, "d",playerid);
		}
		else ApplyAnimation(playerid, "PED", "WALK_drunk",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_BLIND)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid, "PED", "Walk_Wuzi",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0, "d",playerid);
		}
		else ApplyAnimation(playerid, "PED", "Walk_Wuzi",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	return 1;
}
stock GetPlayerWalkingStyle(playerid)
{
	return PlayerData[playerid][pAyarlar][9];
}

public OnRconLoginAttempt(ip[], password[], success)
{
	return 1;
}

stock IsPlayerRunning(playerid)
{
    if (!IsPlayerConnected(playerid)) return 0;
    if (IsPlayerInAnyVehicle(playerid)) return 0;
    new keys, updown, leftright;
    GetPlayerKeys(playerid, keys, updown, leftright);
    if (keys & KEY_SPRINT) return 1;
    return 0;
}

stock IsPlayerAiming(playerid)
{
    new anim = GetPlayerAnimationIndex(playerid);
    if (((anim >= 1160) && (anim <= 1163)) || (anim == 1167) || (anim == 1365) ||
    (anim == 1643) || (anim == 1453) || (anim == 220)) return 1;
    return 0;
}

stock GetMoveDirectionFromKeys(ud, lr)
{
	new direction = 0;

    if (lr < 0)
	{
		if (ud < 0) 		direction = MOVE_FORWARD_LEFT; 	// Up & Left key pressed
		else if (ud > 0) direction = MOVE_BACK_LEFT; 	// Back & Left key pressed
		else            direction = MOVE_LEFT;          // Left key pressed
	}
	else if (lr > 0) 	// Right pressed
	{
		if (ud < 0)      direction = MOVE_FORWARD_RIGHT;  // Up & Right key pressed
		else if (ud > 0) direction = MOVE_BACK_RIGHT;     // Back & Right key pressed
		else			direction = MOVE_RIGHT;          // Right key pressed
	}
	else if (ud < 0) 	direction = MOVE_FORWARD; 	// Up key pressed
	else if (ud > 0) 	direction = MOVE_BACK;		// Down key pressed

	return direction;
}

stock YatSur(playerid)
{
	new Float:pos[3], Float:rot[3];
	GetObjectPos(YatBilgi[yatObject], pos[0], pos[1], pos[2]);
	GetObjectRot(YatBilgi[yatObject], rot[0], rot[1], rot[2]);

	switch (PlayerData[playerid][pYatKontrol][1])
	{
	    case MOVE_FORWARD:
	    {
	        pos[0] += (1 * floatsin(-rot[2], degrees));
			pos[1] += (1 * floatcos(-rot[2], degrees));
	        MoveObject(YatBilgi[yatObject], pos[0], pos[1], pos[2], 6, rot[0], rot[1], rot[2]);
	    }
	    case MOVE_BACK:
	    {
	        pos[0] += (1 * floatsin(-rot[2]+180, degrees));
			pos[1] += (1 * floatcos(-rot[2]+180, degrees));
	        MoveObject(YatBilgi[yatObject], pos[0], pos[1], pos[2], 6, rot[0], rot[1], rot[2]);
	    }
     	case MOVE_FORWARD_LEFT:
	    {
	        pos[0] += (1 * floatsin(-rot[2], degrees));
			pos[1] += (1 * floatcos(-rot[2], degrees));
			rot[2] += 0.5;
			MoveObject(YatBilgi[yatObject], pos[0], pos[1], pos[2], 6, rot[0], rot[1], rot[2]);
	    }
	    case MOVE_FORWARD_RIGHT:
	    {
	        pos[0] += (1 * floatsin(-rot[2], degrees));
			pos[1] += (1 * floatcos(-rot[2], degrees));
			rot[2] -= 0.5;
			MoveObject(YatBilgi[yatObject], pos[0], pos[1], pos[2], 6, rot[0], rot[1], rot[2]);
	    }
	    case MOVE_BACK_LEFT:
	    {
	        pos[0] += (1 * floatsin(-rot[2]+180, degrees));
			pos[1] += (1 * floatcos(-rot[2]+180, degrees));
			rot[2] -= 0.5;
	        MoveObject(YatBilgi[yatObject], pos[0], pos[1], pos[2], 6, rot[0], rot[1], rot[2]);
	    }
	    case MOVE_BACK_RIGHT:
	    {
	        pos[0] += (1 * floatsin(-rot[2]+180, degrees));
			pos[1] += (1 * floatcos(-rot[2]+180, degrees));
			rot[2] += 0.5;
	        MoveObject(YatBilgi[yatObject], pos[0], pos[1], pos[2], 6, rot[0], rot[1], rot[2]);
	    }
	}
	PlayerData[playerid][pYatKontrol][2] = GetTickCount();
	return 1;
}

/* forward OnPlayerCBug(playerid);
public OnPlayerCBug(playerid)
{
	SetPlayerArmedWeapon(playerid, 0);
	TogglePlayerControllable(playerid, false);
	SetTimerEx("CbugUnfreeze", 500, false, "i", playerid);
	GameTextForPlayer(playerid, " ", 1500, 4);
	return 1;
}

forward CbugUnfreeze(playerid);
public CbugUnfreeze(playerid)
{
    TogglePlayerControllable(playerid, true);
	return 1;
} */
forward CrouchCheck(playerid);
public CrouchCheck(playerid) {
        CheckCrouch[playerid] = 0;
        return 1;
}

Float:GetVehSpeed(vid)
{
    new Float:vx, Float:vy, Float:vz, Float:vel;
	vel = GetVehicleVelocity(vid, vx, vy, vz);
	vel = (floatsqroot(((vx*vx)+(vy*vy))+(vz*vz))* 181.5);
	return vel;
}

public OnPlayerUpdate(playerid)
{
	new id;
    new str[256];

    if ((id = House_Nearest(playerid)) != -1)
    {
        if (!HouseInfo[id][evSahip])
        {
            format(str, sizeof(str), "~w~Bu ev satýlýk!:~y~ /satinal");
            GameTextForPlayer(playerid, str, 1000, 3);
        }
        else
        {
            format(str, sizeof(str), "~w~Ev ID:~y~ %d", id);
            GameTextForPlayer(playerid, str, 1000, 3);
        }
    }

    if ((id = Business_Nearest(playerid)) != -1)
    {
        format(str, sizeof(str), "~w~Isyeri ID:~y~ %d", id);
        GameTextForPlayer(playerid, str, 1000, 3);
    }
	if (GetPVarInt(playerid, "BunnyTime") <= gettime())
	{
	    JoueurAppuieJump[playerid] = 0;
	}

    	new
                s_iVehicle
        ;

        s_iVehicle = GetPlayerVehicleID( playerid );

        if ( g_fSpeedCap[ playerid ][ s_iVehicle ] != 0.0 && GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
        {
                if ( s_iVehicle )
                {
                        new
                                Float:s_fX,
                                Float:s_fY,
                                Float:s_fZ,
                                Float:s_fVX,
                                Float:s_fVY,
                                Float:s_fVZ
                        ;

                        GetVehiclePos( s_iVehicle, s_fX, s_fY, s_fZ );
                        GetVehicleVelocity( s_iVehicle, s_fVX, s_fVY, s_fVZ );

                        if ( GetVehSpeed(GetPlayerVehicleID(playerid)) >  g_fSpeedCap[ playerid ][ s_iVehicle ])
                        {
                                SetVehicleSpeed(GetPlayerVehicleID(playerid), g_fSpeedCap[ playerid ][ s_iVehicle ] / 2);
						}
                }
        }

	if (GetPlayerAnimationIndex(playerid) == 745 || GetPlayerAnimationIndex(playerid) == 746 || GetPlayerAnimationIndex(playerid) == 747 || GetPlayerAnimationIndex(playerid) == 748)
    {
           return 0;
    }

	new keys, ud, lr;
 	GetPlayerKeys(playerid, keys, ud, lr);

	new drunknew;
    drunknew = GetPlayerDrunkLevel(playerid);

    if (drunknew < 100) { // go back up, keep cycling.
        SetPlayerDrunkLevel(playerid, 2000);
    } else {

        if (pDrunkLevelLast[playerid] != drunknew) {

            new wfps = pDrunkLevelLast[playerid] - drunknew;

            if ((wfps > 0) && (wfps < 200))
                pFPS[playerid] = wfps;

            pDrunkLevelLast[playerid] = drunknew;
        }

    }
    if (NetStats_GetConnectedTime(playerid) - WeaponTick[playerid] >= 250)
    {
        new weaponid, ammo, objectslot, count, index;

        for (new i = 2; i <= 7; i++) //Loop only through the slots that may contain the wearable weapons
        {
            GetPlayerWeaponData(playerid, i, weaponid, ammo);
            index = weaponid - 22;

            if (weaponid && ammo && !WeaponSettings[playerid][index][Hidden] && IsWeaponWearable(weaponid) && EditingWeapon[playerid] != weaponid)
            {
                objectslot = GetWeaponObjectSlot(weaponid);

                if (GetPlayerWeapon(playerid) != weaponid)
                    SetPlayerAttachedObject(playerid, objectslot, GetWeaponModel(weaponid), WeaponSettings[playerid][index][Bone], WeaponSettings[playerid][index][Position][0], WeaponSettings[playerid][index][Position][1], WeaponSettings[playerid][index][Position][2], WeaponSettings[playerid][index][Position][3], WeaponSettings[playerid][index][Position][4], WeaponSettings[playerid][index][Position][5], 1.0, 1.0, 1.0);

                else if (IsPlayerAttachedObjectSlotUsed(playerid, objectslot)) RemovePlayerAttachedObject(playerid, objectslot);
            }
        }
        for (new i; i <= 5; i++) if (IsPlayerAttachedObjectSlotUsed(playerid, i))
        {
            count = 0;

            for (new j = 22; j <= 38; j++) if (PlayerHasWeapon(playerid, j) && GetWeaponObjectSlot(j) == i)
                count++;

            if (!count) RemovePlayerAttachedObject(playerid, i);
        }
        WeaponTick[playerid] = NetStats_GetConnectedTime(playerid);
    }
    new surfingvehicle = GetPlayerSurfingVehicleID(playerid);
    new Float:svx, Float:svy, Float:svz, Float:npx, Float:npy, Float:npz;
    GetVehiclePos(surfingvehicle, svx, svy, svz);
    GetPlayerPos(playerid, npx, npy, npz);
    new Float:surfingshot = (svy + svx + svz) - (npx + npy + npz);
    if((surfingvehicle != 65535) && (surfingshot  < -15 || surfingshot > 15))
    {
        return 0;
    }
    new SurfingObject = GetPlayerSurfingObjectID(playerid);
    new Float:XObject, Float:YObject, Float:ZObject;
    GetObjectPos(SurfingObject, XObject, YObject, ZObject);
    new Float:Allah = (XObject + YObject + ZObject) - (npx + npy + npz);
    if(( SurfingObject != 65535) && (Allah  < -30 || Allah > 30))
    {
         return 0;
    }
    new Float:distance = GetPlayerDistanceFromPoint(playerid, LastPosition[playerid][0], LastPosition[playerid][1], LastPosition[playerid][2]);
    if (distance >= 50.0 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
        return 0;
    }
    if (GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USEJETPACK && PlayerData[playerid][pAdmin] < 1)
	{
 		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	}
	if ((GetPlayerWeapon(playerid) == 18 || GetPlayerWeapon(playerid) == 35 || GetPlayerWeapon(playerid) == 36 || GetPlayerWeapon(playerid) == 37 || GetPlayerWeapon(playerid) == 38 || GetPlayerWeapon(playerid) == 39) && PlayerData[playerid][pAdmin] < 1 && pbOda[playerid] == -1)
	{
	    AdminMessage(COLOR_LIGHTRED, "AdmCmd: %s adli kisi silah hilesi kullandigi için oyundan atildi. Silah: %s", ReturnName(playerid, 0), ReturnWeaponName(GetPlayerWeapon(playerid)));
	    ResetWeapons(playerid);
	    AddBan(GetIP(playerid), Player_GetName(playerid), "", "Sistem", 0, "Silah Hilesi");
	}
	new anim[2][32];
    GetAnimationName(GetPlayerAnimationIndex(playerid), anim[0], 32, anim[1], 32);
    if (Airbreak[playerid] > 0 && Airbreak2[playerid] < gettime())
	{
		Airbreak[playerid] = 0;
	}
	if (Yarrak[playerid] > 0 && Yarrak2[playerid] < gettime())
	{
		Yarrak[playerid] = 0;
	}
    if(GetPlayerSpeed2(playerid) > 0 && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && strcmp(anim[1], "FALL_FALL", true) && strcmp(anim[1], "IDLE_STANCE", true))
    {
        new Float:distance = GetPlayerDistanceFromPoint(playerid, LastPosition[playerid][0], LastPosition[playerid][1], LastPosition[playerid][2]);
        if (distance >= 10.0 && distance < 50.0)
        {
            Airbreak[playerid] ++;
            Airbreak2[playerid] = gettime()+1;
		}
    }
    GetPlayerPos(playerid, LastPosition[playerid][0], LastPosition[playerid][1], LastPosition[playerid][2]);
	if (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && GetPlayerSpeed2(playerid) >= 30) //Anti Slapper
	{
		return 0;
	}
	if (PlayerData[playerid][pTaxiPlayer] != -1 && PlayerData[PlayerData[playerid][pTaxiPlayer]][pTaxiDuty] == true && CarUpdate[GetPlayerVehicleID(playerid)] < tickcount())
	{
 		new id = Car_GetID(GetPlayerVehicleID(playerid));
   		new driverid = GetVehicleDriver(GetPlayerVehicleID(playerid));
	    if (floatround(PlayerData[playerid][pTaksiUcret]) >= PlayerData[playerid][pCash])
		{
  			LeaveTaxi(playerid, driverid);
     		RemovePlayerFromVehicle(playerid);
       		MesajGonder(driverid, "Yolcunun taksi ücretini ödeyecek parasi olmadigi için taksiden indirdin.");
         	SunucuMesaji(playerid, "Taksi ücretini ödeyecek paran olmadigi için taksiden indin.");
  		}
     	else
      	{
       		new Float:distance = GetVehicleDistanceFromPoint(GetPlayerVehicleID(playerid), TaxiLastPos[GetPlayerVehicleID(playerid)][0], TaxiLastPos[GetPlayerVehicleID(playerid)][1], TaxiLastPos[GetPlayerVehicleID(playerid)][2]);

			if (distance >= 1)
			{
   				PlayerData[playerid][pTaksiUcret] += 0.1 * AracInfo[id][Taksimetre];
			    GetVehiclePos(GetPlayerVehicleID(playerid), TaxiLastPos[GetPlayerVehicleID(playerid)][0], TaxiLastPos[GetPlayerVehicleID(playerid)][1], TaxiLastPos[GetPlayerVehicleID(playerid)][2]);
			}

			new str[30];
    		format(str, sizeof(str), "$%d (%s/km)", floatround(PlayerData[playerid][pTaksiUcret]), FormatNumber(AracInfo[id][Taksimetre]));
      		PlayerTextDrawSetString(playerid, TaxiTD[playerid][1], str);
        	PlayerTextDrawSetString(driverid, TaxiTD[driverid][1], str);
       }
	}
	if (NetStats_GetConnectedTime(playerid) - WeaponTick[playerid] >= 250)
	{
	    new weaponid = PlayerData[playerid][pSilahlar][1];
	    new ammo = PlayerData[playerid][pMermiler][1];

        weaponid = PlayerData[playerid][pSilahlar][3];
        ammo = PlayerData[playerid][pMermiler][3];

	    if (weaponid == 25)
	    {
            if (GetPlayerWeapon(playerid) != 25 && ammo != 0)
            {
				SetPlayerAttachedObject(playerid, 6, 349, 1, -0.065999, 0.152999, 0.067999, 2.299999, 50.800006, -0.299999, 1.000000, 1.000000, 1.000000);
            }
            else
            {
                if (IsPlayerAttachedObjectSlotUsed(playerid, 6)) RemovePlayerAttachedObject(playerid, 6);
            }
	    }
	    else if (IsPlayerAttachedObjectSlotUsed(playerid, 6)) RemovePlayerAttachedObject(playerid, 6);

		weaponid = PlayerData[playerid][pSilahlar][4];
		ammo = PlayerData[playerid][pMermiler][4];

		switch (weaponid)
	    {
	        case 28:
	        {
	            if (GetPlayerWeapon(playerid) != 28 && ammo != 0)
	            {
					SetPlayerAttachedObject(playerid, 7, 352, 1, -0.222000, -0.000000, 0.171999, -7.500000, 89.300041, 99.300018, 1.000000, 1.000000, 1.000000);
	            }
	            else
	            {
	                if (IsPlayerAttachedObjectSlotUsed(playerid, 7)) RemovePlayerAttachedObject(playerid, 7);
	            }
	        }
	        case 29:
	        {
	            if (GetPlayerWeapon(playerid) != 29 && ammo != 0)
	            {
					SetPlayerAttachedObject(playerid, 7, 353, 1, -0.089999, 0.225000, -0.018000, -166.099990, 45.800003, 7.599999, 1.000000, 1.000000, 1.000000);
	            }
	            else
	            {
	                if (IsPlayerAttachedObjectSlotUsed(playerid, 7)) RemovePlayerAttachedObject(playerid, 7);
	            }
	        }
	        default: if (IsPlayerAttachedObjectSlotUsed(playerid, 7)) RemovePlayerAttachedObject(playerid, 7);
	    }
	    weaponid = PlayerData[playerid][pSilahlar][5];
	    ammo = PlayerData[playerid][pMermiler][5];

	    switch (weaponid)
	    {
	        case 30:
	        {
	            if (GetPlayerWeapon(playerid) != 30 && ammo != 0)
	            {
           			SetPlayerAttachedObject(playerid, 8, 355, 1, 0.201000, -0.134000, -0.200999, -176.000030, 176.399997, -1.279999, 1.000000, 1.000000, 1.000000);
	            }
	            else
	            {
	                if (IsPlayerAttachedObjectSlotUsed(playerid, 8)) RemovePlayerAttachedObject(playerid, 8);
	            }
	        }
	        case 31:
	        {
	            if (GetPlayerWeapon(playerid) != 31 && ammo != 0)
	            {
					SetPlayerAttachedObject(playerid, 8, 356, 1, 0.201000, -0.134000, -0.159999, -176.000030, 176.399997, -1.279999, 1.000000, 1.000000, 1.000000);
	            }
	            else
	            {
	                if (IsPlayerAttachedObjectSlotUsed(playerid, 8)) RemovePlayerAttachedObject(playerid, 8);
	            }
	        }
	        default: if (IsPlayerAttachedObjectSlotUsed(playerid, 8)) RemovePlayerAttachedObject(playerid, 8);
	    }

	    weaponid = PlayerData[playerid][pSilahlar][6];
	    ammo = PlayerData[playerid][pMermiler][6];

	    switch (weaponid)
	    {
	        case 33:
	        {
	            if (GetPlayerWeapon(playerid) != 33 && ammo != 0)
	            {
                    SetPlayerAttachedObject(playerid, 9, 357, 1, 0.000000, -0.166000, 0.000000, -3.600000, 37.300003, 0.000000, 1.000000, 1.000000, 1.000000);
	            }
				else
				{
				    if (IsPlayerAttachedObjectSlotUsed(playerid, 9)) RemovePlayerAttachedObject(playerid, 9);
				}
	        }
	        case 34:
	        {
	            if (GetPlayerWeapon(playerid) != 34 && ammo != 0)
	            {
                    SetPlayerAttachedObject(playerid, 9, 358, 1, -0.130040, -0.134000, -0.100999, -166.000030, 41.399997, -3.199999, 1.000000, 1.000000, 1.000000);
	            }
	            else
	            {
	                if (IsPlayerAttachedObjectSlotUsed(playerid, 9)) RemovePlayerAttachedObject(playerid, 9);
	            }
	        }
	        default: if (IsPlayerAttachedObjectSlotUsed(playerid, 9)) RemovePlayerAttachedObject(playerid, 9);
	    }
	}

	if (IsPlayerRunning(playerid) && PlayerData[playerid][pTopallama] == true && PlayerData[playerid][pBaygin] == 0)
	{
	    ApplyAnimation(playerid, "PED", "FALL_COLLAPSE", 4.0, 0, 1, 1, 0, 500, 1);
	    ApplyAnimation(playerid, "PED", "FALL_COLLAPSE", 4.0, 0, 1, 1, 0, 500, 1);
	}
    if (surf_LastChecked[playerid] < tickcount())
    {
        surf_LastChecked[playerid] = tickcount()+500;

        new id = GetNearestVehicle(playerid), ozelaracta = 0;

  		if (GetVehicleModel(id) == 478)
		{
			new Float: x, Float: y, Float: z;
	    	GetVehicleBoot(id, x, y, z);

	    	if (IsPlayerInRangeOfPoint(playerid, 3.0, x, y, z))
				ozelaracta = 1;
    	}

    	if (GetVehicleModel(id) == 543)
		{
			new Float: x, Float: y, Float: z;
	    	GetVehicleBoot(id, x, y, z);

	    	if (IsPlayerInRangeOfPoint(playerid, 3.0, x, y, z))
				ozelaracta = 1;
    	}

    	if (GetVehicleModel(id) == 554)
		{
			new Float: x, Float: y, Float: z;
	    	GetVehicleBoot(id, x, y, z);

	    	if (IsPlayerInRangeOfPoint(playerid, 3.0, x, y, z))
				ozelaracta = 1;
    	}

    		if (GetVehicleModel(id) == 528)
		{
			new Float: x, Float: y, Float: z;
	    	GetVehicleBoot(id, x, y, z);

	    	if (IsPlayerInRangeOfPoint(playerid, 7.0, x, y, z))
				ozelaracta = 1;
    	}

    		if (GetVehicleModel(id) == 427)
		{
			new Float: x, Float: y, Float: z;
	    	GetVehicleBoot(id, x, y, z);

	    	if (IsPlayerInRangeOfPoint(playerid, 7.0, x, y, z))
				ozelaracta = 1;
    	}

		if (GetVehicleModel(id) == 422)
		{
			new Float: x, Float: y, Float: z;
	    	GetVehicleBoot(id, x, y, z);

	    	if (IsPlayerInRangeOfPoint(playerid, 3.0, x, y, z))
				ozelaracta = 1;
    	}

		new vehicleid = GetPlayerSurfingVehicleID(playerid);

		if (vehicleid != INVALID_VEHICLE_ID && GetPlayerSpeed(vehicleid) >= 25 && ozelaracta != 1 && PlayerData[playerid][pHelperDuty] == 0 && PlayerData[playerid][pAdminDuty] == 0 && !Vehicle_IsANoFuelVehicle(GetVehicleModel(vehicleid)))
        {
            new Float:pos[3];
            GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
            SetPlayerPos(playerid, pos[0], pos[1], pos[2]+3.5);
            GameTextForPlayer(playerid, "~w~Car Surfing ~r~Yasak!", 3000, 4);
        }
    }
	if (PetKontrol[playerid] != -1 && GetPlayerWeapon(playerid) > 0) SetPlayerArmedWeapon(playerid, 0);
	if (GetPlayerMoney(playerid) != PlayerData[playerid][pCash])
	{
	    ResetPlayerMoney(playerid);
	    GivePlayerMoney(playerid, PlayerData[playerid][pCash]);
	}

	if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER && !DroneCar[playerid])
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
	    new id = Car_GetID(vehicleid);

		if (AracInfo[id][aracTip] == 3 && AracInfo[id][aracKiralayan] == PlayerData[playerid][pID])
		{
		    if (GetPVarType(playerid, "KiraSoruldu") != PLAYER_VARTYPE_NONE && GetPVarInt(playerid, "KiraSoruldu") != 1)
			{
			    if (AracInfo[id][aracKiraZaman] == 5)
			    {
					SunucuMesaji(playerid, "Kiraladiginiz aracin süresinin bitmesine 5 dakika kaldi, \"/akirala\" yazarak kira süresini uzatabilirsiniz.");
			    	SetPVarInt(playerid, "KiraSoruldu", 1);
				}
			}
		}

	    if (IsSpeedoVehicle(vehicleid))
	    {
	        new Float:fDamage;

	  		GetVehicleHealth(vehicleid, fDamage);

	  		if (fDamage < 0.0) fDamage = 0.0;

            if (GetPlayerSpeed(vehicleid) >= 100)
            {
	           	format(str, sizeof(str), "%d", GetPlayerSpeed(vehicleid));
				PlayerTextDrawSetString(playerid, hizgostergesi2[playerid], str);
				PlayerTextDrawShow(playerid, hizgostergesi2[playerid]);
			}
			else
			{
			    format(str, sizeof(str), "%d", GetPlayerSpeed(vehicleid));
				PlayerTextDrawSetString(playerid, hizgostergesi2[playerid], str);
				PlayerTextDrawShow(playerid, hizgostergesi2[playerid]);
			}
			/*format(str, sizeof(str), "~b~hasar: ~g~%d~w~%s", (floatround(1000-fDamage, floatround_round) * 100) / 750, "%");
			PlayerTextDrawSetString(playerid, AracHUD[playerid][2], str);*/

			new Float:benzin;
			if (id == -1)
			{
			    benzin = 100.0;
			}
			else
			{
			    benzin = AracInfo[id][aracBenzin];
			}
			if (id == -1 || AracInfo[id][aracTip] == 1 || AracInfo[id][aracTip] == 2 || AracInfo[id][aracTip] == 3 || AracInfo[id][aracTip] == 5)
			{
				format(str, sizeof(str), "N/A");
				PlayerTextDrawSetString(playerid, hizgostergesi0[playerid] , str);
			}
			else
			{
			    format(str, sizeof(str), "%.1fT", benzin);
			    PlayerTextDrawSetString(playerid, hizgostergesi0[playerid] , str);
			}
			/*if (id == -1 || AracInfo[id][aracTip] == 1 || AracInfo[id][aracTip] == 2 || AracInfo[id][aracTip] == 3 || AracInfo[id][aracTip] == 5 || AracInfo[id][aracTip] == 6)
			{
				format(str, sizeof(str), "~b~motor: ~w~N/A");
	   			PlayerTextDrawSetString(playerid, AracHUD[playerid][3], str);
   			}
   			else
   			{
   			    format(str, sizeof(str), "~b~motor: ~g~%.1f~w~KM", AracInfo[id][aracKM]);
	   			PlayerTextDrawSetString(playerid, AracHUD[playerid][3], str);
   			}*/
   			if (id != -1 && CarUpdate[vehicleid] < tickcount())
   			{
   			    CarUpdate[vehicleid] = tickcount()+1000;
                new Float: fDistance = GetVehicleDistanceFromPoint(vehicleid, CarLastPos[vehicleid][0], CarLastPos[vehicleid][1], CarLastPos[vehicleid][2]);

				if (fDistance <= 100)
					AracInfo[id][aracKM] += fDistance/1000;

				GetVehiclePos(vehicleid,CarLastPos[vehicleid][0],CarLastPos[vehicleid][1],CarLastPos[vehicleid][2]);
   			}
	    }
	}

	if (PlayerData[playerid][pGPS] != -1 || GetPVarInt(playerid, "EvBuluyor") != -1 || GetPVarInt(playerid, "IsyeriBuluyor") != -1  || GetPVarInt(playerid, "BinaBuluyor") != -1)
	{
	    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    {
	        SetPVarInt(playerid, "EvBuluyor", -1);
	    	SetPVarInt(playerid, "IsyeriBuluyor", -1);
	    	SetPVarInt(playerid, "BinaBuluyor", -1);
	    	PlayerData[playerid][pGPS] = -1;
	    	DisablePlayerCheckpoint(playerid);
	    	PlayerTextDrawHide(playerid, MesafeTD[playerid]);
	    }
	    if (PlayerData[playerid][pGPS] != -1)
	    {
		    if (Lokasyon[PlayerData[playerid][pGPS]][Exists] == false)
		    {
		        PlayerData[playerid][pGPS] = -1;
		        DisablePlayerCheckpoint(playerid);
		        PlayerTextDrawHide(playerid, MesafeTD[playerid]);
		    }
		    format(str, sizeof(str), "~g~Mesafe:~w~ %.2f metre",GetPlayerDistanceFromPoint(playerid, Lokasyon[PlayerData[playerid][pGPS]][lokasyonPos][0], Lokasyon[PlayerData[playerid][pGPS]][lokasyonPos][1], Lokasyon[PlayerData[playerid][pGPS]][lokasyonPos][2]));
			PlayerTextDrawSetString(playerid, MesafeTD[playerid], str);
		}
		else if (GetPVarInt(playerid, "EvBuluyor") != -1)
		{
		    format(str, sizeof(str), "~g~Mesafe:~w~ %.2f metre",GetPlayerDistanceFromPoint(playerid, HouseInfo[GetPVarInt(playerid, "EvBuluyor")][evPos][0], HouseInfo[GetPVarInt(playerid, "EvBuluyor")][evPos][1], HouseInfo[GetPVarInt(playerid, "EvBuluyor")][evPos][2]));
			PlayerTextDrawSetString(playerid, MesafeTD[playerid], str);
		}
		else if (GetPVarInt(playerid, "IsyeriBuluyor") != -1)
		{
		    format(str, sizeof(str), "~g~Mesafe:~w~ %.2f metre",GetPlayerDistanceFromPoint(playerid, Isyeri[GetPVarInt(playerid, "IsyeriBuluyor")][isyeriPos][0], Isyeri[GetPVarInt(playerid, "IsyeriBuluyor")][isyeriPos][1], Isyeri[GetPVarInt(playerid, "IsyeriBuluyor")][isyeriPos][2]));
			PlayerTextDrawSetString(playerid, MesafeTD[playerid], str);
		}
		else if (GetPVarInt(playerid, "BinaBuluyor") != -1)
		{
		    format(str, sizeof(str), "~g~Mesafe:~w~ %.2f metre",GetPlayerDistanceFromPoint(playerid, EntranceData[GetPVarInt(playerid, "BinaBuluyor")][entrancePos][0], EntranceData[GetPVarInt(playerid, "BinaBuluyor")][entrancePos][1], EntranceData[GetPVarInt(playerid, "BinaBuluyor")][entrancePos][2]));
			PlayerTextDrawSetString(playerid, MesafeTD[playerid], str);
		}
	}
	if (PlayerData[playerid][pDrinking] && GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DRINK_SPRUNK && !IsPlayerInAnyVehicle(playerid))
	{
 		DestroyPlayerProgressBar(playerid, PlayerData[playerid][pDrinkBar]);
 		PlayerData[playerid][pDrinking] = 0;
	}
	if (PlayerData[playerid][pDestek] > 0)
	{
	    DestekGuncelle(playerid);
	}

	HileKontrol(playerid);
	return 1;
}

forward Float:AracCan(aracid);
stock Float:AracCan(aracid)
{
	new Float: aCani;
	GetVehicleHealth(aracid, aCani);
	return aCani;
}

stock HileKontrol(playerid)
{
	if (IsPlayerAdmin(playerid)) return false;
	if (IsPlayerInAnyVehicle(playerid) && AracCan(GetPlayerVehicleID(playerid)) > 999.9)
	{
		new query[300], hileadi[30];

		hileadi = "Araç Tamir";

     	format(query, sizeof(query), "INSERT INTO `oocsicil` (`ID`, `Tarih`, `Sebep`, `Uygulayan`, `Tur`) VALUES('%d', '%s', 'Hile Kullanimi (%s)', 'Sistem', '1')",  PlayerData[playerid][pID], ReturnDate(), hileadi);
      	mysql_tquery(g_SQL, query);
	    AdminMessage(COLOR_LIGHTRED, "AdmCmd: %s adli oyuncu %s hilesi kullanýyor olabilir.", ReturnName(playerid, 0), hileadi);
	    Log_Write("logs/antihile.txt", "[%s] %s sistem tarafindan hile kullanýyor olabilir. (Hile: %s)", ReturnDate(), Player_GetName(playerid), hileadi);
	}
	return 0;
}

public OnPlayerShootDynamicObject(playerid, weaponid, objectid, Float:x, Float:y, Float:z)
{
    if (PlayerData[playerid][pTazer] == 1 && weaponid == 23)
	{
	    ApplyAnimation(playerid, "SILENCED", "Silence_reload",4.1,0,0,0,0,1000,1);
	    ApplyAnimation(playerid, "SILENCED", "Silence_reload",4.1,0,0,0,0,1000,1);
	}
	return 1;
}

stock PlayerHasTazer(playerid)
{
    return (GetPlayerWeapon(playerid) == 23 && PlayerData[playerid][pTazer]);
}

stock PlayerHasBeanbag(playerid)
{
    return (GetPlayerWeapon(playerid) == 25 && PlayerData[playerid][pBeanbag]);
}

forward MermiHilesi(playerid);
public MermiHilesi(playerid)
{
    OnCheatDetected(playerid, "", false, 16);
	return 1;
}

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
    if (GetPlayerWeapon(playerid) >= 1 && GetPlayerWeapon(playerid) <= 45 && PlayerData[playerid][pSilahlar][g_aWeaponSlots[GetPlayerWeapon(playerid)]] != GetPlayerWeapon(playerid) && !PlayerHasTazer(playerid) && !PlayerHasBeanbag(playerid) && pbOda[playerid] == -1)
    {
        AdminMessage(COLOR_LIGHTRED, "AdmCmd: %s silah hilesi kullandigi için banladi. Silah: %s", ReturnName(playerid), ReturnWeaponName(GetPlayerWeapon(playerid)));
        ResetWeapons(playerid);
        AddBan(GetIP(playerid), ReturnName(playerid), "", "Sistem", 0, "Silah Hilesi");
        Kick(playerid);
        return 0;
    }
    if (!GetWeapon(playerid) && PlayerData[playerid][pTazer] == 0 && PlayerData[playerid][pBeanbag] == 0)
    {
        AdminMessage(COLOR_LIGHTRED, "CheatLog: %s, weapon hack kullanmaya çalýþtýðý için sunucudan atýldý.", Player_GetName(playerid), ReturnWeaponName(GetPlayerWeapon(playerid)));
        Log_Write("logs/AntiCheat.log", "[%s] %s, weapon hack kullanmaya çalýþtýðý için sunucudan atýldý.", ReturnDate(), Player_GetName(playerid), ReturnWeaponName(GetPlayerWeapon(playerid)));
        Kick(playerid);
        return 0;
    }
	if (PlayerData[playerid][pProbation] == 1)
	{
		HataMesajGonder(playerid, "Probationdayken ateþ edemezsiniz.");
		ClearAnimations(playerid);
		return 0;
	}

    if (GetPlayerWeapon(playerid) != 0)
	{
		new SilahSlot = g_aWeaponSlots[GetPlayerWeapon(playerid)], SilahVerileri[1][2];

		GetPlayerWeaponData(playerid, SilahSlot, SilahVerileri[0][0], SilahVerileri[0][1]);

		if (GetPlayerWeapon(playerid) == 23 && PlayerData[playerid][pTazer] == 1)
		{
		}
		else if (PlayerData[playerid][pMermiler][SilahSlot] < SilahVerileri[0][1])
		{
		    GivePlayerWeapon(playerid, SilahVerileri[0][0], -SilahVerileri[0][1]);
		    GivePlayerWeapon(playerid, SilahVerileri[0][0], PlayerData[playerid][pMermiler][SilahSlot]);

		    SetTimerEx("MermiHilesi", 1050, false, "d", playerid);
		}
	}
	/*if (IsBulletWeapon(weaponid) && GetFactionType(playerid) != BIRLIK_LSPD)
	{
	    SetPlayerArmedWeapon(playerid, 0);
	    return 0;
	}*/
	if (weaponid > 0 && GetPVarInt(playerid, "CCTVKontrol") < gettime())
	{
	    new id = GetNearestCCTV(playerid);
	    SetPVarInt(playerid, "CCTVKontrol", gettime()+10);
	    if (id != -1 && CCTVInfo[id][cctvBildirim] < gettime())
	    {
	        CCTVInfo[id][cctvBildirim] = gettime()+100;
	        SendBirlikMessageEx(BIRLIK_LSPD, COLOR_RED, "** DEPARTMAN: %s adlý CCTV'de çatýþma görüldü.",CCTVInfo[id][cctv_Name]);
	    }
	}
    if (PlayerData[playerid][pTazer] == 1 && weaponid == 23)
	{
	    ApplyAnimation(playerid, "SILENCED", "Silence_reload",4.1,0,0,0,0,1000,1);
	    ApplyAnimation(playerid, "SILENCED", "Silence_reload",4.1,0,0,0,0,1000,1);
	}

	/*if(IsBulletWeapon(weaponid) && GetFactionType(playerid) != BIRLIK_LSPD)
	{
		new SilahSlot = g_aWeaponSlots[GetPlayerWeapon(playerid)], SilahVerileri[1][2];

		GetPlayerWeaponData(playerid, SilahSlot, SilahVerileri[0][0], SilahVerileri[0][1]);

		if(SilahVerileri[0][1] == 1)
		{
			PlayerData[playerid][pSilahlar][SilahSlot] = weaponid;
			PlayerData[playerid][pMermiler][SilahSlot] = 0;
			SunucuMesaji(playerid, "Silahinizin mermisi bitti, %s model silahiniz envanterinize eklendi.", ReturnWeaponName(PlayerData[playerid][pSilahlar][SilahSlot]));
		}
	}*/
	return 1;
}

public OnPlayerDamage(&playerid, &Float:amount, &issuerid, &weapon, &bodypart)
{
	if (weapon == WEAPON_CARPARK || weapon == WEAPON_HELIBLADES || weapon == WEAPON_CHAINSAW || weapon == WEAPON_MINIGUN || weapon == WEAPON_ROCKETLAUNCHER) return 0;

	if (GetPVarInt(playerid, "KOSKorumasi") == 1) return 0;
	if (PlayerData[playerid][pGOD] == true && PlayerData[playerid][pAdmin] > 0) return 0;
	if (PlayerData[playerid][pBaygin] == 1 && !IsBulletWeapon(weapon)) return 0;
	if (IsPlayerPause(playerid)) return 0;

    if (IsPlayerInAnyVehicle(issuerid) && weapon == 9)
	    return 0;

	if (IsPlayerInAnyVehicle(playerid))
	{
	    new id = Car_GetID(GetPlayerVehicleID(playerid));
	    if (id != -1 && AracInfo[id][aracZirh] > 75)
	    {
	        AracInfo[id][aracZirh] -= 50;
	        return 0;
	    }
	}

/*	if (issuerid != INVALID_PLAYER_ID && playerid != INVALID_PLAYER_ID)
	{
		if (PlayerData[playerid][pLevel] == 1 && PlayerData[issuerid][pLevel] != 1)
		{
			SetPlayerArmedWeapon(issuerid, 0);

			HataMesajGonder(issuerid, "{FFFFFF}Oyuna yeni baslayan oyunculara hasar veremezsin.");

			return 0;
		}
	}

	if (issuerid != INVALID_PLAYER_ID && playerid != INVALID_PLAYER_ID)
	{
		if (PlayerData[issuerid][pLevel] == 1)
		{
			if (GetPVarType(issuerid, "YeniHasari") == PLAYER_VARTYPE_NONE)
				SetPVarInt(playerid, "YeniHasari", 0);

			SetPVarInt(issuerid, "YeniHasari", GetPVarInt(issuerid, "YeniHasari") + 1);

			SetPlayerArmedWeapon(issuerid, 0);

			HataMesajGonder(issuerid, "{FFFFFF}Oyuna yeni basladigin için oyunculara hasar veremezsin. [%d/10]", GetPVarInt(issuerid, "YeniHasari"));

			if (GetPVarInt(issuerid, "YeniHasari") == 10)
			{
				HataMesajGonder(issuerid, "{FFFFFF}Yeni basladigin halde oyunculara birden fazla hasar vermeye çalistigin için otomatik olarak sunucudan atildin.");
				Kick(issuerid);
			}

			return 0;
		}
	}*/

	/*if (issuerid != INVALID_PLAYER_ID)
	{
	    if (GetFactionType(issuerid) != BIRLIK_LSPD)
		{
		    //SetPlayerArmedWeapon(issuerid, 0);
		    //Dialog_Show(issuerid, GBIUyari, DIALOG_STYLE_MSGBOX, "{FF0000}Güvenli Bölgedesiniz!", "{FFFFFF}Bulundugunuz bölge güvenli bölgedir, hasar veremezsiniz.", "Tamam", "");
		    return 0;
		}
	}*/

	if (issuerid != INVALID_PLAYER_ID)
	{
    	if ((GetFactionType(issuerid) == BIRLIK_LSPD || GetFactionType(issuerid) == BIRLIK_FBI) && PlayerData[issuerid][pTazer] == 1 && PlayerData[playerid][pSoklandi] < 1 && weapon == 23 && PlayerData[playerid][pKelepce] == 0)
		{
	    	if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	    	{
	    	    HataMesajGonder(issuerid, "Araçta olan bir kisiyi donduramazsin.");
	    	    return 0;
	    	}
	    	if (!IsPlayerNearPlayer(issuerid, playerid, 20.0))
	    	{
	    	    HataMesajGonder(issuerid, "Kisi çok uzak, tazer etki etmez.");
	    	    return 0;
	    	}

	    	PlayerData[playerid][pSoklandi] = 30;
	    	TogglePlayerControllable(playerid, 0);
	    	ApplyAnimation(playerid, "CRACK", "crckdeth4", 4.0, 0, 0, 0, 1, 0, 1);
	    	SendNearbyMessage(issuerid, 30.0, COLOR_PURPLE, "** %s elektrosok silahini %s'a dogru yöneltir ve atesler.", ReturnName(issuerid, 0), ReturnName(playerid, 0));
	    	return 0;
		}
		if ((GetFactionType(issuerid) == BIRLIK_LSPD || GetFactionType(issuerid) == BIRLIK_FBI) && PlayerData[issuerid][pBeanbag] == 1 && PlayerData[playerid][pSoklandi] < 1 && weapon == 25 && PlayerData[playerid][pKelepce] == 0)
		{
	    	if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	    	{
	    	    HataMesajGonder(issuerid, "Araçta olan bir kisiye beanbag sikamazsiniz.");
	    	    return 0;
	    	}
	    	if (!IsPlayerNearPlayer(issuerid, playerid, 25.0))
	    	{
	    	    HataMesajGonder(issuerid, "Kisi çok uzak, beanbag etki etmez.");
	    	    return 0;
	    	}

	    	PlayerData[playerid][pSoklandi] = 30;
	    	TogglePlayerControllable(playerid, 0);
	    	ApplyAnimation(playerid, "CRACK", "crckdeth4", 4.0, 0, 0, 0, 1, 0, 1);
	    	SendNearbyMessage(issuerid, 30.0, COLOR_PURPLE, "** %s beanbag tüfegini %s'a dogru yöneltir ve atesler.", ReturnName(issuerid, 0), ReturnName(playerid, 0));
	    	return 0;
		}
		if (weapon >= 22 && weapon <= 34 && !PlayerData[playerid][pBaygin] && pbOda[playerid] == -1 && PetKontrol[playerid] == -1 && PlayerData[playerid][pTopallama] == false && (bodypart == 7 || bodypart == 8))
		{
	    	PlayerData[playerid][pTopallama] = true;
	    	PlayerData[playerid][pTopallamaSayac] = 0;
	    	SunucuMesaji(playerid, "Ayaginizdan vuruldunuz, kosma ve ziplama özelliklerini 120 saniye boyunca kullanamayacaksiniz.");
		}
	}
	if (PlayerData[playerid][pIyilestiriyor] != -1)
	{
	    SetPVarInt(PlayerData[playerid][pIyilestiriyor], "Iyilestiriliyor", 0);
	    PlayerData[playerid][pIyilestiriyor] = -1;
	    PlayerData[playerid][pIyilestirmeSure] = 0;
	    ClearAnimations(playerid);
	    StopLoopingAnim(playerid);
	    TogglePlayerControllable(playerid, true);
	    SunucuMesaji(playerid, "Hasar aldiginiz için tedavi edemediniz.");
	}
	Hasar_Ekle(playerid, bodypart, amount, issuerid, weapon);
	if (GetFactionType(issuerid) == BIRLIK_LSPD)
    {
        new string[64];
        if (weapon >= 0 && weapon <= 3)
        {
            if (PlayerData[issuerid][pTackle] == 1)
            {
                SunucuMesaji(playerid, "%s adli memur tarafindan yere düsürüldünüz.", ReturnName(issuerid, 0));
                SunucuMesaji(issuerid, "%s adli kisiyi basariyla yere düsürdünüz.", ReturnName(playerid, 0));
                format(string, sizeof(string), ", %s adli kisiyi yere düsürdü.", ReturnName(playerid, 0));
                cmd_me(issuerid, string);
                GameTextForPlayer(playerid, "~r~ETKISIZ HALDESIN.", 2000, 3);
                PlayerData[issuerid][pYereYatirildi] = 2;
                ApplyAnimation(playerid, "CRACK", "crckdeth4", 4.0, 0, 0, 0, 1, 0, 1);
                ApplyAnimation(issuerid, "PED", "KO_shot_stom", 4.0, 0, 1, 1, 1, 0, 1);
                TogglePlayerControllable(playerid, false);
                PlayerData[playerid][pYereYatirildi] = 10;
                 new str2[85];
                format(str2, sizeof(str2), "(( Yere düstü. ))");
                  SetPlayerChatBubble(playerid, str2, COLOR_GREEN, 14.0, 1000);
                PlayerData[issuerid][pTackle] = 0;
            }
        }
    }
	return 1;
}
public OnPlayerDamageDone(playerid, Float:amount, issuerid, weapon, bodypart)
{
	PlayerData[playerid][pShootedBody] = bodypart;
	PlayerData[playerid][pLastShot] = issuerid;
	if(PlayerData[playerid][pBaygin] == 2)
	{
	    CanAyarla(playerid, 999.0);
	}
	return 1;
}

public OnPlayerStreamOut(playerid, forplayerid)
{
	return 1;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
    if(PlayerData[forplayerid][pMaske])
    {
        ShowPlayerNameTagForPlayer(forplayerid, playerid, 1);
    }
    else
    {
        ShowPlayerNameTagForPlayer(forplayerid, playerid, 0);
    }
    return 1;
}

public OnVehicleStreamOut(vehicleid, forplayerid)
{
	return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	if (dialogid == 75)
    {
        if (PlayerData[playerid][pCinsiyet] == 1)
        {
             PlayerData[playerid][pSkin] = g_aMaleSkins[listitem];
             SetPlayerSkin(playerid, g_aMaleSkins[listitem]);
        }
        else
        {
            PlayerData[playerid][pSkin] = g_aFemaleSkins[listitem];
            SetPlayerSkin(playerid, g_aMaleSkins[listitem]);
        }
    }
	if (dialogid == ODA_AYARLARI)
	{
	    if (response)
	    {
		    if (strfind(inputtext, "Oda Adi", true) != -1)
		    {
		        ShowPlayerDialog(playerid, ODA_AYARLARI_AD, DIALOG_STYLE_INPUT, "{1DF21D}Oda Ayarlari - Ad", "Odaniz için yeni bir ad giriniz:", "Degistir", "Geri");
			}
			if (strfind(inputtext, "Oda sifre", true) != -1)
			{
			    ShowPlayerDialog(playerid, ODA_AYARLARI_SIFRE, DIALOG_STYLE_INPUT, "{1DF21D}Oda Ayarlari - Þifre", "Lütfen odanýz için yeni bir sifre giriniz. Eger sifre olmasini istemiyorsaniz bos birakin.", "Degistir", "Geri");
			}
			if (strfind(inputtext, "Takim 1 Ad", true) != -1)
			{
			    ShowPlayerDialog(playerid, ODA_AYARLARI_TAKIMAD, DIALOG_STYLE_INPUT, "{1DF21D}Oda Ayarlari - Takim 1 Ad", "Lütfen takim 1'in yeni adini girin:", "Degistir", "Geri");
			}
			if (strfind(inputtext, "Takim 2 Ad", true) != -1)
			{
			    ShowPlayerDialog(playerid, ODA_AYARLARI_TAKIMAD+1, DIALOG_STYLE_INPUT, "{1DF21D}Oda Ayarlari - Takim 2 Ad", "Lütfen takim 2'in yeni adini girin:", "Degistir", "Geri");
			}
			if (strfind(inputtext, "Takim Dengeleme", true) != -1)
			{
			    if (Paintball[GetPVarInt(playerid, "OdaAyarID")][TakimDengeleme] == true)
			    {
			        Paintball[GetPVarInt(playerid, "OdaAyarID")][TakimDengeleme] = false;
			        OdaAyarlari(playerid, GetPVarInt(playerid, "OdaAyarID"));
				}
				else
				{
				    Paintball[GetPVarInt(playerid, "OdaAyarID")][TakimDengeleme] = true;
			        OdaAyarlari(playerid, GetPVarInt(playerid, "OdaAyarID"));
				}
			}
			if (strfind(inputtext, "Oyun Türü", true) != -1)
			{
			    if (Paintball[GetPVarInt(playerid, "OdaAyarID")][odaOyunTuru] == 1)
			    {
			        Paintball[GetPVarInt(playerid, "OdaAyarID")][odaOyunTuru] = 2;
			        OdaAyarlari(playerid, GetPVarInt(playerid, "OdaAyarID"));
				}
				else
				{
				    Paintball[GetPVarInt(playerid, "OdaAyarID")][odaOyunTuru] = 1;
			        OdaAyarlari(playerid, GetPVarInt(playerid, "OdaAyarID"));
				}
			}
			if (strfind(inputtext, "Maç Süresi", true) != -1)
			{
			    ShowPlayerDialog(playerid, ODA_AYARLARI_SURE, DIALOG_STYLE_INPUT, "{1DF21D}Oda Ayarlari - Süre", "Lütfen maçin kaç dakikada bitecegini girin:", "Devam", "Geri");
			}
			if (strfind(inputtext, "Arena", true) != -1)
			{
			    ShowPlayerDialog(playerid, ODA_AYARLARI_ARENA, DIALOG_STYLE_LIST, "{1DF21D}Oda Ayarlari - Arena", "{1DF21D}Warehouse 1\n{1DF21D}Warehouse 2\n{1DF21D}RC Battlefield\n{1DF21D}LV Police HQ\n{1DF21D}LV Warehouse\n{1DF21D}Crack Factory\n{1DF21D}Jefferson Motel", "Seç", "Geri");
			}
			if (strfind(inputtext, "Baslangiç Zirhi", true) != -1)
			{
			    ShowPlayerDialog(playerid, ODA_AYARLARI_ZIRH, DIALOG_STYLE_INPUT, "{1DF21D}Oda Ayarlari - Zirh", "Lütfen zirh girin:", "Degistir", "Geri");
			}
			if (strfind(inputtext, "Silah Ayarlari", true) != -1)
			{
			    new silahisim1[20], silahisim2[20], silahisim3[20], silahisim4[20];
			    GetWeaponName(Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSilahlar][0], silahisim1, sizeof(silahisim1));
			    GetWeaponName(Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSilahlar][1], silahisim2, sizeof(silahisim2));
			    GetWeaponName(Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSilahlar][2], silahisim3, sizeof(silahisim3));
			    GetWeaponName(Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSilahlar][3], silahisim4, sizeof(silahisim4));
			    new str[150];
			    format(str, sizeof(str), "{FFFFFF}%s (ID: %d)\n{FFFFFF}%s (ID: %d)\n{FFFFFF}%s (ID: %d)\n{FFFFFF}%s (ID: %d)", silahisim1, Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSilahlar][0], silahisim2, Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSilahlar][1], silahisim3, Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSilahlar][2], silahisim4, Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSilahlar][3]);
			    ShowPlayerDialog(playerid, ODA_AYARLARI_SILAH, DIALOG_STYLE_LIST, "{1DF21D}Oda Ayarlari - Silahlar", str, "Degistir", "Geri");
			}
			if (strfind(inputtext, "Katilimci Ayarlari", true) != -1)
			{
			    KatilimciDialog(playerid, GetPVarInt(playerid, "OdaAyarID"));
			}
			if (strfind(inputtext, "Maçi Baslat", true) != -1)
			{
			    Paintball[GetPVarInt(playerid, "OdaAyarID")][odaDurum] = ODA_BASLADI;
			    Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSayac] = Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSure]*60;
			    if (Paintball[GetPVarInt(playerid, "OdaAyarID")][odaOyunTuru] == 1)
			    {
			        ShowPlayerDialog(playerid, TAKIM_SEC, DIALOG_STYLE_MSGBOX, "Takim Seç", "Lütfen hangi takimda olacaginizi seçin:", Paintball[GetPVarInt(playerid, "OdaAyarID")][odaTakim1Ad],Paintball[GetPVarInt(playerid, "OdaAyarID")][odaTakim2Ad]);
			        return 1;
			    }
			    pbTakim[playerid] = 1;
			    pbOldurme[playerid] = 0;
			    pbOlme[playerid] = 0;
			    SaveWeapons(playerid);
			    GetPlayerHealth(playerid, PlayerData[playerid][pHealth]);
			    GetPlayerArmour(playerid, PlayerData[playerid][pArmour]);
			    PaintballSpawn(playerid);
			    MesajGonder(playerid, "Maç baslatildi.");

			    PlayerTextDrawShow(playerid, PaintballTD[playerid][0]);
     			if (Paintball[GetPVarInt(playerid, "OdaAyarID")][odaOyunTuru] == 1) PlayerTextDrawShow(playerid, PaintballTD[playerid][1]);
				if (Paintball[GetPVarInt(playerid, "OdaAyarID")][odaOyunTuru] == 1) PlayerTextDrawShow(playerid, PaintballTD[playerid][2]);
				PlayerTextDrawShow(playerid, PaintballTD[playerid][3]);
				PlayerTextDrawShow(playerid, PaintballTD[playerid][4]);
				PlayerTextDrawShow(playerid, PaintballTD[playerid][5]);
				PlayerTextDrawShow(playerid, PaintballTD[playerid][6]);
				PlayerTextDrawShow(playerid, PaintballTD[playerid][7]);
				PlayerTextDrawShow(playerid, PaintballTD[playerid][8]);
	   			PaintballSpawn(playerid);
       			TogglePlayerControllable(playerid, true);

			}
			if (strfind(inputtext, "Maçi Bitir", true) != -1)
			{
			    if (Paintball[GetPVarInt(playerid, "OdaAyarID")][odaDurum] != ODA_BASLADI) return 1;
			    MacBitir(GetPVarInt(playerid, "OdaAyarID"));
			}
			if (strfind(inputtext, "Odayi Sil", true) != -1)
			{
			    Paintball[GetPVarInt(playerid, "OdaAyarID")][odaExists] = false;
			    format(Paintball[GetPVarInt(playerid, "OdaAyarID")][odaIsim], 30, "");
			    format(Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSifre], 30, "");
			    Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSahip] = -1;
			    format(Paintball[GetPVarInt(playerid, "OdaAyarID")][odaTakim1Ad], 20, "");
			    format(Paintball[GetPVarInt(playerid, "OdaAyarID")][odaTakim2Ad], 20, "");
			    Paintball[GetPVarInt(playerid, "OdaAyarID")][odaZirh] = 0;
			    Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSure] = 0;
			    Paintball[GetPVarInt(playerid, "OdaAyarID")][odaOyunTuru] = 1;
			    Paintball[GetPVarInt(playerid, "OdaAyarID")][odaArena] = 1;
			    Paintball[GetPVarInt(playerid, "OdaAyarID")][odaPuan][0] = 0;
			    Paintball[GetPVarInt(playerid, "OdaAyarID")][odaPuan][1] = 0;
			    Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSayac] = 0;
			    DeletePVar(playerid, "OdaAyarID");
			    MesajGonder(playerid, "Oda silindi.");
			}
		}
		return 1;
	}
	if (dialogid == TAKIM_SEC)
	{
	    new id = pbOda[playerid];
	    if (response)
	    {
	        if (Paintball[id][odaDurum] == ODA_BEKLEME) return 1;
	        if (Paintball[id][TakimDengeleme] == true && Takim1Sayi(id) > Takim2Sayi(id))
	        {
	            HataMesajGonder(playerid, "Bu takim dolu, baska takimi seç!");
	            return ShowPlayerDialog(playerid, TAKIM_SEC, DIALOG_STYLE_MSGBOX, "Takim Seç", "Lütfen hangi takimda olacaginizi seçin:", Paintball[GetPVarInt(playerid, "OdaAyarID")][odaTakim1Ad],Paintball[GetPVarInt(playerid, "OdaAyarID")][odaTakim2Ad]);
	        }
	        if (Paintball[id][odaDurum] == ODA_BASLADI)
	        {
	            for (new i; i<9; i++)
	            {
		            PlayerTextDrawShow(playerid, PaintballTD[playerid][i]);
				}
			}
	        pbTakim[playerid] = 1;
			pbOldurme[playerid] = 0;
			pbOlme[playerid] = 0;
			SaveWeapons(playerid);
			GetPlayerHealth(playerid, PlayerData[playerid][pHealth]);
			GetPlayerArmour(playerid, PlayerData[playerid][pArmour]);
			PaintballSpawn(playerid);
		}
		else
		{
		    if (Paintball[id][odaDurum] == ODA_BEKLEME) return 1;
	        if (Paintball[id][TakimDengeleme] == true && Takim2Sayi(id) > Takim1Sayi(id))
	        {
	            HataMesajGonder(playerid, "Bu takim dolu, baska takimi seç!");
	            return ShowPlayerDialog(playerid, TAKIM_SEC, DIALOG_STYLE_MSGBOX, "Takim Seç", "Lütfen hangi takimda olacaginizi seçin:", Paintball[GetPVarInt(playerid, "OdaAyarID")][odaTakim1Ad],Paintball[GetPVarInt(playerid, "OdaAyarID")][odaTakim2Ad]);
	        }
	        if (Paintball[id][odaDurum] == ODA_BASLADI)
	        {
                for (new i; i<9; i++)
	            {
		            PlayerTextDrawShow(playerid, PaintballTD[playerid][i]);
				}
			}
	        pbTakim[playerid] = 2;
			pbOldurme[playerid] = 0;
			pbOlme[playerid] = 0;
			SaveWeapons(playerid);
            GetPlayerHealth(playerid, PlayerData[playerid][pHealth]);
			GetPlayerArmour(playerid, PlayerData[playerid][pArmour]);
			PaintballSpawn(playerid);
		}
		return 1;
	}
	if (dialogid == ODA_AYARLARI_AD)
	{
	    if (!response) return OdaAyarlari(playerid, GetPVarInt(playerid, "OdaAyarID"));
	    if (response)
	    {
	        if (isnull(inputtext)) return ShowPlayerDialog(playerid, ODA_AYARLARI_AD, DIALOG_STYLE_INPUT, "{1DF21D}Oda Ayarlari - Ad", "Lütfen odaniz için yeni bir ad giriniz:", "Degistir", "Geri");
	        if (strlen(inputtext) > 30) return ShowPlayerDialog(playerid, ODA_AYARLARI_AD, DIALOG_STYLE_INPUT, "{1DF21D}Oda Ayarlari - Ad", "Lütfen odaniz için yeni bir ad giriniz:", "Degistir", "Geri");
	        format(Paintball[GetPVarInt(playerid, "OdaAyarID")][odaIsim], 30, inputtext);
	        OdaAyarlari(playerid, GetPVarInt(playerid, "OdaAyarID"));
	    }
	    return 1;
	}
	if (dialogid == ODA_AYARLARI_SIFRE)
	{
	    if (!response) return OdaAyarlari(playerid, GetPVarInt(playerid, "OdaAyarID"));
	    if (response)
	    {
	        if (strlen(inputtext) > 30) return ShowPlayerDialog(playerid, ODA_AYARLARI_SIFRE, DIALOG_STYLE_INPUT, "{1DF21D}Oda Ayarlari - sifre", "Lütfen odaniz için yeni bir sifre giriniz. Eger sifre olmasini istemiyorsaniz bos birakin.", "Degistir", "Geri");
	        format(Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSifre], 30, inputtext);
	        OdaAyarlari(playerid, GetPVarInt(playerid, "OdaAyarID"));
	    }
	    return 1;
	}
	if (dialogid == ODA_AYARLARI_TAKIMAD)
	{
	    if (!response) return OdaAyarlari(playerid, GetPVarInt(playerid, "OdaAyarID"));
	    if (response)
	    {
	        if (isnull(inputtext)) return ShowPlayerDialog(playerid, ODA_AYARLARI_TAKIMAD, DIALOG_STYLE_INPUT, "{1DF21D}Oda Ayarlari - Takim 1 Ad", "Lütfen takim 1'in yeni adini girin:", "Degistir", "Geri");
	        if (strlen(inputtext) > 20) return ShowPlayerDialog(playerid, ODA_AYARLARI_TAKIMAD, DIALOG_STYLE_INPUT, "{1DF21D}Oda Ayarlari - Takim 1 Ad", "Lütfen takim 1'in yeni adini girin:", "Degistir", "Geri");
	        format(Paintball[GetPVarInt(playerid, "OdaAyarID")][odaTakim1Ad], 20, inputtext);
	        OdaAyarlari(playerid, GetPVarInt(playerid, "OdaAyarID"));
	    }
	    return 1;
	}
	if (dialogid == ODA_AYARLARI_TAKIMAD+1)
	{
	    if (!response) return OdaAyarlari(playerid, GetPVarInt(playerid, "OdaAyarID"));
	    if (response)
	    {
	        if (isnull(inputtext)) return ShowPlayerDialog(playerid, ODA_AYARLARI_TAKIMAD+1, DIALOG_STYLE_INPUT, "{1DF21D}Oda Ayarlari - Takim 2 Ad", "Lütfen takim 2'in yeni adini girin:", "Degistir", "Geri");
	        if (strlen(inputtext) > 20) return ShowPlayerDialog(playerid, ODA_AYARLARI_TAKIMAD+1, DIALOG_STYLE_INPUT, "{1DF21D}Oda Ayarlari - Takim 2 Ad", "Lütfen takim 2'in yeni adini girin:", "Degistir", "Geri");
	        format(Paintball[GetPVarInt(playerid, "OdaAyarID")][odaTakim2Ad], 20, inputtext);
	        OdaAyarlari(playerid, GetPVarInt(playerid, "OdaAyarID"));
	    }
	    return 1;
	}
	if (dialogid == ODA_AYARLARI_SURE)
	{
	    if (!response) return OdaAyarlari(playerid, GetPVarInt(playerid, "OdaAyarID"));
	    if (response)
	    {
	        if (isnull(inputtext)) return ShowPlayerDialog(playerid, ODA_AYARLARI_SURE, DIALOG_STYLE_INPUT, "{1DF21D}Oda Ayarlari - Süre", "Lütfen maçin kaç dakikada bitecegini girin:", "Devam", "Geri");
	        if (!IsNumeric(inputtext)) return ShowPlayerDialog(playerid, ODA_AYARLARI_SURE, DIALOG_STYLE_INPUT, "{1DF21D}Oda Ayarlari - Süre", "Lütfen maçin kaç dakikada bitecegini girin:", "Devam", "Geri");
	        if (strval(inputtext) < 3 || strval(inputtext) > 20)
	        {
	            SendClientMessage(playerid, -1, "{FF0000}> {FFFFFF}Maç süresi en az 3, en fazla 20 dakika olabilir.");
	            return ShowPlayerDialog(playerid, ODA_AYARLARI_SURE, DIALOG_STYLE_INPUT, "{1DF21D}Oda Ayarlari - Süre", "Lütfen maçin kaç dakikada bitecegini girin:", "Devam", "Geri");
			}
			Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSure] = strval(inputtext);
			Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSayac] = strval(inputtext)*60;
			OdaAyarlari(playerid, GetPVarInt(playerid, "OdaAyarID"));
	    }
	    return 1;
	}
	if (dialogid == ODA_AYARLARI_ARENA)
	{
	    if (!response) return OdaAyarlari(playerid, GetPVarInt(playerid, "OdaAyarID"));
	    if (response)
	    {
	        Paintball[GetPVarInt(playerid, "OdaAyarID")][odaArena] = listitem+1;
	        OdaAyarlari(playerid, GetPVarInt(playerid, "OdaAyarID"));
	    }
	    return 1;
	}
	if (dialogid == ODA_AYARLARI_ZIRH)
	{
	    if (!response) return OdaAyarlari(playerid, GetPVarInt(playerid, "OdaAyarID"));
	    if (response)
	    {
	        if (isnull(inputtext)) return ShowPlayerDialog(playerid, ODA_AYARLARI_ZIRH, DIALOG_STYLE_INPUT, "{1DF21D}Oda Ayarlari - Zirh", "Lütfen zirh girin:", "Degistir", "Geri");
	        if (!IsNumeric(inputtext)) return ShowPlayerDialog(playerid, ODA_AYARLARI_ZIRH, DIALOG_STYLE_INPUT, "{1DF21D}Oda Ayarlari - Zirh", "Lütfen zirh girin:", "Degistir", "Geri");
	        if (strval(inputtext) < 0  || strval(inputtext) > 100)
	        {
	            SendClientMessage(playerid, -1, "{FF0000}> {FFFFFF}Zirh 0 ile 100 arasinda olmalidir.");
	            return ShowPlayerDialog(playerid, ODA_AYARLARI_ZIRH, DIALOG_STYLE_INPUT, "{1DF21D}Oda Ayarlari - Zirh", "Lütfen zirh girin:", "Degistir", "Geri");
			}
			Paintball[GetPVarInt(playerid, "OdaAyarID")][odaZirh] = strval(inputtext);
			OdaAyarlari(playerid, GetPVarInt(playerid, "OdaAyarID"));
	    }
	    return 1;
	}
	if (dialogid == ODA_AYARLARI_SILAH)
	{
	    if (!response) return OdaAyarlari(playerid, GetPVarInt(playerid, "OdaAyarID"));
	    if (response)
	    {
	        SetPVarInt(playerid, "SilahDuzenle", listitem);
	        ShowPlayerDialog(playerid, ODA_AYARLARI_SILAH+1, DIALOG_STYLE_INPUT, "{1DF21D}Oda Ayarlari - Silahlar", "Lütfen bu silah için yeni bir ID girin:", "Degistir", "Geri");
		}
		return 1;
	}
	if (dialogid == ODA_AYARLARI_SILAH+1)
	{
	    if (!response)
	    {
	        new silahisim1[20], silahisim2[20], silahisim3[20], silahisim4[20];
	    	GetWeaponName(Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSilahlar][0], silahisim1, sizeof(silahisim1));
		    GetWeaponName(Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSilahlar][1], silahisim2, sizeof(silahisim2));
		    GetWeaponName(Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSilahlar][2], silahisim3, sizeof(silahisim3));
		    GetWeaponName(Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSilahlar][3], silahisim4, sizeof(silahisim4));
		    new str[150];
		    format(str, sizeof(str), "{FFFFFF}%s (ID: %d)\n{FFFFFF}%s (ID: %d)\n{FFFFFF}%s (ID: %d)\n{FFFFFF}%s (ID: %d)", silahisim1, Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSilahlar][0], silahisim2, Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSilahlar][1], silahisim3, Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSilahlar][2], silahisim4, Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSilahlar][3]);
		    ShowPlayerDialog(playerid, ODA_AYARLARI_SILAH, DIALOG_STYLE_LIST, "{1DF21D}Oda Ayarlari - Silahlar", str, "Degistir", "Geri");
	    }
	    else
	    {
	        if (isnull(inputtext)) return ShowPlayerDialog(playerid, ODA_AYARLARI_SILAH+1, DIALOG_STYLE_INPUT, "{1DF21D}Oda Ayarlari - Silahlar", "Lütfen bu silah için yeni bir ID girin:", "Degistir", "Geri");
	        if (!IsNumeric(inputtext)) return ShowPlayerDialog(playerid, ODA_AYARLARI_SILAH+1, DIALOG_STYLE_INPUT, "{1DF21D}Oda Ayarlari - Silahlar", "Lütfen bu silah için yeni bir ID girin:", "Degistir", "Geri");
	        if (strval(inputtext) < 0 || strval(inputtext) > 38)
	        {
	            SendClientMessage(playerid, -1, "{FF0000}> {FFFFFF}Silah ID 0 ile 38 arasinda olmalidir.");
	            return ShowPlayerDialog(playerid, ODA_AYARLARI_SILAH+1, DIALOG_STYLE_INPUT, "{1DF21D}Oda Ayarlari - Silahlar", "Lütfen bu silah için yeni bir ID girin:", "Degistir", "Geri");
	        }
	        Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSilahlar][GetPVarInt(playerid, "SilahDuzenle")] = strval(inputtext);
	        new silahisim1[20], silahisim2[20], silahisim3[20], silahisim4[20];
	    	GetWeaponName(Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSilahlar][0], silahisim1, sizeof(silahisim1));
		    GetWeaponName(Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSilahlar][1], silahisim2, sizeof(silahisim2));
		    GetWeaponName(Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSilahlar][2], silahisim3, sizeof(silahisim3));
		    GetWeaponName(Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSilahlar][3], silahisim4, sizeof(silahisim4));
		    new str[150];
		    format(str, sizeof(str), "{FFFFFF}%s (ID: %d)\n{FFFFFF}%s (ID: %d)\n{FFFFFF}%s (ID: %d)\n{FFFFFF}%s (ID: %d)", silahisim1, Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSilahlar][0], silahisim2, Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSilahlar][1], silahisim3, Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSilahlar][2], silahisim4, Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSilahlar][3]);
		    ShowPlayerDialog(playerid, ODA_AYARLARI_SILAH, DIALOG_STYLE_LIST, "{1DF21D}Oda Ayarlari - Silahlar", str, "Degistir", "Geri");
	        DeletePVar(playerid, "SilahDuzenle");
	    }
	    return 1;
	}
	if (dialogid == ODA_AYARLARI_KATILIMCI)
	{
	    if (!response) return OdaAyarlari(playerid, GetPVarInt(playerid, "OdaAyarID"));
	    if (response)
	    {
	        new id = strval(inputtext);
	        if (IsPlayerConnected(id) && pbOda[id] == GetPVarInt(playerid, "OdaAyarID"))
	        {
	            if (playerid == id) return KatilimciDialog(playerid, GetPVarInt(playerid, "OdaAyarID"));
	            SetPVarInt(playerid, "OyuncuID", id);
	            ShowPlayerDialog(playerid, ODA_AYARLARI_KATILIMCI+1, DIALOG_STYLE_LIST, "{1DF21D}Oda Ayarlari", "{1DF21D}Odadan At\n{1DF21D}Odayi Devret", "Seç", "Geri");
	        }
	    }
	    return 1;
	}
	if (dialogid == ODA_AYARLARI_KATILIMCI+1)
	{
	    if (!response) return KatilimciDialog(playerid, GetPVarInt(playerid, "OdaAyarID"));
	    if (response)
	    {
	        new id = GetPVarInt(playerid, "OyuncuID");
	        if (IsPlayerConnected(id) && pbOda[id] == GetPVarInt(playerid, "OdaAyarID"))
	        {
	            if (listitem == 0)
	            {
	                SunucuMesaji(id, "Oda sahibi %s tarafindan odadan atildiniz.", ReturnName(playerid, 0));
	                OdadanAt(id, 1);
	                DeletePVar(playerid, "OyuncuID");
	                KatilimciDialog(playerid, GetPVarInt(playerid, "OdaAyarID"));
	            }
	            if (listitem == 1)
	            {
	                pbOda[id] = pbOda[playerid];
	                Paintball[GetPVarInt(playerid, "OdaAyarID")][odaSahip] = id;
	                SunucuMesaji(id, "Oda sahibi %s, odayi size devretti. (/pboda)", ReturnName(playerid, 0));
	                SunucuMesaji(playerid, "Odayi %s adli kisiye devrettiniz.", ReturnName(id, 0));
	                DeletePVar(playerid, "OyuncuID");
	                DeletePVar(playerid, "OdaAyarID");
				}
	        }
	    }
	    return 1;
	}
	if (dialogid == DIALOG_KATIL)
	{
	    if (response)
	    {
	        new id = strval(inputtext);
	        if (Paintball[id][odaExists])
	        {
	            if (Paintball[id][odaDurum] != ODA_BASLADI)
	            {
	                HataMesajGonder(playerid, "Bu odada maç baslamamis.");
	                return pbOdalari(playerid);
	            }
	            DeletePVar(playerid, "OdadanAt");
	            if (!strlen(Paintball[id][odaSifre]))
	            {
	                pbOda[playerid] = id;
	                new str[100];
                 	format(str, sizeof(str), "{33EE33}PB: %s adli kisi odaya katildi.", ReturnName(playerid, 0));
                  	SendPBMessage(id, -1, str);
	                if (Paintball[id][odaOyunTuru] == 1)
	                {
	                    ShowPlayerDialog(playerid, TAKIM_SEC, DIALOG_STYLE_MSGBOX, "Takim Seç", "Lütfen hangi takimda olacaginizi seçin:", Paintball[GetPVarInt(playerid, "OdaAyarID")][odaTakim1Ad],Paintball[GetPVarInt(playerid, "OdaAyarID")][odaTakim2Ad]);
	                }
	                else
					{
      					for (new i; i<9; i++)
	            		{
		            		PlayerTextDrawShow(playerid, PaintballTD[playerid][i]);
						}

						pbTakim[playerid] = 1;
        				pbOldurme[playerid] = 0;
          				pbOlme[playerid] = 0;
          				SaveWeapons(playerid);
						GetPlayerHealth(playerid, PlayerData[playerid][pHealth]);
						GetPlayerArmour(playerid, PlayerData[playerid][pArmour]);
						PaintballSpawn(playerid);
      				}
	            }
	            else
	            {
	                SetPVarInt(playerid, "OdaKatil", id);
	                ShowPlayerDialog(playerid, DIALOG_KATIL_SIFRE, DIALOG_STYLE_INPUT, "sifre", "Bu oda için sifre belirlenmis, lütfen sifreyi giriniz:", "Devam", "Geri");
	            }
	        }
	    }
	}
	if (dialogid == DIALOG_KATIL_SIFRE)
	{
	    if (!response) return pbOdalari(playerid);
	    if (response)
	    {
	        new id = GetPVarInt(playerid, "OdaKatil");
	        if (isnull(inputtext)) return ShowPlayerDialog(playerid, DIALOG_KATIL_SIFRE, DIALOG_STYLE_INPUT, "sifre", "Bu oda için sifre belirlenmis, lütfen sifreyi giriniz:", "Devam", "Geri");
	        if (strcmp(Paintball[id][odaSifre], inputtext, false) == 0)
	        {
	            	pbOda[playerid] = id;
	            	pbOldurme[playerid] = 0;
	            	pbOlme[playerid] = 0;
	            	new str[100];
              		format(str, sizeof(str), "{33EE33}PB: %s adli kisi odaya katildi.", ReturnName(playerid, 0));
                	SendPBMessage(id, -1, str);
	                if (Paintball[id][odaOyunTuru] == 1)
	                {
	                    ShowPlayerDialog(playerid, TAKIM_SEC, DIALOG_STYLE_MSGBOX, "Takim Seç", "Lütfen hangi takimda olacaginizi seçin:", Paintball[GetPVarInt(playerid, "OdaAyarID")][odaTakim1Ad],Paintball[GetPVarInt(playerid, "OdaAyarID")][odaTakim2Ad]);
	                }
	                else
	                {
                 		PlayerTextDrawShow(playerid, PaintballTD[playerid][0]);
						PlayerTextDrawShow(playerid, PaintballTD[playerid][3]);
						PlayerTextDrawShow(playerid, PaintballTD[playerid][4]);
						PlayerTextDrawShow(playerid, PaintballTD[playerid][5]);
						PlayerTextDrawShow(playerid, PaintballTD[playerid][6]);
						PlayerTextDrawShow(playerid, PaintballTD[playerid][7]);
						PlayerTextDrawShow(playerid, PaintballTD[playerid][8]);
       				}
           			pbTakim[playerid] = 1;
            		pbOldurme[playerid] = 0;
	            	pbOlme[playerid] = 0;
	            	SaveWeapons(playerid);
					GetPlayerHealth(playerid, PlayerData[playerid][pHealth]);
					GetPlayerArmour(playerid, PlayerData[playerid][pArmour]);
					PaintballSpawn(playerid);
	        }
	        else
	        {
	            HataMesajGonder(playerid, "Yanlis sifre girdiniz.");
	            return ShowPlayerDialog(playerid, DIALOG_KATIL_SIFRE, DIALOG_STYLE_INPUT, "sifre", "Bu oda için sifre belirlenmis, lütfen sifreyi giriniz:", "Devam", "Geri");
	        }
	    }
	    return 1;
	}
    if (dialogid == DIALOG_PETLERIM)
	{
	    if (response)
	    {
	        new id = strval(inputtext);
	        if (Iter_Contains(Petler, id))
	        {
	            if (PetBilgi[id][petDurum] == false)
	            {
	                if (PetBilgi[id][petYarali] == 1)
	                {
	                    ShowPlayerDialog(playerid, DIALOG_PET_IYILESTIR, DIALOG_STYLE_MSGBOX, "{FFFFFF}Petiniz Yarali!", "{f90000}> {FFFFFF}Petiniz yarali, onu iyilestirmeniz gerekiyor. {10f900}$500 {FFFFFF}ödeyerek iyilestirmek ister misiniz?", "Evet", "Hayir");
	                    return 1;
	                }
	                new petname[10];
					format(petname,sizeof(petname), "pet_%d", id);
					new npc = FCNPC_Create(petname);
					if (npc == INVALID_PLAYER_ID) return HataMesajGonder(playerid, "Pet olusturulurken hata olustu, lütfen yetkili kisilerle iletisime geçin.");
					new int = GetPlayerInterior(playerid), vw = GetPlayerVirtualWorld(playerid);
					new Float:pos[3];
					GetPlayerPos(playerid,pos[0], pos[1], pos[2]);

					FCNPC_Spawn(npc, PetTurSkin(PetBilgi[id][petTuru]), pos[0], pos[1], pos[2]);
					FCNPC_SetPosition(npc, pos[0] + 1, pos[1] + 1, pos[2]);
					FCNPC_SetInterior(npc, int);
					FCNPC_SetVirtualWorld(npc, vw);
					FCNPC_SetHealth(npc, PetBilgi[id][petSaglik]);
					FCNPC_SetInvulnerable(npc, true);

					PetBilgi[id][petTakip] = -1;
					PetBilgi[id][petDurum] = true;
					PetBilgi[id][NPCID] = npc;
					PetBilgi[id][petSaldir] = -1;

					new str[200];
					if (PetBilgi[id][petRenk] == 1) format(str, sizeof(str), "{FFFFFF}[%s]\n\n{AFAFAF}ID: %d\n{AFAFAF}Pet Türü: %s\n{AFAFAF}Cinsiyet: %s\n{AFAFAF}Saglik: %.1f\nAçlik: %d",PetBilgi[id][petAdi],id, PetTurIsim(PetBilgi[id][petTuru]), (PetBilgi[id][petCinsiyet] == 1) ? ("Erkek") : ("Kadin"), PetBilgi[id][petSaglik], PetBilgi[id][petAclik]);
					if (PetBilgi[id][petRenk] == 2) format(str, sizeof(str), "{0295f7}[%s]\n\n{AFAFAF}ID: %d\n{AFAFAF}Pet Türü: %s\n{AFAFAF}Cinsiyet: %s\n{AFAFAF}Saglik: %.1f\nAçlik: %d",PetBilgi[id][petAdi],id, PetTurIsim(PetBilgi[id][petTuru]), (PetBilgi[id][petCinsiyet] == 1) ? ("Erkek") : ("Kadin"), PetBilgi[id][petSaglik], PetBilgi[id][petAclik]);
					if (PetBilgi[id][petRenk] == 3) format(str, sizeof(str), "{f70202}[%s]\n\n{AFAFAF}ID: %d\n{AFAFAF}Pet Türü: %s\n{AFAFAF}Cinsiyet: %s\n{AFAFAF}Saglik: %.1f\nAçlik: %d",PetBilgi[id][petAdi],id, PetTurIsim(PetBilgi[id][petTuru]), (PetBilgi[id][petCinsiyet] == 1) ? ("Erkek") : ("Kadin"), PetBilgi[id][petSaglik], PetBilgi[id][petAclik]);
					if (PetBilgi[id][petRenk] == 4) format(str, sizeof(str), "{f77002}[%s]\n\n{AFAFAF}ID: %d\n{AFAFAF}Pet Türü: %s\n{AFAFAF}Cinsiyet: %s\n{AFAFAF}Saglik: %.1f\nAçlik: %d",PetBilgi[id][petAdi],id, PetTurIsim(PetBilgi[id][petTuru]), (PetBilgi[id][petCinsiyet] == 1) ? ("Erkek") : ("Kadin"), PetBilgi[id][petSaglik], PetBilgi[id][petAclik]);
					if (PetBilgi[id][petRenk] == 5) format(str, sizeof(str), "{ffff00}[%s]\n\n{AFAFAF}ID: %d\n{AFAFAF}Pet Türü: %s\n{AFAFAF}Cinsiyet: %s\n{AFAFAF}Saglik: %.1f\nAçlik: %d",PetBilgi[id][petAdi],id, PetTurIsim(PetBilgi[id][petTuru]), (PetBilgi[id][petCinsiyet] == 1) ? ("Erkek") : ("Kadin"), PetBilgi[id][petSaglik], PetBilgi[id][petAclik]);
					if (PetBilgi[id][petRenk] == 6) format(str, sizeof(str), "{ee00ff}[%s]\n\n{AFAFAF}ID: %d\n{AFAFAF}Pet Türü: %s\n{AFAFAF}Cinsiyet: %s\n{AFAFAF}Saglik: %.1f\nAçlik: %d",PetBilgi[id][petAdi],id, PetTurIsim(PetBilgi[id][petTuru]), (PetBilgi[id][petCinsiyet] == 1) ? ("Erkek") : ("Kadin"), PetBilgi[id][petSaglik], PetBilgi[id][petAclik]);
					if (PetBilgi[id][petRenk] == 7) format(str, sizeof(str), "{2aff00}[%s]\n\n{AFAFAF}ID: %d\n{AFAFAF}Pet Türü: %s\n{AFAFAF}Cinsiyet: %s\n{AFAFAF}Saglik: %.1f\nAçlik: %d",PetBilgi[id][petAdi],id, PetTurIsim(PetBilgi[id][petTuru]), (PetBilgi[id][petCinsiyet] == 1) ? ("Erkek") : ("Kadin"), PetBilgi[id][petSaglik], PetBilgi[id][petAclik]);
					PetBilgi[id][petText] = CreateDynamic3DTextLabel(str, -1, pos[0], pos[1], pos[2], 10.0, npc, INVALID_VEHICLE_ID, 1);
					//Attach3DTextLabelToPlayer(PetBilgi[id][petText], npc, 0.0, 0.0, 0.0);
	            }
	            else
	            {
	                if (PetKontrol[playerid] == id) return HataMesajGonder(playerid, "Petinizi kontrol ettiginiz için bunu yapamazsiniz. (/pet) ");
	                PetBilgi[id][petSaglik] = FCNPC_GetHealth(PetBilgi[id][NPCID]);
	                FCNPC_Destroy(PetBilgi[id][NPCID]);
	                PetBilgi[id][petTakip] = -1;
	                PetBilgi[id][NPCID] = -1;
	                PetBilgi[id][petDurum] = false;
	                DestroyDynamic3DTextLabel(PetBilgi[id][petText]);
	            }
	        }
	    }
	    return 1;
	}
	if (dialogid == DIALOG_PET)
	{
	    new id = GetPVarInt(playerid, "PetID");
	    if (response)
	    {
	        if (id == -1) return 1;
	        switch (listitem)
	        {
	            case 0: ShowPlayerDialog(playerid, DIALOG_PET+1, DIALOG_STYLE_INPUT, "{FFFFFF}Pet - Isim Degistir", "{f70202}> {FFFFFF}Lütfen petiniz için yeni bir isim belirleyin:", "Degistir", "Geri");
	            case 1: ShowPlayerDialog(playerid, DIALOG_PET+2, DIALOG_STYLE_LIST, "{FFFFFF}Pet - Ad Rengi", "{FFFFFF}Beyaz\n{0295f7}Mavi\n{f70202}Kirmizi\n{f77002}Turuncu\n{ffff00}Sari\n{ee00ff}Mor\n{2aff00}Yesil", "Seç", "Geri");
	            case 2: ShowPlayerDialog(playerid, DIALOG_PET+3, DIALOG_STYLE_LIST, "{FFFFFF}Pet - Türünü Degistir", "{FFFFFF}Black Pitbull\n{FFFFFF}Boxer Dog\n{FFFFFF}Brown Pitbull\n{FFFFFF}Bull Terrier\n{FFFFFF}Dalmation\n{FFFFFF}Doberman\n{FFFFFF}European Shepherd\n{FFFFFF}German Shorthair\n{FFFFFF}Gray Pitbull\n{FFFFFF}Siberian Husky\n{FFFFFF}White Pitbull", "Seç", "Geri");
	            case 3:
				{
				    if (PetBilgi[id][petCinsiyet] == 1) PetBilgi[id][petCinsiyet] = 2;
				    else PetBilgi[id][petCinsiyet] = 1;
				    Pet_Kaydet(id);
				    PetDialog(playerid, id);
				}
				case 6:
				{
				    if (PetBilgi[id][petAclik] <= 5) return HataMesajGonder(playerid, "Petiniz aç oldugu için bu islemi gerçeklestiremezsiniz.");
				    new Float:can, Float:zirh;
				    PetKontrol[playerid] = id;
				    SetPVarInt(playerid, "LastSkin",GetPlayerSkinEx(playerid));
				    SetPVarInt(playerid, "LastInterior", GetPlayerInterior(playerid));
				    SetPVarInt(playerid, "LastVw", GetPlayerVirtualWorld(playerid));
				    GetPlayerHealth(playerid, can);
				    GetPlayerArmour(playerid, zirh);
				    SetPVarFloat(playerid, "LastHealth", can);
				    SetPVarFloat(playerid, "LastArmour", zirh);
				    GetPlayerPos(playerid, LastPos[playerid][0], LastPos[playerid][1], LastPos[playerid][2]);
				    SetPlayerSkin(playerid, PetTurSkin(PetBilgi[id][petTuru]));
				    SetPlayerHealth(playerid, FCNPC_GetHealth(PetBilgi[id][NPCID]));
				    SetPlayerArmour(playerid, 0);
				    FCNPC_SetVirtualWorld(PetBilgi[id][NPCID], 500);
				    PetBilgi[id][petTakip] = -1;
				    PetBilgi[id][petSaldir] = -1;
				    MesajGonder(playerid, "Petinizi kontrol ediyorsunuz, çikmak için (/pet) yazabilirsiniz.");
				}
				case 7:
				{
				    if (PetBilgi[id][petTakip] == -1)
				    {
				        if (PetBilgi[id][petAclik] <= 5) return HataMesajGonder(playerid, "Petiniz aç, sizi takip edecek gücü yok.");
				        FCNPC_ClearAnimations(PetBilgi[id][NPCID]);
				        PetBilgi[id][petTakip] = playerid;
				        PetBilgi[id][petSaldir] = -1;
				        FCNPC_StopAttack(PetBilgi[id][NPCID]);
                        MesajGonder(playerid, "Petiniz artik sizi takip ediyor.");
				    }
				    else
				    {
				        PetBilgi[id][petTakip] = -1;
				        PetBilgi[id][petSaldir] = -1;
				        MesajGonder(playerid, "Petiniz artik sizi takip etmiyor.");
				    }
				}
				case 8:
				{
					if (PetBilgi[id][petAclik] > 50) return SendClientMessage(playerid,0xff0000ff, "> Petiniz aç degil.");
					PetBilgi[id][petAclik] = 100;
					Pet_Kaydet(id);
					MesajGonder(playerid, "Petinizi beslediniz.");
				}
				case 9:
				{
				    if (FCNPC_GetHealth(PetBilgi[id][NPCID]) >= 95) return HataMesajGonder(playerid, "Petinizin iyilesmeye ihtiyaci yok.");
				    if (PlayerData[playerid][pCash] < floatround(100-FCNPC_GetHealth(PetBilgi[id][NPCID]))*3) return HataMesajGonder(playerid, "Yeterli paraniz yok.");
				    ParaVer(playerid, -floatround(100-FCNPC_GetHealth(PetBilgi[id][NPCID]))*3);
				    FCNPC_SetHealth(PetBilgi[id][NPCID], 100.0);
				    PetBilgi[id][petSaglik] = 100.0;
				    Pet_Kaydet(id);
				    MesajGonder(playerid, "Petinizi iyilestirdiniz.");
				}
	        }
	    }
	    return 1;
	}
    if (dialogid == DIALOG_EDIT_BONE)
    {
        if (response)
        {
            new weaponid = EditingWeapon[playerid], weaponname[18], name[MAX_PLAYER_NAME], string[150];

            GetWeaponName(weaponid, weaponname, sizeof(weaponname));
            GetPlayerName(playerid, name, MAX_PLAYER_NAME);

            WeaponSettings[playerid][weaponid - 22][Bone] = listitem + 1;

            format(string, sizeof(string), "You have successfully changed the bone of your %s.", weaponname);
            SendClientMessage(playerid, -1, string);

            mysql_format(g_SQL, string, sizeof(string), "INSERT INTO weaponsettings (Name, WeaponID, Bone) VALUES ('%s', %d, %d) ON DUPLICATE KEY UPDATE Bone = VALUES(Bone)", name, weaponid, listitem + 1);
            mysql_tquery(g_SQL, string);
        }
        EditingWeapon[playerid] = 0;
        return 1;
    }
	if (dialogid == DIALOG_PET+1)
	{
	    if (!response) return cmd_pet(playerid);
	    if (response)
	    {
	        if (isnull(inputtext)) return ShowPlayerDialog(playerid, DIALOG_PET+1, DIALOG_STYLE_INPUT, "{FFFFFF}Pet - Isim Degistir", "{f70202}> {FFFFFF}Lütfen petiniz için yeni bir isim belirleyin:", "Degistir", "Geri");
	        if (strlen(inputtext) > 24) return ShowPlayerDialog(playerid, DIALOG_PET+1, DIALOG_STYLE_INPUT, "{FFFFFF}Pet - Isim Degistir", "{f70202}> {FFFFFF}Lütfen petiniz için yeni bir isim belirleyin:", "Degistir", "Geri");
	        new id = GetPVarInt(playerid, "PetID");
	        format(PetBilgi[id][petAdi], 24, inputtext);
	        Pet_Kaydet(id);
	        PetDialog(playerid, id);
	    }
	    return 1;
	}
	if (dialogid == DIALOG_PET+2)
	{
	    if (!response) return PetDialog(playerid, GetPVarInt(playerid, "PetID"));
	    if (response)
	    {
	        PetBilgi[GetPVarInt(playerid, "PetID")][petRenk] = listitem+1;
	        Pet_Kaydet(GetPVarInt(playerid, "PetID"));
	        PetDialog(playerid, GetPVarInt(playerid, "PetID"));
	    }
	    return 1;
	}
	if (dialogid == DIALOG_PET+3)
	{
	    if (!response) return PetDialog(playerid, GetPVarInt(playerid, "PetID"));
	    if (response)
	    {
	        PetBilgi[GetPVarInt(playerid, "PetID")][petTuru] = listitem+1;
	        FCNPC_SetSkin(PetBilgi[GetPVarInt(playerid, "PetID")][NPCID], PetTurSkin(listitem+1));
	        Pet_Kaydet(GetPVarInt(playerid, "PetID"));
	        PetDialog(playerid, GetPVarInt(playerid, "PetID"));
	    }
	    return 1;
	}
	if (dialogid == DIALOG_PET_IYILESTIR)
	{
	    if (response)
	    {
	        new id = GetPVarInt(playerid, "PetID");
	        if (PlayerData[playerid][pCash] < 500) return HataMesajGonder(playerid, "Yeterli paraniz yok.");
	        ParaVer(playerid, -500);
	        PetBilgi[id][petYarali] = 0;
	        Pet_Kaydet(id);
	        MesajGonder(playerid, "Petiniz iyilestirildi, artik onu spawn edebilirsiniz. (/petlerim)");
	    }
	}
    if (dialogid == COPOBJECTS_DIALOG)
	{
		if (!response) return 1;
		if (listitem == 0) ShowModelSelectionMenu(playerid, RoadblockList, "Roadblocks", 0x393939BB, 0x3498DBBB);
		if (listitem == 1) ShowModelSelectionMenu(playerid, SignList, "Signs", 0x393939BB, 0x3498DBBB);

		if (listitem == 2)
		{
		    new id = GetFreeCopObjectID();
		    if (id == -1) return HataMesajGonder(playerid, "Obje olusturulurken hata olustu, gelistiri ekibiyle iletisime geçiniz.");
		    CopObjectData[id][ObjCreated] = true;
		    format(CopObjectData[id][Owner],32,ReturnName(playerid, 0));
		    CopObjectData[id][Type] = OBJECT_TYPE_POLICELINE;
		    CopObjectData[id][ObjModel] = 19834;
		    CopObjectData[id][ObjInterior] = GetPlayerInterior(playerid);
		    CopObjectData[id][ObjVirtualWorld] = GetPlayerVirtualWorld(playerid);

		    new Float: x, Float: y, Float: z, Float: a;
		    GetPlayerPos(playerid, x, y, z);
		    GetPlayerFacingAngle(playerid, a);
		    x += (2.0 * floatsin(-a, degrees));
			y += (2.0 * floatcos(-a, degrees));
			CopObjectData[id][ObjX] = x;
			CopObjectData[id][ObjY] = y;
			CopObjectData[id][ObjZ] = z;
			CopObjectData[id][ObjRX] = 0.0;
			CopObjectData[id][ObjRY] = 0.0;
			CopObjectData[id][ObjRZ] = a;
			CopObjectData[id][ObjID] = CreateDynamicObject(19834, x, y, z, 0.0, 0.0, a, CopObjectData[id][ObjVirtualWorld], CopObjectData[id][ObjInterior]);
			CopObjectData[id][ObjArea] = -1;

			new string[96];
			format(string, sizeof(string), "{FFFFFF}Olay Yeri seridi (ID: %d)", id);
			CopObjectData[id][ObjLabel] = CreateDynamic3DTextLabel(string, 0xFFFFFFAA, x, y, z + 0.35, 5.0, _, _, _, CopObjectData[id][ObjVirtualWorld], CopObjectData[id][ObjInterior]);
            InsertObjectToDB(id);
		}

		if (listitem == 3)
		{
		    new id = GetFreeCopObjectID();
		    if (id == -1) return HataMesajGonder(playerid, "Obje olusturulurken hata olustu, gelistiri ekibiyle iletisime geçiniz.");
		    CopObjectData[id][ObjCreated] = true;
		    format(CopObjectData[id][Owner],32,ReturnName(playerid, 0));
		    CopObjectData[id][Type] = OBJECT_TYPE_SPIKE;
		    CopObjectData[id][ObjModel] = 2899;
		    CopObjectData[id][ObjInterior] = GetPlayerInterior(playerid);
		    CopObjectData[id][ObjVirtualWorld] = GetPlayerVirtualWorld(playerid);

		    new Float: x, Float: y, Float: z, Float: a;
		    GetPlayerPos(playerid, x, y, z);
		    GetPlayerFacingAngle(playerid, a);
		    x += (2.0 * floatsin(-a, degrees));
			y += (2.0 * floatcos(-a, degrees));

			CopObjectData[id][ObjX] = x;
			CopObjectData[id][ObjY] = y;
			CopObjectData[id][ObjZ] = z - 0.85;
			CopObjectData[id][ObjRX] = 0.0;
			CopObjectData[id][ObjRY] = 0.0;
			CopObjectData[id][ObjRZ] = a + 90.0;
			CopObjectData[id][ObjID] = CreateDynamicObject(2899, x, y, z - 0.85, 0.0, 0.0, a + 90.0, CopObjectData[id][ObjVirtualWorld], CopObjectData[id][ObjInterior]);
			CopObjectData[id][ObjArea] = CreateDynamicSphere(x, y, z - 0.85, 2.5, CopObjectData[id][ObjVirtualWorld], CopObjectData[id][ObjInterior]);

			new string[96];
			format(string, sizeof(string), "{FFFFFF}Çivi (ID: %d)", id);
			CopObjectData[id][ObjLabel] = CreateDynamic3DTextLabel(string, 0xFFFFFFAA, x, y, z - 0.4, 3.0, _, _, _, CopObjectData[id][ObjVirtualWorld], CopObjectData[id][ObjInterior]);
            InsertObjectToDB(id);
		}

		if (listitem == 4) ShowPlayerDialog(playerid, COPOBJECTS_DIALOG+1, DIALOG_STYLE_INPUT, "Hiz Kamerasi", "Lütfen hiz limitini girin:", "Olustur", "iptal");
	    return 1;
	}

	if (dialogid == COPOBJECTS_DIALOG+1)
	{
		if (!response) return 1;
		if (isnull(inputtext) || !IsNumeric(inputtext)) return ShowPlayerDialog(playerid, COPOBJECTS_DIALOG+1, DIALOG_STYLE_INPUT, "Hiz Kamerasi", "Lütfen hiz limitini girin:", "Olustur", "Iptal");
		if (strval(inputtext) < 10 || strval(inputtext) > 250)
		{
		    HataMesajGonder(playerid, "En az 10, en fazla 250 girebilirsiniz.");
		    return ShowPlayerDialog(playerid, COPOBJECTS_DIALOG+1, DIALOG_STYLE_INPUT, "Hiz Kamerasi", "Lütfen hiz limitini girin:", "Olustur", "Iptal");
		}
		new id = GetFreeCopObjectID(), limit = strval(inputtext);
	    if (id == -1) return HataMesajGonder(playerid, "Obje olusturulurken hata olustu, gelistiri ekibiyle iletisime geçiniz.");
	    CopObjectData[id][ObjCreated] = true;
	    format(CopObjectData[id][Owner],32,ReturnName(playerid, 0));
	    CopObjectData[id][Type] = OBJECT_TYPE_SPEEDCAM;
	    CopObjectData[id][ObjData] = limit;
	    CopObjectData[id][ObjModel] = 18880;
	    CopObjectData[id][ObjInterior] = GetPlayerInterior(playerid);
	    CopObjectData[id][ObjVirtualWorld] = GetPlayerVirtualWorld(playerid);

	    new Float: x, Float: y, Float: z, Float: a;
	    GetPlayerPos(playerid, x, y, z);
	    GetPlayerFacingAngle(playerid, a);
	    x += (2.0 * floatsin(-a, degrees));
		y += (2.0 * floatcos(-a, degrees));
		CopObjectData[id][ObjX] = x;
		CopObjectData[id][ObjY] = y;
		CopObjectData[id][ObjZ] = z - 1.5;
		CopObjectData[id][ObjRX] = 0.0;
		CopObjectData[id][ObjRY] = 0.0;
		CopObjectData[id][ObjRZ] = 0.0;
		CopObjectData[id][ObjID] = CreateDynamicObject(18880, x, y, z - 1.5, 0.0, 0.0, 0.0, CopObjectData[id][ObjVirtualWorld], CopObjectData[id][ObjInterior]);
		CopObjectData[id][ObjArea] = CreateDynamicSphere(x, y, z - 1.5, SPEEDCAM_RANGE, CopObjectData[id][ObjVirtualWorld], CopObjectData[id][ObjInterior]);

		new string[128];
		format(string, sizeof(string), "{FFFFFF}Hiz Kamerasi (ID: %d)\n{FFFFFF}Hiz Limiti: {E74C3C}%d", id, limit);
		CopObjectData[id][ObjLabel] = CreateDynamic3DTextLabel(string, 0xFFFFFFAA, x, y, z + 3.85, SPEEDCAM_RANGE, _, _, _, CopObjectData[id][ObjVirtualWorld], CopObjectData[id][ObjInterior]);
        InsertObjectToDB(id);
		return 1;
	}
	switch (dialogid)
	{
	    case DIALOG_BANK_MENU_NOLOGIN:
	    {
	        if (!response) return 1;
	        if (listitem == 0)
	        {
	            if (GetPVarInt(playerid, "usingATM"))
				{
				    HataMesajGonder(playerid, "Bunu ATM'de yapamazsiniz, bankayi ziyaret etmelisiniz.");
					return Bank_ShowMenu(playerid);
				}

	            if (ACCOUNT_PRICE > PlayerData[playerid][pCash])
	            {
	                HataMesajGonder(playerid, "Yeterli paraniz yok.");
	                return Bank_ShowMenu(playerid);
	            }

				#if defined ACCOUNT_CLIMIT
				if (Bank_AccountCount(playerid) >= ACCOUNT_CLIMIT)
	            {
	                HataMesajGonder(playerid, "En fazla %d banka hesabi olusturabilirsiniz.", ACCOUNT_CLIMIT);
	                return Bank_ShowMenu(playerid);
	            }
				#endif

				ShowPlayerDialog(playerid, DIALOG_BANK_CREATE_ACCOUNT, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Hesap Oluþtur", "Lütfen hesabýnýz için bir þifre belirleyin:", "Olustur", "Geri");
	        }

	        if (listitem == 1) Bank_ListAccounts(playerid);
	        if (listitem == 2) ShowPlayerDialog(playerid, DIALOG_BANK_LOGIN_ID, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Giris", "Hesap Numarasý:", "Devam", "Iptal");
	        return 1;
	    }
     	/* ---------------------------------------------------------------------- */
     	case DIALOG_BANK_MENU:
		{
		    if (!response) return 1;
		    if (listitem == 0)
	        {
	            if (GetPVarInt(playerid, "usingATM"))
				{
				    HataMesajGonder(playerid, "Bunu ATM'de yapamazsýnýz, bir bankayý ziyaret etmelisiniz.");
					return Bank_ShowMenu(playerid);
				}

	            if (ACCOUNT_PRICE > PlayerData[playerid][pCash])
	            {
	                HataMesajGonder(playerid, "Yeterli paranýz yok.");
	                return Bank_ShowMenu(playerid);
	            }

				#if defined ACCOUNT_CLIMIT
				if (Bank_AccountCount(playerid) >= ACCOUNT_CLIMIT)
	            {
	                HataMesajGonder(playerid, "En fazla %d banka hesabý oluþturabilirsiniz.", ACCOUNT_CLIMIT);
	                return Bank_ShowMenu(playerid);
	            }
				#endif

				ShowPlayerDialog(playerid, DIALOG_BANK_CREATE_ACCOUNT, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Hesap Oluþtur", "Lütfen hesabýniz için bir þifre belirleyin:", "Olustur", "Geri");
	        }

	        if (listitem == 1) Bank_ListAccounts(playerid);
	        if (listitem == 2) ShowPlayerDialog(playerid, DIALOG_BANK_DEPOSIT, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Para Yatýr", "Lütfen yatirmak istediginiz para miktarini girin:", "Yatir", "Geri");
            if (listitem == 3) ShowPlayerDialog(playerid, DIALOG_BANK_WITHDRAW, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Para Çek", "Lütfen hesabinizdan çekmek istediginiz para miktarini girin:", "Çek", "Geri");
			if (listitem == 4) ShowPlayerDialog(playerid, DIALOG_BANK_TRANSFER_1, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Para Transfer", "Hesap Numarasi girin:", "Devam", "Geri");
            if (listitem == 5)
			{
			    if (GetPVarInt(playerid, "usingATM"))
				{
				    HataMesajGonder(playerid, "Bunu ATM'de yapamazsýnýz, bir bankayi ziyaret etmelisiniz.");
					return Bank_ShowMenu(playerid);
				}

				Bank_ShowLogMenu(playerid);
			}

			if (listitem == 6)
			{
			    if (GetPVarInt(playerid, "usingATM"))
				{
				    HataMesajGonder(playerid, "Bunu ATM'de yapamazsýnýz, bir bankayi ziyaret etmelisiniz.");
					return Bank_ShowMenu(playerid);
				}
				if (Bank_GetOwner(CurrentAccountID[playerid]) != PlayerData[playerid][pID])
				{
				    HataMesajGonder(playerid, "Bu iþlemi sadece hesabin sahibi yapabilir.");
				    return Bank_ShowMenu(playerid);
				}

				ShowPlayerDialog(playerid, DIALOG_BANK_PASSWORD, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Þifre Deðistir", "Lütfen yeni bir þifre belirleyin:", "Degistir", "Geri");
			}

			if (listitem == 7)
			{
			    if (GetPVarInt(playerid, "usingATM"))
				{
				    HataMesajGonder(playerid, "Bunu ATM'de yapamazsiniz, bir bankayi ziyaret etmelisiniz.");
					return Bank_ShowMenu(playerid);
				}

			    if (Bank_GetOwner(CurrentAccountID[playerid]) != PlayerData[playerid][pID])
				{
				    HataMesajGonder(playerid, "Bu islemi sadece hesabin sahibi yapabilir.");
				    return Bank_ShowMenu(playerid);
				}

				ShowPlayerDialog(playerid, DIALOG_BANK_REMOVE, DIALOG_STYLE_MSGBOX, "{F1C40F}Banka: {FFFFFF}Hesap Sil", "Hesabinizi silmek istediginize emin misiniz?", "Evet", "Hayir");
				// https://youtu.be/rcjpags7JT8 - because it doesn't get deleted actually
			}

			if (listitem == 8)
			{
			    MesajGonder(playerid, "Hesaptan çikis yaptiniz.");

			    CurrentAccountID[playerid] = -1;
			    Bank_ShowMenu(playerid);
			}
		}
        /* ---------------------------------------------------------------------- */
	    case DIALOG_BANK_CREATE_ACCOUNT:
	    {
	        if (!response) return Bank_ShowMenu(playerid);
	        if (isnull(inputtext)) return ShowPlayerDialog(playerid, DIALOG_BANK_CREATE_ACCOUNT, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Hesap Oluþtur", "{E74C3C}Þifreyi bos býrakamazsýnýz.\n\n{FFFFFF}Lütfen hesabiniz için bir sifre belirleyin:", "Oluþtur", "Geri");
			if (strlen(inputtext) > 16) return ShowPlayerDialog(playerid, DIALOG_BANK_CREATE_ACCOUNT, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Hesap Oluþtur", "{E74C3C}sifreniz 16 karakterden uzun olmamalý.\n\n{FFFFFF}Lütfen hesabýnýz için bir þifre belirleyin:", "Oluþtur", "Geri");
			if (ACCOUNT_PRICE > PlayerData[playerid][pCash])
            {
                HataMesajGonder(playerid, "Yeterli paranýz yok.");
                return Bank_ShowMenu(playerid);
            }

			#if defined ACCOUNT_CLIMIT
			if (Bank_AccountCount(playerid) >= ACCOUNT_CLIMIT)
            {
                MesajGonder(playerid, "En fazla %d banka hesabý oluþturabilirsiniz.", ACCOUNT_CLIMIT);
                return Bank_ShowMenu(playerid);
            }
			#endif

			new query[144];
			mysql_format(g_SQL, query, sizeof(query), "INSERT INTO bank_accounts SET Owner='%d', Password=md5('%e'), CreatedOn=UNIX_TIMESTAMP()", PlayerData[playerid][pID], inputtext);
			mysql_tquery(g_SQL, query, "OnBankAccountCreated", "is", playerid, inputtext);
	        return 1;
	    }
	    /* ---------------------------------------------------------------------- */
	    case DIALOG_BANK_ACCOUNTS:
	    {
            if (!response) return Bank_ShowMenu(playerid);

            SetPVarInt(playerid, "bankLoginAccount", strval(inputtext));
			ShowPlayerDialog(playerid, DIALOG_BANK_LOGIN_PASS, DIALOG_STYLE_PASSWORD, "{F1C40F}Banka: {FFFFFF}Giriþ", "Hesap þifresi:", "Giriþ", "Iptal");
	        return 1;
	    }
	    /* ---------------------------------------------------------------------- */
	    case DIALOG_BANK_LOGIN_ID:
	    {
	        if (!response) return Bank_ShowMenu(playerid);
	        if (isnull(inputtext)) return ShowPlayerDialog(playerid, DIALOG_BANK_LOGIN_ID, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Giriþ", "{E74C3C}Hesap numarasýný boþ býrakamazsýnýz.\n\n{FFFFFF}Hesap Numarasý:", "Devam", "Iptal");

			SetPVarInt(playerid, "bankLoginAccount", strval(inputtext));
			ShowPlayerDialog(playerid, DIALOG_BANK_LOGIN_PASS, DIALOG_STYLE_PASSWORD, "{F1C40F}Banka: {FFFFFF}Giris", "Hesap þifresi:", "Giris", "Iptal");
			return 1;
	    }
	    /* ---------------------------------------------------------------------- */
	    case DIALOG_BANK_LOGIN_PASS:
	    {
	        if (!response) return Bank_ShowMenu(playerid);
	        if (isnull(inputtext)) return ShowPlayerDialog(playerid, DIALOG_BANK_LOGIN_PASS, DIALOG_STYLE_PASSWORD, "{F1C40F}Banka: {FFFFFF}Giriþ", "{E74C3C}Þifreyi boþ býrakamazsýnýz.\n\n{FFFFFF}Hesap þifresi:", "Giriþ", "Iptal");

			new query[200], id = GetPVarInt(playerid, "bankLoginAccount");
			mysql_format(g_SQL, query, sizeof(query), "SELECT Owner, LastAccess, FROM_UNIXTIME(LastAccess, '%%d/%%m/%%Y %%H:%%i:%%s') AS Last FROM bank_accounts WHERE ID=%d && Password=md5('%e') && Disabled=0 LIMIT 1", id, inputtext);
			mysql_tquery(g_SQL, query, "OnBankAccountLogin", "ii", playerid, id);
			return 1;
	    }
	    /* ---------------------------------------------------------------------- */
	    case DIALOG_BANK_DEPOSIT:
	    {
			if (!response) return Bank_ShowMenu(playerid);
			if (CurrentAccountID[playerid] == -1) return 1;
     		if (isnull(inputtext)) return ShowPlayerDialog(playerid, DIALOG_BANK_DEPOSIT, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Para Yatir", "{E74C3C}Bos birakamazsiniz.\n\n{FFFFFF}Lütfen yatirmak istediginiz para miktarini girin:", "Yatir", "Geri");
			new amount = strval(inputtext);
			if (!(1 <= amount <= (GetPVarInt(playerid, "usingATM") ? 5000000 : 250000000))) return ShowPlayerDialog(playerid, DIALOG_BANK_DEPOSIT, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Para Yatir", "{E74C3C}En az $1, en fazla $250,000,000 para yatirabilirsiniz.\n\n{FFFFFF}Lütfen yatirmak istediginiz para miktarini girin:", "Yatir", "Geri");
			if (amount > PlayerData[playerid][pCash]) return ShowPlayerDialog(playerid, DIALOG_BANK_DEPOSIT, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Para Yatir", "{E74C3C}O kadar paraniz yok.\n\n{FFFFFF}Lütfen yatirmak istediginiz para miktarini girin:", "Yatir", "Geri");
			if ((amount + Bank_GetBalance(CurrentAccountID[playerid])) > ACCOUNT_LIMIT)
			{
   				HataMesajGonder(playerid, "Bu hesaba daha fazla para yatiramazsiniz.");
			    return Bank_ShowMenu(playerid);
			}

			new query[96];
			mysql_format(g_SQL, query, sizeof(query), "UPDATE bank_accounts SET Balance=Balance+%d WHERE ID=%d && Disabled=0", amount, CurrentAccountID[playerid]);
			mysql_tquery(g_SQL, query, "OnBankAccountDeposit", "ii", playerid, amount);
			return 1;
		}
        /* ---------------------------------------------------------------------- */
        case DIALOG_BANK_WITHDRAW:
	    {
			if (!response) return Bank_ShowMenu(playerid);
			if (CurrentAccountID[playerid] == -1) return 1;
     		if (isnull(inputtext)) return ShowPlayerDialog(playerid, DIALOG_BANK_WITHDRAW, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Para Çek", "{E74C3C}Burayi bos birakamazsiniz.\n\n{FFFFFF}Lütfen hesabinizdan çekmek istediginiz para miktarini girin:", "Çek", "Geri");
			new amount = strval(inputtext);
			if (!(1 <= amount <= (GetPVarInt(playerid, "usingATM") ? 5000000 : 250000000))) return ShowPlayerDialog(playerid, DIALOG_BANK_WITHDRAW, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Para Çek", "{E74C3C}En az $1, en fazla $250,000,000 çekebilirsiniz.\n\n{FFFFFF}Lütfen hesabinizdan çekmek istediginiz para miktarini girin:", "Çek", "Geri");
			if (amount > Bank_GetBalance(CurrentAccountID[playerid])) return ShowPlayerDialog(playerid, DIALOG_BANK_WITHDRAW, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Para Çek", "{E74C3C}Hesabinizda o kadar para yok.\n\n{FFFFFF}Lütfen hesabinizdan çekmek istediginiz para miktarini girin:", "Çek", "Geri");

			new query[96];
			mysql_format(g_SQL, query, sizeof(query), "UPDATE bank_accounts SET Balance=Balance-%d WHERE ID=%d && Disabled=0", amount, CurrentAccountID[playerid]);
			mysql_tquery(g_SQL, query, "OnBankAccountWithdraw", "ii", playerid, amount);
			return 1;
		}
        /* ---------------------------------------------------------------------- */
        case DIALOG_BANK_TRANSFER_1:
	    {
			if (!response) return Bank_ShowMenu(playerid);
			if (CurrentAccountID[playerid] == -1) return 1;
     		if (isnull(inputtext)) return ShowPlayerDialog(playerid, DIALOG_BANK_TRANSFER_1, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Para Transfer", "{E74C3C}Burayi bos birakamazsiniz.\n\n{FFFFFF}Hesap numarasi girin:", "Devam", "Geri");
            if (strval(inputtext) == CurrentAccountID[playerid]) return ShowPlayerDialog(playerid, DIALOG_BANK_TRANSFER_1, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Para Transfer", "{E74C3C}Kendi hesap numaraniza para transfer edemezsiniz.\n\n{FFFFFF}Hesap numarasi girin:", "Devam", "Geri");
            SetPVarInt(playerid, "bankTransferAccount", strval(inputtext));
            ShowPlayerDialog(playerid, DIALOG_BANK_TRANSFER_2, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Para Transfer", "Lütfen transfer etmek istediginiz para miktarini girin:", "Transfer", "Geri");
            return 1;
		}
        /* ---------------------------------------------------------------------- */
        case DIALOG_BANK_TRANSFER_2:
        {
            if (!response) return ShowPlayerDialog(playerid, DIALOG_BANK_TRANSFER_1, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Para Transfer", "Hesap numarasi girin:", "Devam", "Geri");
            if (CurrentAccountID[playerid] == -1) return 1;
			if (isnull(inputtext)) return ShowPlayerDialog(playerid, DIALOG_BANK_TRANSFER_2, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Para Transfer", "{E74C3C}Burayi bos birakamazsiniz.\n\n{FFFFFF}Lütfen transfer etmek istediginiz para miktarini girin:", "Transfer", "Geri");
            new amount = strval(inputtext);
			if (!(1 <= amount <= (GetPVarInt(playerid, "usingATM") ? 5000000 : 250000000))) return ShowPlayerDialog(playerid, DIALOG_BANK_TRANSFER_2, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Para Transfer", "{E74C3C}En az $1, en fazla $250,000,000 transfer edebilirsiniz.\n\n{FFFFFF}Lütfen transfer etmek istediginiz para miktarini girin:", "Transfer", "Geri");
            if (amount > Bank_GetBalance(CurrentAccountID[playerid])) return ShowPlayerDialog(playerid, DIALOG_BANK_TRANSFER_2, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Para Transfer", "{E74C3C}Hesabinizda o kadar para yok.\n\n{FFFFFF}Lütfen transfer etmek istediginiz para miktarini girin:", "Transfer", "Geri");
			new id = GetPVarInt(playerid, "bankTransferAccount");
			if ((amount + Bank_GetBalance(id)) > ACCOUNT_LIMIT)
			{
				HataMesajGonder(playerid, "Bu hesaba daha fazla para gönderilemez.");
				return Bank_ShowMenu(playerid);
			}

			new query[96];
			mysql_format(g_SQL, query, sizeof(query), "UPDATE bank_accounts SET Balance=Balance+%d WHERE ID=%d && Disabled=0", amount, id);
			mysql_tquery(g_SQL, query, "OnBankAccountTransfer", "iii", playerid, id, amount);
            return 1;
        }
        /* ---------------------------------------------------------------------- */
        case DIALOG_BANK_PASSWORD:
        {
        	if (!response) return Bank_ShowMenu(playerid);
        	if (CurrentAccountID[playerid] == -1) return 1;
	        if (isnull(inputtext)) return ShowPlayerDialog(playerid, DIALOG_BANK_PASSWORD, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Þifre Deðiþtir", "{E74C3C}Burayi boþ býrakamazsýnýz.\n\n{FFFFFF}Lütfen hesabiniz için yeni bir sifre belirleyin:", "Degistir", "Geri");
			if (strlen(inputtext) > 16) return ShowPlayerDialog(playerid, DIALOG_BANK_PASSWORD, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Þifre Deðiþtir", "{E74C3C}Þifreniz 16 karakterden fazla olmamalýdýr.\n\n{FFFFFF}Lütfen hesabiniz için yeni bir sifre belirleyin:", "Degistir", "Geri");

			new query[128];
			mysql_format(g_SQL, query, sizeof(query), "UPDATE bank_accounts SET Password=md5('%e') WHERE ID=%d && Disabled=0", inputtext, CurrentAccountID[playerid]);
			mysql_tquery(g_SQL, query, "OnBankAccountPassChange", "is", playerid, inputtext);
	        return 1;
	    }
        /* ---------------------------------------------------------------------- */
        case DIALOG_BANK_REMOVE:
        {
            if (!response) return Bank_ShowMenu(playerid);
            if (CurrentAccountID[playerid] == -1) return 1;

            new query[96], amount = Bank_GetBalance(CurrentAccountID[playerid]);
			mysql_format(g_SQL, query, sizeof(query), "UPDATE bank_accounts SET Disabled=1 WHERE ID=%d", CurrentAccountID[playerid]);
			mysql_tquery(g_SQL, query, "OnBankAccountDeleted", "iii", playerid, CurrentAccountID[playerid], amount);
            return 1;
        }
        /* ---------------------------------------------------------------------- */
        case DIALOG_BANK_LOGS:
        {
            if (!response) return Bank_ShowMenu(playerid);
            if (CurrentAccountID[playerid] == -1) return 1;

            new typelist[6] = {TYPE_NONE, TYPE_DEPOSIT, TYPE_WITHDRAW, TYPE_TRANSFER, TYPE_LOGIN, TYPE_PASSCHANGE};
            LogListType[playerid] = typelist[listitem + 1];
            LogListPage[playerid] = 0;
            Bank_ShowLogs(playerid);
            return 1;
   		}
        /* ---------------------------------------------------------------------- */
        case DIALOG_BANK_LOG_PAGE:
		{
		    if (CurrentAccountID[playerid] == -1 || LogListType[playerid] == TYPE_NONE) return 1;
			if (!response) {
			    LogListPage[playerid]--;
			    if (LogListPage[playerid] < 0) return Bank_ShowLogMenu(playerid);
			}else{
			    LogListPage[playerid]++;
			}

			Bank_ShowLogs(playerid);
		    return 1;
		}
		/* -------------------------------------------------------------------------- */
	    case DIALOG_DRUG_STATS:
	    {
	        if (!response) return 1;
	        if (listitem < 9) {
	            ShowDrugStats(playerid);
	        }else{
	            ShowPlayerDialog(playerid, DIALOG_CONFIRM_RESET, DIALOG_STYLE_MSGBOX, "Uyusturucu istatistikleri Sifirlama", "Uyusturucu istatistiklerinizi sifirlamak istediginize emin misiniz?", "Evet", "Hayir");
	        }

	        return 1;
	    }
	    ////////////////////////////////////////////////////////////////
	    case DIALOG_CONFIRM_RESET:
	    {
			if (!response) return ShowDrugStats(playerid);
			PlayerDrugData[playerid][TotalUsed] = PlayerDrugData[playerid][TotalPlanted] = PlayerDrugData[playerid][TotalHarvestedPlants] = PlayerDrugData[playerid][TotalHarvestedGrams] =
			PlayerDrugData[playerid][TotalGiven] = PlayerDrugData[playerid][TotalReceived] = PlayerDrugData[playerid][TotalBought] = PlayerDrugData[playerid][TotalBoughtPrice] =
			PlayerDrugData[playerid][TotalSold] = PlayerDrugData[playerid][TotalSoldPrice] = 0;

			Player_SaveDrugs(playerid);
			ShowDrugStats(playerid);
			return 1;
		}
	    ////////////////////////////////////////////////////////////////
	    case DIALOG_DRUG_DEALER:
	    {
         	if (response)
	        {
				if (listitem == 0)
				{
				    if (PlayerDrugData[playerid][Seeds] >= SEED_LIMIT)
				    {
				        HataMesajGonder(playerid, "Daha fazla uyusturucu tohumu alamazsiniz.");
				        return ShowDealerMenu(playerid);
				    }

					ShowPlayerDialog(playerid, DIALOG_DRUG_DEALER_BUY_SEEDS, DIALOG_STYLE_INPUT, "Uyusturucu Tohumu Al", "Lütfen almak istediginiz uyusturucu tohumu miktarini girin:", "Al", "Geri");
				}

                if (listitem == 1)
				{
				    if (PlayerDrugData[playerid][Drugs] >= CARRY_LIMIT)
				    {
				        HataMesajGonder(playerid, "Daha fazla uyusturucu alamazsiniz.");
				        return ShowDealerMenu(playerid);
				    }

				    if (DealerData[ PlayerDrugData[playerid][DealerID] ][dealerDrugs] < 1)
				    {
				        HataMesajGonder(playerid, "Bu uyusturucu saticisinin hiç uyusturucusu yok.");
				        return ShowDealerMenu(playerid);
				    }

					ShowPlayerDialog(playerid, DIALOG_DRUG_DEALER_BUY_DRUGS, DIALOG_STYLE_INPUT, "Uyusturucu Satin Al", "Lütfen satin almak istediginiz uyusturucu miktarini girin:", "Al", "Geri");
				}

				if (listitem == 2)
				{
                    if (PlayerDrugData[playerid][Drugs] < 1)
				    {
				        HataMesajGonder(playerid, "Hiç uyusturucunuz yok.");
				        return ShowDealerMenu(playerid);
				    }

					ShowPlayerDialog(playerid, DIALOG_DRUG_DEALER_SELL, DIALOG_STYLE_INPUT, "Uyusturucu Sat", "Lütfen satmak istediginiz uyusturucu miktarini girin:", "Sat", "Geri");
				}
			}

	        return 1;
	    }
	    case DIALOG_DRUG_DEALER_BUY_SEEDS:
	    {
	        if (!response) return ShowDealerMenu(playerid);
	        if (isnull(inputtext)) return ShowPlayerDialog(playerid, DIALOG_DRUG_DEALER_BUY_SEEDS, DIALOG_STYLE_INPUT, "Uyusturucu Tohumu Al", "{E74C3C}Burayi bos birakamazsiniz.\n\n{FFFFFF}Lütfen almak istediginiz uyusturucu tohumu miktarini girin:", "Al", "Geri");
			new amount = strval(inputtext);
			if (!(0 < amount <= SEED_LIMIT))
			{
			    HataMesajGonder(playerid, "En az 1, en fazla %d uyusturucu tohumu tasiyabilirsiniz.", SEED_LIMIT);
			    return ShowPlayerDialog(playerid, DIALOG_DRUG_DEALER_BUY_SEEDS, DIALOG_STYLE_INPUT, "Uyusturucu Tohumu Al", "{E74C3C}Geçersiz miktar girdiniz.\n\n{FFFFFF}Lütfen almak istediginiz uyusturucu tohumu miktarini girin:", "Al", "Geri");
			}
			if (PlayerDrugData[playerid][Seeds] + amount > SEED_LIMIT) amount = SEED_LIMIT - PlayerDrugData[playerid][Seeds];
			new price = amount * SEED_PRICE;
			if (price > PlayerData[playerid][pCash]) return ShowPlayerDialog(playerid, DIALOG_DRUG_DEALER_BUY_SEEDS, DIALOG_STYLE_INPUT, "Uyusturucu Tohumu Al", "{E74C3C}Yeterli paraniz yok.\n\n{FFFFFF}Lütfen almak istediginiz uyusturucu tohumu miktarini girin:", "Al", "Geri");
            PlayerDrugData[playerid][Seeds] += amount;
            ParaVer(playerid, -price);
			MesajGonder(playerid, "%s ödeyerek %d uyusturucu tohumu satin aldiniz. (/utohum)", FormatNumber(price), amount);
            /*new string[96];
            format(string, sizeof(string), "DRUG DEALER: {FFFFFF}Bought %s seeds for {2ECC71}%s.", formatInt(amount, .iCurrencyChar = '\0'), formatInt(price));
            SendClientMessage(playerid, 0x3498DBFF, string);*/
			return 1;
	    }
	    ////////////////////////////////////////////////////////////////
	    case DIALOG_DRUG_DEALER_BUY_DRUGS:
	    {
	        if (!response) return ShowDealerMenu(playerid);
	        if (isnull(inputtext)) return ShowPlayerDialog(playerid, DIALOG_DRUG_DEALER_BUY_DRUGS, DIALOG_STYLE_INPUT, "Uyusturucu Satin Al", "Lütfen satin almak istediginiz uyusturucu miktarini girin:", "Al", "Geri");
			new amount = strval(inputtext), id = PlayerDrugData[playerid][DealerID];
			if (!(0 < amount <= CARRY_LIMIT))
			{
			    HataMesajGonder(playerid, "En az 1, en fazla %d uyusturucu tasiyabilirsiniz.", CARRY_LIMIT);
			    return ShowPlayerDialog(playerid, DIALOG_DRUG_DEALER_BUY_DRUGS, DIALOG_STYLE_INPUT, "Uyusturucu Satin Al", "Lütfen satin almak istediginiz uyusturucu miktarini girin:", "Al", "Geri");
			}
			if (amount > DealerData[id][dealerDrugs])
			{
			    HataMesajGonder(playerid, "Uyusturucu saticisinin o kadar uyusturucusu yok.");
			    return ShowDealerMenu(playerid);
			}

			if (PlayerDrugData[playerid][Drugs] + amount > CARRY_LIMIT) amount = CARRY_LIMIT - PlayerDrugData[playerid][Drugs];
			new price = amount * DRUG_BUY_PRICE;
			if (price > PlayerData[playerid][pCash])
			{
			    HataMesajGonder(playerid, "Yeterli paraniz yok. (%s)", FormatNumber(price));
			    return ShowPlayerDialog(playerid, DIALOG_DRUG_DEALER_BUY_DRUGS, DIALOG_STYLE_INPUT, "Uyusturucu Satin Al", "Lütfen satin almak istediginiz uyusturucu miktarini girin:", "Al", "Geri");
			}
			DealerData[id][dealerDrugs] -= amount;
			PlayerDrugData[playerid][Drugs] += amount;
			PlayerDrugData[playerid][TotalBought] += amount;
			PlayerDrugData[playerid][TotalBoughtPrice] += price;
            ParaVer(playerid, -price);
			MesajGonder(playerid, "%s ödeyerek %d gram uyusturucu satin aldiniz.", FormatNumber(price), amount);

			UyusturucuSaticisi_Guncelle(id);
			return 1;
	    }
	    ////////////////////////////////////////////////////////////////
	    case DIALOG_DRUG_DEALER_SELL:
	    {
	        if (!response) return ShowDealerMenu(playerid);
	        if (isnull(inputtext)) return ShowPlayerDialog(playerid, DIALOG_DRUG_DEALER_SELL, DIALOG_STYLE_INPUT, "Uyusturucu Sat", "Lütfen satmak istediginiz uyusturucu miktarini girin:", "Sat", "Geri");
            new amount = strval(inputtext), id = PlayerDrugData[playerid][DealerID];
			if (!(0 < amount <= CARRY_LIMIT))
			{
			    HataMesajGonder(playerid, "En az 1, en fazla %d girebilirsiniz.", CARRY_LIMIT);
			    return ShowPlayerDialog(playerid, DIALOG_DRUG_DEALER_SELL, DIALOG_STYLE_INPUT, "Uyusturucu Sat", "Lütfen satmak istediginiz uyusturucu miktarini girin:", "Sat", "Geri");
			}
			if (amount > PlayerDrugData[playerid][Drugs])
			{
			    HataMesajGonder(playerid, "O kadar uyusturucunuz yok.");
			    return ShowPlayerDialog(playerid, DIALOG_DRUG_DEALER_SELL, DIALOG_STYLE_INPUT, "Uyusturucu Sat", "Lütfen satmak istediginiz uyusturucu miktarini girin:", "Sat", "Geri");
			}
			new price = amount * DRUG_SELL_PRICE;
			DealerData[id][dealerDrugs] += amount;
			PlayerDrugData[playerid][Drugs] -= amount;
			PlayerDrugData[playerid][TotalSold] += amount;
			PlayerDrugData[playerid][TotalSoldPrice] += price;
            ParaVer(playerid, price);
			MesajGonder(playerid, "%s miktar para karsiliginda %d gram uyusturucu sattiniz.", FormatNumber(price), amount);
            UyusturucuSaticisi_Guncelle(id);
			return 1;
		}
	    ////////////////////////////////////////////////////////////////
	    case DIALOG_DRUG_OFFER:
	    {
	        if (!response)
			{
			    SunucuMesaji(PlayerDrugData[playerid][DrugsOfferedBy], "%s adli kisi uyusturucu satma isteginizi kabul etmedi.", ReturnName(playerid, 0));

                PlayerDrugData[playerid][DrugsOfferedBy] = INVALID_PLAYER_ID;
				return 1;
			}

	        new id = PlayerDrugData[playerid][DrugsOfferedBy], offeredp = PlayerDrugData[playerid][DrugsOfferedPrice], amount = PlayerDrugData[playerid][DrugsOfferedGram];
	        PlayerDrugData[playerid][DrugsOfferedBy] = INVALID_PLAYER_ID;
	        if (!IsPlayerConnected(id)) return HataMesajGonder(playerid, "Kisi oyundan çikmis.");
	        if (!IsPlayerNearPlayer(playerid, id, 5.0)) return HataMesajGonder(playerid, "Kisiye yeterince yakin degilsiniz.");
			//if (!(0 < amount <= CARRY_LIMIT)) return HataMesajGonder(playerid, "En fazla %d uyusturucu tasiyabilirsiniz.");
 	 	 	if (amount > PlayerDrugData[id][Drugs]) return HataMesajGonder(playerid, "Kisinin o kadar uyusturucusu yok.");
 	 	 	if (PlayerDrugData[playerid][Drugs] + amount > CARRY_LIMIT) amount = CARRY_LIMIT - PlayerDrugData[playerid][Drugs];
			new price = offeredp;
			if (price > PlayerData[playerid][pCash]) return HataMesajGonder(playerid, "Yeterli paraniz yok. (%s)", FormatNumber(price));
			PlayerDrugData[playerid][Drugs] += amount;
			PlayerDrugData[id][Drugs] -= amount;
            ParaVer(playerid, -price);
            ParaVer(id, price);
			MesajGonder(id, "%s adli kisiye %s miktar para karsiliginda %d gram uyusturucu sattiniz.", ReturnName(playerid, 0), FormatNumber(price), amount);
			MesajGonder(playerid, "%s adli kisiye %s ödeyerek %d gram uyusturucu satin aldiniz.", ReturnName(id, 0), FormatNumber(price), amount);
            /*new string[128];
            format(string, sizeof(string), "DRUGS: {FFFFFF}Sold %s grams of drugs to %s(%d) for {2ECC71}%s.", formatInt(amount, .iCurrencyChar = '\0'), ReturnName(playerid), playerid, formatInt(price));
            SendClientMessage(id, 0x3498DBFF, string);

            format(string, sizeof(string), "DRUGS: {FFFFFF}Bought %s grams of drugs from %s(%d) for {2ECC71}%s.", formatInt(amount, .iCurrencyChar = '\0'), Player_GetName(id), id, formatInt(price));
            SendClientMessage(playerid, 0x3498DBFF, string);*/
			return 1;
		}
	    case 1:
	    {
	        if (!response) return Kick(playerid);
	        if (response)
	        {
	            if (listitem == 0 || listitem == 1)
	            {
	                SetPVarInt(playerid, "hata",1);
	                ShowPlayerDialog(playerid,2,DIALOG_STYLE_LIST, "{38c5f7}Refuse RP nedir?", "{AA3333}Rolu kabul etmemek\n{AA3333}Rolu kabul etmek\n{AA3333}Rolu tekrarlamak", "Cevapla", "Çikis");
				}
				else
				{
				    ShowPlayerDialog(playerid,2,DIALOG_STYLE_LIST, "{38c5f7}Refuse RP nedir?", "{AA3333}Rolu kabul etmemek\n{AA3333}Rolu kabul etmek\n{AA3333}Rolu tekrarlamak", "Cevapla", "Çikis");
				}
			}
	    }
	    case 2:
	    {
	        if (!response) return Kick(playerid);
	        if (response)
	        {
	            if (listitem == 1 || listitem == 2)
	            {
	                SetPVarInt(playerid, "hata",1);
	                ShowPlayerDialog(playerid,3,DIALOG_STYLE_LIST, "{38c5f7}Powergaming nedir?", "{AA3333}Gerçek hayatta yapabilecegin seyleri oyunda yapmamak\n{AA3333}Gerçek hayatta yapabilecegin seyleri oyunda yapmak\n{AA3333}Gerçek hayatta yapamayacagin seyleri oyunda yapmak", "Cevapla", "Çikis");
	            }
	            else
	            {
	                ShowPlayerDialog(playerid,3,DIALOG_STYLE_LIST, "{38c5f7}Powergaming nedir?", "{AA3333}Gerçek hayatta yapabilecegin seyleri oyunda yapmamak\n{AA3333}Gerçek hayatta yapabilecegin seyleri oyunda yapmak\n{AA3333}Gerçek hayatta yapamayacagin seyleri oyunda yapmak", "Cevapla", "Çikis");
	            }
	        }
		}
		case 3:
		{
		    if (!response) return Kick(playerid);
		    if (response)
		    {
		        if (listitem == 0 || listitem == 1)
		        {
		            SetPVarInt(playerid, "hata",1);
		            ShowPlayerDialog(playerid,4,DIALOG_STYLE_LIST, "{38c5f7}Non-RP nedir?", "{AA3333}Roleplay kurallarina uymak\n{AA3333}Roleplay kurallarina uymamak\n{AA3333}Role girmemek", "Cevapla", "Çikis");
		        }
		        else
		        {
		            ShowPlayerDialog(playerid,4,DIALOG_STYLE_LIST, "{38c5f7}Non-RP nedir?", "{AA3333}Roleplay kurallarina uymak\n{AA3333}Roleplay kurallarina uymamak\n{AA3333}Role girmemek", "Cevapla", "Çikis");
		        }
			}
		}
		case 4:
		{
		    if (!response) return Kick(playerid);
		    if (response)
		    {
		        if (listitem == 0 || listitem == 2)
		        {
		            SetPVarInt(playerid, "hata",1);
		            ShowPlayerDialog(playerid,5,DIALOG_STYLE_LIST, "{38c5f7}Mix Nedir?", "{AA3333}OOC bilgiyi IC'ye yansitmak\n{AA3333}IC bilgiyi OOC'ye yansitmak\n{AA3333}OOC bilgiyi baskasina söylemek", "Cevapla", "Çikis");
		        }
		        else
		        {
		            ShowPlayerDialog(playerid,5,DIALOG_STYLE_LIST, "{38c5f7}Mix Nedir?", "{AA3333}OOC ve IC karistirmak\n{AA3333}Yasakli rol yapmak\n{AA3333}OOC bilgiyi baskasina söylemek", "Cevapla", "Çikis");
				}
			}
		}
		case 5:
		{
		    if (!response) return Kick(playerid);
		    if (response)
		    {
		        if (listitem == 1 || listitem == 2)
		        {
		            HataMesajGonder(playerid, "Maalesef sorulara yanlis cevap verdiniz. Lütfen tekrar deneyiniz.");
					DeletePVar(playerid, "hata");
					Kick(playerid);
		        }
		        else
		        {
		            if (GetPVarInt(playerid, "hata") >= 1)
		            {
		                HataMesajGonder(playerid, "Maalesef sorulara yanlýþ cevap verdiniz. Lütfen tekrar deneyiniz.");
						DeletePVar(playerid, "hata");
						Kick(playerid);
					}
					else
					{
					    MesajGonder(playerid, "Tüm sorulara doðru cevap verdiniz, devam edebilirsiniz.");
						DeletePVar(playerid, "hata");
						new string[280], baslik[64];
						format(baslik,sizeof(baslik), "{C3C3C3}Kayýt %s",ReturnName(playerid,1));
						format(string,sizeof(string), "{FFFFFF}Los Angeles'a hoþ geldin, {898989}%s.{FFFFFF}\n\nAramýzda yer almak için lütfen kendine þifre belirle!",ReturnName(playerid,1),ReturnName(playerid,1));
						ShowPlayerDialog(playerid,6,DIALOG_STYLE_INPUT,baslik,string, "Onayla", "Ýptal");
					}
		        }
		    }
		}
		case 6:
		{
		    if (!response) return Kick(playerid);
		    if (response)
		    {
		        new baslik[280];
		        new string[280];
		        if (strlen(inputtext) < 6 || strlen(inputtext) > 30)
		        {
		            HataMesajGonder(playerid, "Þifreniz 6 ile 30 karakter arasýnda olmalýdýr.");
         			format(string,sizeof(string), "{FFFFFF}Los Angeles'a hosgeldin, {C3C3C3}%s.{FFFFFF}\n\nAramýzda yer almak için lütfen kendine þifre belirle!",ReturnName(playerid,1),ReturnName(playerid,1));
         			format(baslik,sizeof(baslik), "{C3C3C3}Kayýt %s",ReturnName(playerid,1));
					ShowPlayerDialog(playerid,6,DIALOG_STYLE_INPUT, baslik,string, "Onayla", "Iptal");
					return 1;
				}
				if (TurkceKarakter(inputtext))
				{
				    HataMesajGonder(playerid, "Þifreniz Türkçe karakter içeremez.");
				    format(string,sizeof(string), "{FFFFFF}Los Angeles'a hoþ geldin, {C3C3C3}%s.{FFFFFF}\n\nAramýzda yer almak için lütfen kendine þifre belirle!",ReturnName(playerid,1),ReturnName(playerid,1));
                    format(baslik,sizeof(baslik), "{C3C3C3}Kayýt %s",ReturnName(playerid,1));
					ShowPlayerDialog(playerid,6,DIALOG_STYLE_INPUT, baslik,string, "Onayla", "Iptal");
					return 1;
				}
				if (OzelKarakter(inputtext))
				{
				    HataMesajGonder(playerid, "Þifreniz Özel karakter içeremez.");
				    format(string,sizeof(string), "{FFFFFF}Los Angeles'a hoþ geldin, {C3C3C3}%s.{FFFFFF}\n\nAramýzda yer almak için lütfen kendine þifre belirle!",ReturnName(playerid,1),ReturnName(playerid,1));
					format(baslik,sizeof(baslik), "{C3C3C3}Kayýt - %s",ReturnName(playerid,1));
					ShowPlayerDialog(playerid,6,DIALOG_STYLE_INPUT, baslik,string, "Onayla", "Iptal");
					return 1;
				}
				SetPVarString(playerid, "Sifre",inputtext);
				ShowPlayerDialog(playerid,7,DIALOG_STYLE_INPUT, "{C3C3C3}Karakter Oluþturma - Yas", "Lütfen karakterinizin yaþýný girin.", "Devam", "Iptal");
		    }
		}
		case 7:
		{
		    if (!response) return Kick(playerid);
		    if (response)
		    {
      			PlayerData[playerid][pYas] = strval(inputtext);
  			    for (new i = 0; i < 100; i ++) {
			        SendClientMessage(playerid, -1, "");
			    }
		        if (!IsNumeric(inputtext) || strval(inputtext) < 18 || strval(inputtext) > 80)
		        {
		            ShowPlayerDialog(playerid,7,DIALOG_STYLE_INPUT, "{C3C3C3}Karakter Oluþturma - Yas", "Lütfen karakterinizin yasini girin. Yasiniz 18 ile 80 yas arasinda olmalidir.", "Devam", "Iptal");
		            return 1;
		        }
		        ShowPlayerDialog(playerid,8,DIALOG_STYLE_MSGBOX, "{C3C3C3}Karakter Oluþturma - Cinsiyet", "Cinsiyet Seçin (erkek / bayan)", "Erkek", "Bayan");
		    }
		}
		case 8:
		{
		    new astr[670];
		    new str[1200];
		    if (!response)
		    {
		    	for (new i = 0; i < 100; i ++) {
			        SendClientMessage(playerid, -1, "");
			    }
      			PlayerData[playerid][pCinsiyet] = 2;
        		format(astr, sizeof(astr), "Karakter Oluþturma: {ffffff}Cinsiyetinizi bayan olarak ayarladiniz.");
				SendClientMessage(playerid, COLOR_KOlustur, astr);

		        for (new i; i<sizeof(DogumYeri); i++)
		        {
		            format(str, sizeof(str), "%s{FFFFFF}%s\n", str, DogumYeri[i]);
		        }
		        ShowPlayerDialog(playerid,9,DIALOG_STYLE_LIST, "{C3C3C3}Karakter Oluþturma - Köken",str, "Devam", "Kapat");
		    }
		    if (response)
		    {
		    	for (new i = 0; i < 100; i ++) {
			        SendClientMessage(playerid, -1, "");
			    }
      			PlayerData[playerid][pCinsiyet] = 1;
        		format(astr, sizeof(astr), "Karakter Oluþturma: {ffffff}Cinsiyetinizi erkek olarak ayarladiniz.");
				SendClientMessage(playerid, COLOR_KOlustur, astr);

		        for (new i; i<sizeof(DogumYeri); i++)
		        {
		            format(str, sizeof(str), "%s{FFFFFF}%s\n", str, DogumYeri[i]);
		        }
		        ShowPlayerDialog(playerid,9,DIALOG_STYLE_LIST, "{C3C3C3}Karakter Oluþturma - Köken",str, "Devam", "Kapat");
		    }
		}
  		case 9:
		{
		    if (!response) return Kick(playerid);
		    if (response)
		    {
  			    for (new i = 0; i < 100; i ++) {
			        SendClientMessage(playerid, -1, "");
			    }

		        format(PlayerData[playerid][pDogum], 30, DogumYeri[listitem]);
          		/*new str[400];
        		format(str, sizeof(str), "Karakter Oluþturma: {ffffff}Dogum yerinizi %s olarak ayarladiniz.", PlayerData[playerid][pDogum]);
				SendClientMessage(playerid, COLOR_KOlustur, str);*/
		        ShowPlayerDialog(playerid,10,DIALOG_STYLE_LIST, "{C3C3C3}Karakter Oluþturma - Ten Rengi", "Beyaz\nSiyah", "Devam", "Iptal");
		    }
		}
		case 10:
		{
		    if (!response) return Kick(playerid);
		    if (response)
		    {
		        if (listitem == 0)
		        {
		            new query[400];
		            new pass[30];
//		            new dogum[30];

					GetPVarString(playerid, "Sifre", pass, sizeof pass);
		   //         GetPVarString(playerid, "dogum", dogum, sizeof dogum);

		            format(query, sizeof query,"INSERT INTO `oyuncular` (`Isim`,`Sifre`,`Yas`,`Cinsiyet`,`DogumYeri`,`TenRengi`) VALUES ('%s',md5('%s'),'%d','%d','%s','1')",ReturnName(playerid),pass,PlayerData[playerid][pYas],PlayerData[playerid][pCinsiyet],SQL_ReturnEscaped(PlayerData[playerid][pDogum]));
		            mysql_query(g_SQL,query);

		            PlayerData[playerid][pID] = cache_insert_id();
/*		            PlayerData[playerid][pYas] = GetPVarInt(playerid, "Yas");
		            PlayerData[playerid][pCinsiyet] = GetPVarInt(playerid, "Sex");

		            format(PlayerData[playerid][pDogum],30,dogum);*/

		            PlayerData[playerid][pTen] = 1;
       			    for (new i = 0; i < 100; i ++) { SendClientMessage(playerid, -1, ""); }
	          		new str[400];
	        		format(str, sizeof(str), "Karakter Oluþturma: {ffffff}Ten renginizi beyaz olarak ayarladiniz.");
					SendClientMessage(playerid, COLOR_KOlustur, str);
/*					DeletePVar(playerid, "Sifre");
					DeletePVar(playerid, "Yas")<<<<<<
					DeletePVar(playerid, "Sex");
					DeletePVar(playerid, "dogum");*/
					SetPVarInt(playerid, "Kayit",1);

					TextDrawHideForPlayer(playerid, GirisTD);

					PlayerData[playerid][pCash] = 1000;

					SetSpawnInfo(playerid, NO_TEAM, (PlayerData[playerid][pCinsiyet] == 1) ? (101) : (211), 1685.6610, -2330.6836, 13.5469, 0.0, 0, 0, 0, 0, 0, 0);

					SpawnPlayer(playerid);
		        }
		        if (listitem == 1)
		        {
		            new query[400];
		            new pass[30];

					GetPVarString(playerid, "Sifre", pass, sizeof pass);

		            format(query,sizeof(query),"INSERT INTO `oyuncular` (`Isim`,`Sifre`,`Yas`,`Cinsiyet`,`DogumYeri`,`TenRengi`) VALUES ('%s',md5('%s'),'%d','%d','%s','2')",ReturnName(playerid),pass,PlayerData[playerid][pYas],PlayerData[playerid][pCinsiyet],SQL_ReturnEscaped(PlayerData[playerid][pDogum]));
		            mysql_query(g_SQL,query);

					PlayerData[playerid][pID] = cache_insert_id();

		            PlayerData[playerid][pTen] = 2;
       			    for (new i = 0; i < 100; i ++) { SendClientMessage(playerid, -1, ""); }
					SetPVarInt(playerid, "Kayit", 1);

					TextDrawHideForPlayer(playerid, GirisTD);

					PlayerData[playerid][pCash] = 1000;

					SetSpawnInfo(playerid, NO_TEAM, (PlayerData[playerid][pCinsiyet] == 1) ? (184) : (12), 1685.6610, -2330.6836, 13.5469, 0.0, 0, 0, 0, 0, 0, 0);

					SpawnPlayer(playerid);
		        }
		    }
		}
		case 22:
		{
		    if (!response) return DeletePVar(playerid, "binaid");
		    if (response)
		    {
		        new i = GetPVarInt(playerid, "binaid");
		        if (i == -1) return 1;
		        if (isnull(inputtext)) return ShowPlayerDialog(playerid,22,DIALOG_STYLE_INPUT, "{FFFFFF}Bina sifre", "Bu bina için sifre belirlenmis, lütfen sifreyi girin:", "Devam", "Kapat");
		        if (!strcmp(EntranceData[i][entrancePass], inputtext, true))
		        {
		            SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s kapiyi açar ve '%s' adli binaya girer.", ReturnName(playerid, 0),EntranceData[i][entranceName]);
		            SetPlayerPos(playerid, EntranceData[i][entranceInt][0], EntranceData[i][entranceInt][1], EntranceData[i][entranceInt][2]);
					SetPlayerFacingAngle(playerid, EntranceData[i][entranceInt][3]);
					SetPlayerInterior(playerid, EntranceData[i][entranceInterior]);
	            	SetPlayerVirtualWorld(playerid, EntranceData[i][entranceInteriorVw]);
					SetCameraBehindPlayer(playerid);
					ObjelerYukleniyor(playerid);
					DeletePVar(playerid, "binaid");
		        }
		        else
		        {
		            HataMesajGonder(playerid, "Hatali sifre girdiniz.");
		            ShowPlayerDialog(playerid,22,DIALOG_STYLE_INPUT, "{FFFFFF}Bina sifre", "Bu bina için sifre belirlenmis, lütfen sifreyi giriniz.", "Devam", "Kapat");
		        }
		    }
		}
		case 23:
		{
		    if (response)
		    {
		        DeletePVar(playerid, "ehliyethata");
		        SetPVarInt(playerid, "ehliyetsinavinda",1);
				ParaVer(playerid,-200);
				ShowPlayerDialog(playerid,24,DIALOG_STYLE_LIST, "{38c5f7}Kazada ölüm riskini azaltmak için ne kullanilmalidir?", "{FFFFFF}El Freni\n{FFFFFF}Emniyet Kemeri\n{FFFFFF}Fren", "Devam", "");
		    }
		}
		case 24:
		{
		    if (!response) return DeletePVar(playerid, "ehliyetsinavinda");
		    if (response)
		    {
		        if (listitem == 0 || listitem == 2)
		        {
		            SetPVarInt(playerid, "ehliyethata",1);
		            ShowPlayerDialog(playerid,25,DIALOG_STYLE_LIST, "{38c5f7}Hangi seritten gitmeliyiz?", "{FFFFFF}Sag\n{FFFFFF}Sol\n{FFFFFF}Farketmez", "Devam", "");
		        }
		        else
		        {
		            ShowPlayerDialog(playerid,25,DIALOG_STYLE_LIST, "{38c5f7}Hangi seritten gitmeliyiz?", "{FFFFFF}Sag\n{FFFFFF}Sol\n{FFFFFF}Farketmez", "Devam", "");
		        }
		    }
		}
		case 25:
		{
		    if (!response) return DeletePVar(playerid, "ehliyetsinavinda"),DeletePVar(playerid, "ehliyethata");
		    if (response)
		    {
		        if (listitem == 1 || listitem == 2)
		        {
		            SetPVarInt(playerid, "ehliyethata",1);
		            ShowPlayerDialog(playerid,26,DIALOG_STYLE_LIST, "{38c5f7}Polis sizden durmanizi istiyor, ne yaparsiniz?", "{FFFFFF}Araci sürmeye devam ederim\n{FFFFFF}Araci saga çekip motoru kapatirim\n{FFFFFF}Araçtan inip kaçmaya baslarim", "Devam", "");
		        }
		        ShowPlayerDialog(playerid,26,DIALOG_STYLE_LIST, "{38c5f7}Polis sizden durmanizi istiyor, ne yaparsiniz?", "{FFFFFF}Araci sürmeye devam ederim\n{FFFFFF}Araci saga çekip motoru kapatirim\n{FFFFFF}Araçtan inip kaçmaya baslarim", "Devam", "");
		    }
		}
		case 26:
		{
		    if (!response) return DeletePVar(playerid, "ehliyetsinavinda"),DeletePVar(playerid, "ehliyethata");
		    if (response)
		    {
				if (listitem == 0 || listitem == 2)
				{
				    SetPVarInt(playerid, "ehliyethata",1);
				    ShowPlayerDialog(playerid,27,DIALOG_STYLE_LIST, "{38c5f7}Bir kisi trafik kurallarina uymuyor, ne yaparsiniz?", "{FFFFFF}Araçtan inip dövmeye baslarim\n{FFFFFF}Araçtan inip bagirmaya baslarim\n{FFFFFF}Umursamam yoluma devam ederim\n{FFFFFF}Polisi arar ve durumu bildiririm", "Devam", "");
				}
				ShowPlayerDialog(playerid,27,DIALOG_STYLE_LIST, "{38c5f7}Bir kisi trafik kurallarina uymuyor, ne yaparsiniz?", "{FFFFFF}Araçtan inip dövmeye baslarim\n{FFFFFF}Araçtan inip bagirmaya baslarim\n{FFFFFF}Umursamam yoluma devam ederim\n{FFFFFF}Polisi arar ve durumu bildiririm", "Devam", "");
			}
		}
		case 27:
		{
		    if (!response) return DeletePVar(playerid, "ehliyetsinavinda"),DeletePVar(playerid, "ehliyethata");
		    if (response)
		    {
		        if (listitem == 0 || listitem == 1 || listitem == 2)
		        {
		            SetPVarInt(playerid, "ehliyethata",1);
		            ShowPlayerDialog(playerid,28,DIALOG_STYLE_LIST, "{38c5f7}Hangi araç daha önceliklidir?", "{FFFFFF}Ambulans\n{FFFFFF}Polis\n{FFFFFF}Taksi\n{FFFFFF}Otobüs", "Devam", "");
		        }
		        ShowPlayerDialog(playerid,28,DIALOG_STYLE_LIST, "{38c5f7}Hangi araç daha önceliklidir?", "{FFFFFF}Ambulans\n{FFFFFF}Polis\n{FFFFFF}Taksi\n{FFFFFF}Otobüs", "Devam", "");
			}
		}
		case 28:
		{
		    if (!response) return DeletePVar(playerid, "ehliyetsinavinda"),DeletePVar(playerid, "ehliyethata");
		    if (response)
		    {
		        if (listitem == 1 || listitem == 2 || listitem == 3)
		        {
		            SetPVarInt(playerid, "ehliyethata",1);
		            ShowPlayerDialog(playerid,29,DIALOG_STYLE_LIST, "{38c5f7}sehir içi maksimum hiz kaç", "{FFFFFF}60 km/h\n{FFFFFF}70 km/h\n{FFFFFF}80 km/h", "Devam", "");
		        }
		        ShowPlayerDialog(playerid,29,DIALOG_STYLE_LIST, "{38c5f7}sehir içi maksimum hiz kaç", "{FFFFFF}60 km/h\n{FFFFFF}70 km/h\n{FFFFFF}80 km/h", "Devam", "");
			}
		}
		case 29:
		{
		    if (!response) return DeletePVar(playerid, "ehliyetsinavinda"),DeletePVar(playerid, "ehliyethata");
		    if (response)
		    {
		        if (listitem == 0 || listitem == 2)
		        {
		            DeletePVar(playerid, "ehliyetsinavinda");
		            DeletePVar(playerid, "ehliyethata");
		            HataMesajGonder(playerid, "Sorulara yanlis cevap verdiniz, tekrar deneyin.");
		        }
		        else
		        {
		            if (GetPVarInt(playerid, "ehliyethata") >= 1)
		            {
		                DeletePVar(playerid, "ehliyetsinavinda");
		            	DeletePVar(playerid, "ehliyethata");
		            	HataMesajGonder(playerid, "Sorulara yanlis cevap verdiniz, tekrar deneyin.");
		            }
		            else
		            {
		                DeletePVar(playerid, "ehliyetsinavinda");
		            	DeletePVar(playerid, "ehliyethata");
		            	SetPVarInt(playerid, "ehliyetaliyor",1);
		            	MesajGonder(playerid, "Tüm sorulara dogru cevap verdiniz, disardaki araçlardan birine binin.");
		            }
				}
			}
		}
		case 30:
		{
		    if (response)
		    {
		        new id = Gate_Nearest(playerid);
				if (id == -1) return 1;
				if (isnull(inputtext)) return ShowPlayerDialog(playerid,30,DIALOG_STYLE_INPUT, "{FFFFFF}Gate sifre", "Bu gate için sifre belirlenmis, lütfen sifreyi giriniz:", "Aç", "Kapat");
				if (strcmp(inputtext, GateData[id][gatePass]) != 0) return ShowPlayerDialog(playerid,30,DIALOG_STYLE_INPUT, "{FFFFFF}Gate sifre", "{FF0000}HATA: Hatali sifre girdiniz.\nBu gate için sifre belirlenmis, lütfen sifreyi giriniz:", "Aç", "Kapat");
				Gate_Operate(id);
		    }
		}
		case 31:
		{
		    new id = -1;
		    if (response)
		    {
		        if (listitem == 0)
		        {
		            if (!IsPlayerInAnyVehicle(playerid) && (id = (House_Inside(playerid) == -1) ? (House_Nearest(playerid)) : (House_Inside(playerid))) != -1)
		            {
		                if (HouseInfo[id][evKilit] == 1)
		                {
		                    HouseInfo[id][evKilit] = 0;
		                    Ev_Kaydet(id);
		                    Ev_Yenile(id);
		                    MesajGonder(playerid, "Evinizin kilidi açýldý.");
		                    cmd_ev(playerid);
		                }
		                else
		                {
		                    HouseInfo[id][evKilit] = 1;
		                    Ev_Kaydet(id);
		                    Ev_Yenile(id);
		                    MesajGonder(playerid, "Eviniz kilitlendi.");
		                    cmd_ev(playerid);
		                }
		            }

		        }
		        if (listitem == 1)
		        {
		            ShowPlayerDialog(playerid,68, DIALOG_STYLE_INPUT, "Ev Isim", "{FFFFFF}Lütfen eviniz için yeni bir isim girin:", "Degistir", "Geri");
		        }
		        if (listitem == 2)
		        {
		            if ((id = House_Inside(playerid)) == -1) return HataMesajGonder(playerid, "Evinizin içerisinde olmalisiniz.");
		            if (HouseInfo[id][evSahip] != PlayerData[playerid][pID]) return HataMesajGonder(playerid, "Evinizin içerisinde olmalisiniz.");
		            new string[500],string2[250];
		            strcat(string, "islem\tDurum\n");
		            format(string2,sizeof(string2), "Para Al\t{2ECC71}%s\n",FormatNumber(HouseInfo[id][evCash]));
		            strcat(string,string2);
		            format(string2,sizeof(string2), "Para Koy\t{2ECC71}%s üzerinde\n\n\n",FormatNumber(PlayerData[playerid][pCash]));
		            strcat(string,string2);

		            format(string2,sizeof(string2), "Uyusturucu Koy\t{2ECC71}%d gram üzerinde\n",PlayerDrugData[playerid][Drugs]);
		            strcat(string,string2);
		            format(string2,sizeof(string2), "Uyusturucu Al\t{2ECC71}%d gram evde\n\n\n",HouseInfo[id][evUyusturucu]);
		            strcat(string,string2);

		            format(string2,sizeof(string2), "Silahlar\t{2ECC71}%d/10 adet\n",Ev_GetWeaponCount(id));
		            strcat(string,string2);
	             	ShowPlayerDialog(playerid,33,DIALOG_STYLE_TABLIST_HEADERS, "Ev Kasasi",string, "Seç", "Geri");
		        }
		        if (listitem == 3)
		        {
		            new string[500],string2[150];
		            if ((id = House_Inside(playerid)) == -1) return HataMesajGonder(playerid, "Evinizin içerisinde olmalisiniz.");
		            if (HouseInfo[id][evSahip] != PlayerData[playerid][pID]) return HataMesajGonder(playerid, "Evinizin içerisinde olmalisiniz.");
		            new slotlar[5][20];
		            if (HouseInfo[id][evKiyafetler][0] > 0) format(slotlar[0],20, "{ADFF2F}ID: %d",HouseInfo[id][evKiyafetler][0]);
		            else slotlar[0] = "{FF0000}Bos";
		            if (HouseInfo[id][evKiyafetler][1] > 0) format(slotlar[1],20, "{ADFF2F}ID: %d",HouseInfo[id][evKiyafetler][1]);
		            else slotlar[1] = "{FF0000}Bos";
		            if (HouseInfo[id][evKiyafetler][2] > 0) format(slotlar[2],20, "{ADFF2F}ID: %d",HouseInfo[id][evKiyafetler][2]);
		            else slotlar[2] = "{FF0000}Bos";
		            if (HouseInfo[id][evKiyafetler][3] > 0) format(slotlar[3],20, "{ADFF2F}ID: %d",HouseInfo[id][evKiyafetler][3]);
		            else slotlar[3] = "{FF0000}Bos";
		            if (HouseInfo[id][evKiyafetler][4] > 0) format(slotlar[4],20, "{ADFF2F}ID: %d",HouseInfo[id][evKiyafetler][4]);
		            else slotlar[4] = "{FF0000}Bos";
		            strcat(string, "Slot\tDurum\n");
		            format(string2,sizeof(string2), "Slot 1\t%s\n",slotlar[0]);
		            strcat(string,string2);
		            format(string2,sizeof(string2), "Slot 2\t%s\n",slotlar[1]);
		            strcat(string,string2);
		            format(string2,sizeof(string2), "Slot 3\t%s\n",slotlar[2]);
		            strcat(string,string2);
		            format(string2,sizeof(string2), "Slot 4\t%s\n",slotlar[3]);
		            strcat(string,string2);
		            format(string2,sizeof(string2), "Slot 5\t%s\n",slotlar[4]);
		            strcat(string,string2);
		            ShowPlayerDialog(playerid,34,DIALOG_STYLE_TABLIST_HEADERS, "Ev Gardolap",string, "Seç", "Kapat");
		        }
		        if (listitem == 4) // Ev Dekorasyon
		        {
                    if ((id = House_Inside(playerid)) == -1) return HataMesajGonder(playerid, "Evinizin içerisinde olmalisiniz.");
		            if (HouseInfo[id][evSahip] != PlayerData[playerid][pID]) return HataMesajGonder(playerid, "Evinizin içerisinde olmalisiniz.");
		            MobilyaMenu(playerid, id);

		        }
		        if (listitem == 5) // Evi Kiralik Yap
		        {
                    if ((id = House_Inside(playerid)) == -1) return HataMesajGonder(playerid, "Evinizin içerisinde olmalisiniz.");
		            if (HouseInfo[id][evSahip] != PlayerData[playerid][pID]) return HataMesajGonder(playerid, "Evinizin içerisinde olmalisiniz.");
		            if (HouseInfo[id][evKiralik] == 0)
		            {
		                HouseInfo[id][evKiralik] = 1;
		                HouseInfo[id][evKiralayan] = -1;
	                 	HouseInfo[id][evSatilik] = 0;
		                Ev_Kaydet(id);
		                Ev_Yenile(id);
		                cmd_ev(playerid);
		            }
		            else
		            {
		                HouseInfo[id][evKiralik] = 0;
	                 	HouseInfo[id][evKiralayan] = -1;
	                 	HouseInfo[id][evSatilik] = 0;
	                 	HouseInfo[id][evKiraUcret] = 0;
	                 	Ev_Kaydet(id);
		                Ev_Yenile(id);
		                cmd_ev(playerid);
		            }
		        }
		        if (listitem == 6) // Ev Kira Ücreti
		        {
		            if ((id = House_Inside(playerid)) == -1) return HataMesajGonder(playerid, "Evinizin içerisinde olmalisiniz.");
		            if (HouseInfo[id][evSahip] != PlayerData[playerid][pID]) return HataMesajGonder(playerid, "Evinizin içerisinde olmalisiniz.");
		            if (HouseInfo[id][evKiralik] == 0)
		            {
		                HataMesajGonder(playerid, "Eviniz kiralik degil.");
		                cmd_ev(playerid);
		                return 1;
		            }
		            ShowPlayerDialog(playerid,35,DIALOG_STYLE_INPUT, "Ev Kira Ücreti", "Lütfen bu ev için kira ücreti belirleyin. Kira Ücreti $20 ile $1000 arasinda olmalidir.\nEvi kiralayan kisi her maas aldiginida kirayi ödemek zorundadir. Kirayi ödeyemezse kiraciliktan otomatik çikarilir.", "Ayarla", "Geri");
		        }
		        if (listitem == 7) // Evi Satiliga Çikar
		        {
		            if ((id = House_Inside(playerid)) == -1) return HataMesajGonder(playerid, "Evinizin içerisinde olmalisiniz.");
		            if (HouseInfo[id][evSahip] != PlayerData[playerid][pID]) return HataMesajGonder(playerid, "Evinizin içerisinde olmalisiniz.");
		            if (HouseInfo[id][evKiralik] == 1)
		            {
		                HataMesajGonder(playerid, "Eviniz kiralik oldugu için satiliga çikarilamaz.");
		                cmd_ev(playerid);
		                return 1;
		            }
					new str[128];
					format(str,sizeof(str), "Satiliga Çikar\nSisteme Sat{2ECC71}(%s){FFFFFF}\nEvi Satmaktan Vazgeç", FormatNumber(HouseInfo[id][evKendiFiyati]/2));
					ShowPlayerDialog(playerid,36,DIALOG_STYLE_LIST, "Evi Satiliga Çikar",str, "Seç", "Geri");
		        }
		        if (listitem == 8) // Kiralayani Evden At
		        {
		            if ((id = House_Inside(playerid)) == -1) return HataMesajGonder(playerid, "Evinizin içerisinde olmalisiniz.");
		            if (HouseInfo[id][evSahip] != PlayerData[playerid][pID]) return HataMesajGonder(playerid, "Evinizin içerisinde olmalisiniz.");
		            if (HouseInfo[id][evKiralayan] == -1) return HataMesajGonder(playerid, "Evinizi kimse kiralamamis.");
		            HouseInfo[id][evKiralayan] = -1;
		            Ev_Kaydet(id);
		            Ev_Yenile(id);
		            MesajGonder(playerid, "Kiraci evden atildi.");
		            return 1;
		        }
		        if (listitem == 9)
		        {
		            if ((id = House_Inside(playerid)) == -1) return HataMesajGonder(playerid, "Evinizin içerisinde olmalisiniz.");
		            if (HouseInfo[id][evSahip] != PlayerData[playerid][pID]) return HataMesajGonder(playerid, "Evinizin içerisinde olmalisiniz.");
		            if (Ev_GetKeyCount(id) < 1) return HataMesajGonder(playerid, "Bu evin anahtari kimseye verilmemis, /anahtarver ile verebilirsiniz.");
		            Ev_KeyDialog(playerid, id);
		        }
		    }
		}
		case 32:
		{
		    if (response)
		    {
		        new kslot = GetPVarInt(playerid, "KiyafetSlot");
		        if (listitem == 0)
		        {
		            if (HouseInfo[GetPVarInt(playerid, "KiyafetEvID")][evKiyafetler][kslot] < 1) return 1;
		            new simdiskin = PlayerData[playerid][pSkin];
		            new slotskin = HouseInfo[GetPVarInt(playerid, "KiyafetEvID")][evKiyafetler][kslot];
		            PlayerData[playerid][pSkin] = slotskin;
		            SetPlayerSkin(playerid,slotskin);
		            HouseInfo[GetPVarInt(playerid, "KiyafetEvID")][evKiyafetler][kslot] = simdiskin;
		            Ev_Kaydet(GetPVarInt(playerid, "KiyafetEvID"));
		        }
		        if (listitem == 1)
		        {
		            if (HouseInfo[GetPVarInt(playerid, "KiyafetEvID")][evKiyafetler][kslot] < 1) return 1;
		            HouseInfo[GetPVarInt(playerid, "KiyafetEvID")][evKiyafetler][kslot] = 0;
		            MesajGonder(playerid, "Kiyafet silindi.");
		            Ev_Kaydet(GetPVarInt(playerid, "KiyafetEvID"));
		        }
		    }
		}
		case 34:
		{
		    if (response)
		    {
		        new evev = House_Inside(playerid);
		        if (evev == -1) return 1;
		        if (HouseInfo[evev][evKiyafetler][listitem] < 1) return HataMesajGonder(playerid, "Bu slot bos. Bu slota kiyafet eklemek için Kiyafet Magazasindan kiyafet alin.");
		        SetPVarInt(playerid, "KiyafetEvID",evev);
		        SetPVarInt(playerid, "KiyafetSlot",listitem);
		        ShowPlayerDialog(playerid,32,DIALOG_STYLE_LIST, "{FF0000}Ev Gardolap", "Kiyafeti Giy\nKiyafeti Sil", "Seç", "Kapat");
		    }
		}
		case 35:
		{
		    if (!response) return cmd_ev(playerid);
		    if (response)
		    {
      			new houseid = House_Inside(playerid);
		        if (isnull(inputtext)) return ShowPlayerDialog(playerid,35,DIALOG_STYLE_INPUT, "Ev Kira Ücreti", "Lütfen bu ev için kira ücreti belirleyin. Kira Ücreti $20 ile $1000 arasinda olmalidir.\nEvi kiralayan kisi her maas aldiginida kirayi ödemek zorundadir. Kirayi ödeyemezse kiraciliktan otomatik çikarilir.", "Ayarla", "Geri");
		        if (!IsNumeric(inputtext)) return ShowPlayerDialog(playerid,35,DIALOG_STYLE_INPUT, "Ev Kira Ücreti", "Lütfen bu ev için kira ücreti belirleyin. Kira Ücreti $20 ile $1000 arasinda olmalidir.\nEvi kiralayan kisi her maas aldiginida kirayi ödemek zorundadir. Kirayi ödeyemezse kiraciliktan otomatik çikarilir.", "Ayarla", "Geri");
		        if (strval(inputtext) < 20 || strval(inputtext) > 1000) return ShowPlayerDialog(playerid,35,DIALOG_STYLE_INPUT, "Ev Kira Ücreti", "Lütfen bu ev için kira ücreti belirleyin. Kira Ücreti $20 ile $1000 arasinda olmalidir.\nEvi kiralayan kisi her maas aldiginida kirayi ödemek zorundadir. Kirayi ödeyemezse kiraciliktan otomatik çikarilir.", "Ayarla", "Geri");
		        HouseInfo[houseid][evKiraUcret] = strval(inputtext);
		        Ev_Kaydet(houseid);
		        Ev_Yenile(houseid);
		        cmd_ev(playerid);
		        return 1;
		    }
		}
		case 36:
		{
		    if (!response) return cmd_ev(playerid);
		    if (response)
		    {
		        new evid = House_Inside(playerid);
		        if (evid == -1) return 1;
		        if (listitem == 0)
		        {
		            ShowPlayerDialog(playerid,37,DIALOG_STYLE_INPUT, "Satiliga Çikar", "{FFFFFF}Lütfen evinizi satiliga çikarmak istediginiz fiyati girin.", "Satiliga Çikar", "Geri");
		        }
		        if (listitem == 1)
		        {
		            if (HouseInfo[evid][evSatilik] == 1)
		            {
		                HataMesajGonder(playerid, "Ev zaten satilik.");
		                cmd_ev(playerid);
		                return 1;
		            }
		            new str[200];
		            HouseInfo[evid][evFiyat] = HouseInfo[evid][evKendiFiyati];
		            new fiyat = HouseInfo[evid][evFiyat]/2;
		            format(str,sizeof(str), "{FFFFFF}Evi gerçekten {2ECC71}%s {FFFFFF}fiyatina satmak istediginize emin misiniz? Bunun geri dönüsü yoktur.\n{FF0000}Evi satmadan önce mutlaka silahlarinizi, paralarinizi ve uyusturucularinizi alin.",FormatNumber(fiyat));
		            ShowPlayerDialog(playerid,38,DIALOG_STYLE_MSGBOX, "Sisteme Sat",str, "Sat", "Iptal");
		        }
		        if (listitem == 2)
		        {
		            if (HouseInfo[evid][evSatilik] == 0)
		            {
		                HataMesajGonder(playerid, "Eviniz satilik degil.");
		                cmd_ev(playerid);
		                return 1;
		            }
		            HouseInfo[evid][evSatilik]= 0;
		            HouseInfo[evid][evFiyat] = HouseInfo[evid][evKendiFiyati];
		            cmd_ev(playerid);
		        }
		    }
		}
		case 37:
		{
		    if (response)
		    {
		        if (!response) return cmd_ev(playerid);
		        if (response)
		        {
		            new hid = House_Inside(playerid);
		            if (HouseInfo[hid][evKiralik] == 1) return 1;
		            if (isnull(inputtext)) return ShowPlayerDialog(playerid,37,DIALOG_STYLE_INPUT, "Satiliga Çikar", "{FFFFFF}Lütfen evinizi satiliga çikarmak istediginiz fiyati girin.", "Satiliga Çikar", "Geri");
		            if (!IsNumeric(inputtext)) return ShowPlayerDialog(playerid,37,DIALOG_STYLE_INPUT, "Satiliga Çikar", "{FFFFFF}Lütfen evinizi satiliga çikarmak istediginiz fiyati girin.", "Satiliga Çikar", "Geri");
		            if (strval(inputtext) < 1) return ShowPlayerDialog(playerid,37,DIALOG_STYLE_INPUT, "Satiliga Çikar", "{FFFFFF}Lütfen evinizi satiliga çikarmak istediginiz fiyati girin.", "Satiliga Çikar", "Geri");
		            HouseInfo[hid][evSatilik] = 1;
		            HouseInfo[hid][evFiyat] = strval(inputtext);
		            HouseInfo[hid][evKiralik] = 0;
		            HouseInfo[hid][evKiralayan] = -1;
		            HouseInfo[hid][evKiraUcret] = 0;
		            Ev_Kaydet(hid);
		            Ev_Yenile(hid);
		            cmd_ev(playerid);
		            MesajGonder(playerid, "Eviniz satiliga çikarildi.");
		        }
		    }
		}
		case 38:
		{
		    if (!response) return cmd_ev(playerid);
		    if (response)
		    {
		        new ev = House_Inside(playerid);
		        if (ev == -1) return 1;
		        HouseInfo[ev][evSahip] = -1;
		        HouseInfo[ev][evCash] = 0;
		        for (new i; i<10; i++)
		        {
		            if (i < 5)
		            {
		                HouseInfo[ev][evKiyafetler][i] = 0;
		            }
		            HouseInfo[ev][evSilahlar][i] = 0;
	             	HouseInfo[ev][evMermiler][i] = 0;
		        }
		        // Degisti
		        HouseInfo[ev][evKiralik] = 0;
		        HouseInfo[ev][evUyusturucu] = 0;
		        HouseInfo[ev][evKiralayan] = -1;
		        HouseInfo[ev][evKiraUcret] = 0;
		        HouseInfo[ev][evSatilik] = 0;
		        HouseInfo[ev][evKilit] = 1;
		        SetPlayerInterior(playerid,0);
		        SetPlayerPos(playerid,HouseInfo[ev][evPos][0],HouseInfo[ev][evPos][1],HouseInfo[ev][evPos][2]);
		        SetPlayerVirtualWorld(playerid,0);
		        PlayerData[playerid][pHouse] = -1;
		        new fiyat = HouseInfo[ev][evFiyat]/2;
		        ParaVer(playerid,fiyat);
		        MesajGonder(playerid, "Evinizi basariyla {2ECC71}%s {FFFFFF}karsiliginda sattiniz.",FormatNumber(fiyat));
		        Ev_Kaydet(ev);
		        Ev_Yenile(ev);
		        House_RemoveFurniture(ev);
		    }
		}
		case 33:
		{
		    if (!response) return cmd_ev(playerid);
		    if (response)
		    {
		        new evid = House_Inside(playerid);
		        if (evid == -1) return 1;
		        if (HouseInfo[evid][evSahip] != PlayerData[playerid][pID]) return 1;
		        if (listitem == 0)
		        {
		            ShowPlayerDialog(playerid,40,DIALOG_STYLE_INPUT, "Para Al", "Lütfen evinizden almak istediginiz para miktarini girin.", "Al", "Geri");
		        }
		        if (listitem == 1)
		        {
		            ShowPlayerDialog(playerid,41,DIALOG_STYLE_INPUT, "Para Koy", "Lütfen evinize koymak istediginiz para miktarini girin.", "Koy", "Geri");
		        }
		        if (listitem == 2)
		        {
		            if (GetFactionType(playerid) == BIRLIK_LSPD || GetFactionType(playerid) == BIRLIK_LSMD) return HataMesajGonder(playerid, "Bulundugunuz olusum türü bunu yapamaz.");
		            if (PlayerDrugData[playerid][Drugs] < 1) return HataMesajGonder(playerid, "Uyusturucunuz yok.");
		            Dialog_Show(playerid, EvUyusturucuKoy, DIALOG_STYLE_INPUT, "Uyusturucu Koy", "{FFFFFF}Lütfen evinize koymak istediginiz uyusturucu miktarini girin:", "Koy", "Kapat");
		        }
		        if (listitem == 3)
		        {
		            if (GetFactionType(playerid) == BIRLIK_LSPD || GetFactionType(playerid) == BIRLIK_LSMD) return HataMesajGonder(playerid, "Bulundugunuz olusum türü bunu yapamaz.");
		            if (HouseInfo[evid][evUyusturucu] < 1) return HataMesajGonder(playerid, "Evinizin kasasinda uyusturucu yok.");
		            Dialog_Show(playerid, EvUyusturucuAl, DIALOG_STYLE_INPUT, "Uyusturucu Al", "{FFFFFF}Lütfen evinizin kasasindan almak istediginiz uyusturucu miktarini girin:", "Al", "Kapat");
		        }
		        if (listitem == 4)
		        {
		            if (GetFactionType(playerid) == BIRLIK_LSPD || GetFactionType(playerid) == BIRLIK_LSMD) return HataMesajGonder(playerid, "Bulundugunuz olusum türü bunu yapamaz.");
		            EvSilahlar(playerid, evid);
				}
		    }
		}
		case 39:
		{
		    if (response)
		    {
		        new evz;
		        if (listitem == 0)
		        {
		            if (!IsPlayerInAnyVehicle(playerid) && (evz = (House_Inside(playerid) == -1) ? (House_Nearest(playerid)) : (House_Inside(playerid))) != -1)
		            {
		                if (HouseInfo[evz][evKilit] == 1)
		                {
		                    HouseInfo[evz][evKilit] = 0;
		                    Ev_Kaydet(evz);
		                    Ev_Yenile(evz);
		                    MesajGonder(playerid, "Evinizin kilidi açýldý.");
		                    cmd_ev(playerid);
		                }
		                else
		                {
		                    HouseInfo[evz][evKilit] = 1;
		                    Ev_Kaydet(evz);
		                    Ev_Yenile(evz);
		                    MesajGonder(playerid, "Eviniz kilitlendi.");
		                    cmd_ev(playerid);
		                }
		            }
		        }
		        if (listitem == 1)
		        {
		            new toplamstring[500],stringg2[150];
		            if ((evz = House_Inside(playerid)) == -1) return HataMesajGonder(playerid, "Evinizin içerisinde olmalisiniz.");
		            if (HouseInfo[evz][evKiralayan] != PlayerData[playerid][pID]) return HataMesajGonder(playerid, "Evinizin içerisinde olmalisiniz.");
		            new slots[5][20];
		            if (HouseInfo[evz][evKiyafetler][0] > 0) format(slots[0],20, "{ADFF2F}ID: %d",HouseInfo[evz][evKiyafetler][0]);
		            else slots[0] = "{FF0000}Bos";
		            if (HouseInfo[evz][evKiyafetler][1] > 0) format(slots[1],20, "{ADFF2F}ID: %d",HouseInfo[evz][evKiyafetler][1]);
		            else slots[1] = "{FF0000}Bos";
		            if (HouseInfo[evz][evKiyafetler][2] > 0) format(slots[2],20, "{ADFF2F}ID: %d",HouseInfo[evz][evKiyafetler][2]);
		            else slots[2] = "{FF0000}Bos";
		            if (HouseInfo[evz][evKiyafetler][3] > 0) format(slots[3],20, "{ADFF2F}ID: %d",HouseInfo[evz][evKiyafetler][3]);
		            else slots[3] = "{FF0000}Bos";
		            if (HouseInfo[evz][evKiyafetler][4] > 0) format(slots[4],20, "{ADFF2F}ID: %d",HouseInfo[evz][evKiyafetler][4]);
		            else slots[4] = "{FF0000}Bos";
		            strcat(toplamstring, "Slot\tDurum\n");
		            format(stringg2,sizeof(stringg2), "{2ECC71}Slot 1\t%s\n",slots[0]);
		            strcat(toplamstring,stringg2);
		            format(stringg2,sizeof(stringg2), "{2ECC71}Slot 2\t%s\n",slots[1]);
		            strcat(toplamstring,stringg2);
		            format(stringg2,sizeof(stringg2), "{2ECC71}Slot 3\t%s\n",slots[2]);
		            strcat(toplamstring,stringg2);
		            format(stringg2,sizeof(stringg2), "{2ECC71}Slot 4\t%s\n",slots[3]);
		            strcat(toplamstring,stringg2);
		            format(stringg2,sizeof(stringg2), "{2ECC71}Slot 5\t%s\n",slots[4]);
		            strcat(toplamstring,stringg2);
		            ShowPlayerDialog(playerid,34,DIALOG_STYLE_TABLIST_HEADERS, "Ev Gardolap",toplamstring, "Seç", "Kapat");
		        }
		        if (listitem == 2)
		        {
		            if ((evz = House_Inside(playerid)) == -1) return HataMesajGonder(playerid, "Evinizin içerisinde olmalisiniz.");
		            if (HouseInfo[evz][evKiralayan] != PlayerData[playerid][pID]) return 1;
		            HouseInfo[evz][evKiralayan] = -1;
		            Ev_Kaydet(evz);
		            Ev_Yenile(evz);
		            MesajGonder(playerid, "Kiraciliktan çiktiniz.");
		        }
		    }
		}
		case 40:
		{
		    if (!response) return cmd_ev(playerid);
		    if (response)
		    {
      			new eid = House_Inside(playerid);
		        if (isnull(inputtext)) return ShowPlayerDialog(playerid,40,DIALOG_STYLE_INPUT, "Para Al", "Lütfen evinizden almak istediginiz para miktarini girin.", "Al", "Geri");
		        if (!IsNumeric(inputtext)) return ShowPlayerDialog(playerid,40,DIALOG_STYLE_INPUT, "Para Al", "Lütfen evinizden almak istediginiz para miktarini girin.", "Al", "Geri");
		        if (strval(inputtext) < 1) return ShowPlayerDialog(playerid,40,DIALOG_STYLE_INPUT, "Para Al", "Lütfen evinizden almak istediginiz para miktarini girin.", "Al", "Geri");
		        if (strval(inputtext) > HouseInfo[eid][evCash])
		        {
		            HataMesajGonder(playerid, "Ev kasasinda yeterli miktarda para bulunmamaktadir.");
                    ShowPlayerDialog(playerid,40,DIALOG_STYLE_INPUT, "Para Al", "Lütfen evinizden almak istediginiz para miktarini girin.", "Al", "Geri");
                    return 1;
		        }
		        HouseInfo[eid][evCash] -= strval(inputtext);
		        ParaVer(playerid,strval(inputtext));
		        Ev_Kaydet(eid);
		        cmd_ev(playerid);
		        MesajGonder(playerid, "Ev kasasindan {2ECC71}%s {FFFFFF}miktar para aldiniz.",FormatNumber(strval(inputtext)));
		    }
		}
		case 41:
		{
		    if (!response) return cmd_ev(playerid);
		    if (response)
		    {
		        new evv = House_Inside(playerid);
           		if (isnull(inputtext)) return ShowPlayerDialog(playerid,41,DIALOG_STYLE_INPUT, "Para Koy", "Lütfen evinize koymak istediginiz para miktarini girin.", "Koy", "Geri");
           		if (!IsNumeric(inputtext)) return ShowPlayerDialog(playerid,41,DIALOG_STYLE_INPUT, "Para Koy", "Lütfen evinize koymak istediginiz para miktarini girin.", "Koy", "Geri");
           		if (strval(inputtext) < 1) return ShowPlayerDialog(playerid,41,DIALOG_STYLE_INPUT, "Para Koy", "Lütfen evinize koymak istediginiz para miktarini girin.", "Koy", "Geri");
           		if (strval(inputtext) > PlayerData[playerid][pCash])
           		{
           		    HataMesajGonder(playerid, "Üzerinizde yeterli miktarda para bulunmamaktadir.");
           		    ShowPlayerDialog(playerid,41,DIALOG_STYLE_INPUT, "Para Koy", "Lütfen evinize koymak istediginiz para miktarini girin.", "Koy", "Geri");
           		    return 1;
           		}
           		HouseInfo[evv][evCash] += strval(inputtext);
           		ParaVer(playerid,-strval(inputtext));
		        Ev_Kaydet(evv);
		        cmd_ev(playerid);
	         	MesajGonder(playerid, "Ev kasasina {2ECC71}%s {FFFFFF}miktar para koydunuz.",FormatNumber(strval(inputtext)));
		    }
		}
		case 45:
		{
		    if (!response)
		    {
		        PlayerData[playerid][pSelectFurniture] = 0;
		        PlayerData[playerid][pSelectType] = 0;
		        SetPVarInt(playerid, "mobilyaid",-1);
		        CancelEdit(playerid);
		        MobilyaMenu(playerid, GetPVarInt(playerid, "FurnitureHouse"));
		        return 1;
		    }
		    if (response)
		    {
		        if (GetPVarInt(playerid, "mobilyaid") == -1) return 1;
		        new mid = GetPVarInt(playerid, "mobilyaid");
		        new fiyat = floatround(FurnitureData[GetPVarInt(playerid, "FurnitureHouse")][mid][furniturePrice]/2);
		        ParaVer(playerid,fiyat);
		        Furniture_Delete(mid, GetPVarInt(playerid, "FurnitureHouse"));
		       	PlayerData[playerid][pSelectFurniture] = 0;
		        PlayerData[playerid][pSelectType] = 0;
		        SetPVarInt(playerid, "mobilyaid",-1);
		        MobilyaMenu(playerid, GetPVarInt(playerid, "FurnitureHouse"));
		        MesajGonder(playerid, "Mobilya satildi.");
		        CancelEdit(playerid);
		    }
		}
		case 47:
		{
		    if (response)
		    {
		        if (isnull(inputtext)) return HataMesajGonder(playerid, "Geçersiz birlik adi.");
		        if (strlen(inputtext) < 4) return HataMesajGonder(playerid, "Birlik adi 4 karakterden kisa olamaz.");
		        if (strlen(inputtext) > 32) return HataMesajGonder(playerid, "Birlik adi 32 karakterden uzun olamaz.");
		        format(BirlikAdi[playerid], 32, inputtext);
		        ShowPlayerDialog(playerid,48,DIALOG_STYLE_LIST, "Birlik Tipi Seçiniz:", "{ffffff}Çete\n{ffffff}Mafya\n{ffffff}Yayin Ajansi\n{ffffff}Legal", "Kur", "Kapat");
		    }
		}
		case 48:
		{
		    if (response)
		    {
		        if (PlayerData[playerid][pCash] < 20000) return HataMesajGonder(playerid, "Yeterli paraniz yok. ($20,000)");
		        new bid = Birlik_Olustur(BirlikAdi[playerid],listitem+1);
		        if (bid == -1) return HataMesajGonder(playerid, "Birlik olusturulamadi, lütfen gelistirici ekibiyle iletisime geçin.");
		        ParaVer(playerid, -20000);
		        MesajGonder(playerid, "Basari ile '%s' adli birlik olusturuldu, /birlik komutuyla birlik ayarlarina erisebilirsiniz.",BirlikAdi[playerid]);
		        PlayerData[playerid][pFaction] = bid;
		        PlayerData[playerid][pFactionRutbe] = Birlikler[bid][birlikRutbeler];
		        PlayerData[playerid][pFactionDivizyon] = 0;
		        Log_Write("logs/birliklog.txt", "%s(%d) Adli oyuncu %s isimli birlik olusturdu.",ReturnName(playerid),playerid,BirlikAdi[playerid]);
		        Oyuncu_Kaydet(playerid);
		    }
		}
		case BILDIRIM_DIALOG:
		{
  			if (response)
	    	{
		        new query[350];
		        format(query,sizeof(query), "SELECT * FROM `bildirimler` WHERE `id` = '%d'",strval(inputtext));
		        new Cache:Radless = mysql_query(g_SQL,query);
		        new rows;
		        cache_get_row_count(rows);
		        if (rows)
		        {
		            new gonderen[24],tarih[22],mesaj[128],idx;
		            cache_get_value_name_int(0, "id",idx);
		            cache_get_value_name(0, "Gonderen",gonderen,24);
		            cache_get_value_name(0, "Tarih",tarih,22);
		            cache_get_value_name(0, "Mesaj",mesaj,128);
		            SetPVarInt(playerid, "OkuduguMesaj",idx);
		            format(query,sizeof(query), "UPDATE `bildirimler` SET `Durum` = '1' WHERE `id` = '%d'",strval(inputtext));
		            mysql_query(g_SQL,query);
		            new goster[500];
		            format(goster,sizeof(goster), "{38c5f7}Gönderen: {FFFFFF}%s\n{38c5f7}Tarih: {FFFFFF}%s\n{38c5f7}Mesaj: {FFFFFF}%s",gonderen,tarih,mesaj);
		            ShowPlayerDialog(playerid,BILDIRIM_DIALOG2,DIALOG_STYLE_MSGBOX, "Bildirim Görüntüle",goster, "Sil", "Geri");
		        }
		        cache_delete(Radless);
	    	}
		}
		case BILDIRIM_DIALOG2:
		{
		    if (response)
	    	{
		        new bildirimid = GetPVarInt(playerid, "OkuduguMesaj");
		        Bildirim_Sil(bildirimid);
		        SunucuMesaji(playerid, "Bildirim silindi.");
		        DeletePVar(playerid, "OkuduguMesaj");
		        BildirimlerDialog(playerid);
	    	}
	    	if (!response)
	    	{
	        	BildirimlerDialog(playerid);
	    	}
		}
		case 51:
		{
		    if (response)
		    {
		        new
					bizid = -1,
					price;

			    if ((bizid = Business_Inside(playerid)) == -1 || Isyeri[bizid][isyeriTip] != 2)
			        return 0;

				if (Isyeri[bizid][isyeriUrunSayisi][0] < 1)
				    return HataMesajGonder(playerid, "Dükkanda ürün kalmamýþ.");

			    price = Isyeri[bizid][isyeriFiyatlar][0];

			    if (PlayerData[playerid][pCash] < price)
			        return HataMesajGonder(playerid, "Bu ürünü alabilmek için yeterli paran yok.");

				ParaVer(playerid,-price);
    			if (Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1) Isyeri[bizid][isyeriUrunSayisi][0]--;
				Isyeri[bizid][isyeriKasa] += price;

				Isyeri_Kaydet(bizid);
				if (Ev_GetCount(playerid) < 1 && EvKiraID(playerid) == -1)
				{
				    if (PlayerData[playerid][pCinsiyet] == 1)
				    {
					    PlayerData[playerid][pSkin] = g_aMaleSkins[listitem];
		            	SetPlayerSkin(playerid, g_aMaleSkins[listitem]);
	            	}
					else
					{
					    PlayerData[playerid][pSkin] = g_aFemaleSkins[listitem];
		            	SetPlayerSkin(playerid, g_aFemaleSkins[listitem]);
					}
	            	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s adli kisi %s ödeyerek bir kiyafet aldi.", ReturnName(playerid, 0), FormatNumber(price));
				}
				else if (Ev_GetCount(playerid) >= 1 || EvKiraID(playerid) != -1)
				{
    				if (PlayerData[playerid][pCinsiyet] == 1) SetPVarInt(playerid, "AlinanSkin",g_aMaleSkins[listitem]);
				    else SetPVarInt(playerid, "AlinanSkin",g_aFemaleSkins[listitem]);
				    SetPVarInt(playerid, "KiyafetPrice", price);
				    Dialog_Show(playerid,KiyafetAl,DIALOG_STYLE_MSGBOX, "Kiyafet Al", "{2ECC71}%s {FFFFFF}miktar paraya aldýðýnýz bu kýyafeti eve koymak ister misiniz?", "Evet", "Hayir",FormatNumber(price));
				}
		    }
		}
		case 52:
		{
		    if (response)
		    {
		        new
					bizid = -1,
					price;

			    if ((bizid = Business_Inside(playerid)) == -1 || Isyeri[bizid][isyeriTip] != 2)
			        return 0;

				if (Isyeri[bizid][isyeriUrunSayisi][1] < 1)
				    return HataMesajGonder(playerid, "Dükkanda ürün kalmamis.");

			    price = Isyeri[bizid][isyeriFiyatlar][1];

			    if (PlayerData[playerid][pCash] < price)
			        return HataMesajGonder(playerid, "Bu ürünü alabilmek için yeterli paran yok.");

				ParaVer(playerid,-price);
				if (Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1) Isyeri[bizid][isyeriUrunSayisi][1]--;
				Isyeri[bizid][isyeriKasa] += price;

				Isyeri_Kaydet(bizid);
				if (Ev_GetCount(playerid) < 1 && EvKiraID(playerid) == -1)
				{
				    if (PlayerData[playerid][pCinsiyet] == 1)
				    {
					    PlayerData[playerid][pSkin] = OzelErkekKiyafetler[listitem];
		            	SetPlayerSkin(playerid, OzelErkekKiyafetler[listitem]);
	            	}
					else
					{
					    PlayerData[playerid][pSkin] = OzelBayanKiyafetler[listitem];
		            	SetPlayerSkin(playerid, OzelBayanKiyafetler[listitem]);
					}
	            	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s adli kisi %s ödeyerek bir kiyafet aldi.", ReturnName(playerid, 0), FormatNumber(price));
				}
				else if (Ev_GetCount(playerid) >= 1 || EvKiraID(playerid) != -1)
				{
	 				    if (PlayerData[playerid][pCinsiyet] == 1) SetPVarInt(playerid, "AlinanSkin",OzelErkekKiyafetler[listitem]);
	 				    else SetPVarInt(playerid, "AlinanSkin",OzelBayanKiyafetler[listitem]);
	 				    SetPVarInt(playerid, "KiyafetPrice", price);
	 				    Dialog_Show(playerid,KiyafetAl,DIALOG_STYLE_MSGBOX, "Kiyafet Al", "{2ECC71}%s {FFFFFF}miktar paraya aldiginiz bu kiyafeti eve koymak ister misiniz?", "Evet", "Hayir",FormatNumber(price));
				}
		    }
		}
  		case 53:
		{
		    if (response)
		    {
		        new biz;
				if ((biz = Business_Inside(playerid)) == -1) return 1;
		        if (PlayerData[playerid][pASlot][listitem] != 0)
		        {
		            HataMesajGonder(playerid, "Bu slot dolu, baska bir slot seçin.");
		            return AksesuarlariGoster(playerid,1);
		        }
		        if (Isyeri[biz][isyeriKilit] != 0)
		        {
		            return HataMesajGonder(playerid, "Bu iþyeri kilitli.");
		        }
		        new yazi[2000];
		        for (new i; i < sizeof(AttachmentObjects); ++i)
		        {
		            format(yazi,sizeof(yazi), "%s%d\n",yazi,AttachmentObjects[i][attachmodel]);
		        }
		        SetPVarInt(playerid, "AttachmentIndexSel",listitem);
		        ShowPlayerDialog(playerid,54,DIALOG_STYLE_PREVMODEL, "Aksesuarlar",yazi, "Sec", "Geri");
		    }
		}
		case 54:
		{
		    if (!response)
			{
			    AksesuarlariGoster(playerid,1);
			    return DeletePVar(playerid, "AttachmentIndexSel");
			}
			if (response)
			{
			    new playerbiz = Business_Inside(playerid);
			    if (playerbiz == -1) return 1;
			    if (Isyeri[playerbiz][isyeriFiyatlar][2] > PlayerData[playerid][pCash])
			    {
			        HataMesajGonder(playerid, "Yeterli paraniz yok.");
			        return DeletePVar(playerid, "AttachmentIndexSel");
			    }
			    ParaVer(playerid,-Isyeri[playerbiz][isyeriFiyatlar][2]);
			    if (Isyeri[playerbiz][isyeriSahip] != -99 && Isyeri[playerbiz][isyeriSahip] != -1) Isyeri[playerbiz][isyeriUrunSayisi][2]--;
			    SetPVarInt(playerid, "AttachmentModelSel",AttachmentObjects[listitem][attachmodel]);
			    new bstring[257];
			    for (new x;x<sizeof(AttachmentBones);x++)
	        	{
	        		format(bstring, sizeof(bstring), "%s%s\n", bstring, AttachmentBones[x]);
	        	}
	        	ShowPlayerDialog(playerid,55,DIALOG_STYLE_LIST, "{FF0000}Kemik Seç",bstring, "Seç", "{FF6347}Kapat");
			}
		}
		case 55:
		{
		    if (response)
		    {
		        SetPlayerAttachedObject(playerid, GetPVarInt(playerid, "AttachmentIndexSel"), GetPVarInt(playerid, "AttachmentModelSel"), listitem+1);
          		EditAttachedObject(playerid, GetPVarInt(playerid, "AttachmentIndexSel"));
          		SunucuMesaji(playerid, "{FFFF00}~k~~PED_SPRINT~{FFFFFF} tusuna basarak kamerayi oynatabilirsiniz.");
		    }
		    new slotid = GetPVarInt(playerid, "AttachmentIndexSel");
      		new modelid = GetPVarInt(playerid, "AttachmentModelSel");
   			PlayerData[playerid][pASlot][slotid] = modelid;
      		DeletePVar(playerid, "AttachmentIndexSel");
        	DeletePVar(playerid, "AttachmentModelSel");
         	SQL_AksesuarKaydet(playerid);
		}
		case 56:
		{
		    if (response)
		    {
		        if (PlayerData[playerid][pASlot][listitem] != 0)
		        {
		            ShowPlayerDialog(playerid,57,DIALOG_STYLE_LIST, "{FF0000}Aksesuar Ayarlari", "{FFFFFF}Tak/Çikar\n{FFFFFF}Düzenle\n{FFFFFF}Renk Degistir\n{FFFFFF}Sil", "Seç", "Geri");
		            SetPVarInt(playerid, "AttachmentIndexSel", listitem);
		        }
		        else return HataMesajGonder(playerid, "Bu slot bos, aksesuar almak için kiyafet dükkanlarini ziyaret edin.");
		    }
		}
		case 57:
		{
		    if (!response)
		    {
		        DeletePVar(playerid, "AttachmentIndexSel");
		        return cmd_aksesuar(playerid);
		    }
		    if (response)
		    {
		        switch (listitem)
		        {
		            case 0:
		            {
		                new slotid =  GetPVarInt(playerid, "AttachmentIndexSel");
						if (PlayerData[playerid][pTSlot][slotid])
						{
						    SunucuMesaji(playerid, "Aksesuar çikartildi.");
							PlayerData[playerid][pTSlot][slotid] = false;
							RemovePlayerAttachedObject(playerid, GetPVarInt(playerid, "AttachmentIndexSel"));
							SQL_AksesuarKaydet(playerid);
						}
						else
						{
							PlayerData[playerid][pTSlot][slotid] = true;
							SunucuMesaji(playerid, "Aksesuar takildi.");
							AksesuarTak(playerid, slotid);
							SQL_AksesuarKaydet(playerid);
						}
		            }
		            case 1:
		            {
                        SunucuMesaji(playerid, "{FFFF00}~k~~PED_SPRINT~{FFFFFF} tusuna basarak kamerayi oynatabilirsiniz.");
                        EditAttachedObject(playerid, GetPVarInt(playerid, "AttachmentIndexSel"));
		            }
		            case 2:
		            {
		                Dialog_Show(playerid, AksesuarRenk, DIALOG_STYLE_LIST, "Renk Seç", "{FFFFFF}Siyah\n{FFFFFF}Kirmizi\n{FFFFFF}Mavi\n{FFFFFF}Turuncu\n{FFFFFF}Mor\n{FFFFFF}Sari\n{FFFFFF}Yesil\n{FFFFFF}Renk Kaldir", "Seç", "Kapat");
		            }
		            case 3:
		            {
		                RemovePlayerAttachedObject(playerid, GetPVarInt(playerid, "AttachmentIndexSel"));
                        new slotid =  GetPVarInt(playerid, "AttachmentIndexSel");
                        PlayerData[playerid][pASlot][slotid] = 0;
                        PlayerData[playerid][pABone][slotid] = 0;
                        PlayerData[playerid][pTSlot][slotid] = 0;
						DeletePVar(playerid, "AttachmentIndexSel");
						SunucuMesaji(playerid, "Aksesuar silindi.");
						SQL_AksesuarKaydet(playerid);
						cmd_aksesuar(playerid);
		            }
		        }
		    }
		}
		case 58:
		{
		    if (!response) return cmd_isyeri(playerid);
		    if (response)
		    {
		        if (GetPVarInt(playerid, "AracDuzenle") == 1)
		        {
		            SetPVarInt(playerid, "AracDuzenleID",listitem);
		            Dialog_Show(playerid,AracFiyatDegistir,DIALOG_STYLE_INPUT, "{2ECC71}Araç Fiyat Degistir", "Lütfen seçtiginiz araç için yeni bir fiyat girin:", "Degistir", "Kapat");
		        }
		        else if (GetPVarInt(playerid, "AracDuzenle") == 2)
		        {
		            SetPVarInt(playerid, "AracDuzenleID",listitem);
		            Dialog_Show(playerid,AracSil,DIALOG_STYLE_MSGBOX, "{2ECC71}Araç Sil", "Seçtiginiz araci galerinizden silmek istediginize emin misiniz?", "Evet", "Hayir");
		        }
		    }
		}
		case 59:
		{
		    if (response)
		    {
		        new bizid = Business_Inside(playerid);
		        if (bizid != -1 && Isyeri[bizid][isyeriExists] && Isyeri[bizid][isyeriTip] == 4)
		        {
		            if (!DealershipCars[bizid][listitem][vehModel])
		        		return HataMesajGonder(playerid, "Seçtiginiz slot bos.");

		        	if (PlayerData[playerid][pCash] < DealershipCars[bizid][listitem][vehPrice])
		        	    return HataMesajGonder(playerid, "Yeterli paraniz yok. {FF0000}(%s)",FormatNumber(DealershipCars[bizid][listitem][vehPrice]));
					new maksarac = MAX_OWNABLE_CARS;
					switch (PlayerData[playerid][pVip])
					{
					    case 1: maksarac += 2;
					    case 2: maksarac += 4;
					    case 3: maksarac += 6;
					}
					if (Car_GetCount(playerid) >= maksarac) return HataMesajGonder(playerid, "En fazla %d araç sahibi olabilirsin.",maksarac);
		        	SetPVarInt(playerid, "AracSatinAl",listitem);
		        	Dialog_Show(playerid, Renk1, DIALOG_STYLE_INPUT, "Araç Renk 1", "{FFFFFF}Lütfen aracin 1. rengini girin:\n\n{FF0000}NOT: {FFFFFF}Renk 0-255 arasinda olmalidir.", "Devam", "Iptal");
		        	//Dialog_Show(playerid,AracSatinAl,DIALOG_STYLE_MSGBOX, "{2ECC71}Araç Satin Alma", "{FF0000}'%s' {FFFFFF}model araci {2ECC71}%s {FFFFFF}karsiliginda satin almak istediginize emin misiniz?", "Evet", "Hayir",ReturnVehicleModelName(DealershipCars[bizid][listitem][vehModel]),FormatNumber(DealershipCars[bizid][listitem][vehPrice]));
		        }
		    }
		}
		case 61:
		{
		    if (!response) return cmd_dolap(playerid);
		    if (response)
		    {
		        if (PlayerData[playerid][pFaction] == -1) return 1;
		        PlayerData[playerid][pOnDutySkin] = PolisSkinler[listitem];
		        SetPlayerSkin(playerid, PolisSkinler[listitem]);

		    }
		}
		case 62:
		{
		    if (response)
		    {
		        if (PlayerData[playerid][pASlot][listitem] != 0)
		        {
		            HataMesajGonder(playerid, "Bu slot dolu, baska bir slot seçin.");
		            return AksesuarlariGoster(playerid,2);
		        }
		        new yazi[1000];
        		for (new i; i < sizeof(AttachCops); ++i)
	        	{
         			format(yazi,sizeof(yazi), "%s%d\n",yazi,AttachCops[i][olusumamodel]);
	        	}
	        	SetPVarInt(playerid, "AttachmentIndexSel",listitem);
	        	ShowPlayerDialog(playerid,63,DIALOG_STYLE_PREVMODEL, "Aksesuarlar",yazi, "Sec", "Geri");
		    }
		}
		case 63:
		{
		    if (!response) return cmd_dolap(playerid);
		    if (response)
		    {
		        SetPVarInt(playerid, "AttachmentModelSel",AttachCops[listitem][olusumamodel]);
			    new bstring[257];
			    for (new x;x<sizeof(AttachmentBones);x++)
	        	{
	        		format(bstring, sizeof(bstring), "%s%s\n", bstring, AttachmentBones[x]);
	        	}
	        	ShowPlayerDialog(playerid,64,DIALOG_STYLE_LIST, "{FF0000}Kemik Seç",bstring, "Seç", "{FF6347}Kapat");
		    }
		}
		case 64:
		{
		    if (response)
		    {
		        SetPlayerAttachedObject(playerid, GetPVarInt(playerid, "AttachmentIndexSel"), GetPVarInt(playerid, "AttachmentModelSel"), listitem+1);
          		EditAttachedObject(playerid, GetPVarInt(playerid, "AttachmentIndexSel"));
          		SunucuMesaji(playerid, "{FFFF00}~k~~PED_SPRINT~{FFFFFF} tusuna basarak kamerayi oynatabilirsiniz.");
		    }
		    new slotid = GetPVarInt(playerid, "AttachmentIndexSel");
      		new modelid = GetPVarInt(playerid, "AttachmentModelSel");
   			PlayerData[playerid][pASlot][slotid] = modelid;
      		DeletePVar(playerid, "AttachmentIndexSel");
        	DeletePVar(playerid, "AttachmentModelSel");
         	SQL_AksesuarKaydet(playerid);
		}
		case 65:
		{
		    if (response)
		    {
		        new playerev;
		        if (listitem == 0)
		        {
		            if (!IsPlayerInAnyVehicle(playerid) && (playerev = (House_Inside(playerid) == -1) ? (House_Nearest(playerid)) : (House_Inside(playerid))) != -1)
		            {
		                if (HouseInfo[playerev][evKilit] == 1)
		                {
		                    HouseInfo[playerev][evKilit] = 0;
		                    Ev_Kaydet(playerev);
		                    Ev_Yenile(playerev);
		                    MesajGonder(playerid, "Evinizin kilidi açýldý.");
		                    cmd_ev(playerid);
		                }
		                else
		                {
		                    HouseInfo[playerev][evKilit] = 1;
		                    Ev_Kaydet(playerev);
		                    Ev_Yenile(playerev);
		                    MesajGonder(playerid, "Eviniz kilitlendi.");
		                    cmd_ev(playerid);
		                }
		             }
          		}
		    }
		}
		case 66:
		    {
		        if (response)
		        {
		            new Float:pos[3];
		            switch (listitem)
		            {
		                case 0:
		                {
		                    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		                    PlaySoundEx(9605, pos[0], pos[1], pos[2], 15);
		                    cmd_megafon(playerid, "Teslim ol, etrafin sarildi!");
		                    return 1;
		                }
		                case 1:
		                {
		                    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		                    PlaySoundEx(9612, pos[0], pos[1], pos[2], 15);
		                    cmd_megafon(playerid, "Orada oldugunu biliyoruz!");
		                    return 1;
		                }
		                case 2:
						{
						    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		                    PlaySoundEx(10200, pos[0], pos[1], pos[2], 15);
		                    cmd_megafon(playerid, "Hey Sen! Polis, dur!");
		                    return 1;
						}
						case 3:
						{
						    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		                    PlaySoundEx(15800, pos[0], pos[1], pos[2], 15);
		                    cmd_megafon(playerid, "Los Angeles Polis Departmani, oldugun yerde kal!");
		                    return 1;
						}
						case 4:
						{
						    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		                    PlaySoundEx(15801, pos[0], pos[1], pos[2], 15);
		                    cmd_megafon(playerid, "Dur! yoksa ates açacagiz!");
		                    return 1;
						}
						case 5:
						{
						    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		                    PlaySoundEx(15802, pos[0], pos[1], pos[2], 15);
		                    cmd_megafon(playerid, "Hadi! Hadi! Hadi!");
		                    return 1;
						}
						case 6:
						{
						    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		                    PlaySoundEx(34402, pos[0], pos[1], pos[2], 15);
		                    cmd_megafon(playerid, "Polis, kipirdama!");
		                    return 1;
						}
						case 7:
						{
						    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		                    PlaySoundEx(34403, pos[0], pos[1], pos[2], 15);
		                    cmd_megafon(playerid, "Ellerin basinin üstüne araçtan in!");
		                    return 1;
						}
					}
				}
		    }
		    case 68:
		    {
		        if (!response) return cmd_ev(playerid);
		        if (response)
		        {
		            new housee;
		            if (isnull(inputtext)) return ShowPlayerDialog(playerid,68, DIALOG_STYLE_INPUT, "Ev Isim", "{FFFFFF}Lütfen eviniz için yeni bir isim girin:", "Degistir", "Geri");
		            if ((housee = (House_Inside(playerid) == -1) ? (House_Nearest(playerid)) : (House_Inside(playerid))) != -1)
		            {
		                format(HouseInfo[housee][evIsim], 30, inputtext);
		                Ev_Yenile(housee);
		                Ev_Kaydet(housee);
		                cmd_ev(playerid);
					}
					else HataMesajGonder(playerid, "Evinize yakin degilsiniz.");
				}
		    }
		    case 69:
			{
			    if (!response) return cmd_dolap(playerid);
		    	if (response)
		    	{
			        if (PlayerData[playerid][pFaction] == -1) return 1;
			        PlayerData[playerid][pOnDutySkin] = DoktorSkinler[listitem];
			        SetPlayerSkin(playerid, DoktorSkinler[listitem]);

		    	}
			}
	}
	return 1;
}

new Kelepceci;

KelepceciOlustur()
{
	Kelepceci = CreateActor(292, 2351.7166, -646.7543, 128.0620, 174.8173);
	CreateDynamic3DTextLabel("Kelepçeni mi kirdirmak istiyorsun?\n\n{F1C40F}/kelepcekirdir {FFFFFF}yazarak kelepçeni kirdirabilirsin.", 0xF1C40FFF, 2351.7166, -646.7543, 128.0620 + 0.25, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, STREAMER_3D_TEXT_LABEL_SD, -1, 0);
	SetActorInvulnerable(Kelepceci, true);
	ApplyActorAnimation(Kelepceci, "DEALER", "DEALER_IDLE", 4.0, 1, 0, 0, 0, 0);
}
CMD:duzkontak(playerid)
{
    if (PlayerData[playerid][pMekanik] == 0)	return HataMesajGonder(playerid, "Bu komutu kullanabilmek için mekanik olmalýsýnýz (/gps > hurdacý).");
    if (PlayerData[playerid][pLevel] < 6) return HataMesajGonder(playerid, "Minimum 6 seviye olmalýsýnýz.");
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesajGonder(playerid, "Sürücü olmalýsýnýz.");
    new vehicleid = GetPlayerVehicleID(playerid);
    new id = Car_GetID(vehicleid);
    if (Vehicle_IsANoFuelVehicle(GetVehicleModel(vehicleid))) return HataMesajGonder(playerid, "Bu araç düzkontak edilemez.");
    if (PlayerData[playerid][pDuzkontakEdiyor] == 1) return HataMesajGonder(playerid, "Zaten düzkontak yapýyorsunuz.");
 //   if (AracInfo[id][aracDuzkontakEden] == playerid) return HataMesajGonder(playerid, "Düzkontaðý zaten yapmýþsýnýz. Aracý hurdaya götürün.");
    if (PlayerData[playerid][pDuzkontakEttiZtn] == 1) return HataMesajGonder(playerid, "Baþka aracý düzkontak etmiþsiniz.");
    if (PlayerData[playerid][pDuzkontakSuresi] != 0) return HataMesajGonder(playerid, "Tekrar düzkontak için biraz beklemelisiniz. Kalan Süre: %d dakika", PlayerData[playerid][pDuzkontakSuresi]);
    //if (AracInfo[id][aracSahip] == PlayerData[playerid][pID]) return HataMesajGonder(playerid, "Hayýr, kendi aracýný düzkontak edemezsin.");
    if (GetNearestCCTV(playerid) != -1) return HataMesajGonder(playerid, "CCTV'ye yakýn bölgelerde bunu yapamazsýnýz.");
	if (AracInfo[id][aracExists] && AracInfo[id][aracFaction] == -1 && AracInfo[id][aracKira] < 1 && AracInfo[id][aracTip] == 4 && AracInfo[id][aracModel] != 509)
	{
	    SunucuMesaji(playerid, "Düzkontak baþladý. Dikkat et, polisler gelebilir! (( Crash durumunda düzkontak iptal edilir. ))");

     	new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);
		PlayerData[playerid][pDuzkontakEdiyor] = 1;
		PlayerData[playerid][pDuzkontakTimer] = 10;
		PlayerData[playerid][pDuzkontakEttiZtn] = 1;
		GameTextForPlayer(playerid, "~r~DUZKONTAK BASLADI.", 1000, 3);
		SendClientMessageEx(GetPlayerIDWithSQLID(AracInfo[id][aracSahip]), COLOR_AQUA, "{5977B1}[SMS] LSPD >{FFFFFF} %s bölgesindeki %s model aracýnýzýn alarmý çalýyor.", GetLocation(x, y, z), ReturnVehicleModelName(AracInfo[id][aracModel]));
     	SendBirlikMessageEx(BIRLIK_LSPD, COLOR_DEPARTMENT, "** DEPARTMAN: (%s, %s) bölgesinde %s model aracýn alarmý çalýyor.",GetLocation(x, y, z), GetCityName(x, y, z), ReturnVehicleModelName(AracInfo[id][aracModel]));
	   	SendBirlikMessageEx(BIRLIK_FBI, COLOR_DEPARTMENT, "** DEPARTMAN: (%s, %s) bölgesinde %s model aracýn alarmý çalýyor.",GetLocation(x, y, z), GetCityName(x, y, z), ReturnVehicleModelName(AracInfo[id][aracModel]));
	}
	else HataMesajGonder(playerid, "Bu araç düzkontak edilemez.");
	return 1;
}

CMD:saat(playerid, params[])
{
    new string[90], date[6];

    getdate(date[2], date[1], date[0]);
    gettime(date[3], date[4], date[5]);

    static const Months[][12] = {"OCAK", "SUBAT", "MART", "NISAN", "MAYIS", "HAZIRAN", "TEMMUZ", "AGUSTOS", "EYLUL", "EKIM", "KASIM", "ARALIK"};

    format(string, sizeof(string), "~b~%02d %s %d~n~~w~%02d:%02d:%02d", date[0], Months[date[1] - 1], date[2], date[3], date[4], date[5]);
    GameTextForPlayer(playerid, string, 4000, 1);

    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s saatine bakar.", ReturnName(playerid, 0));

    return 1;
}

CMD:koli(playerid, params[])
{
    static
		oyuncuid,
		tip[24],
		string[128];

    new vehicleid = GetPlayerVehicleID(playerid);
    new vid = GetNearestVehicle(playerid);
	if (!IsPlayerConnected(playerid)) return 1;
	if (sscanf(params, "s[24]S()[128]", tip, string))
	{
		KullanimMesaji(playerid, "/koli [içerik]");
		SendClientMessage(playerid, 0xFF6347FF, "ÝÇERÝK: satinal, yerlestir, al, sat, yoket");
		return 1;
	}
	if (!strcmp(tip, "satinal", true))
	{
	    if (!IsPlayerInRangeOfPoint(playerid, 5.0, 2197.34, -2660.90, 13.55)) return HataMesajGonder(playerid, "Koli alma noktasýna yakýn deðilsiniz.");
	    if (kolial[playerid] == 1) return HataMesajGonder(playerid, "Elinizde zaten kutu var.");
		if (IsPlayerInAnyVehicle(playerid)) return HataMesajGonder(playerid, "Araç içerisinde bu komutu kullanamazsýnýz.");
		if (PlayerData[playerid][pCash] < 100) return HataMesajGonder(playerid, "Yeterli paranýz yok. ($100)");

		ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
    	SetPlayerAttachedObject(playerid, ATTACH_INDEX, 2912, 1, -0.067019, 0.413313, -0.040999, 0.000000, 88.000000, 180.000000, 0.500000, 0.500000, 0.500000);
    	kolial[playerid] = 1;
    	ParaVer(playerid, -100);
    	MesajGonder(playerid, "$100 karþýlýðýnda koli satýn aldýnýz.");
	}
	else if (!strcmp(tip, "al", true))
	{
        if (vid == -1) return HataMesajGonder(playerid, "Herhangi bir araca yakýn deðilsiniz.");
        if (kolial[playerid] != -1) return HataMesajGonder(playerid, "Elinizde zaten koli var.");
        if (koliarac[vehicleid] == 0) return HataMesajGonder(playerid, "Araçta koli yok.");

        ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
    	SetPlayerAttachedObject(playerid, ATTACH_INDEX, 2912, 1, -0.067019, 0.413313, -0.040999, 0.000000, 88.000000, 180.000000, 0.500000, 0.500000, 0.500000);
        koliarac[vehicleid] -= 1;
        kolial[playerid] = 1;
	}
	else if (!strcmp(tip, "yerlestir", true))
	{
	    if (vid == -1) return HataMesajGonder(playerid, "Herhangi bir araca yakýn deðilsiniz.");
	    if (kolial[playerid] == -1) return HataMesajGonder(playerid, "Elinizde koli yok.");
	    if (koliarac[vehicleid] == 4) return HataMesajGonder(playerid, "Bu araca daha fazla koli koyulamaz.");
	    if (!IsTruckerCar(vid)) return HataMesajGonder(playerid, "Bu tür araca koli koyamazsýnýz.");

	    ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 0, 0, 0, 0, 1);
		kolial[playerid] = -1;
		koliarac[vehicleid] += 1;
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
        RemovePlayerAttachedObject(playerid, ATTACH_INDEX);
        MesajGonder(playerid, "Koliyi araca yerleþtirdiniz.");
	}
	else if (!strcmp(tip, "yoket", true))
	{
	    if (kolial[playerid] == -1) return HataMesajGonder(playerid, "Elinizde koli yok.");
	    if (IsPlayerInAnyVehicle(playerid)) return HataMesajGonder(playerid, "Araç içerisinde bu komutu kullanamazsýnýz.");
	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
        RemovePlayerAttachedObject(playerid, ATTACH_INDEX);
        kolial[playerid] = -1;
	}
	else if (!strcmp(tip, "sat", true))
	{
        if (!IsPlayerInRangeOfPoint(playerid, 5.0, 1739.8549, 968.8616, 10.7971)) return HataMesajGonder(playerid, "Koli teslim noktasýna yakýn deðilsiniz.");
        if (IsPlayerInAnyVehicle(playerid)) return HataMesajGonder(playerid, "Araç içerisinde bu komutu kullanamazsýnýz.");
        if (kolial[playerid] == -1) return HataMesajGonder(playerid, "Elinizde koli yok.");

        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
        RemovePlayerAttachedObject(playerid, ATTACH_INDEX);
        kolial[playerid] = -1;
        ParaVer(playerid, 200);
	}
	return 1;
}

CMD:kilitkir(playerid, params[])
{
	if (!OyundaDegil(playerid)) return 1;
	if (GetFactionType(playerid) == BIRLIK_LSMD || GetFactionType(playerid) == BIRLIK_GOV || GetFactionType(playerid) == BIRLIK_HABER)
	   return HataMesajGonder(playerid, "Bu komutu kullanamazsýnýz.");
	if (PlayerData[playerid][pLevel] < 5) return HataMesajGonder(playerid, "Bu komutu sadece 5 level ve üstü kiþiler kullanabilir.");
	if (GetFactionType(playerid) != BIRLIK_LSPD && GetFactionType(playerid) != BIRLIK_LSMD && GetFactionType(playerid) != BIRLIK_FBI && GetFactionType(playerid) != BIRLIK_HABER && GetFactionType(playerid) != BIRLIK_GOV)
	{
	if (PlayerData[playerid][pKilitMod] == 1)
	{
	   MesajGonder(playerid, "Kilit kýrma modunu kapattýnýz.");
	   PlayerData[playerid][pKilitMod] = 0;
	}
	else
	{
       MesajGonder(playerid, "Kilit kýrma modunu açtýnýz.");
	   PlayerData[playerid][pKilitMod] = 1;
	}
	}
	else
	{
        new vehicleid = Car_Nearest(playerid);
		if (vehicleid == -1) return HataMesajGonder(playerid, "Herhangi bir araca yakýn deðilsiniz.");
		if (AracInfo[vehicleid][aracFactionType] == BIRLIK_LSPD || AracInfo[vehicleid][aracFactionType] == BIRLIK_LSMD || AracInfo[vehicleid][aracFactionType] == BIRLIK_FBI || AracInfo[vehicleid][aracFactionType] == BIRLIK_GOV)
		   return HataMesajGonder(playerid, "Hükümet araçlarýnýn kilidi kýrýlamaz.");
		if (AracInfo[vehicleid][aracKilit] == false)
	        return HataMesajGonder(playerid, "Araç kilitli deðil.");
	    if (PlayerData[playerid][pPicking] == 1)
		    return HataMesajGonder(playerid, "Zaten aracýn kilidini kýrýyorsun.");
        if (AracInfo[vehicleid][aracTip] == 5)
		   return HataMesajGonder(playerid, "Bu aracýn kilidini kýramazsýnýz.");
		if (PlayerData[playerid][pEsyalar][14] < 1) return HataMesajGonder(playerid, "Üzerinizde maymuncuk yok.");
		PlayerData[playerid][pPicking] = 1;
	    PlayerData[playerid][pPickCar] = vehicleid;
  	    new
		  engine, lights, alarm, doors, bonnet, boot, objective, Float:pos[3];
        GetVehiclePos(AracInfo[vehicleid][aracVehicle], pos[0], pos[1], pos[2]);
      	GetVehicleParamsEx(AracInfo[vehicleid][aracVehicle], engine, lights, alarm, doors, bonnet, boot, objective);
      	switch(AracInfo[vehicleid][aracGuvenlik])
	    {
		   case 0: PlayerData[playerid][pPickSure] = 50;
	       case 1: PlayerData[playerid][pPickSure] = 100;
	       case 2: PlayerData[playerid][pPickSure] = 130;
           case 3: PlayerData[playerid][pPickSure] = 150;
        }
	}
	return 1;
}
Kilit_Update(playerid, Float:hp)
{
    new string[128];

    format(string, sizeof(string), "~g~Kapi Durumu: ~w~%1.f", hp);
    GameTextForPlayer(playerid, string, 1000, 3);

    return 1;
}

CMD:hurda(playerid)
{
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesajGonder(playerid, "Sürücü olmalýsýn.");
    if (!IsPlayerInRangeOfPoint(playerid, 5.0, 89.9765, -304.4330, 1.3512)) return HataMesajGonder(playerid, "Hurdacýya yakýn deðilsin.");
    new vehicleid = GetPlayerVehicleID(playerid);
    new id = Car_GetID(vehicleid);
    if (PlayerData[playerid][pLevel] < 6) return HataMesajGonder(playerid, "Minimum 6 seviye olmalýsýn.");
    if (PlayerData[playerid][pDuzkontakSuresi] != 0) return HataMesajGonder(playerid, "Tekrar düzkontak için için biraz beklemelisiniz. Kalan Süre: %d dakika", PlayerData[playerid][pDuzkontakSuresi]);
    //if (AracInfo[id][aracSahip] == PlayerData[playerid][pID]) return HataMesajGonder(playerid, "Hayýr, kendi aracýný hurda edemezsin.");
    if (AracInfo[id][aracDuzkontakEden] != playerid) return HataMesajGonder(playerid, "Bu araç baþkasý tarafýndan düzkontak edilmiþ.");
    if (AracInfo[id][aracDuzkontakEden] == 999) return HataMesajGonder(playerid, "Bu araç düzkontak edilmemiþ. Hurdadan önce düzkontak etmelisin.");
    AracInfo[id][aracDuzkontakEden] = 999;
    AracInfo[id][aracHurda] = 1;
	PlayerData[playerid][pDuzkontakEdiyor] = 0;
	PlayerData[playerid][pDuzkontakTimer] = 0;
	PlayerData[playerid][pDuzkontakEttiZtn] = 0;
    Arac_Kaydet(id);
    Arac_Spawn(id);
	PlayerData[playerid][pDuzkontakSuresi] = 500;
    new para = GetGaleriFiyat(AracInfo[id][aracModel]) / 11;
	ParaVer(playerid, para);
    SunucuMesaji(playerid, "Hurda baþarýlý. Kazanýlan para: $%d", para);
    return 1;
}
CMD:mekanik(playerid)
{
    if (!OyundaDegil(playerid)) return 1;
    if (PlayerData[playerid][pLevel] < 5) return HataMesajGonder(playerid, "Bu komutu kullanabilmek için 5 seviye olmanýz gerekmektedir.");
    if (GetFactionType(playerid) == BIRLIK_LSPD && GetFactionType(playerid) == BIRLIK_LSMD) return HataMesajGonder(playerid, "Bu oluþum türü mekanik olamaz.");
    if (!IsPlayerInRangeOfPoint(playerid, 5.0, 89.9765, -304.4330, 1.3512)) return HataMesajGonder(playerid, "Hurdacýya yakýn deðilsin.");
    if (PlayerData[playerid][pMekanik] == 0)
    {
        Dialog_Show(playerid, mekanikonay, DIALOG_STYLE_MSGBOX, "Mekanik Onay", "Mekanik olmak için {2ECC71}$200.000 {FFFFFF}ödemelisin, mekanik olmak istediðine emin misin?", "Onayla", "Kapat");
    }
    else
    {
        Dialog_Show(playerid, mekanikonay2, DIALOG_STYLE_MSGBOX, "Mekanik Onay", "Mekanikten çýkmak için herhangi bir ücret ödemeyeceksin fakat mekanikten çýkmak istediðine emin misin?", "Onayla", "Kapat");
    }
	return 1;
}

Dialog:mekanikonay(playerid, response, listitem, inputtext[])
{
	if (response)
	{
        if (PlayerData[playerid][pMekanik] == 1) return HataMesajGonder(playerid, "Zaten mekaniksin.");
        if (PlayerData[playerid][pCash] < 200000) return HataMesajGonder(playerid, "Mekanik olmak için 200.000 dolara sahip olmalýsýn.");
    	PlayerData[playerid][pMekanik] = 1;
    	ParaVer(playerid, -200000);
    	MesajGonder(playerid, "Baþarýyla mekanik oldunuz, artýk /kilitkir, /duzkontak, /hurda komutlarýný kullanabilirsiniz.");
    	Oyuncu_Kaydet(playerid);
	}
	return 1;
}

Dialog:mekanikonay2(playerid, response, listitem, inputtext[])
{
	if (response)
	{
    	PlayerData[playerid][pMekanik] = 0;
    	MesajGonder(playerid, "Mekanikten çýktýnýz.");
    	Oyuncu_Kaydet(playerid);
	}
	return 1;
}
CMD:hizlimiti(playerid, args[])
{
	new Float:hizdeger;

	if (!IsPlayerInAnyVehicle(playerid))
	    return HataMesajGonder(playerid, "Bu komutu sadece araçta kullanabilirsiniz.");

	if (sscanf(args, "f", hizdeger))
	    return KullanimMesaji(playerid, "/hizlimiti [Limit] (0.0 limiti kapatir)");

	if (hizdeger < 0.0)
	    return HataMesajGonder(playerid, "Hiz degerini 0 dan düsük giremezsiniz.");

    g_fSpeedCap[ playerid ][ GetPlayerVehicleID(playerid) ] = hizdeger;

	SunucuMesaji(playerid, "Hiz limiti %0.4f olarak ayarlanmistir.", g_fSpeedCap[ playerid ][ GetPlayerVehicleID(playerid) ] );
	return true;
}

CMD:tackle(playerid)
{
    if (PlayerData[playerid][pFaction] != 0) return HataMesajGonder(playerid, "Bunun için yeterli yetkiniz yok.");
    if (PlayerData[playerid][pTackle] == 0)
    {
        PlayerData[playerid][pTackle] = 1;
        SunucuMesaji(playerid, "Tackle modu aktif edildi. Yumruk atarak düsürebilirsiniz.");
        GameTextForPlayer(playerid, "~g~TACKLE AKTIF.", 1000, 3);
        PlayerTextDrawShow(playerid, tackle[playerid]);
    }
    else
    {
        PlayerData[playerid][pTackle] = 0;
        SunucuMesaji(playerid, "Tackle modu kapatildi.");
        PlayerTextDrawHide(playerid, tackle[playerid]);
    }
    return 1;
}

CMD:kelepcekirdir(playerid, params[])
{
	if (!IsPlayerInRangeOfPoint(playerid, 1.5, 2351.7166, -646.7543, 128.0620))
	    return HataMesajGonder(playerid, "Bu komutu kullanabilmek için kelepçecinin yaninda olmalisin.");

    if (!PlayerData[playerid][pKelepce])
        return HataMesajGonder(playerid, "Zaten kelepçeli degilsin.");

	if (PlayerData[playerid][pCash] < 2500)
	    return HataMesajGonder(playerid, "Kelepçeni kirdirmak için $2500 paran olmasi gerekiyor.");

	GameTextForPlayer(playerid, "~w~Kelepce Kiriliyor~n~~r~120", 2000, 4);

    TogglePlayerControllable(playerid, false);

	KelepceSure[playerid]  = 120;
	KelepceTimer[playerid] = SetTimerEx("KelepceKiriliyor", 1000, true, "d", playerid);
	return 1;
}

forward KelepceKiriliyor(playerid);
public KelepceKiriliyor(playerid)
{
	new str[256];

	if (KelepceSure[playerid] > 1)
	{
		KelepceSure[playerid] -= 1;

		format(str, sizeof str, "~w~Kelepce Kiriliyor~n~~r~%d", KelepceSure[playerid]);

		GameTextForPlayer(playerid, str, 2000, 4);
	}
	if (KelepceSure[playerid] == 1)
	{
	    PlayerData[playerid][pKelepce] = 0;
    	PlayerData[playerid][pDragged] = 0;
		PlayerData[playerid][pDraggedBy] = INVALID_PLAYER_ID;
		KillTimer(PlayerData[playerid][pDragTimer]);

		SetPlayerCuffed(playerid, false);
    	TogglePlayerControllable(playerid, true);

    	ParaVer(playerid, -2500);

    	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** Kelepçeci %s adli kisinin kelepçelerini kirar.", ReturnName(playerid, 0));
	    KillTimer(KelepceTimer[playerid]);
	}
	return 1;
}

public FCNPC_OnTakeDamage(npcid, issuerid, Float:amount, weaponid, bodypart)
{
	return 1;
}

public OnPlayerModelSelection(playerid, response, listid, modelid)
{
	if (listid == RoadblockList)
	{
	    if (!response) return 1;
		new id = GetFreeCopObjectID();
	    if (id == -1) return HataMesajGonder(playerid, "Obje olusturulurken hata olustu, gelistiri ekibiyle iletisime geçin.");
	    CopObjectData[id][ObjCreated] = true;
	    format(CopObjectData[id][Owner],32,ReturnName(playerid, 0));
	    CopObjectData[id][Type] = OBJECT_TYPE_ROADBLOCK;
	    CopObjectData[id][ObjModel] = modelid;
	    CopObjectData[id][ObjInterior] = GetPlayerInterior(playerid);
	    CopObjectData[id][ObjVirtualWorld] = GetPlayerVirtualWorld(playerid);

	    new Float: x, Float: y, Float: z, Float: a;
	    GetPlayerPos(playerid, x, y, z);
	    GetPlayerFacingAngle(playerid, a);
	    x += (2.0 * floatsin(-a, degrees));
		y += (2.0 * floatcos(-a, degrees));
		CopObjectData[id][ObjX] = x;
		CopObjectData[id][ObjY] = y;
		CopObjectData[id][ObjZ] = z;
		CopObjectData[id][ObjRX] = 0.0;
		CopObjectData[id][ObjRY] = 0.0;
		CopObjectData[id][ObjRZ] = a;
		CopObjectData[id][ObjID] = CreateDynamicObject(modelid, x, y, z, 0.0, 0.0, a, CopObjectData[id][ObjVirtualWorld], CopObjectData[id][ObjInterior]);
		CopObjectData[id][ObjArea] = -1;

		new string[96];
		format(string, sizeof(string), "{FFFFFF}Barikat (ID: %d)", id);
		CopObjectData[id][ObjLabel] = CreateDynamic3DTextLabel(string, 0xFFFFFFAA, x, y, z + 1.35, 10.0, _, _, _, CopObjectData[id][ObjVirtualWorld], CopObjectData[id][ObjInterior]);
		InsertObjectToDB(id);
	}

	if (listid == SignList)
	{
	    if (!response) return 1;
		new id = GetFreeCopObjectID();
	    if (id == -1) return HataMesajGonder(playerid, "Obje olusturulurken hata olustu, gelistiri ekibiyle iletisime geçin.");
	    CopObjectData[id][ObjCreated] = true;
	    format(CopObjectData[id][Owner],32,ReturnName(playerid, 0));
	    CopObjectData[id][Type] = OBJECT_TYPE_SIGN;
	    CopObjectData[id][ObjModel] = modelid;
	    CopObjectData[id][ObjInterior] = GetPlayerInterior(playerid);
	    CopObjectData[id][ObjVirtualWorld] = GetPlayerVirtualWorld(playerid);

	    new Float: x, Float: y, Float: z, Float: a;
	    GetPlayerPos(playerid, x, y, z);
	    GetPlayerFacingAngle(playerid, a);
	    x += (2.0 * floatsin(-a, degrees));
		y += (2.0 * floatcos(-a, degrees));
		CopObjectData[id][ObjX] = x;
		CopObjectData[id][ObjY] = y;
		CopObjectData[id][ObjZ] = z - 1.25;
		CopObjectData[id][ObjRX] = 0.0;
		CopObjectData[id][ObjRY] = 0.0;
		CopObjectData[id][ObjRZ] = a;
		CopObjectData[id][ObjID] = CreateDynamicObject(modelid, x, y, z - 1.25, 0.0, 0.0, a, CopObjectData[id][ObjVirtualWorld], CopObjectData[id][ObjInterior]);
		CopObjectData[id][ObjArea] = -1;

		new string[96];
		format(string, sizeof(string), "{FFFFFF}Tabela (ID: %d)", id);
		CopObjectData[id][ObjLabel] = CreateDynamic3DTextLabel(string, 0xFFFFFFAA, x, y, z + 2.0, 10.0, _, _, _, CopObjectData[id][ObjVirtualWorld], CopObjectData[id][ObjInterior]);
		InsertObjectToDB(id);
	}

	if(listid == DroneList)
	{
		if(IsValidVehicle(DroneCar[playerid]))
			DestroyVehicle(DroneCar[playerid]), DroneCar[playerid] = 0;

		new Float:x, Float:y, Float:z;

		GetPlayerPos(playerid, x, y, z);

		DroneCar[playerid] = CreateVehicle(modelid, x, y, z, 90.0, 1, 1, 0, 0);
		SetEngineStatus(DroneCar[playerid], true);
		PutPlayerInVehicle(playerid, DroneCar[playerid], 0);
		SunucuMesaji(playerid, "Droneden çikmak için: /dronecik");
	}

	return 1;
}
public OnPlayerEnterDynamicCP(playerid, checkpointid)
{
	if (checkpointid == TohumCP[playerid] && TohumTutuyor[playerid] != -1)
	{
	    new vehicleid = PlayerData[playerid][pLastCar];
	    if (GetVehicleModel(vehicleid) != 422) return HataMesajGonder(playerid, "Son bindiginiz araç Bobcat olmalidir.");
		new Float:x, Float:y, Float:z;
		GetVehicleBoot(vehicleid, x, y, z);
		if (GetPlayerDistanceFromPoint(playerid, x, y, z) >= 5.0) return HataMesajGonder(playerid, "Araciniza çok uzaksiniz.");
		new bool:bulundu;
		for (new i; i<5; i++)
		{
		    if (!IsValidDynamicObject(AracTohumObjeler[vehicleid][i]))
		    {
		        bulundu = true;
		        AracTohumObjeler[vehicleid][i] = CreateDynamicObject(19636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
		        AttachDynamicObjectToVehicle(AracTohumObjeler[vehicleid][i], vehicleid, TohumAttachOffsets[i][0], TohumAttachOffsets[i][1], TohumAttachOffsets[i][2], 0.000000, 0.000000, 0.000000);
		        break;
		    }
		}
		if (!bulundu) return HataMesajGonder(playerid, "Bu araç dolu, daha fazla kasa koyamazsiniz.");
		AracTohumlar[vehicleid][TohumTutuyor[playerid]] += TohumSayisi[playerid];
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		RemovePlayerAttachedObject(playerid, 4);
		ApplyAnimation(playerid, "CARRY", "putdwn05", 4.1, 0, 1, 1, 0, 0, 1);
		TohumTutuyor[playerid] = -1;
		TohumSayisi[playerid] = 0;
		DestroyDynamicCP(TohumCP[playerid]);
	}

	if(checkpointid == TrashCP[playerid])
	{
	    if(!HasTrash[playerid]) return SunucuMesaji(playerid, "Çöp torbasi tasimiyorsunuz.");
	    new vehicleid = GetPVarInt(playerid, "LastVehicleID");
	    if(LoadedTrash[vehicleid] >= TRASH_LIMIT) return HataMesajGonder(playerid, "Bu araç dolu, daha fazla çöp yükleyemezsiniz.");
	    LoadedTrash[vehicleid]++;
		ApplyAnimation(playerid, "GRENADE", "WEAPON_throwu", 4.1, 0, 0, 0, 0, 0);
		SunucuMesaji(playerid, "Bir adet çöpü araca biraktin..");

		if(TRASH_LIMIT - LoadedTrash[vehicleid] > 0) { SunucuMesaji(playerid, "Bu araca %d kadar çöp torbasi daha yükleyebilirsiniz.", TRASH_LIMIT - LoadedTrash[vehicleid]); }

		new driver = GetVehicleDriver(vehicleid);
		if(IsPlayerConnected(driver)) Trash_ShowCapacity(driver);
		Trash_ResetPlayer(playerid);
		return 1;
	}

    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		for(new i; i < sizeof(FactoryData); i++)
		{
		    if(checkpointid == FactoryData[i][FactoryCP])
		    {
		        new string[128], vehicleid = GetPlayerVehicleID(playerid), cash = LoadedTrash[vehicleid] * TRASH_BAG_VALUE;
//		        format(string, sizeof(string), "%d adet çöp satip $%d para kazandiniz.", LoadedTrash[vehicleid], cash);
//		        SunucuMesaji(playerid, string);
				SunucuMesaji(playerid,"%d adet çöp satip $%d para kazandiniz.", LoadedTrash[vehicleid], cash);
		        ParaVer(playerid, cash);
		        FactoryData[i][FactoryCurrent] += LoadedTrash[vehicleid];
		        LoadedTrash[vehicleid] = 0;
                Trash_ShowCapacity(playerid);
                format(string, sizeof(string), "Geri Dönüsüm Fabrikasi - %s\n \niçerisindeki çöpler: %d", FactoryData[i][FactoryName], FactoryData[i][FactoryCurrent]);
                UpdateDynamic3DTextLabelText(FactoryData[i][FactoryLabel], 0x2ECC71FF, string);

		        for(new x; x < sizeof(FactoryData); x++)
				{
				    if(IsValidDynamicMapIcon(FactoryIcons[playerid][x]))
				    {
				        DestroyDynamicMapIcon(FactoryIcons[playerid][x]);
				        FactoryIcons[playerid][x] = -1;
				    }

					TogglePlayerDynamicCP(playerid, FactoryData[x][FactoryCP], 0);
				}

		        break;
		    }
		}
	}
	return 1;
}
public OnPlayerLeaveDynamicArea(playerid, areaid)
{
	PlayerTextDrawHide(playerid, OnayliHoodGirisTD[playerid][0]);
	PlayerTextDrawHide(playerid, OnayliHoodGirisTD[playerid][1]);
	PlayerTextDrawHide(playerid, OnayliHoodGirisTD[playerid][2]);
	return 1;
}
public OnPlayerEnterDynamicArea(playerid, areaid)
{
	for (new i; i<MAX_HOOD; i++) if (Hood[i][hExists] == true && Hood[i][hZone] == areaid)
	{
	    new str[100];
	    format(str, sizeof(str), "~w~Bu_bolge_~r~%s_~w~adli_birlige_aittir. Korku_rolu_yapmaktan_kacinmayiniz.", Birlikler[Hood[i][hBirlik]][birlikAd]);
	    PlayerTextDrawSetString(playerid, OnayliHoodGirisTD[playerid][0], str);
	    PlayerTextDrawShow(playerid, OnayliHoodGirisTD[playerid][0]);
	    PlayerTextDrawShow(playerid, OnayliHoodGirisTD[playerid][1]);
	    PlayerTextDrawShow(playerid, OnayliHoodGirisTD[playerid][2]);
	    break;
	}
	if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		for (new i; i < MAX_COP_OBJECTS; i++)
		{
		    if (!CopObjectData[i][ObjCreated]) continue;
		    if (areaid == CopObjectData[i][ObjArea])
		    {
				switch (CopObjectData[i][Type])
				{
				    case OBJECT_TYPE_SPIKE:
				    {
						new panels, doors, lights, tires;
			        	GetVehicleDamageStatus(GetPlayerVehicleID(playerid), panels, doors, lights, tires);
			        	UpdateVehicleDamageStatus(GetPlayerVehicleID(playerid), panels, doors, lights, encode_tires(1, 1, 1, 1));
			        	PlayerPlaySound(playerid, 1190, 0.0, 0.0, 0.0);
					}

					case OBJECT_TYPE_SPEEDCAM:
					{
					    new speed = GetPlayerSpeed(GetPlayerVehicleID(playerid));
					    if ((GetFactionType(playerid) == BIRLIK_LSPD || GetFactionType(playerid) == BIRLIK_FBI || GetFactionType(playerid) == BIRLIK_LSMD || GetFactionType(playerid) == BIRLIK_GOV) && PlayerData[playerid][pOnDuty] == 1) break;
					    if (speed > CopObjectData[i][ObjData])
					    {
					        if (GetPVarInt(playerid, "HizAsimi") >= 3)
					        {
					            PlayerPlaySound(playerid, 1132, 0.0, 0.0, 0.0);
					            SetPVarInt(playerid, "HizAsimi", 0);
					            new id = Ticket_Add(playerid, 500, "Hiz Limitini Asmak", "Hiz Kamerasi");
					            if (id != -1)
					            {
					                SunucuMesaji(playerid, "Hiz Kamerasina 3 defa yakalandiginiz için $500 para cezasi kesildi.");
					                SunucuMesaji(playerid, "Cezayi ödeyene kadar devlet hizmetlerinden yararlanamayacaksiniz.");
					            }
					        }
				            else
				            {
				                SetPVarInt(playerid, "HizAsimi", GetPVarInt(playerid, "HizAsimi") + 1);
				                PlayerPlaySound(playerid, 1132, 0.0, 0.0, 0.0);
				                SunucuMesaji(playerid, "Hiz Kamerasina yakalandiniz, yavaslayin! {fc1616}[%d/3]", GetPVarInt(playerid, "HizAsimi"));
				            }
					    }
					}
				}

				break;
		    }
		}
	}

	return 1;
}
HasarBolge(bolge)
{
	new string[24];
	switch (bolge)
	{
	    case 3: format(string, 24, "Karin");
	    case 4: format(string, 24, "Çatal");
	    case 5: format(string, 24, "Sol El");
	    case 6: format(string, 24, "Sag El");
	    case 7: format(string, 24, "Sol Ayak");
	    case 8: format(string, 24, "Sag Ayak");
	    case 9: format(string, 24, "Kafa");
	}
	return string;
}
ResetPlayerDamages(playerid)
{
	for (new i; i<MAX_HASAR; i++)
	{
	    Hasarlar[playerid][i][hasarVarmi] = false;
	    Hasarlar[playerid][i][hasarBolge] = 0;
	    Hasarlar[playerid][i][hasarVeren] = -1;
     	Hasarlar[playerid][i][hasarDeger] = 0.0;
      	Hasarlar[playerid][i][hasarSilah] = 0;
	}
	return 1;
}
Hasar_Ekle(playerid, bodypart, Float:hasar, hasarveren, silahid)
{

	for (new i = 0; i != MAX_HASAR; i ++)
	{
	    if (!Hasarlar[playerid][i][hasarVarmi])
	    {
			Hasarlar[playerid][i][hasarVarmi] = true;
		    Hasarlar[playerid][i][hasarBolge] = bodypart;
		    Hasarlar[playerid][i][hasarVeren] = hasarveren;
            Hasarlar[playerid][i][hasarDeger] = hasar;
            Hasarlar[playerid][i][hasarSilah] = silahid;
			return i;
		}
	}
	return -1;
}

GetNearestCCTV(playerid)
{
	foreach (new i:CCTVIter)
	{
		if (IsPlayerInRangeOfPoint(playerid, 50.0, CCTVInfo[i][cctv_X],CCTVInfo[i][cctv_Y], CCTVInfo[i][cctv_Z]))
		{
			return i;
		}
	}
	return -1;
}

stock Float:GetDistanceBetweenPoints(Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2)
{
    return VectorSize(x1-x2, y1-y2, z1-z2);
}

GetServerBilgi(str[])
{
	new query[150];

	format(query, sizeof(query), "SELECT `%s` FROM `server`", str);

	new Cache:cachee = mysql_query(g_SQL, query);

	new rows;

	cache_get_row_count(rows);

	if (!rows)
		return -1;

	new degisken;
	cache_get_value_name_int(0, str, degisken);

	cache_delete(cachee);
	return degisken;
}

SetServerBilgi(str[], deger)
{
	new query[150];
	format(query, sizeof(query), "UPDATE `server` SET `%s` = '%d'", str, deger);
	mysql_tquery(g_SQL, query);
	return 1;
}

SetServerBilgiStr(str[], yazi[])
{
	new query[200];
	format(query, sizeof(query), "UPDATE `server` SET `%s` = '%s'", str, yazi);
	mysql_tquery(g_SQL, query);
	return 1;
}

GetServerBilgiStr(str[])
{
	new query[300];
	format(query, sizeof(query), "SELECT `%s` FROM `server`", str);
	new Cache:cachee = mysql_query(g_SQL, query);
	new rows;
	cache_get_row_count(rows);
	new yazi[100];
	yazi = "Hata";
	if (rows)
	{
		cache_get_value_name(0, str, yazi, 100);
		cache_delete(cachee);
	}
	return yazi;
}

PlayerPlaySoundEx(playerid, sound)
{
	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(playerid, x, y, z);

	foreach (new i : Player) if (IsPlayerInRangeOfPoint(i, 20.0, x, y, z)) {
	    PlayerPlaySound(i, sound, x, y, z);
	}
	return 1;
}

stock AnimationCheck(playerid)
{
    return (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && !PlayerData[playerid][pBaygin] && !PlayerData[playerid][pKelepce] && !PlayerData[playerid][pSoklandi]  && !PlayerData[playerid][pYereYatirildi] && GetPVarInt(playerid, "IpBaglandi") == 0);
}

stock PlaySoundEx(soundid, Float:x, Float:y, Float:z, range)
{
        foreach (new i : Player)
        {
                if (!OyundaDegil(i)) continue;
                if (!IsPlayerInRangeOfPoint(i, range, x, y, z)) continue;
                PlayerPlaySound(i, soundid, 0, 0, 0);
        }
}
stock Ev_GetKeyCount(houseid)
{
	if (HouseInfo[houseid][evExists])
	{
	    new query[100];
	    format(query, sizeof(query), "SELECT null FROM `anahtarlar` WHERE `sqlid` = '%d' AND `tip` = '1'", HouseInfo[houseid][evID]);
	    new Cache:cachee = mysql_query(g_SQL, query);
	    new rows;
	    cache_get_row_count(rows);
	    cache_delete(cachee);
	    return rows;
	}
	return 0;
}

stock Arac_GetKeyCount(aracid)
{
	if (AracInfo[aracid][aracExists])
	{
	    new query[100];
	    format(query, sizeof(query), "SELECT null FROM `anahtarlar` WHERE `sqlid` = '%d' AND `tip` = '2'", AracInfo[aracid][aracID]);
	    new Cache:cachee = mysql_query(g_SQL, query);
	    new rows;
	    cache_get_row_count(rows);
	    cache_delete(cachee);
	    return rows;
	}
	return 0;
}

stock Arac_KeyDialog(playerid, aracid)
{
	if (AracInfo[aracid][aracExists])
	{
	    new query[100];
	    format(query, sizeof(query), "SELECT * FROM `anahtarlar` WHERE `sqlid` = '%d' AND `tip` = '2'", AracInfo[aracid][aracID]);
	    new Cache:cachee = mysql_query(g_SQL, query);
	    new rows;
	    cache_get_row_count(rows);
	    if (rows)
	    {
	        new psqlid, str[300];
	        for (new i; i<rows; i++)
	        {
	            cache_get_value_name_int(i, "playersqlid", psqlid);
	            format(str, sizeof(str), "%s{FFFFFF}%s\n", str, SQLName(psqlid, 0));
	            KeyListeleme[playerid][i] = psqlid;
	        }
	        cache_delete(cachee);
	        SetPVarInt(playerid, "KeyDeleteCarID", aracid);
	        Dialog_Show(playerid, AracAnahtarlar, DIALOG_STYLE_LIST, "{AA3333}Anahtarlar", str, "Sil", "Geri");
		}
		else
		{
		    DeletePVar(playerid, "KeyDeleteCarID");
		    cmd_arac(playerid);
		}
	}
	return 1;
}

stock Ev_KeyDialog(playerid, houseid)
{
	if (HouseInfo[houseid][evExists])
	{
	    new query[100];
	    format(query, sizeof(query), "SELECT * FROM `anahtarlar` WHERE `sqlid` = '%d' AND `tip` = '1'", HouseInfo[houseid][evID]);
	    new Cache:cachee = mysql_query(g_SQL, query);
	    new rows;
	    cache_get_row_count(rows);
	    if (rows)
	    {
	        new psqlid, str[300];
	        for (new i; i < rows; i++)
	        {
	            cache_get_value_name_int(i, "playersqlid", psqlid);
	            format(str, sizeof(str), "%s{FFFFFF}%s\n", str, SQLName(psqlid, 0));
	            KeyListeleme[playerid][i] = psqlid;
	        }
	        cache_delete(cachee);
	        SetPVarInt(playerid, "KeyDeleteHouseID", houseid);
	        Dialog_Show(playerid, EvAnahtarlar, DIALOG_STYLE_LIST, "{AA3333}Anahtarlar", str, "Sil", "Geri");
		}
		else
		{
		    DeletePVar(playerid, "KeyDeleteHouseID");
		    cmd_ev(playerid);
		}
	}
	return 1;
}

stock OyuncuAnahtarlar(playerid)
{
	new query[100];
	format(query, sizeof(query), "SELECT * FROM `anahtarlar` WHERE `playersqlid` = '%d'", PlayerData[playerid][pID]);
	new Cache:Radless = mysql_query(g_SQL, query);
	new rows;
	cache_get_row_count(rows);
	if (!rows) return HataMesajGonder(playerid, "Size verilmis hiç anahtar yok.");
	new str[2500], string[124], sqlid, givesqlid, tip, id;
	strcat(str, "{FF0000}Tip\t{FF0000}Ev Adi/Araç Model\n");
	for (new i; i<rows; i++)
	{
	    cache_get_value_name_int(i, "sqlid", sqlid);
	    cache_get_value_name_int(i, "givesqlid", givesqlid);
	    cache_get_value_name_int(i, "tip", tip);
	    if (tip == 1)
	    {
			id = Ev_GetID(sqlid);
	        format(string, sizeof(string), "{38c5f7}%s", HouseInfo[id][evIsim]);
		}
		else if (tip == 2)
		{
		    id = Car_GetID2(sqlid);
		    format(string, sizeof(string), "{38c5f7}%s", ReturnVehicleModelName(AracInfo[id][aracModel]));
		}
		KeyListeleme[playerid][i] = sqlid;
		KeyListelemeTip[playerid][i] = tip;
		format(string, sizeof(string), "{38c5f7}%s\t{38c5f7}%s\n",(tip == 1) ? ("Ev") : ("Araç"), string);
		strcat(str, string);
	}
	cache_delete(Radless);
	format(string, sizeof(string), "{B8860B}Anahtarlariniz (%d adet)", rows);
	Dialog_Show(playerid, OyuncuAnahtar, DIALOG_STYLE_TABLIST_HEADERS, string, str, "Sil", "Kapat");
	return 1;
}
stock MobilyaMenu(playerid, id)
{
	if (HouseInfo[id][evSahip] != PlayerData[playerid][pID] && HouseInfo[id][MobilyaYetki] != PlayerData[playerid][pID]) return HataMesajGonder(playerid, "Mobilya düzenleme yetkiniz bulunmamaktadir.");
	new str[100];
   	SetPVarInt(playerid, "FurnitureHouse", id);
	format(str, sizeof(str), "{FFFFFF}Mobilyalar (%d/%d)", Ev_MobilyaSayisi(id), GetMaxFurniture(playerid, id));
	Dialog_Show(playerid, Mobilya, DIALOG_STYLE_LIST, str, "{FFFFFF}Mobilya Satin Al (Liste)\n{FFFFFF}Mobilya Satin Al (Obje ID)\n{FFFFFF}Mobilya Düzenle\n{FFFFFF}Mobilya Sat\n{FFFFFF}Mobilya Kopyala\n{FFFFFF}Mobilya Materyallerini Düzenle\n{FFFFFF}Son Eklenen Mobilyayi Sil\n{FFFFFF}Mobilya Yetkilendirme\n{FFFFFF}Kapiya Git\n{f7163f}Tüm Mobilyalari Sat", "Seç", "Kapat");
	return 1;
}
stock GetMaxFurniture(playerid, evid)
{
	new evmax = HouseInfo[evid][evMaksMobilya];
	switch (PlayerData[playerid][pVip])
	{
	    case 1: evmax += 60;
	    case 2: evmax += 120;
	    case 3: evmax += 200;
	}
	return evmax;
}
stock NPC_Secenekler(playerid, id)
{
	new str[600];
	for (new i; i<MAX_SECENEK; i++)
	{
		format(str, sizeof(str), "%s{E74C3C}> {FFFFFF}Seçenek %d: %s\n{E74C3C}> {FFFFFF}Seçenek %d Cevap: %s\n", str, i, NPCSecenekler[id][i], i, NPCSecenekCevaplar[id][i]);
	}
	SetPVarInt(playerid, "npcid", id);
	Dialog_Show(playerid, Secenekler, DIALOG_STYLE_LIST, "Seçenekler", str, "Seç", "Kapat");
	return 1;
}

Dialog:TaksiPlaka(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
	    if (PlayerData[playerid][pCash] < 23652) return HataMesajGonder(playerid, "Yeterli paraniz yok.");
	    new id = Car_GetID(GetPlayerVehicleID(playerid));
	    if (id == -1) return 1;
	    ParaVer(playerid, -23652);
	    AracInfo[id][TaksiPlaka] = 1;
	    Arac_Kaydet(id);
	    MesajGonder(playerid, "Araca taksi plakasi taktiniz. (/taksi)");
	}
	return 1;
}
Dialog:AracZirhlat(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
	    if (PlayerData[playerid][pCash] < 38984) return HataMesajGonder(playerid, "Yeterli paraniz yok.");

		new id = Car_GetID(GetPlayerVehicleID(playerid));

		if (id == -1) return 1;
	    if(AracInfo[id][aracZirhVarMi] == 1)
	        return HataMesajGonder(playerid, "Bu araçta zaten zirh var, zirh sagligini tamir ederek yenileyebilirsiniz.");

	    ParaVer(playerid, -38984);
	    AracInfo[id][aracZirhVarMi] = 1;
	    AracInfo[id][aracZirh] += 50;
	    Arac_Kaydet(id);
	    MesajGonder(playerid, "Araç zirhlandirildi.");
	}
	return 1;
}
Dialog:Ciftci(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
	            if (PlayerData[playerid][pCash] < 20) return HataMesajGonder(playerid, "Yeterli paraniz bulunmamaktadir.");
	            if (PlayerData[playerid][pTohumlar][0] >= 5) return HataMesajGonder(playerid, "En fazla 5 adet portakal tohumu tasiyabilirsiniz.");
	            ParaVer(playerid, -20);
	            PlayerData[playerid][pTohumlar][0]++;
	            MesajGonder(playerid, "Portakal tohumu satin aldiniz.");
	        }
	        case 1:
	        {
	            if (PlayerData[playerid][pCash] < 25) return HataMesajGonder(playerid, "Yeterli paraniz bulunmamaktadir.");
	            if (PlayerData[playerid][pTohumlar][1] >= 5) return HataMesajGonder(playerid, "En fazla 5 adet elma tohumu tasiyabilirsiniz.");
	            ParaVer(playerid, -25);
	            PlayerData[playerid][pTohumlar][1]++;
	            MesajGonder(playerid, "Elma tohumu satin aldiniz.");
	        }
	        case 2:
	        {
	            if (PlayerData[playerid][pCash] < 30) return HataMesajGonder(playerid, "Yeterli paraniz bulunmamaktadir.");
	            if (PlayerData[playerid][pTohumlar][2] >= 5) return HataMesajGonder(playerid, "En fazla 5 adet armut tohumu tasiyabilirsiniz.");
	            ParaVer(playerid, -30);
	            PlayerData[playerid][pTohumlar][2]++;
	            MesajGonder(playerid, "Armut tohumu satin aldiniz.");
	        }
	        case 3:
	        {
	        	new vehicleid = PlayerData[playerid][pLastCar];
	    		if (GetVehicleModel(vehicleid) != 422) return HataMesajGonder(playerid, "Son bindiginiz araç Bobcat olmalidir.");
				new Float:x, Float:y, Float:z;
				GetVehiclePos(vehicleid, x, y, z);
				if (GetPlayerDistanceFromPoint(playerid, x, y, z) >= 5.0) return HataMesajGonder(playerid, "Araciniza çok uzaksiniz.");
	            if (AracTohumlar[vehicleid][0] <= 0 && AracTohumlar[vehicleid][1] <= 0 && AracTohumlar[vehicleid][2] <= 0) return HataMesajGonder(playerid, "Araçta hiç meyve yok.");
	            new fiyat;
	            fiyat = AracTohumlar[vehicleid][0] * 10;
	            fiyat += AracTohumlar[vehicleid][1] * 12;
	            fiyat += AracTohumlar[vehicleid][2] * 15;
	            for (new i; i<5; i++)
	            {
	                if (IsValidDynamicObject(AracTohumObjeler[vehicleid][i]))
	                {
	                    DestroyDynamicObject(AracTohumObjeler[vehicleid][i]);
	                }
	            }
	            AracTohumlar[vehicleid][0] = 0;
	            AracTohumlar[vehicleid][1] = 0;
	            AracTohumlar[vehicleid][2] = 0;
	            ParaVer(playerid, fiyat);
	            MesajGonder(playerid, "Meyveleri satarak {2ECC71}%s {FFFFFF}kazandiniz.", FormatNumber(fiyat));
	        }
	    }
	}
	return 1;
}
Dialog:SoruEkle(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (isnull(inputtext)) return Dialog_Show(playerid,SoruEkle,DIALOG_STYLE_INPUT, "Soru Ekle", "{FFFFFF}Lütfen ekleyeceginiz sorunun sorusunu giriniz:\n\n{FF0000}NOT: en fazla 50 karakterden olusabilir.", "Devam", "Kapat");
	    if (strlen(inputtext) >= 50) return Dialog_Show(playerid,SoruEkle,DIALOG_STYLE_INPUT, "Soru Ekle", "{FFFFFF}Lütfen ekleyeceginiz sorunun sorusunu giriniz:\n\n{FF0000}NOT: en fazla 50 karakterden olusabilir.", "Devam", "Kapat");
	    SetPVarString(playerid, "Soru",inputtext);
	    Dialog_Show(playerid, SoruCevap, DIALOG_STYLE_INPUT, "Soru Ekle", "{FFFFFF}Lütfen sorunun cevabini yaziniz:\n\n{FF0000}NOT: en fazla 128 karakterden olusabilir.", "Devam", "Kapat");
	}
	return 1;
}
Dialog:SoruCevap(playerid, response, listitem, inputtext[])
{
    if (response)
    {
        if (isnull(inputtext)) return Dialog_Show(playerid, SoruCevap, DIALOG_STYLE_INPUT, "Soru Ekle", "{FFFFFF}Lütfen sorunun cevabini yaziniz:\n\n{FF0000}NOT: en fazla 128 karakterden olusabilir.", "Devam", "Kapat");
        if (strlen(inputtext) >= 128) return Dialog_Show(playerid, SoruCevap, DIALOG_STYLE_INPUT, "Soru Ekle", "{FFFFFF}Lütfen sorunun cevabini yaziniz:\n\n{FF0000}NOT: en fazla 128 karakterden olusabilir.", "Devam", "Kapat");
        new soru[50];
        GetPVarString(playerid, "Soru",soru,sizeof(soru));
        new id = Soru_Ekle(soru ,inputtext, PlayerData[playerid][pAdminName]);
        if (id == -1) return HataMesajGonder(playerid, "Soru eklenemedi.");
        else MesajGonder(playerid, "Soru eklenmistir, ID: %d.", id);
        DeletePVar(playerid, "Soru");
    }
	return 1;
}

stock Soru_Sil(soruid)
{
    new query[124];
    format(query,sizeof(query), "DELETE FROM `sorular` WHERE `sid` = '%d'",SoruData[soruid][soruID]);
    mysql_query(g_SQL,query,false);
    SoruData[soruid][soruExists] = false;
    format(SoruData[soruid][Soru],50, "");
    format(SoruData[soruid][SoruCevap],128, "");
    SoruData[soruid][OkunmaSayisi] = 0;
    format(SoruData[soruid][EklenmeTarihi],25, "");
    format(SoruData[soruid][Ekleyen],24, "");
	return 1;
}

stock SoruSayisi()
{
    new sayi;
    for (new i; i<MAX_SORU; i++)
    {
        if (SoruData[i][soruExists])
        {
            sayi++;
        }
    }
    return sayi;
}

forward SorulariYukle();
public SorulariYukle()
{
    mysql_query(g_SQL, "SELECT * FROM `sorular`");

	new rows = cache_num_rows();
    printf("> Toplam %d soru yüklendi.",rows);

	if (rows)
	{
	    new ssID;
		for (new i = 0; i < rows; i ++) if (i < MAX_SORU)
	    {
	        cache_get_value_name_int(i, "sid", ssID);

            SoruData[ssID][soruExists] = true;
            SoruData[ssID][soruID] = ssID;

	        cache_get_value_name(i, "Soru",SoruData[ssID][Soru],50);
	        cache_get_value_name(i, "Cevap",SoruData[ssID][SoruCevap],128);
	        cache_get_value_name_int(i, "OkunmaSayisi",SoruData[ssID][OkunmaSayisi]);
	        cache_get_value_name(i, "Tarih",SoruData[ssID][EklenmeTarihi],25);
	        cache_get_value_name(i, "Ekleyen",SoruData[ssID][Ekleyen],24);
	    }
    }
    return 1;
}

stock Soru_Ekle(Soruu[], sCevap[], EkleyenAdam[])
{
    if (SoruSayisi() >= MAX_SORU) return 1;
    for (new i; i<MAX_SORU; i++)
    {
        if (!SoruData[i][soruExists])
        {
            SoruData[i][soruExists] = true;
            format(SoruData[i][Soru],50,Soruu);
            format(SoruData[i][SoruCevap],128,sCevap);
            SoruData[i][OkunmaSayisi] = 0;
            format(SoruData[i][EklenmeTarihi],25,ReturnDate());
            format(SoruData[i][Ekleyen],24,EkleyenAdam);

            new query[500];

            SoruData[i][soruID] = i;

			mysql_format(g_SQL, query, sizeof(query), "INSERT INTO `sorular` (`sid`, `Soru`,`Cevap`,`Tarih`,`Ekleyen`) VALUES ('%d', '%s','%s','%s','%s')", i, SQL_ReturnEscaped(Soruu),SQL_ReturnEscaped(sCevap),ReturnDate(),EkleyenAdam);
            mysql_query (g_SQL, query);
            return i;
        }
    }
    return -1;

}

stock GetCarOwnerID(vehicleid)
{
	new id = Car_GetID(vehicleid);
	if (id == -1) return -1;
	return GetPlayerIDWithSQLID(AracInfo[id][aracSahip]);
}
Dialog:AksesuarRenk(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new slot = GetPVarInt(playerid, "AttachmentIndexSel");
	    if (listitem >= 0 && listitem <= 6)
	    {
	        PlayerData[playerid][pARenk][slot] = listitem+1;
	    }
	    else
	    {
	        PlayerData[playerid][pARenk][slot] = 0;
	    }
	    SQL_AksesuarKaydet(playerid);
	    AksesuarTak(playerid, slot);
	}
	return 1;
}
Dialog:Secenekler(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
	            SetPVarInt(playerid, "SecenekID", 0);
	            SetPVarInt(playerid, "SecenekTur", 1);
	        }
	        case 1:
	        {
	            SetPVarInt(playerid, "SecenekID", 0);
	            SetPVarInt(playerid, "SecenekTur", 2);
	        }
	        case 2:
	        {
	            SetPVarInt(playerid, "SecenekID", 1);
	            SetPVarInt(playerid, "SecenekTur", 1);
	        }
	        case 3:
	        {
	            SetPVarInt(playerid, "SecenekID", 1);
	            SetPVarInt(playerid, "SecenekTur", 2);
	        }
	        case 4:
	        {
	            SetPVarInt(playerid, "SecenekID", 2);
	            SetPVarInt(playerid, "SecenekTur", 1);
	        }
	        case 5:
	        {
	            SetPVarInt(playerid, "SecenekID", 2);
	            SetPVarInt(playerid, "SecenekTur", 2);
	        }
	        case 6:
	        {
	            SetPVarInt(playerid, "SecenekID", 3);
	            SetPVarInt(playerid, "SecenekTur", 1);
	        }
	        case 7:
	        {
	            SetPVarInt(playerid, "SecenekID", 3);
	            SetPVarInt(playerid, "SecenekTur", 2);
	        }
	        case 8:
	        {
	            SetPVarInt(playerid, "SecenekID", 4);
	            SetPVarInt(playerid, "SecenekTur", 1);
	        }
	        case 9:
	        {
	            SetPVarInt(playerid, "SecenekID", 4);
	            SetPVarInt(playerid, "SecenekTur", 2);
	        }
	    }
	    Dialog_Show(playerid, Secenek, DIALOG_STYLE_INPUT, "Seçenek Düzenle", "{FFFFFF}Lütfen yaziyi girin:", "Ayarla", "Kapat");
	}
	return 1;
}
Dialog:NPCEtkilesim(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = GetPVarInt(playerid, "NPCEtkilesimID");
	    if (id != -1)
	    {
	        SendClientMessageEx(playerid, -1, "{E74C3C}%s: {FFFFFF}%s", ReturnName(playerid, 0), NPCSecenekler[id][listitem]);
	        SendClientMessageEx(playerid, -1, "{E74C3C}%s: {FFFFFF}%s", NPCBilgi[id][npcAd], NPCSecenekCevaplar[id][listitem]);
	        SetPVarInt(playerid, "NPCEtkilesimID", -1);
	    }
	}
	return 1;
}
Dialog:AracRadyo(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
	    switch (listitem)
	    {
	        case 0:
	        {
	            new str[300];
	            for (new i; i<sizeof(Radyolar); i++)
	            {
	                format(str, sizeof(str), "%s{FFFFFF}%s\n", str, Radyolar[i][radyoAd]);
	            }
	            Dialog_Show(playerid, RadyoSec, DIALOG_STYLE_LIST, "Radyo Kanallari", str, "Seç", "Geri");
	        }
	        case 1:
	        {
	            Dialog_Show(playerid, URLGir, DIALOG_STYLE_INPUT, "URL Gir", "Lütfen müzigin MP3 linkini girin.", "Aç", "Geri");
	        }
	        case 2:
	        {
	            StopAudioStreamForPlayer(playerid);
	            format(RadyoLink[GetPlayerVehicleID(playerid)], 128, "");
	            foreach (new i:Player) if (GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid) && i != playerid)
	    		{
	        		StopAudioStreamForPlayer(i);
	    		}
	        }
		}
	}
	return 1;
}
Dialog:URLGir(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
	    if (isnull(inputtext)) return Dialog_Show(playerid, URLGir, DIALOG_STYLE_INPUT, "URL Gir", "Lütfen müzigin MP3 linkini girin.", "Aç", "Geri");
	    StopAudioStreamForPlayer(playerid);
	    PlayAudioStreamForPlayer(playerid, inputtext);
	    format(RadyoLink[GetPlayerVehicleID(playerid)], 128, inputtext);
	    foreach (new i:Player) if (GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid) && i != playerid)
	    {
	        StopAudioStreamForPlayer(i);
	        PlayAudioStreamForPlayer(i, inputtext);
	    }
	}
	return 1;
}
Dialog:RadyoSec(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_radyo(playerid);
	if (response)
	{
	    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
	    StopAudioStreamForPlayer(playerid);
	    PlayAudioStreamForPlayer(playerid, Radyolar[listitem][radyoLink]);
	    format(RadyoLink[GetPlayerVehicleID(playerid)], 128, Radyolar[listitem][radyoLink]);
	    foreach (new i:Player) if (GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid) && i != playerid)
	    {
	        StopAudioStreamForPlayer(i);
	        PlayAudioStreamForPlayer(i, Radyolar[listitem][radyoLink]);
	    }
	}
	return 1;
}
Dialog:Secenek(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (isnull(inputtext)) return Dialog_Show(playerid, Secenek, DIALOG_STYLE_INPUT, "Seçenek Düzenle", "{FFFFFF}Lütfen yaziyi girin:", "Ayarla", "Kapat");
	    if (strlen(inputtext) > 126)
	    {
	        HataMesajGonder(playerid, "Yazi çok uzun, en fazla 126 karakter girebilirsiniz.");
	        return Dialog_Show(playerid, Secenek, DIALOG_STYLE_INPUT, "Seçenek Düzenle", "{FFFFFF}Lütfen yaziyi girin:", "Ayarla", "Kapat");
	    }
	    if (GetPVarInt(playerid, "SecenekTur") == 1)
	    {
	        format(NPCSecenekler[GetPVarInt(playerid, "npcid")][GetPVarInt(playerid, "SecenekID")], 50, inputtext);
	        NPC_Secenekler(playerid, GetPVarInt(playerid, "npcid"));
	    }
	    else
	    {
	        format(NPCSecenekCevaplar[GetPVarInt(playerid, "npcid")][GetPVarInt(playerid, "SecenekID")], 200, inputtext);
	        NPC_Secenekler(playerid, GetPVarInt(playerid, "npcid"));
	    }
	}
	return 1;
}

stock Ekonomi_Menu(playerid)
{
    new str[550];
    strcat(str, "Ad\tDeger\n");
    format(str, sizeof(str), "%s{FFFFFF}Sivil Maasi\t{2ECC71}%d\n", str, SAATLIK_MAAS);
    format(str, sizeof(str), "%s{FFFFFF}Maas Vergi\t{2ECC71}%d\n", str, SAATLIK_VERGI);
    format(str, sizeof(str), "%s{FFFFFF}Gise Ücreti\t{2ECC71}%d\n", str, GISE_UCRET);
    format(str, sizeof(str), "%s{FFFFFF}Benzin Fiyati\t{2ECC71}%d\n", str, BENZIN_UCRET);
    format(str, sizeof(str), "%s{FFFFFF}Tamirci Ücreti\t{2ECC71}%d", str, TAMIRCI_UCRET);
    Dialog_Show(playerid, Ekonomi, DIALOG_STYLE_TABLIST_HEADERS, "Ekonomi", str, "Ayarla", "Kapat");
	return 1;
}

Dialog:Ekonomi(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    switch (listitem)
	    {
	        case 0: Dialog_Show(playerid, SivilMaaslari, DIALOG_STYLE_INPUT, "Sivil Maasi", "Lütfen yeni bir sivil maasi girin:", "Ayarla", "Geri");
	        case 1: Dialog_Show(playerid, MaasVergi, DIALOG_STYLE_INPUT, "Maas Vergi", "Lütfen yeni maas vergisi girin:", "Ayarla", "Geri");
	        case 2: Dialog_Show(playerid, GiseUcreti, DIALOG_STYLE_INPUT, "Gise Ücreti", "Lütfen yeni gise ücreti girin:", "Ayarla", "Geri");
	        case 3: Dialog_Show(playerid, BenzinFiyat, DIALOG_STYLE_INPUT, "Benzin Fiyati", "Lütfen yeni benzin fiyati girin:", "Ayarla", "Geri");
	        case 4: Dialog_Show(playerid, TamirciUcret, DIALOG_STYLE_INPUT, "Tamirci Ücreti", "Lütfen tamirci ücretini girin:", "Ayarla", "Geri");
	    }
	}
	return 1;
}

Dialog:SivilMaaslari(playerid, response, listitem, inputtext[])
{
	if (!response) return Ekonomi_Menu(playerid);
	if (response)
	{
	    if (isnull(inputtext)) return Dialog_Show(playerid, SivilMaaslari, DIALOG_STYLE_INPUT, "Sivil Maasi", "Lütfen yeni bir sivil maasi girin:", "Ayarla", "Geri");
	    if (!IsNumeric(inputtext)) return Dialog_Show(playerid, SivilMaaslari, DIALOG_STYLE_INPUT, "Sivil Maasi", "Lütfen yeni bir sivil maasi girin:", "Ayarla", "Geri");
	    if (strval(inputtext) < 1) return Dialog_Show(playerid, SivilMaaslari, DIALOG_STYLE_INPUT, "Sivil Maasi", "Lütfen yeni bir sivil maasi girin:", "Ayarla", "Geri");

		SetServerBilgi("SaatlikMaas", strval(inputtext));
		MesajGonder(playerid, "Sivil maaþlarý %s olarak ayarlandý.", FormatNumber(strval(inputtext)));
		Ekonomi_Menu(playerid);
	}
	return 1;
}

Dialog:MaasVergi(playerid, response, listitem, inputtext[])
{
	if (!response) return Ekonomi_Menu(playerid);
	if (response)
	{
	    if (isnull(inputtext)) return Dialog_Show(playerid, MaasVergi, DIALOG_STYLE_INPUT, "Maas Vergi", "Lütfen yeni maas vergisi girin:", "Ayarla", "Geri");
	    if (!IsNumeric(inputtext)) return Dialog_Show(playerid, MaasVergi, DIALOG_STYLE_INPUT, "Maas Vergi", "Lütfen yeni maas vergisi girin:", "Ayarla", "Geri");
	    if (strval(inputtext) < 0) return Dialog_Show(playerid, MaasVergi, DIALOG_STYLE_INPUT, "Maas Vergi", "Lütfen yeni maas vergisi girin:", "Ayarla", "Geri");

		SetServerBilgi("MaasVergi", strval(inputtext));
		MesajGonder(playerid, "Maas Vergisi %s olarak ayarlandi.", FormatNumber(strval(inputtext)));
		Ekonomi_Menu(playerid);
	}
	return 1;
}

Dialog:GiseUcreti(playerid, response, listitem, inputtext[])
{
	if (!response) return Ekonomi_Menu(playerid);
	if (response)
	{
	    if (isnull(inputtext)) return Dialog_Show(playerid, GiseUcreti, DIALOG_STYLE_INPUT, "Gise Ücreti", "Lütfen yeni gise ücreti girin:", "Ayarla", "Geri");
	    if (!IsNumeric(inputtext)) return Dialog_Show(playerid, GiseUcreti, DIALOG_STYLE_INPUT, "Gise Ücreti", "Lütfen yeni gise ücreti girin:", "Ayarla", "Geri");
	    if (strval(inputtext) < 0) return Dialog_Show(playerid, GiseUcreti, DIALOG_STYLE_INPUT, "Gise Ücreti", "Lütfen yeni gise ücreti girin:", "Ayarla", "Geri");

		SetServerBilgi("GiseUcreti", strval(inputtext));
		MesajGonder(playerid, "Gise Ücreti %s olarak ayarlandi.", FormatNumber(strval(inputtext)));
		Ekonomi_Menu(playerid);
	}
	return 1;
}

Dialog:BenzinFiyat(playerid, response, listitem, inputtext[])
{
	if (!response) return Ekonomi_Menu(playerid);
	if (response)
	{
	    if (isnull(inputtext)) return Dialog_Show(playerid, BenzinFiyat, DIALOG_STYLE_INPUT, "Benzin Fiyati", "Lütfen yeni benzin fiyati girin:", "Ayarla", "Geri");
	    if (!IsNumeric(inputtext)) return Dialog_Show(playerid, BenzinFiyat, DIALOG_STYLE_INPUT, "Benzin Fiyati", "Lütfen yeni benzin fiyati girin:", "Ayarla", "Geri");
	    if (strval(inputtext) < 1) return Dialog_Show(playerid, BenzinFiyat, DIALOG_STYLE_INPUT, "Benzin Fiyati", "Lütfen yeni benzin fiyati girin:", "Ayarla", "Geri");

		SetServerBilgi("BenzinFiyat", strval(inputtext));

		MesajGonder(playerid, "Benzin Fiyati %s olarak ayarlandi.", FormatNumber(strval(inputtext)));

		for(new i = 0; i < MAX_POMPA; i++)
		{
			if(Pompa[i][Pompa_Kontrol])
				Pompa_Objeler(i, false);
		}

		Ekonomi_Menu(playerid);
	}
	return 1;
}

Dialog:TamirciUcret(playerid, response, listitem, inputtext[])
{
	if (!response) return Ekonomi_Menu(playerid);
	if (response)
	{
	    if (isnull(inputtext)) return Dialog_Show(playerid, TamirciUcret, DIALOG_STYLE_INPUT, "Tamirci Ücreti", "Lütfen tamirci ücretini girin:", "Ayarla", "Geri");
	    if (!IsNumeric(inputtext)) return Dialog_Show(playerid, TamirciUcret, DIALOG_STYLE_INPUT, "Tamirci Ücreti", "Lütfen tamirci ücretini girin:", "Ayarla", "Geri");
	    if (strval(inputtext) < 0) return Dialog_Show(playerid, TamirciUcret, DIALOG_STYLE_INPUT, "Tamirci Ücreti", "Lütfen tamirci ücretini girin:", "Ayarla", "Geri");

		SetServerBilgi("TamirciUcret", strval(inputtext));
		MesajGonder(playerid, "Tamirci Ücreti %s olarak ayarlandi.", FormatNumber(strval(inputtext)));
		Ekonomi_Menu(playerid);
	}
	return 1;
}

Dialog:Materyal(playerid, response, listitem, inputtext[])
{
	if (!response)
	{
	    PlayerData[playerid][pMateryalDuzenle] = -1;
	    PlayerData[playerid][pMateryalSlot] = 0;
	    MobilyaMenu(playerid, GetPVarInt(playerid, "FurnitureHouse"));
	}
	else
	{
	    if (listitem == 5)
	    {
			new id = PlayerData[playerid][pMateryalDuzenle];
			for (new i; i<5; i++) FurnitureData[GetPVarInt(playerid, "FurnitureHouse")][id][furnitureMateryalDesen][i] = 0;
			Furniture_Refresh(id, GetPVarInt(playerid, "FurnitureHouse"));
			Furniture_Save(id, GetPVarInt(playerid, "FurnitureHouse"));
			Streamer_Update(playerid, STREAMER_TYPE_OBJECT);
			MesajGonder(playerid, "Materyal slotlari temizlendi.");
			Dialog_Show(playerid, Materyal, DIALOG_STYLE_LIST, "Materyal Slotlari", "{FFFFFF}Materyal Slotu 1\n{FFFFFF}Materyal Slotu 2\n{FFFFFF}Materyal Slotu 3\n{FFFFFF}Materyal Slotu 4\n{FFFFFF}Materyal Slotu 5\n{E74C3C}Tüm Materyal Slotlarini Temizle", "Seç", "Kapat");
			return 1;
	    }
	    PlayerData[playerid][pMateryalSlot] = listitem;
	    Dialog_Show(playerid, MateryalDuzenle, DIALOG_STYLE_LIST, "Materyal Düzenle", "{FFFFFF}Desen Degistir\n{E74C3C}Bu Materyal Slotunu Temizle", "Seç", "Kapat");
 	}
	return 1;
}
Dialog:MateryalDuzenle(playerid, response, listitem, inputtext[])
{
	if (!response) return Dialog_Show(playerid, Materyal, DIALOG_STYLE_LIST, "Materyal Slotlari", "{FFFFFF}Materyal Slotu 1\n{FFFFFF}Materyal Slotu 2\n{FFFFFF}Materyal Slotu 3\n{FFFFFF}Materyal Slotu 4\n{FFFFFF}Materyal Slotu 5\n{E74C3C}Tüm Materyal Slotlarini Temizle", "Seç", "Kapat");
	if (response)
	{
	    if (listitem == 0)
	    {
		    new str[300];
		    for (new i; i<sizeof(Desenler); i++)
		    {
		        format(str, sizeof(str), "%s{FFFFFF}Desen %d\n", str, i);
		    }
		    Dialog_Show(playerid, Desenler, DIALOG_STYLE_LIST, "Desenler", str, "Seç", "Geri");
	    }
	    if (listitem == 1)
	    {
	        FurnitureData[GetPVarInt(playerid, "FurnitureHouse")][PlayerData[playerid][pMateryalDuzenle]][furnitureMateryalDesen][PlayerData[playerid][pMateryalSlot]] = 0;
	        Furniture_Refresh(PlayerData[playerid][pMateryalDuzenle], GetPVarInt(playerid, "FurnitureHouse"));
	        Furniture_Save(PlayerData[playerid][pMateryalDuzenle], GetPVarInt(playerid, "FurnitureHouse"));
	        Dialog_Show(playerid, MateryalDuzenle, DIALOG_STYLE_LIST, "Materyal Düzenle", "{FFFFFF}Desen Degistir\n{E74C3C}Bu Materyal Slotunu Temizle", "Seç", "Kapat");
	    }
	}
	return 1;
}
Dialog:Desenler(playerid, response, listitem, inputtext[])
{
	if (!response) return Dialog_Show(playerid, MateryalDuzenle, DIALOG_STYLE_LIST, "Materyal Düzenle", "{FFFFFF}Desen Degistir\n{E74C3C}Bu Materyal Slotunu Temizle", "Seç", "Kapat");
	if (response)
	{
	    new furid = PlayerData[playerid][pMateryalDuzenle];
	    new slot = PlayerData[playerid][pMateryalSlot];
	    FurnitureData[GetPVarInt(playerid, "FurnitureHouse")][furid][furnitureMateryalDesen][slot] = listitem+1;
	    SetDynamicObjectMaterial(FurnitureData[GetPVarInt(playerid, "FurnitureHouse")][furid][furnitureObject], slot, Desenler[listitem][model_id], Desenler[listitem][txdname], Desenler[listitem][texturename], 0);
	    Furniture_Save(furid, GetPVarInt(playerid, "FurnitureHouse"));
	    new str[300];
	    for (new i; i<sizeof(Desenler); i++)
	    {
	        format(str, sizeof(str), "%s{FFFFFF}Desen %d\n", str, i);
	    }
	    Dialog_Show(playerid, Desenler, DIALOG_STYLE_LIST, "Desenler", str, "Seç", "Geri");
	}
	return 1;
}
Dialog:MobilyaKopyala(playerid, response, listitem, inputtext[])
{
	if (!response)
	{
	    PlayerData[playerid][pSelectFurniture] = 0;
	    PlayerData[playerid][pSelectType] = 0;
	    SetPVarInt(playerid, "MobilyaKopyala", -1);
	    MobilyaMenu(playerid, GetPVarInt(playerid, "FurnitureHouse"));
	}
	else
	{
	    new id = GetPVarInt(playerid, "MobilyaKopyala");
		static Float:pos[6];

		GetDynamicObjectPos(FurnitureData[GetPVarInt(playerid, "FurnitureHouse")][id][furnitureObject], pos[0], pos[1], pos[2]);
		GetDynamicObjectRot(FurnitureData[GetPVarInt(playerid, "FurnitureHouse")][id][furnitureObject], pos[3], pos[4], pos[5]);

		new fur = Furniture_Add(GetPVarInt(playerid, "FurnitureHouse"),FurnitureData[GetPVarInt(playerid, "FurnitureHouse")][id][furnitureName],FurnitureData[GetPVarInt(playerid, "FurnitureHouse")][id][furnitureModel], pos[0], pos[1], pos[2], pos[3], pos[4], pos[5], FurnitureData[GetPVarInt(playerid, "FurnitureHouse")][id][furniturePrice]);
		if (fur == -1) return HataMesajGonder(playerid, "Sunucu maksimum mobilya limitine ulasmistir.");
		SonMobilyaID[playerid] = fur;
		for (new i; i<5; i++)
		{
		    FurnitureData[GetPVarInt(playerid, "FurnitureHouse")][fur][furnitureMateryalDesen][i] = FurnitureData[GetPVarInt(playerid, "FurnitureHouse")][id][furnitureMateryalDesen][i];
		}
		Furniture_Refresh(fur, GetPVarInt(playerid, "FurnitureHouse"));
		ParaVer(playerid,-FurnitureData[GetPVarInt(playerid, "FurnitureHouse")][id][furniturePrice]);
		PlayerData[playerid][pEditFurniture] = fur;
		PlayerData[playerid][pSelectFurniture] = 0;
	    PlayerData[playerid][pSelectType] = 0;
	    SetPVarInt(playerid, "MobilyaKopyala", -1);
		EditDynamicObject(playerid, FurnitureData[GetPVarInt(playerid, "FurnitureHouse")][fur][furnitureObject]);
		MesajGonder(playerid, "%s adli mobilya %s karsiliginda kopyalandi.",FurnitureData[GetPVarInt(playerid, "FurnitureHouse")][id][furnitureName], FormatNumber(FurnitureData[GetPVarInt(playerid, "FurnitureHouse")][id][furniturePrice]));
	}
	return 1;
}
Dialog:MobilyaSatinAl(playerid, response, listitem, inputtext[])
{
	if (!response) return MobilyaMenu(playerid, GetPVarInt(playerid, "FurnitureHouse"));
	if (response)
	{
	    if (isnull(inputtext)) return Dialog_Show(playerid, MobilyaSatinAl, DIALOG_STYLE_INPUT, "Obje ID", "Lütfen satin almak istediginiz objenin modelini girin:", "Al", "Geri");
	    if (!IsNumeric(inputtext)) return Dialog_Show(playerid, MobilyaSatinAl, DIALOG_STYLE_INPUT, "Obje ID", "Lütfen satin almak istediginiz objenin modelini girin:", "Al", "Geri");
	    if (!IsValidObjectModel(strval(inputtext)))
	    {
	        HataMesajGonder(playerid, "Geçersiz Obje ID.");
	        return Dialog_Show(playerid, MobilyaSatinAl, DIALOG_STYLE_INPUT, "Obje ID", "Lütfen satin almak istediginiz objenin modelini girin:", "Al", "Geri");
	    }
	    if (strval(inputtext) >= 4000)
	    {
	        HataMesajGonder(playerid, "Bu obje alinamaz.");
	        return Dialog_Show(playerid, MobilyaSatinAl, DIALOG_STYLE_INPUT, "Obje ID", "Lütfen satin almak istediginiz objenin modelini girin:", "Al", "Geri");
	    }
	    static
		    Float:x,
		    Float:y,
		    Float:z,
		    Float:angle;

			GetPlayerPos(playerid, x, y, z);
   			GetPlayerFacingAngle(playerid, angle);

			x += 5.0 * floatsin(-angle, degrees);
   			y += 5.0 * floatcos(-angle, degrees);
    		new fur = Furniture_Add(GetPVarInt(playerid, "FurnitureHouse"), "Yok", strval(inputtext) ,x, y, z, 0.0, 0.0, angle,100);
    		if (fur == -1) return HataMesajGonder(playerid, "Sunucu maksimum mobilya limitine ulasmistir.");
    		SonMobilyaID[playerid] = fur;
    		ParaVer(playerid,-100);
    		PlayerData[playerid][pEditFurniture] = fur;
    		EditDynamicObject(playerid, FurnitureData[GetPVarInt(playerid, "FurnitureHouse")][fur][furnitureObject]);
    		MesajGonder(playerid, "$100 karsiliginda mobilya satin aldiniz. Lütfen mobilyanin yerini ayarlayin ve kayit tusuna basin.");
	}
	return 1;
}
Dialog:Mobilya(playerid, response, listitem, inputtext[])
{
	if (!response) return SetPVarInt(playerid, "FurnitureHouse", -1);
	if (response)
	{
	    new id = GetPVarInt(playerid, "FurnitureHouse");
	    switch (listitem)
	    {
	        case 0:
	        {
			    new str[1200];
		   		if (Ev_MobilyaSayisi(id) >= GetMaxFurniture(playerid, id)) return HataMesajGonder(playerid, "Bu eve daha fazla mobilya alinamaz.");
		   		for (new i = 0; i < sizeof(g_aFurnitureTypes); i ++)
		     	{
		      		format(str,sizeof(str), "%s{FFFFFF}%s\n",str,g_aFurnitureTypes[i]);
		      	}
				Dialog_Show(playerid,MobilyaTipleri,DIALOG_STYLE_LIST, "Mobilyalar",str, "Seç", "Kapat");
	        }
	        case 1:
	        {
	            if (Ev_MobilyaSayisi(id) >= GetMaxFurniture(playerid, id)) return HataMesajGonder(playerid, "Bu eve daha fazla mobilya alinamaz.");
	            Dialog_Show(playerid, MobilyaSatinAl, DIALOG_STYLE_INPUT, "Obje ID", "Lütfen satin almak istediginiz objenin modelini girin:", "Al", "Geri");
	        }
	        case 2:
	        {
	            PlayerData[playerid][pSelectFurniture] = 1;
	            PlayerData[playerid][pSelectType] = 1;
	            SelectObject(playerid);
	            MesajGonder(playerid, "Lütfen düzenlemek istediginiz mobilyaya tiklayin.");
	        }
	        case 3:
	        {
	            PlayerData[playerid][pSelectFurniture] = 1;
	            PlayerData[playerid][pSelectType] = 2;
	            SelectObject(playerid);
	            MesajGonder(playerid, "Lütfen satmak istediginiz mobilyaya tiklayin.");
	        }
	        case 4:
	        {
	            if (Ev_MobilyaSayisi(id) >= GetMaxFurniture(playerid, id)) return HataMesajGonder(playerid, "Bu eve daha fazla mobilya alinamaz.");
	            PlayerData[playerid][pSelectFurniture] = 1;
	            PlayerData[playerid][pSelectType] = 3;
	            SelectObject(playerid);
	            MesajGonder(playerid, "Lütfen kopyalamak istediginiz mobilyaya tiklayin.");
	        }
	        case 5:
	        {
	            PlayerData[playerid][pSelectFurniture] = 1;
	            PlayerData[playerid][pSelectType] = 4;
	            SelectObject(playerid);
	            MesajGonder(playerid, "Lütfen materyallerini düzenlemek istediginiz mobilyaya tiklayin.");
	        }
	        case 6:
	        {
	            new furid = SonMobilyaID[playerid];
	            if (furid == -1) return HataMesajGonder(playerid, "Son eklediginiz mobilya yok.");
	            if (!Iter_Contains(Mobilyalar[GetPVarInt(playerid, "FurnitureHouse")], furid))
	            {
	                HataMesajGonder(playerid, "Son eklediginiz mobilya yok.");
	                return MobilyaMenu(playerid, GetPVarInt(playerid, "FurnitureHouse"));
	            }
	            Furniture_Delete(furid, GetPVarInt(playerid, "FurnitureHouse"));
	            SonMobilyaID[playerid] = -1;
	            MesajGonder(playerid, "Son eklediginiz mobilya silindi.");
	            MobilyaMenu(playerid, GetPVarInt(playerid, "FurnitureHouse"));
	        }
	        case 7:
	        {
	            new hid = House_Inside(playerid);
	            if (hid == -1) return SetPVarInt(playerid, "FurnitureHouse", -1);
	            if (HouseInfo[hid][evSahip] != PlayerData[playerid][pID])
	            {
	                HataMesajGonder(playerid, "Mobilya düzenleme yetkisini sadece ev sahibi verebilir.");
	                return MobilyaMenu(playerid, GetPVarInt(playerid, "FurnitureHouse"));
	            }
	            Dialog_Show(playerid, MobilyaYetkilendirme, DIALOG_STYLE_INPUT, "Mobilya Yetkilendirme", "{FFFFFF}Lütfen mobilya düzenleme yetkisi vereceginiz kisinin ID'sini girin (-1 yazarsaniz yetkiler silinir)", "Tamam", "Geri");
	        }
	        case 8:
	        {
	            new hid = House_Inside(playerid);
	            if (hid == -1) return SetPVarInt(playerid, "FurnitureHouse", -1);
	            SetPlayerInterior(playerid, HouseInteriors[ HouseInfo[hid][evInterior] ][intID]);
  				SetPlayerPos(playerid, HouseInteriors[HouseInfo[hid][evInterior] ][intX], HouseInteriors[ HouseInfo[hid][evInterior] ][intY], HouseInteriors[ HouseInfo[hid][evInterior] ][intZ]);
          		SetPlayerVirtualWorld(playerid,HouseInfo[hid][evID]+1);
            	SetPVarInt(playerid, "FurnitureHouse", -1);
	        }
	        case 9:
	        {
             	new hid = GetPVarInt(playerid, "FurnitureHouse");
	            if (hid == -1) return 1;
	            if (HouseInfo[hid][evSahip] != PlayerData[playerid][pID]) return HataMesajGonder(playerid, "Tüm mobilyalari sadece ev sahibi satabilir.");
	            if (Ev_MobilyaSayisi(hid) <= 0) return HataMesajGonder(playerid, "Hiç mobilya yok.");
	            Dialog_Show(playerid, MobilyalariSat, DIALOG_STYLE_MSGBOX, "Mobilyalari Sat", "{FFFFFF}%d adet mobilyayi {2ECC71}%s {FFFFFF}karsiliginda satmak istiyor musunuz?", "Sat", "Iptal", Ev_MobilyaSayisi(hid), FormatNumber(Ev_MobilyaFiyat(hid)));
	        }
	    }
	}
	return 1;
}

// Degisti
Dialog:MobilyalariSat(playerid, response, listitem, inputtext[])
{
	if (!response) return MobilyaMenu(playerid, GetPVarInt(playerid, "FurnitureHouse"));
	if (response)
	{
	    new id = GetPVarInt(playerid, "FurnitureHouse");
	    ParaVer(playerid, Ev_MobilyaFiyat(id));
	    MesajGonder(playerid, "Mobilyalar satildi. (%s)", FormatNumber(Ev_MobilyaFiyat(id)));
	    SetPVarInt(playerid, "FurnitureHouse", -1);
	    House_RemoveFurniture(id);
	}
	return 1;
}
//
Dialog:MobilyaYetkilendirme(playerid, response, listitem, inputtext[])
{
	if (!response) return MobilyaMenu(playerid, GetPVarInt(playerid, "FurnitureHouse"));
	if (response)
	{
	    new evid = House_Inside(playerid);
	    if (isnull(inputtext)) return Dialog_Show(playerid, MobilyaYetkilendirme, DIALOG_STYLE_INPUT, "Mobilya Yetkilendirme", "{FFFFFF}Lütfen mobilya düzenleme yetkisi vereceginiz kisinin ID'sini girin (-1 yazarsaniz yetkiler silinir)", "Tamam", "Geri");
	    if (!IsNumeric(inputtext)) return Dialog_Show(playerid, MobilyaYetkilendirme, DIALOG_STYLE_INPUT, "Mobilya Yetkilendirme", "{FFFFFF}Lütfen mobilya düzenleme yetkisi vereceginiz kisinin ID'sini girin (-1 yazarsaniz yetkiler silinir)", "Tamam", "Geri");
	    new oyuncuid = strval(inputtext);
	    if (oyuncuid >= 0 && !OyundaDegil(oyuncuid))
		{
		    HataMesajGonder(playerid, "Geçersiz ID girdiniz.");
		    return Dialog_Show(playerid, MobilyaYetkilendirme, DIALOG_STYLE_INPUT, "Mobilya Yetkilendirme", "{FFFFFF}Lütfen mobilya düzenleme yetkisi vereceginiz kisinin ID'sini girin (-1 yazarsaniz yetkiler silinir)", "Tamam", "Geri");
		}
		if (oyuncuid >= 0 && !IsPlayerNearPlayer(playerid, oyuncuid, 15.0))
		{
		    HataMesajGonder(playerid, "Kisiye yeterince yakin degilsiniz.");
		    return Dialog_Show(playerid, MobilyaYetkilendirme, DIALOG_STYLE_INPUT, "Mobilya Yetkilendirme", "{FFFFFF}Lütfen mobilya düzenleme yetkisi vereceginiz kisinin ID'sini girin (-1 yazarsaniz yetkiler silinir)", "Tamam", "Geri");
		}
	    if (oyuncuid == playerid)
	    {
	        HataMesajGonder(playerid, "Kendi ID'ni yazamazsin.");
	        return Dialog_Show(playerid, MobilyaYetkilendirme, DIALOG_STYLE_INPUT, "Mobilya Yetkilendirme", "{FFFFFF}Lütfen mobilya düzenleme yetkisi vereceginiz kisinin ID'sini girin (-1 yazarsaniz yetkiler silinir)", "Tamam", "Geri");
	    }
	    if (oyuncuid == -1)
	    {
	        HouseInfo[evid][MobilyaYetki] = -1;
	        MesajGonder(playerid, "Mobilya yetkisi kaldirildi.");
	        MobilyaMenu(playerid, evid);
	    }
	    else
	    {
		 	HouseInfo[evid][MobilyaYetki] = PlayerData[oyuncuid][pID];
		 	MesajGonder(playerid, "%s adli kisiye mobilya düzenleme yetkisi verdiniz.", ReturnName(oyuncuid, 0));
		 	MobilyaMenu(playerid, evid);
	    }
	}
	return 1;
}
Dialog:MobilyaTipleri(playerid, response, listitem, inputtext[])
{
	if (!response) return MobilyaMenu(playerid, GetPVarInt(playerid, "FurnitureHouse"));
	if (response)
	{
	    new id = GetPVarInt(playerid, "FurnitureHouse");
	    if (Ev_MobilyaSayisi(id) >= GetMaxFurniture(playerid, id)) return HataMesajGonder(playerid, "Bu eve daha fazla mobilya alinamaz.");

		new yazi[1500],sayi = -1;
  		for (new i = 0; i < sizeof(BuyableFurnitures); i ++) if (BuyableFurnitures[i][oSlot] == listitem)
  		{
	    	sayi++;
		    MobilyaListeleme[playerid][sayi] = BuyableFurnitures[i][oModelID];
		    format(yazi,sizeof(yazi), "%s%i\t~r~$%d\n",yazi,BuyableFurnitures[i][oModelID],BuyableFurnitures[i][oPrice]);
	    }
	    Dialog_Show(playerid, MobilyaListele, DIALOG_STYLE_PREVMODEL, "Mobilyalar", yazi, "Satin al", "Geri");
    }
	return 1;
}
Dialog:MobilyaListele(playerid, response, listitem, inputtext[])
{
	if (!response)
	{
	    new str[1200];
	    for (new i = 0; i < sizeof(g_aFurnitureTypes); i ++)
     	{
      		format(str,sizeof(str), "%s{FFFFFF}%s\n",str,g_aFurnitureTypes[i]);
      	}
      	return Dialog_Show(playerid,MobilyaTipleri,DIALOG_STYLE_LIST, "Mobilyalar",str, "Seç", "Kapat");
	}
	else
	{
	    new id = GetPVarInt(playerid, "FurnitureHouse");
   		if (Ev_MobilyaSayisi(id) >= GetMaxFurniture(playerid, id)) return HataMesajGonder(playerid, "Bu eve daha fazla mobilya alinamaz.");
		new modelid = MobilyaListeleme[playerid][listitem];
		for (new i; i<sizeof(BuyableFurnitures); i++) if (BuyableFurnitures[i][oModelID] == modelid)
		{
		    if (PlayerData[playerid][pCash] < BuyableFurnitures[i][oPrice]) return HataMesajGonder(playerid, "Yeterli paraniz yok. (%s)", FormatNumber(BuyableFurnitures[i][oPrice]));
		    static
		    Float:x,
		    Float:y,
		    Float:z,
		    Float:angle;

			GetPlayerPos(playerid, x, y, z);
   			GetPlayerFacingAngle(playerid, angle);

			x += 5.0 * floatsin(-angle, degrees);
   			y += 5.0 * floatcos(-angle, degrees);
    		new fur = Furniture_Add(id, BuyableFurnitures[i][oStr],BuyableFurnitures[i][oModelID],x, y, z, 0.0, 0.0, angle,BuyableFurnitures[i][oPrice]);
    		if (fur == -1) return HataMesajGonder(playerid, "Sunucu maksimum mobilya limitine ulasmistir.");
    		SonMobilyaID[playerid] = fur;
    		ParaVer(playerid,-BuyableFurnitures[i][oPrice]);
    		PlayerData[playerid][pEditFurniture] = fur;
    		EditDynamicObject(playerid, FurnitureData[GetPVarInt(playerid, "FurnitureHouse")][fur][furnitureObject]);
    		MesajGonder(playerid, "%s miktar para karsiliginda '%s' adli mobilyayi satin aldiniz. Lütfen mobilyanin yerini ayarlayin ve kayit tusuna basin.",FormatNumber(BuyableFurnitures[i][oPrice]),BuyableFurnitures[i][oStr]);
    		break;
		}
	}
	return 1;
}
Dialog:BakimModu(playerid, response, listitem, inputtext[])
{
	if (!response) return Kick(playerid);
	if (response)
	{
	    if (isnull(inputtext)) return Dialog_Show(playerid, BakimModu, DIALOG_STYLE_INPUT, "Bakim", "Sunucumuz bakim modundadir, giris yapmak için bakim sifresini girin:", "Gir", "Kapat");
	    if (strcmp(inputtext, GetServerBilgiStr("bakimSifre"), false) == 0)
	    {
	        TextDrawShowForPlayer(playerid, GirisTD);
			SetTimerEx("Giris_Yap",2500,false, "i",playerid);
	    }
	    else
	    {
	        HataMesajGonder(playerid, "Geçersiz sifre.");
	        return Dialog_Show(playerid, BakimModu, DIALOG_STYLE_INPUT, "Bakim", "Sunucumuz bakim modundadir, giris yapmak için bakim sifresini girin:", "Gir", "Kapat");
	    }
	}
	return 1;
}
Dialog:SilahTuccari(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (listitem == 0)
	    {
            if (PlayerData[playerid][pFaction] == -1 || Birlikler[PlayerData[playerid][pFaction]][birlikOnaylar][1] == 0) return HataMesajGonder(playerid, "Silah onayli bir birligin üyesi degilsiniz!");
	        new string[500];
	        for (new i; i<sizeof(SilahFiyatlar); i++)
	        {
	            format(string, sizeof(string), "%s{AFAFAF}> {FFFFFF}%s\t{33AA33}%s\n", string, SilahFiyatlar[i][silahAdi], FormatNumber(SilahFiyatlar[i][silahFiyat]));
			}
			Dialog_Show(playerid, Silahlar, DIALOG_STYLE_TABLIST, "Silahlar", string, "Satin Al", "Geri");
		}
		if (listitem == 1)
		{
		    if (!GetWeapon(playerid)) return HataMesajGonder(playerid, "Elinizde silah yok.");
		    if (GetWeapon(playerid) <= 18 || GetWeapon(playerid) == 23 || GetWeapon(playerid) == 26 || GetWeapon(playerid) == 27 || GetWeapon(playerid) == 32 || GetWeapon(playerid) >= 34 ) return HataMesajGonder(playerid, "Elinizde bulunan silaha mermi satmiyoruz.");
		    if (GetMermiFiyat(GetWeapon(playerid)) > PlayerData[playerid][pCash]) return HataMesajGonder(playerid, "Mermi satin almak için yeterli paraniz yok. (%s)", FormatNumber(GetMermiFiyat(GetWeapon(playerid))));
		    Dialog_Show(playerid, MermiAl, DIALOG_STYLE_MSGBOX, "Mermi Al", "{f44242}%s {FFFFFF}model silaha mermi almak için {0ef416}%s {FFFFFF}ödemelisin. Almak ister misin?", "Evet", "Hayir", ReturnWeaponName(GetWeapon(playerid)), FormatNumber(GetMermiFiyat(GetWeapon(playerid))));
		}
		if (listitem == 2)
		{
			if (PlayerData[playerid][pEsyalar][13] >= 1) return HataMesajGonder(playerid, "Üzerinizde en fazla 1 sarjör bulundurabilirsiniz.");
			if (PlayerData[playerid][pCash] < 500) return HataMesajGonder(playerid, "Yeterli paraniz yok. ($500)");
			PlayerData[playerid][pEsyalar][13]++;
			ParaVer(playerid, -500);
			MesajGonder(playerid, "sarjör satin alindi, (/silahlarim) komutu ile silahiniza sarjör takabilirsiniz.");
		}
	}
	return 1;
}

GetMaksAmmo(silahid)
{
	new mermi = 0;
	switch (silahid)
	{
	    case 22: mermi = 102;
	    case 24: mermi = 42;
	    case 25: mermi = 30;
	    case 28: mermi = 200;
	    case 29: mermi = 150;
	    case 30, 31: mermi = 300;
	    case 33: mermi = 30;
	}
	return mermi;
}

Dialog:MermiAl(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if (!GetWeapon(playerid)) return HataMesajGonder(playerid, "Elinizde silah yok.");
	    if (GetWeapon(playerid) <= 18 || GetWeapon(playerid) == 23 || GetWeapon(playerid) == 26 || GetWeapon(playerid) == 27 || GetWeapon(playerid) == 32 || GetWeapon(playerid) >= 34 ) return HataMesajGonder(playerid, "Elinizde bulunan silaha mermi satmiyoruz.");
		if (GetMermiFiyat(GetWeapon(playerid)) > PlayerData[playerid][pCash]) return HataMesajGonder(playerid, "Mermi satin almak için yeterli paraniz yok. (%s)", FormatNumber(GetMermiFiyat(GetWeapon(playerid))));

	    new silahid = GetWeapon(playerid);

	    ResetWeapon(playerid, silahid);
	    GiveWeaponToPlayer(playerid, silahid, GetMaksAmmo(silahid));
	    ParaVer(playerid, -GetMermiFiyat(GetWeapon(playerid)));
	}
	return 1;
}

Dialog:Silahlar(playerid, response, listitem, inputtext[])
{
	if (!response) return Dialog_Show(playerid, SilahTuccari, DIALOG_STYLE_LIST, "Silah/Mermi Satýcýsý", "{AFAFAF}> {FFFFFF}Silah Satýn Al\n{AFAFAF}> {FFFFFF}Mermi Satýn Al\n{AFAFAF}> {FFFFFF}Þarjör Satýn Al", "Seç", "Kapat");
	if (response)
	{
	    new id = PlayerData[playerid][pFaction];
	    if (id == -1 || Birlikler[id][birlikOnaylar][1] == 0) return HataMesajGonder(playerid, "Silah onayli bir birligin üyesi degilsiniz.");
	    if (PlayerData[playerid][pLevel] < 7) return HataMesajGonder(playerid, "En az 7 seviye olmalisiniz.");
	    if (PlayerData[playerid][pSilahAlmaSayisi] >= 2 && PlayerData[playerid][pSilahAlma] >= gettime()) return HataMesajGonder(playerid, "24 saatte en fazla 2 silah alabilirsiniz.");
	    if (PlayerData[playerid][pCash] < SilahFiyatlar[listitem][silahFiyat]) return HataMesajGonder(playerid, "Bu silahi satin alabilmek için yeterli paraniz yok.");
	    if (PlayerHasWeapon(playerid, SilahFiyatlar[listitem][silahID])) return HataMesajGonder(playerid, "Zaten bu silaha sahipsiniz.");
	    if (PlayerData[playerid][pSilahlar][g_aWeaponSlots[SilahFiyatlar[listitem][silahID]]] != 0) return HataMesajGonder(playerid, "Bu silah türü sizde bulunuyor.");
	    PlayerData[playerid][pSilahAlmaSayisi]++;
	    if (PlayerData[playerid][pSilahAlmaSayisi] >= 2) PlayerData[playerid][pSilahAlma] = gettime()+1*86400;
	    ParaVer(playerid, -SilahFiyatlar[listitem][silahFiyat]);
	    GiveWeaponToPlayer(playerid, SilahFiyatlar[listitem][silahID], SilahFiyatlar[listitem][silahMermi]);
	}
	return 1;
}

stock GetMermiFiyat(silahid)
{
	new fiyat = 0;
	switch (silahid)
	{
	    case 22: fiyat = 2000;
	    case 24: fiyat = 2000;
	    case 25: fiyat = 2000;
	    case 28: fiyat = 2000;
	    case 29: fiyat = 2000;
	    case 30: fiyat = 2000;
	    case 33: fiyat = 2000;
	}
	return fiyat;
}

SilahAveraj(playerid)
{
	new averaj = 0;
	switch(PlayerData[playerid][pVip])
	{
	    case 0: averaj = 1;
	    case 1: averaj = 2;
	    case 2: averaj = 3;
	    case 3: averaj = 5;
	    default: averaj = 1;
	}
	return averaj;
}

Dialog:BarbekuYemek(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (isnull(inputtext)) return Dialog_Show(playerid, BarbekuYemek, DIALOG_STYLE_INPUT, "Barbekü", "{ff0000}> {FFFFFF}Yemegi vermek istediginiz oyuncunun ID'sini girin (Kendi ID'nizi yazarsaniz siz yersiniz ID: %d):", "Ver", "Kapat", playerid);
	    if (!IsNumeric(inputtext)) return Dialog_Show(playerid, BarbekuYemek, DIALOG_STYLE_INPUT, "Barbekü", "{ff0000}> {FFFFFF}Yemegi vermek istediginiz oyuncunun ID'sini girin (Kendi ID'nizi yazarsaniz siz yersiniz ID: %d):", "Ver", "Kapat", playerid);
	    new id = strval(inputtext);
	    if (!OyundaDegil(id))
	    {
	        HataMesajGonder(playerid, "Oyuncu oyunda degil.");
	        return Dialog_Show(playerid, BarbekuYemek, DIALOG_STYLE_INPUT, "Barbekü", "{ff0000}> {FFFFFF}Yemegi vermek istediginiz oyuncunun ID'sini girin (Kendi ID'nizi yazarsaniz siz yersiniz ID: %d):", "Ver", "Kapat", playerid);
	    }
	    if (!IsPlayerNearPlayer(playerid, id, 5.0))
	    {
	        HataMesajGonder(playerid, "Kisiye yeterince yakin degilsiniz.");
	        return Dialog_Show(playerid, BarbekuYemek, DIALOG_STYLE_INPUT, "Barbekü", "{ff0000}> {FFFFFF}Yemegi vermek istediginiz oyuncunun ID'sini girin (Kendi ID'nizi yazarsaniz siz yersiniz ID: %d):", "Ver", "Kapat", playerid);
	    }
	    new yemekid = GetPVarInt(playerid, "PisirilenYemek");
	    ApplyAnimation(id, "FOOD", "EAT_Burger",4.1,0,1,1,0,0);
	    ApplyAnimation(id, "FOOD", "EAT_Burger",4.1,0,1,1,0,0);
		if (id == playerid)
		{
		    MesajGonder(id, "Barbekü de pisirdiginiz yemegi yediniz.");
		    if (yemekid == 1) SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s barbekü de pisirdigi Köfteyi yemeye baslar.", ReturnName(playerid, 0));
		    if (yemekid == 2) SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s barbekü de pisirdigi Tavuk etini yemeye baslar.", ReturnName(playerid, 0));
		    if (yemekid == 3) SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s barbekü de pisirdigi Dana etini yemeye baslar.", ReturnName(playerid, 0));
		}
		else
		{
		    if (yemekid == 1) SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s barbekü de pisirdigi Köfteyi %s adli kisiye verir.", ReturnName(playerid, 0), ReturnName(id, 0));
		    if (yemekid == 2) SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s barbekü de pisirdigi Tavuk etini %s adli kisiye verir.", ReturnName(playerid, 0), ReturnName(id, 0));
		    if (yemekid == 3) SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s barbekü de pisirdigi Dana etini %s adli kisiye verir.", ReturnName(playerid, 0), ReturnName(id, 0));
		}
		DeletePVar(playerid, "PisirilenYemek");
	}
	return 1;
}
Dialog:BarbekuPisir(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
	            if (PlayerData[playerid][pEsyalar][7] <= 0) return HataMesajGonder(playerid, "Hiç köfteniz yok.");
	            PlayerData[playerid][pEsyalar][7]--;
	            PlayerData[playerid][pYemekPisiriliyor] = 15;
	            PlayerData[playerid][pPisirilenYemek] = 1;

	            MesajGonder(playerid, "Köfte 15 saniye sonra pisecek.");
	        }
	        case 1:
	        {
	            if (PlayerData[playerid][pEsyalar][8] <= 0) return HataMesajGonder(playerid, "Hiç tavuk etiniz yok.");
	            PlayerData[playerid][pEsyalar][8]--;
	            PlayerData[playerid][pYemekPisiriliyor] = 15;
	            PlayerData[playerid][pPisirilenYemek] = 2;

	            MesajGonder(playerid, "Tavuk eti 15 saniye sonra pisecek.");
	        }
	        case 2:
	        {
	            if (PlayerData[playerid][pEsyalar][9] <= 0) return HataMesajGonder(playerid, "Hiç dana etiniz yok.");
	            PlayerData[playerid][pEsyalar][9]--;
	            PlayerData[playerid][pYemekPisiriliyor] = 15;
	            PlayerData[playerid][pPisirilenYemek] = 3;

	            MesajGonder(playerid, "Dana eti 15 saniye sonra pisecek.");
	        }
	    }
	}
	return 1;
}

Dialog:Yaralilar(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = GetPlayerID(inputtext);

		if (id != -1 && PlayerData[id][pBaygin] == 1)
	    {
	        if (EMSAccepted(id) != INVALID_PLAYER_ID) return HataMesajGonder(playerid, "Bu kisinin çagrisi %s tarafindan kabul edildi.", ReturnName(EMSAccepted(id), 0));
	        new Float:pos[3];
	        GetPlayerPosEx(id, pos[0], pos[1], pos[2]);
	        DisablePlayerCheckpoint(playerid);
	        cmd_cpsifirla(playerid);

	        SetPlayerCheckpoint(playerid, pos[0], pos[1], pos[2], 7.0);
	        EMSKabul[playerid] = id;
	        MesajGonder(playerid, "%s adli kisinin yeri haritada isaretlendi.", ReturnName(id, 0));

			MesajGonder(id, "%s adli kisi ambulans çagrini kabul etti.", ReturnName(playerid, 0));
	    }
	}
	return 1;
}

Dialog:OyuncuAnahtar(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    SetPVarInt(playerid, "KeyDeleteSqlID", KeyListeleme[playerid][listitem]);
	    SetPVarInt(playerid, "KeyDeleteTip", KeyListelemeTip[playerid][listitem]);
	    Dialog_Show(playerid, AnahtarSilOnay, DIALOG_STYLE_MSGBOX, "Anahtar Sil - Onay", "{FFFFFF}Seçtiginiz anahtar {FF0000}silinecek{FFFFFF}, onayliyor musunuz?", "Onayla", "Iptal");
	}
	return 1;
}
Dialog:AnahtarSilOnay(playerid, response, listitem, inputtext[])
{
	if (!response)
	{
	    DeletePVar(playerid, "KeyDeleteSqlID");
	    DeletePVar(playerid, "KeyDeleteTip");
	    cmd_anahtarlarim(playerid);
	}
	else
	{
	    new query[124];
	    format(query, sizeof(query), "DELETE FROM `anahtarlar` WHERE `playersqlid` = '%d' AND `sqlid` = '%d' AND `tip` = '%d'", PlayerData[playerid][pID],GetPVarInt(playerid, "KeyDeleteSqlID"),GetPVarInt(playerid, "KeyDeleteTip"));
	    mysql_query(g_SQL, query, false);
	    MesajGonder(playerid, "Anahtar basariyla silindi.");
	    DeletePVar(playerid, "KeyDeleteSqlID");
	    DeletePVar(playerid, "KeyDeleteTip");
	    cmd_anahtarlarim(playerid);

	}
	return 1;
}
Dialog:AracAnahtarlar(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_arac(playerid);
	if (response)
	{
	    if (listitem > MAX_CAR_KEYS) return cmd_arac(playerid);
	    new query[150];
	    format(query, sizeof(query), "DELETE FROM `anahtarlar` WHERE `playersqlid` = '%d' AND `sqlid` = '%d' AND `tip` = '2'", KeyListeleme[playerid][listitem], AracInfo[GetPVarInt(playerid, "KeyDeleteCarID")][aracID]);
	    mysql_query(g_SQL, query, false);
	    foreach (new i:Player)
	    {
	        if (PlayerData[i][pID] == KeyListeleme[playerid][listitem])
	        {
	            SunucuMesaji(i, "%s adli kisi tarafindan %s model aracin anahtari geri alindi.", ReturnName(playerid, 0), ReturnVehicleModelName(AracInfo[ GetPVarInt(playerid, "KeyDeleteCarID")][aracModel]));
	        }
	    }
	    MesajGonder(playerid, "%s adli kisinin anahtari geri alindi.", SQLName(KeyListeleme[playerid][listitem], 0));
	    Arac_KeyDialog(playerid, GetPVarInt(playerid, "KeyDeleteCarID"));
	}
	return 1;
}
Dialog:EvAnahtarlar(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_ev(playerid);
	if (response)
	{
	    if (listitem > MAX_HOUSE_KEYS) return cmd_ev(playerid);
	    new query[150];
	    format(query, sizeof(query), "DELETE FROM `anahtarlar` WHERE `playersqlid` = '%d' AND `sqlid` = '%d' AND `tip` = '1'", KeyListeleme[playerid][listitem], HouseInfo[GetPVarInt(playerid, "KeyDeleteHouseID")][evID]);
	    mysql_query(g_SQL, query, false);
	    foreach (new i:Player)
	    {
	        if (PlayerData[i][pID] == KeyListeleme[playerid][listitem])
	        {
	            //Iter_Remove(EvAnahtarlar[i], GetPVarInt(playerid, "KeyDeleteHouseID"));
	            SunucuMesaji(i, "%s adli kisi tarafindan %d ID'li evin anahtari geri alindi.", ReturnName(playerid, 0), GetPVarInt(playerid, "KeyDeleteHouseID"));
	        }
	    }
	    MesajGonder(playerid, "%s adli kisinin anahtari geri alindi.", SQLName(KeyListeleme[playerid][listitem], 0));
	    Ev_KeyDialog(playerid, GetPVarInt(playerid, "KeyDeleteHouseID"));
	}
	return 1;
}
Dialog:AnahtarVer(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new str[1000], string[124],sayi = 0;
	    if (listitem == 0)
	    {
	        strcat(str, "{FF0000}ID\t{FF0000}Ev Adi\n");
			for (new i; i<MAX_EV; i++)
			{
			    if (HouseInfo[i][evExists])
			    {
			        if (HouseInfo[i][evSahip] == PlayerData[playerid][pID])
			        {
			            sayi++;
			            format(string, sizeof(string), "{FFFFFF}%d\t{FFFFFF}%s\n", i, HouseInfo[i][evIsim]);
			            strcat(str, string);
			        }
			    }
			}
   			if (sayi == 0) return HataMesajGonder(playerid, "Hiç eviniz yok.");
			Dialog_Show(playerid, SelectHouse, DIALOG_STYLE_TABLIST_HEADERS, "{8D8DFF}Ev Seç", str, "Seç", "Geri");
	    }
	    if (listitem == 1)
	    {
	        strcat(str, "{FF0000}ID\t{FF0000}Model\t{FF0000}Plaka\n");
	        for (new i; i<MAX_ARAC; i++)
	        {
	            if (AracInfo[i][aracExists])
	            {
	                if (AracInfo[i][aracSahip] == PlayerData[playerid][pID])
	                {
	                    sayi++;
	                    format(string, sizeof(string), "{FFFFFF}%d\t{FFFFFF}%s\t{FFFFFF}%s\n", i, ReturnVehicleModelName(AracInfo[i][aracModel]), AracInfo[i][aracPlaka]);
	                    strcat(str, string);
	                }
	            }
	        }
	        if (sayi == 0) return HataMesajGonder(playerid, "Hiç araciniz yok.");
	        Dialog_Show(playerid, SelectCar, DIALOG_STYLE_TABLIST_HEADERS, "{8D8DFF}Araç Seç", str, "Seç", "Geri");
	    }
	}
	return 1;
}
Dialog:SelectCar(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_anahtarver(playerid);
	if (response)
	{
	    new carid = strval(inputtext);
	    if (AracInfo[carid][aracExists])
	    {
	        if (AracInfo[carid][aracModel] == 509) return HataMesajGonder(playerid, "Bu aracin anahtarini veremezsiniz.");
   			if (Arac_GetKeyCount(carid) >= MAX_CAR_KEYS) return HataMesajGonder(playerid, "Maksimum %d anahtar verebilirsiniz.", MAX_CAR_KEYS);
	        SetPVarInt(playerid, "GiveKeyCarID", carid);
	        Dialog_Show(playerid, EnterPlayerID2, DIALOG_STYLE_INPUT, "Oyuncu ID", "{FFFFFF}Lütfen anahtari vermek istediginiz oyuncunun ID'sini girin:", "Ver", "Kapat");
	    }
	}
	return 1;
}
Dialog:SelectHouse(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_anahtarver(playerid);
	if (response)
	{
	    new evid = strval(inputtext);
	    if (HouseInfo[evid][evExists])
	    {
   			if (Ev_GetKeyCount(evid) >= MAX_HOUSE_KEYS) return HataMesajGonder(playerid, "Maksimum %d anahtar verebilirsiniz.", MAX_HOUSE_KEYS);
	        SetPVarInt(playerid, "GiveKeyHouseID", evid);
	        Dialog_Show(playerid, EnterPlayerID, DIALOG_STYLE_INPUT, "Oyuncu ID", "{FFFFFF}Lütfen anahtari vermek istediginiz oyuncunun ID'sini girin:", "Ver", "Kapat");
	    }
	}
	return 1;
}
Dialog:EnterPlayerID(playerid, response, listitem, inputtext[])
{
	if (!response) return DeletePVar(playerid, "GiveKeyHouseID");
	if (response)
	{
	    if (isnull(inputtext)) return Dialog_Show(playerid, EnterPlayerID, DIALOG_STYLE_INPUT, "Oyuncu ID", "{FFFFFF}Lütfen anahtari vermek istediginiz oyuncunun ID'sini girin:", "Ver", "Kapat");
	    if (!IsNumeric(inputtext)) return Dialog_Show(playerid, EnterPlayerID, DIALOG_STYLE_INPUT, "Oyuncu ID", "{FFFFFF}Lütfen anahtari vermek istediginiz oyuncunun ID'sini girin:", "Ver", "Kapat");
	    if (!OyundaDegil(strval(inputtext)))
	    {
	        HataMesajGonder(playerid, "Oyuncu oyunda degil.");
	        return Dialog_Show(playerid, EnterPlayerID, DIALOG_STYLE_INPUT, "Oyuncu ID", "{FFFFFF}Lütfen anahtari vermek istediginiz oyuncunun ID'sini girin:", "Ver", "Kapat");
		}
		if (strval(inputtext) == playerid)
		{
		    HataMesajGonder(playerid, "Kendi kendine anahtar veremezsiniz.");
		    return Dialog_Show(playerid, EnterPlayerID, DIALOG_STYLE_INPUT, "Oyuncu ID", "{FFFFFF}Lütfen anahtari vermek istediginiz oyuncunun ID'sini girin:", "Ver", "Kapat");
		}
		if (!IsPlayerNearPlayer(playerid, strval(inputtext), 5.0))
		{
		    HataMesajGonder(playerid, "Kisiye yeterince yakin degilsiniz.");
		    return Dialog_Show(playerid, EnterPlayerID, DIALOG_STYLE_INPUT, "Oyuncu ID", "{FFFFFF}Lütfen anahtari vermek istediginiz oyuncunun ID'sini girin:", "Ver", "Kapat");
		}
		if (HouseInfo[GetPVarInt(playerid, "GiveKeyHouseID")][evKiralayan] == PlayerData[strval(inputtext)][pID])
		{
		    HataMesajGonder(playerid, "Evinizi kiralayan kisiye anahtar veremezsiniz.");
		    return Dialog_Show(playerid, EnterPlayerID, DIALOG_STYLE_INPUT, "Oyuncu ID", "{FFFFFF}Lütfen anahtari vermek istediginiz oyuncunun ID'sini girin:", "Ver", "Kapat");
		}
		if (Ev_AnahtarVar(strval(inputtext),GetPVarInt(playerid, "GiveKeyHouseID")))
		{
		    HataMesajGonder(playerid, "Bu evin anahtari zaten kiside var.");
		    return Dialog_Show(playerid, EnterPlayerID, DIALOG_STYLE_INPUT, "Oyuncu ID", "{FFFFFF}Lütfen anahtari vermek istediginiz oyuncunun ID'sini girin:", "Ver", "Kapat");
		}
		new query[250];
		format(query, sizeof(query), "INSERT INTO `anahtarlar` (`playersqlid`, `givesqlid`, `sqlid`, `tip`) VALUES ('%d', '%d', '%d', '1')",PlayerData[strval(inputtext)][pID], PlayerData[playerid][pID], HouseInfo[GetPVarInt(playerid, "GiveKeyHouseID")][evID]);
		mysql_query(g_SQL, query, false);
		MesajGonder(strval(inputtext), "%s adli kisi size %d ID'li evin anahtarini verdi. (/anahtarlarim)", ReturnName(playerid, 0), GetPVarInt(playerid, "GiveKeyHouseID"));
		MesajGonder(playerid, "%s adli kisiye evin anahtari verildi.",ReturnName(strval(inputtext), 0));
		DeletePVar(playerid, "GiveKeyHouseID");
	}
	return 1;
}
Dialog:EnterPlayerID2(playerid, response, listitem, inputtext[])
{
	if (!response) return DeletePVar(playerid, "GiveKeyCarID");
	if (response)
	{
	    if (isnull(inputtext)) return Dialog_Show(playerid, EnterPlayerID2, DIALOG_STYLE_INPUT, "Oyuncu ID", "{FFFFFF}Lütfen anahtari vermek istediginiz oyuncunun ID'sini girin:", "Ver", "Kapat");
	    if (!IsNumeric(inputtext)) return Dialog_Show(playerid, EnterPlayerID2, DIALOG_STYLE_INPUT, "Oyuncu ID", "{FFFFFF}Lütfen anahtari vermek istediginiz oyuncunun ID'sini girin:", "Ver", "Kapat");
	    if (!OyundaDegil(strval(inputtext)))
	    {
	        HataMesajGonder(playerid, "Oyuncu oyunda degil.");
	        return Dialog_Show(playerid, EnterPlayerID2, DIALOG_STYLE_INPUT, "Oyuncu ID", "{FFFFFF}Lütfen anahtari vermek istediginiz oyuncunun ID'sini girin:", "Ver", "Kapat");
		}
		if (strval(inputtext) == playerid)
		{
		    HataMesajGonder(playerid, "Kendi kendine anahtar veremezsiniz.");
		    return Dialog_Show(playerid, EnterPlayerID2, DIALOG_STYLE_INPUT, "Oyuncu ID", "{FFFFFF}Lütfen anahtari vermek istediginiz oyuncunun ID'sini girin:", "Ver", "Kapat");
		}
		if (!IsPlayerNearPlayer(playerid, strval(inputtext), 5.0))
		{
		    HataMesajGonder(playerid, "Kisiye yeterince yakin degilsiniz.");
		    return Dialog_Show(playerid, EnterPlayerID2, DIALOG_STYLE_INPUT, "Oyuncu ID", "{FFFFFF}Lütfen anahtari vermek istediginiz oyuncunun ID'sini girin:", "Ver", "Kapat");
		}
		if (Arac_AnahtarVar(strval(inputtext),GetPVarInt(playerid, "GiveKeyCarID")))
		{
		    HataMesajGonder(playerid, "Bu aracin anahtari zaten kiside var.");
		    return Dialog_Show(playerid, EnterPlayerID2, DIALOG_STYLE_INPUT, "Oyuncu ID", "{FFFFFF}Lütfen anahtari vermek istediginiz oyuncunun ID'sini girin:", "Ver", "Kapat");
		}
		new query[250];
		format(query, sizeof(query), "INSERT INTO `anahtarlar` (`playersqlid`, `givesqlid`, `sqlid`, `tip`) VALUES ('%d', '%d', '%d', '2')",PlayerData[strval(inputtext)][pID], PlayerData[playerid][pID], AracInfo[GetPVarInt(playerid, "GiveKeyCarID")][aracID]);
		mysql_query(g_SQL, query, false);
		MesajGonder(strval(inputtext), "%s adli kisi size %s model aracin anahtarini verdi. (/anahtarlarim)", ReturnName(playerid, 0), ReturnVehicleModelName(AracInfo[GetPVarInt(playerid, "GiveKeyCarID")][aracModel]));
		MesajGonder(playerid, "%s adli kisiye aracin anahtari verildi.",ReturnName(strval(inputtext), 0));
		DeletePVar(playerid, "GiveKeyCarID");
	}
	return 1;
}

stock Arac_AnahtarVar(playerid, carid)
{
	if (AracInfo[carid][aracExists])
	{
	    new query[256];

	    mysql_format(g_SQL, query, sizeof(query), "SELECT null FROM `anahtarlar` WHERE `playersqlid` = '%d' AND `sqlid` = '%d' AND `tip` = '2'", PlayerData[playerid][pID], AracInfo[carid][aracID]);
	    mysql_query (g_SQL, query);

	 	new rows = cache_num_rows();

	    if (rows)
			return true;
	}
	return false;
}

stock Ev_AnahtarVar(playerid, evid)
{
	if (HouseInfo[evid][evExists])
	{
	    new query[124];
	    format(query, sizeof(query), "SELECT null FROM `anahtarlar` WHERE `playersqlid` = '%d' AND `sqlid` = '%d' AND `tip` = '1'", PlayerData[playerid][pID], HouseInfo[evid][evID]);
	    new Cache:Radless = mysql_query(g_SQL, query);
	    new rows;
	    cache_get_row_count(rows);
	    cache_delete(Radless);
	    if (rows) return 1;
	}
	return 0;
}
Dialog:Renk1(playerid, response, listitem, inputtext[])
{
	if (!response) return DeletePVar(playerid, "AracSatinAl");
	if (response)
	{
	    if (isnull(inputtext)) return Dialog_Show(playerid, Renk1, DIALOG_STYLE_INPUT, "Araç Renk 1", "{FFFFFF}Lütfen aracin 1. rengini girin:\n\n{FF0000}NOT: {FFFFFF}Renk 0-255 arasinda olmalidir.", "Devam", "Iptal");
		if (!IsNumeric(inputtext)) return Dialog_Show(playerid, Renk1, DIALOG_STYLE_INPUT, "Araç Renk 1", "{FFFFFF}Lütfen aracin 1. rengini girin:\n\n{FF0000}NOT: {FFFFFF}Renk 0-255 arasinda olmalidir.", "Devam", "Iptal");
		if (strval(inputtext) < 0 || strval(inputtext) > 255) return Dialog_Show(playerid, Renk1, DIALOG_STYLE_INPUT, "Araç Renk 1", "{FFFFFF}Lütfen aracin 1. rengini girin:\n\n{FF0000}NOT: {FFFFFF}Renk 0-255 arasinda olmalidir.", "Devam", "Iptal");
		SetPVarInt(playerid, "aracrenk1", strval(inputtext));
		Dialog_Show(playerid, Renk2, DIALOG_STYLE_INPUT, "Araç Renk 2", "{FFFFFF}Lütfen aracin 2. rengini girin:\n\n{FF0000}NOT: {FFFFFF}Renk 0-255 arasinda olmalidir.", "Devam", "Iptal");
	}
	return 1;
}
Dialog:Renk2(playerid, response, listitem, inputtext[])
{
	if (!response)
	{
	    DeletePVar(playerid, "AracSatinAl");
	    DeletePVar(playerid, "aracrenk1");
	}
	if (response)
	{
	    if (isnull(inputtext)) return Dialog_Show(playerid, Renk2, DIALOG_STYLE_INPUT, "Araç Renk 2", "{FFFFFF}Lütfen aracin 2. rengini girin:\n\n{FF0000}NOT: {FFFFFF}Renk 0-255 arasinda olmalidir.", "Devam", "Iptal");
		if (!IsNumeric(inputtext)) return Dialog_Show(playerid, Renk2, DIALOG_STYLE_INPUT, "Araç Renk 2", "{FFFFFF}Lütfen aracin 2. rengini girin:\n\n{FF0000}NOT: {FFFFFF}Renk 0-255 arasinda olmalidir.", "Devam", "Iptal");
		if (strval(inputtext) < 0 || strval(inputtext) > 255) return Dialog_Show(playerid, Renk2, DIALOG_STYLE_INPUT, "Araç Renk 2", "{FFFFFF}Lütfen aracin 2. rengini girin:\n\n{FF0000}NOT: {FFFFFF}Renk 0-255 arasinda olmalidir.", "Devam", "Iptal");
		new
			bizid = Business_Inside(playerid),
			carid = GetPVarInt(playerid, "AracSatinAl"),
			price = DealershipCars[bizid][carid][vehPrice];

			if (bizid != -1 && Isyeri[bizid][isyeriExists] && Isyeri[bizid][isyeriTip] == 4)
			{
			    if (PlayerData[playerid][pCash] < price) return HataMesajGonder(playerid, "Yeterli paraniz yok.");
				new maksarac = MAX_OWNABLE_CARS;
		 		switch (PlayerData[playerid][pVip])
				{
    				case 1: maksarac += 2;
				    case 2: maksarac += 4;
				    case 3: maksarac += 6;
				}
				if (Car_GetCount(playerid) >= maksarac) return HataMesajGonder(playerid, "En fazla %d araç sahibi olabilirsin.",maksarac);
				switch (DealershipCars[bizid][carid][vehModel])
				{
				    case 471, 495, 509:
				    {
				        if (PlayerData[playerid][pVip] < 1) return HataMesajGonder(playerid, "Bu araci satin alabilmek için Donator olmalisiniz.");
				    }
					case 502, 503, 494, 434, 504:
					{
					    if (PlayerData[playerid][pVip] < 1) return HataMesajGonder(playerid, "Bu araci satin alabilmek için Donator olmalisiniz.");
					}
				}
			    new id = Arac_Olustur(PlayerData[playerid][pID], DealershipCars[bizid][carid][vehModel], 0, 0, -1, Isyeri[bizid][isyeriSpawn][0],Isyeri[bizid][isyeriSpawn][1],Isyeri[bizid][isyeriSpawn][2],Isyeri[bizid][isyeriSpawn][3],GetPVarInt(playerid, "aracrenk1"),strval(inputtext),4,0);
			    if (id != -1)
			    {
			        Isyeri[bizid][isyeriKasa] += price;
			        Isyeri_Kaydet(bizid);
			        ParaVer(playerid, -price);
			        MesajGonder(playerid, "Tebrikler, %s miktar para karsiliginda araç satin aldiniz. Araciniz kapinin önüne park edildi.",FormatNumber(price));
		        	Log_Write("logs/arac-log.txt", "[%s] %s adli oyuncu %s model araci %s karsiliginda satin aldi.", ReturnDate(), ReturnName(playerid, 0), ReturnVehicleModelName(DealershipCars[bizid][carid][vehModel]), FormatNumber(price));
			    }
			    DeletePVar(playerid, "AracSatinAl");
			    DeletePVar(playerid, "aracrenk1");
			}

	}
	return 1;
}
stock ProxDetector(Float:radi, playerid, string[], color)
{
    new Float:x,Float:y,Float:z;
    GetPlayerPos(playerid,x,y,z);
    foreach (new i: Player)
    {
        if (IsPlayerInRangeOfPoint(i,radi,x,y,z))
        {
            SendClientMessage(i,color,string);
        }
    }
}
ProxDetector2(Float:radi, playerid, string[], col1, col2, col3, col4, col5)
{
    new Float:pPositionX[3], Float:oPositionX[3];
    GetPlayerPos(playerid, pPositionX[0], pPositionX[1], pPositionX[2]);
    foreach (Player, i)
    {
        GetPlayerPos(i, oPositionX[0], oPositionX[1], oPositionX[2]);
        if (IsPlayerInRangeOfPoint(i, radi / 16, pPositionX[0], pPositionX[1], pPositionX[2])) { SendClientMessage(i, col1, string); }
        else if (IsPlayerInRangeOfPoint(i, radi / 8, pPositionX[0], pPositionX[1], pPositionX[2])) { SendClientMessage(i, col2, string); }
        else if (IsPlayerInRangeOfPoint(i, radi / 4, pPositionX[0], pPositionX[1], pPositionX[2])) { SendClientMessage(i, col3, string); }
        else if (IsPlayerInRangeOfPoint(i, radi / 2, pPositionX[0], pPositionX[1], pPositionX[2])) { SendClientMessage(i, col4, string); }
        else if (IsPlayerInRangeOfPoint(i, radi, pPositionX[0], pPositionX[1], pPositionX[2])) { SendClientMessage(i, col5, string); }
    }
    return 1;
}
Car_GetCount(playerid)
{
	new
		count = 0;

	for (new i = 0; i != MAX_ARAC; i ++)
	{
		if (AracInfo[i][aracExists] && AracInfo[i][aracSahip] == PlayerData[playerid][pID])
   		{
   		    count++;
		}
	}
	return count;
}
Dialog:AracSil(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = -1;
        if ((id = (Business_Inside(playerid) == -1) ? (Business_Nearest(playerid)) : (Business_Inside(playerid))) != -1)
        {
		    new model = DealershipCars[id][GetPVarInt(playerid, "AracDuzenleID")][vehModel];
		    Isyeri_AracSil(id, model);

			SunucuMesaji(playerid, "Galeriden '%s' adli araç silindi.", ReturnVehicleModelName(model));
			DeletePVar(playerid, "AracDuzenle");
			DeletePVar(playerid, "AracDuzenleID");
		}
	}
	return 1;
}
Isyeri_AracSil(bizid, modelid)
{
	static
	    query[128];
 	for (new i = 0; i != MAX_DEALERSHIP_CARS; i ++) if (DealershipCars[bizid][i][vehModel] == modelid)
	{
		    DealershipCars[bizid][i][vehModel] = 0;
		    DealershipCars[bizid][i][vehPrice] = 0;

		    format(query, sizeof(query), "DELETE FROM `galeriaraclar` WHERE `ID` = '%d' AND `vehID` = '%d'", Isyeri[bizid][isyeriID], DealershipCars[bizid][i][vehID]);
			mysql_query(g_SQL, query, false);

			return 1;
	}
	return 0;
}
Dialog:AracFiyatDegistir(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = -1;
	    if ((id = (Business_Inside(playerid) == -1) ? (Business_Nearest(playerid)) : (Business_Inside(playerid))) != -1)
	    {
		    if (isnull(inputtext)) return Dialog_Show(playerid,AracFiyatDegistir,DIALOG_STYLE_INPUT, "{2ECC71}Araç Fiyat Degistir", "Lütfen seçtiginiz araç için yeni bir fiyat girin:", "Degistir", "Kapat");
		    if (!IsNumeric(inputtext)) return Dialog_Show(playerid,AracFiyatDegistir,DIALOG_STYLE_INPUT, "{2ECC71}Araç Fiyat Degistir", "Lütfen seçtiginiz araç için yeni bir fiyat girin:", "Degistir", "Kapat");
		    new
				    string[128];

				DealershipCars[id][GetPVarInt(playerid, "AracDuzenleID")][vehPrice] = strval(inputtext);

				format(string, sizeof(string), "UPDATE `galeriaraclar` SET `vehPrice` = '%d' WHERE `ID` = '%d' AND `vehID` = '%d'", strval(inputtext), Isyeri[id][isyeriID], DealershipCars[id][GetPVarInt(playerid, "AracDuzenleID")][vehID]);
				mysql_query(g_SQL,string, false);

				SunucuMesaji(playerid, "'%s' model aracin fiyati {2ECC71}%s {FFFFFF}olarak degistirildi.",ReturnVehicleModelName(DealershipCars[id][GetPVarInt(playerid, "AracDuzenleID")][vehModel]),FormatNumber(strval(inputtext)));
				DeletePVar(playerid, "AracDuzenle");
				DeletePVar(playerid, "AracDuzenleID");
		}
	}
	return 1;
}
Dialog:KiyafetAl(playerid, response, listitem, inputtext[])
{
	if (!response)
	{
	    PlayerData[playerid][pSkin] = GetPVarInt(playerid, "AlinanSkin");
   		SetPlayerSkin(playerid, GetPVarInt(playerid, "AlinanSkin"));

		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s adli kisi %s ödeyerek bir kiyafet aldi.", ReturnName(playerid, 0), FormatNumber(GetPVarInt(playerid, "KiyafetPrice")));
		DeletePVar(playerid, "AlinanSkin");
		DeletePVar(playerid, "KiyafetPrice");
	}
	if (response)
	{
		HouseSelect(playerid);
	}
	return 1;
}
Dialog:EvSelect(playerid, response, listitem, inputtext[])
{
	if (!response)
	{
	    PlayerData[playerid][pSkin] = GetPVarInt(playerid, "AlinanSkin");
   		SetPlayerSkin(playerid, GetPVarInt(playerid, "AlinanSkin"));

		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s adli kisi %s ödeyerek bir kiyafet aldi.", ReturnName(playerid, 0), FormatNumber(GetPVarInt(playerid, "KiyafetPrice")));
		DeletePVar(playerid, "AlinanSkin");
		DeletePVar(playerid, "KiyafetPrice");
	}
	if (response)
	{
	    new houseid = strval(inputtext);
	    if (HouseInfo[houseid][evExists])
	    {
	        if (EvGetKiyafetCount(houseid) >= 5)
	        {
	            HataMesajGonder(playerid, "Bu evin gardolabinda bos yer yok.");
	            HouseSelect(playerid);
			}
			else
			{
			    for (new i; i<5; i++)
			    {
			        if (HouseInfo[houseid][evKiyafetler][i] < 1)
			        {
			            HouseInfo[houseid][evKiyafetler][i] = GetPVarInt(playerid, "AlinanSkin");
			            DeletePVar(playerid, "AlinanSkin");
			            DeletePVar(playerid, "KiyafetPrice");
			            MesajGonder(playerid, "Kiyafet evinize eklendi.");
			            break;
			        }
			    }
			}
	    }
	}
	return 1;
}
stock HouseSelect(playerid)
{
	new str[300], string[100];
	strcat(str, "{FF0000}ID\t{FF0000}Ev Adi\t{FF0000}Kiyafet Sayisi\n");
	for (new i; i<MAX_EV; i++)
	{
	    if (HouseInfo[i][evExists])
	    {
	        if (HouseInfo[i][evSahip] == PlayerData[playerid][pID] || HouseInfo[i][evKiralayan] == PlayerData[playerid][pID])
	        {
	            format(string, sizeof(string), "{FFFFFF}%d\t{FFFFFF}%s\t{FFFFFF}%d/5", i, HouseInfo[i][evIsim], EvGetKiyafetCount(i));
	            strcat(str, string);
	        }
	    }
	}
	Dialog_Show(playerid, EvSelect, DIALOG_STYLE_TABLIST_HEADERS, "Ev Seç", str, "Seç", "Iptal");
	return 1;
}
stock EvGetKiyafetCount(houseid)
{
    if (!HouseInfo[houseid][evExists]) return 1;
	new count = 0;
	for (new i; i<5; i++)
	{
	    if (HouseInfo[houseid][evKiyafetler][i] > 0)
	    {
	        count++;
	    }
	}
	return count;
}
public OnPlayerCommandReceived(playerid, cmdtext[])
{
	if(!OyundaDegil(playerid))
	{
		return 0;
	}

    if (PlayerData[playerid][pMuted] >= gettime())
	{
	    HataMesajGonder(playerid, "Sistem tarafindan susturulmussunuz.");
	    return 0;
	}
    if (GetPVarInt(playerid, "KomutSure") > GetTickCount() && GetPVarInt(playerid, "KomutSayisi") >= 10)
	{
	    SetPVarInt(playerid, "KomutSayisi", 0);
		PlayerData[playerid][pMuted] = gettime()+3;
		SunucuMesaji(playerid, "Çok hizli komut yazdiginiz için sistem tarafindan 3 saniye susturuldunuz.");
		return 0;
	}
	if (GetPVarInt(playerid, "KomutSure") + 2000 < GetTickCount())
	{
	    SetPVarInt(playerid, "KomutSayisi", 0);
	}
	SetPVarInt(playerid, "KomutSure",GetTickCount() + 1000);
	SetPVarInt(playerid, "KomutSayisi",GetPVarInt(playerid, "KomutSayisi")+1);
	return 1;
}

enum komutInfo
{
	komutAdi[24]
}

new KomutListesi[][komutInfo] =
{
    {"/ayarlar"},
    {"/mulklerim"},
    {"/karakter"},
    {"/rapor"},
    {"/admins"},
    {"/supporters"},
    {"/animasyonlar"},
    {"/dinle"},
    {"/cpsifirla"},
    {"/kabulet"},
    {"/birlikler"},
    {"/birlikara"},
    {"/hood"},
    {"/anahtarver"},
    {"/aractanat"},
    {"/aracaat"},
    {"/chattemizle"},
    {"/paraver"},
    {"/dene"},
    {"/tokalas"},
    {"/kimlikgoster"},
    {"/lisansgoster"},
    {"/telefon"},
    {"/cagrikabul"},
    {"/cagrikapat"},
    {"/benzinkutusu"},
    {"/motor"},
    {"/kilit"},
    {"/bagaj"},
    {"/araclarim"},
    {"/acam"},
    {"/farlar"},
    {"/kaput"},
    {"/ukullan"},
    {"/uver"},
    {"/utohum"},
    {"/ubilgi"},
    {"/graffiti"},
    {"/birlik"},
    {"/meslekler"},
    {"/shout"},
    {"/whisper"},
    {"/ara"},
    {"/sms"},
    {"/arac"},
    {"/abs"},
    {"/destek"},
    {"/destekiptal"},
    {"/aksesuarlar"},
    {"/usat"}
};

public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
    if(!success) HataMesajGonder(playerid, "{FFFFFF}Böyle bir komut bulunamadý. {919FAF}/yardim {FFFFFF}ya da {919FAF}/sorusor {FFFFFF}komutu ile yardým alabilirsiniz!");
    return 1;
}

public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	if (GetPVarInt(playerid, "DuzenlenenObjeID") != -1)
	{
		if (response == EDIT_RESPONSE_FINAL)
		{
			new id = GetPVarInt(playerid, "DuzenlenenObjeID");

			DestroyDynamicObject(objectid);
			DestroyDynamicObject(Obje[id][objeData]);

			Obje[id][objePos][0] = x;
			Obje[id][objePos][1] = y;
			Obje[id][objePos][2] = z;

			Obje[id][objePos][3] = rx;
			Obje[id][objePos][4] = ry;
			Obje[id][objePos][5] = rz;

			Obje[id][objeData] = CreateDynamicObject(Obje[id][objeModelID], x, y, z, rx, ry, rz, -1, -1, -1, STREAMER_OBJECT_SD, STREAMER_OBJECT_DD, -1, 0);

			Obje_Kaydet(id);
			SetPVarInt(playerid, "DuzenlenenObjeID", -1);
		}
	}
	if (GetPVarInt(playerid, "GiseGate") != -1)
	{
	    if (response == EDIT_RESPONSE_FINAL)
	    {
	        new id = GetPVarInt(playerid, "GiseGate");

			DestroyDynamicObject(Gise[id][gs_GateObje]);
			DestroyDynamicObject(objectid);

			Gise[id][gs_GateBar][0] = x;
            Gise[id][gs_GateBar][1] = y;
            Gise[id][gs_GateBar][2] = z;

            Gise[id][gs_GateBar][3] = rx;
            Gise[id][gs_GateBar][4] = ry;
            Gise[id][gs_GateBar][5] = rz;

            Gise[id][gs_GateObje] = CreateDynamicObject(966, x, y, z, rx, ry, rz);
			Gise[id][gs_Obje] = CreateDynamicObject(968, x, y, z, 0.0, 0.0, 0.0);

			SetPVarInt(playerid, "GiseKapali", id);

			SunucuMesaji(playerid, "Þimdi gisenin kapalý halinin pozisyonunu ayarlayýn.");

			EditDynamicObject(playerid, Gise[id][gs_Obje]);
			SetPVarInt(playerid, "GiseGate", -1);
		}
		return 1;
	}
	if (GetPVarInt(playerid, "GiseKapali") != -1)
	{
		if (response == EDIT_RESPONSE_FINAL)
		{
		    new id = GetPVarInt(playerid, "GiseKapali");

		    DestroyDynamicObject(Gise[id][gs_Obje]);
			DestroyDynamicObject(objectid);

			Gise[id][gs_Kapali][0] = x;
            Gise[id][gs_Kapali][1] = y;
            Gise[id][gs_Kapali][2] = z;

            Gise[id][gs_Kapali][3] = rx;
            Gise[id][gs_Kapali][4] = ry;
            Gise[id][gs_Kapali][5] = rz;

			Gise[id][gs_Obje] = CreateDynamicObject(968, x, y, z, 0.0, 0.0, 0.0);

			SetPVarInt(playerid, "GiseAcik", id);

			SunucuMesaji(playerid, "Þimdi giþenin açýk halinin pozisyonunu ayarlayýn.");

			EditDynamicObject(playerid, Gise[id][gs_Obje]);
			SetPVarInt(playerid, "GiseKapali", -1);
		}
		return 1;
	}
	if (GetPVarInt(playerid, "GiseAcik") != -1)
	{
	    if (response == EDIT_RESPONSE_FINAL)
	    {
			new id = GetPVarInt(playerid, "GiseAcik");

		    DestroyDynamicObject(Gise[id][gs_Obje]);
			DestroyDynamicObject(objectid);

			Gise[id][gs_Acik][0] = x;
            Gise[id][gs_Acik][1] = y;
            Gise[id][gs_Acik][2] = z;

            Gise[id][gs_Acik][3] = rx;
            Gise[id][gs_Acik][4] = ry;
            Gise[id][gs_Acik][5] = rz;

			Gise[id][gs_Obje] = CreateDynamicObject(968, Gise[id][gs_Kapali][0], Gise[id][gs_Kapali][1], Gise[id][gs_Kapali][2], Gise[id][gs_Kapali][3], Gise[id][gs_Kapali][4], Gise[id][gs_Kapali][5]);

			SunucuMesaji(playerid, "Giþenin açýk/kapalý pozisyonlarý ayarlandý.");

            new str[256], Float:ortaKoord[2];

			GetXYInFrontOfToll(Gise[id][gs_GateObje], ortaKoord[0], ortaKoord[1], 3.5);

            format(str, sizeof str, "(%d) [Y tusu]", Gise[id][gs_ID]);
			Gise[id][gs_id] = CreateDynamic3DTextLabel(str, 0xA5A5A5AA, Gise[id][gs_GateBar][0], Gise[id][gs_GateBar][1], Gise[id][gs_GateBar][2]+0.5, 7.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, STREAMER_3D_TEXT_LABEL_SD, -1, 0);

            Gise_Kaydet(id);

			SetPVarInt(playerid, "GiseAcik", -1);
	    }
        return 1;
	}
 	if (PlayerData[playerid][pDuzenlenenPompa] != -1)
	{
		if (response == EDIT_RESPONSE_FINAL)
		{
			new id = PlayerData[playerid][pDuzenlenenPompa];
			PlayerData[playerid][pDuzenlenenPompa] = -1;

			Pompa[id][Pompa_Pos][0] = x;
			Pompa[id][Pompa_Pos][1] = y;
			Pompa[id][Pompa_Pos][2] = z;
			Pompa[id][Pompa_Pos][3] = rx;
			Pompa[id][Pompa_Pos][4] = ry;
			Pompa[id][Pompa_Pos][5] = rz;

			Pompa_Kaydet(id, true);
			SunucuMesaji(playerid, "Benzin pompasi düzenlendi. (ID: %d)", id);
		}
   	}
	if (GetPVarInt(playerid, "TaksiObje") == 1 && response == EDIT_RESPONSE_FINAL && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new
            Float:fPos[6],
            Float:temp
        ;

        GetVehiclePos(GetPlayerVehicleID(playerid), fPos[0], fPos[1], fPos[2]);
        GetVehicleRotationQuat(GetPlayerVehicleID(playerid), temp, fPos[3], fPos[4], fPos[5]);

        AttachDynamicObjectToVehicle(objectid, GetPlayerVehicleID(playerid), x-fPos[0], y-fPos[1], z-fPos[2], rx, ry, rz);
        DeletePVar(playerid, "TaksiObje");
	}
	if (PlayerData[playerid][pGraffiti] == 1 && GetPVarInt(playerid, "GraffitiEdit") != -1)
	{
	    if (response == EDIT_RESPONSE_FINAL)
	    {
		    new id = GetPVarInt(playerid, "GraffitiEdit");
		    PlayerData[playerid][pGraffiti] = 0;
		    format(PlayerData[playerid][pGraffitiYazi], 64, "");
	        SetPVarInt(playerid, "GraffitiEdit", -1);
		    GraffitiData[id][graffitiPos][0] = x;
		    GraffitiData[id][graffitiPos][1] = y;
		    GraffitiData[id][graffitiPos][2] = z;
		    GraffitiData[id][graffitiPos][3] = rx;
		    GraffitiData[id][graffitiPos][4] = ry;
		    GraffitiData[id][graffitiPos][5] = rz;

		    Graffiti_Refresh(id);
		    Graffiti_Save(id);
		    Streamer_Update(playerid, STREAMER_TYPE_OBJECT);
	    }
	    if (response == EDIT_RESPONSE_CANCEL)
	    {
	        new id = GetPVarInt(playerid, "GraffitiEdit");
	        Graffiti_Delete(id);
	        PlayerData[playerid][pGraffiti] = 0;
	        format(PlayerData[playerid][pGraffitiYazi], 64, "");
	        SetPVarInt(playerid, "GraffitiEdit", -1);
	    }
	}
    if (response == EDIT_RESPONSE_FINAL)
    {
        if (PlayerData[playerid][pEditGate] != -1 && GateData[PlayerData[playerid][pEditGate]][gateExists])
        {
            switch (PlayerData[playerid][pEditType])
	        {
	            case 1:
	            {
	                new id = PlayerData[playerid][pEditGate];

	                GateData[PlayerData[playerid][pEditGate]][gatePos][0] = x;
	                GateData[PlayerData[playerid][pEditGate]][gatePos][1] = y;
	                GateData[PlayerData[playerid][pEditGate]][gatePos][2] = z;
	                GateData[PlayerData[playerid][pEditGate]][gatePos][3] = rx;
	                GateData[PlayerData[playerid][pEditGate]][gatePos][4] = ry;
	                GateData[PlayerData[playerid][pEditGate]][gatePos][5] = rz;

	                DestroyDynamicObject(GateData[id][gateObject]);
					GateData[id][gateObject] = CreateDynamicObject(GateData[id][gateModel], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5], GateData[id][gateWorld], GateData[id][gateInterior]);

					Gate_Save(id);
					PlayerData[playerid][pEditGate] = -1;
					PlayerData[playerid][pEditType] = 0;
                    MesajGonder(playerid, "Gate ID %d pozisyonu düzenlendi.", id);
				}
				case 2:
	            {
	                new id = PlayerData[playerid][pEditGate];

	                GateData[PlayerData[playerid][pEditGate]][gateMove][0] = x;
	                GateData[PlayerData[playerid][pEditGate]][gateMove][1] = y;
	                GateData[PlayerData[playerid][pEditGate]][gateMove][2] = z;
	                GateData[PlayerData[playerid][pEditGate]][gateMove][3] = rx;
	                GateData[PlayerData[playerid][pEditGate]][gateMove][4] = ry;
	                GateData[PlayerData[playerid][pEditGate]][gateMove][5] = rz;

	                DestroyDynamicObject(GateData[id][gateObject]);
					GateData[id][gateObject] = CreateDynamicObject(GateData[id][gateModel], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5], GateData[id][gateWorld], GateData[id][gateInterior]);

					Gate_Save(id);
					PlayerData[playerid][pEditGate] = -1;
					PlayerData[playerid][pEditType] = 0;
                    MesajGonder(playerid, "Gate ID %d açilis pozisyonu düzenlendi.", id);
				}
			}
        }
        else if (PlayerData[playerid][pEditFurniture] != -1 && Iter_Contains(Mobilyalar[GetPVarInt(playerid, "FurnitureHouse")], PlayerData[playerid][pEditFurniture]))
	    {
	        new id = House_Inside(playerid);

	        if (id != -1)
			{
			    FurnitureData[id][PlayerData[playerid][pEditFurniture]][furniturePos][0] = x;
			    FurnitureData[id][PlayerData[playerid][pEditFurniture]][furniturePos][1] = y;
			    FurnitureData[id][PlayerData[playerid][pEditFurniture]][furniturePos][2] = z;
                FurnitureData[id][PlayerData[playerid][pEditFurniture]][furnitureRot][0] = rx;
                FurnitureData[id][PlayerData[playerid][pEditFurniture]][furnitureRot][1] = ry;
                FurnitureData[id][PlayerData[playerid][pEditFurniture]][furnitureRot][2] = rz;
				Furniture_Save(PlayerData[playerid][pEditFurniture], id);
				SetDynamicObjectPos(objectid, x, y, z);
		        SetDynamicObjectRot(objectid, rx, ry, rz);
				PlayerData[playerid][pEditFurniture] = -1;
				MobilyaMenu(playerid, id);
			}
	    }
	    if (Iter_Contains(ATMs, EditingATMID[playerid]))
		{
		    if (response == EDIT_RESPONSE_FINAL)
		    {
		        new id = EditingATMID[playerid];
		        ATMData[id][atmX] = x;
		        ATMData[id][atmY] = y;
		        ATMData[id][atmZ] = z;
		        ATMData[id][atmRX] = rx;
		        ATMData[id][atmRY] = ry;
		        ATMData[id][atmRZ] = rz;

		        SetDynamicObjectPos(objectid, ATMData[id][atmX], ATMData[id][atmY], ATMData[id][atmZ]);
		        SetDynamicObjectRot(objectid, ATMData[id][atmRX], ATMData[id][atmRY], ATMData[id][atmRZ]);

		        #if defined ATM_USE_MAPICON
				Streamer_SetFloatData(STREAMER_TYPE_MAP_ICON, ATMData[id][atmIconID], E_STREAMER_X, ATMData[id][atmX]);
				Streamer_SetFloatData(STREAMER_TYPE_MAP_ICON, ATMData[id][atmIconID], E_STREAMER_Y, ATMData[id][atmY]);
				Streamer_SetFloatData(STREAMER_TYPE_MAP_ICON, ATMData[id][atmIconID], E_STREAMER_Z, ATMData[id][atmZ]);
				#endif

				Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, ATMData[id][atmLabel], E_STREAMER_X, ATMData[id][atmX]);
				Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, ATMData[id][atmLabel], E_STREAMER_Y, ATMData[id][atmY]);
				Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, ATMData[id][atmLabel], E_STREAMER_Z, ATMData[id][atmZ] + 0.85);

				new query[144];
				mysql_format(g_SQL, query, sizeof(query), "UPDATE bank_atms SET PosX='%f', PosY='%f', PosZ='%f', RotX='%f', RotY='%f', RotZ='%f' WHERE ID=%d", x, y, z, rx, ry, rz, id);
				mysql_tquery(g_SQL, query);

		        EditingATMID[playerid] = -1;
		    }

		    if (response == EDIT_RESPONSE_CANCEL)
		    {
		        new id = EditingATMID[playerid];
		        SetDynamicObjectPos(objectid, ATMData[id][atmX], ATMData[id][atmY], ATMData[id][atmZ]);
		        SetDynamicObjectRot(objectid, ATMData[id][atmRX], ATMData[id][atmRY], ATMData[id][atmRZ]);
		        EditingATMID[playerid] = -1;
		    }
		}
    }
    if (EditingCopObjectID[playerid] != -1)
	{
	    new id = EditingCopObjectID[playerid];

	    switch (response)
	    {
			case EDIT_RESPONSE_FINAL:
			{
			    CopObjectData[id][ObjX] = x;
				CopObjectData[id][ObjY] = y;
				CopObjectData[id][ObjZ] = z;
				CopObjectData[id][ObjRX] = rx;
				CopObjectData[id][ObjRY] = ry;
				CopObjectData[id][ObjRZ] = rz;
			    SetDynamicObjectPos(objectid, x, y, z);
	            SetDynamicObjectRot(objectid, rx, ry, rz);

	            Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, CopObjectData[id][ObjLabel], E_STREAMER_X, x);
	            Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, CopObjectData[id][ObjLabel], E_STREAMER_Y, y);
	            Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, CopObjectData[id][ObjLabel], E_STREAMER_Z, z + zOffsets[ CopObjectData[id][Type] ]);

	            if (IsValidDynamicArea(CopObjectData[id][ObjArea]))
	            {
	                Streamer_SetFloatData(STREAMER_TYPE_AREA, CopObjectData[id][ObjArea], E_STREAMER_X, x);
		            Streamer_SetFloatData(STREAMER_TYPE_AREA, CopObjectData[id][ObjArea], E_STREAMER_Y, y);
		            Streamer_SetFloatData(STREAMER_TYPE_AREA, CopObjectData[id][ObjArea], E_STREAMER_Z, z + zOffsets[ CopObjectData[id][Type] ]);
	            }
                Streamer_Update(playerid, STREAMER_TYPE_OBJECT);
                Streamer_Update(playerid, STREAMER_TYPE_3D_TEXT_LABEL);
				SaveObjectToDB(id);
			    EditingCopObjectID[playerid] = -1;
			}

	        case EDIT_RESPONSE_CANCEL:
	        {
	            SetDynamicObjectPos(objectid, CopObjectData[id][ObjX], CopObjectData[id][ObjY], CopObjectData[id][ObjZ]);
	            SetDynamicObjectRot(objectid, CopObjectData[id][ObjRX], CopObjectData[id][ObjRY], CopObjectData[id][ObjRZ]);
	            EditingCopObjectID[playerid] = -1;
	            Streamer_Update(playerid, STREAMER_TYPE_OBJECT);
                Streamer_Update(playerid, STREAMER_TYPE_3D_TEXT_LABEL);
	        }
	    }
	}
	return 1;
}

public OnPlayerSelectDynamicObject(playerid, objectid, modelid, Float:x, Float:y, Float:z)
{
	if (GetPVarInt(playerid, "ObjeKaldirma") == 1)
	{
		new id = -1, query[512];

		foreach (new i : Objeler)
		{
			if (objectid == Obje[i][objeData])
			{
				id = Obje[i][objeID];
			}
		}

		if (id == -1)
			return SelectObject(playerid), HataMesajGonder(playerid, "Seçilen obje sistemde bulunamadi, lütfen tekrar deneyiniz.");

		if (id != -1)
		{
			DestroyDynamicObject(Obje[id][objeData]);
			Obje[id][objeData] = -1;

			MesajGonder(playerid, "Seçilen obje basariyla silinmistir.");

			mysql_format(g_SQL, query, sizeof query, "DELETE FROM `objeler` WHERE `ID` = '%d'", id);
			mysql_query (g_SQL, query);

			Iter_Remove(Objeler, id);
			CancelEdit(playerid);

			SetPVarInt(playerid, "ObjeKaldirma", 0);
		}
	}

    if (PlayerData[playerid][pSelectFurniture] == 1 && PlayerData[playerid][pSelectType] == 4)
    {
        foreach (new i: Mobilyalar[GetPVarInt(playerid, "FurnitureHouse")]) if (FurnitureData[GetPVarInt(playerid, "FurnitureHouse")][i][furnitureObject] == objectid && FurnitureData[GetPVarInt(playerid, "FurnitureHouse")][i][furnitureModel] == modelid)
        {
            PlayerData[playerid][pMateryalDuzenle] = i;
            PlayerData[playerid][pMateryalSlot] = 0;
            CancelEdit(playerid);
            PlayerData[playerid][pSelectFurniture] = 0;
            PlayerData[playerid][pSelectType] = 0;
            Dialog_Show(playerid, Materyal, DIALOG_STYLE_LIST, "Materyal Slotlari", "{FFFFFF}Materyal Slotu 1\n{FFFFFF}Materyal Slotu 2\n{FFFFFF}Materyal Slotu 3\n{FFFFFF}Materyal Slotu 4\n{FFFFFF}Materyal Slotu 5\n{E74C3C}Tüm Materyal Slotlarini Temizle", "Seç", "Kapat");
            break;
        }
	}
    if (PlayerData[playerid][pSelectFurniture] == 1 && PlayerData[playerid][pSelectType] == 3)
    {
        foreach (new i: Mobilyalar[GetPVarInt(playerid, "FurnitureHouse")]) if (FurnitureData[GetPVarInt(playerid, "FurnitureHouse")][i][furnitureObject] == objectid && FurnitureData[GetPVarInt(playerid, "FurnitureHouse")][i][furnitureModel] == modelid)
        {
	 		  SetPVarInt(playerid, "MobilyaKopyala", i);
	 		  CancelEdit(playerid);
			  Dialog_Show(playerid, MobilyaKopyala, DIALOG_STYLE_MSGBOX, "Mobilya Kopyala", "{FFFFFF}'%s' adli mobilyayi {2ECC71}%s {FFFFFF}ödeyerek kopyalamak istiyor musunuz?", "Kopyala", "Iptal", FurnitureData[GetPVarInt(playerid, "FurnitureHouse")][i][furnitureName], FormatNumber(FurnitureData[GetPVarInt(playerid, "FurnitureHouse")][i][furniturePrice]));
			  break;
        }
    }
	if (PlayerData[playerid][pSelectFurniture] == 1 && PlayerData[playerid][pSelectType] == 2)
	{
	    foreach (new i: Mobilyalar[GetPVarInt(playerid, "FurnitureHouse")]) if (FurnitureData[GetPVarInt(playerid, "FurnitureHouse")][i][furnitureObject] == objectid && FurnitureData[GetPVarInt(playerid, "FurnitureHouse")][i][furnitureModel] == modelid)
	    {
	        SetPVarInt(playerid, "mobilyaid",i);
	        CancelEdit(playerid);
	        new str[150];
	        new fiyat = floatround(FurnitureData[GetPVarInt(playerid, "FurnitureHouse")][i][furniturePrice]/2);
	        format(str,sizeof(str), "{FFFFFF}Seçtiginiz {2ECC71}'%s' {FFFFFF}adli mobilyayi {2ECC71}%s {FFFFFF}fiyatina satmak istediginize emin misiniz?",FurnitureData[GetPVarInt(playerid, "FurnitureHouse")][i][furnitureName],FormatNumber(fiyat));
	        ShowPlayerDialog(playerid,45,DIALOG_STYLE_MSGBOX, "Mobilya Sat",str, "Evet", "Hayir");
	        break;
	    }
	}
	if (PlayerData[playerid][pSelectFurniture] == 1 && PlayerData[playerid][pSelectType] == 1)
	{
	    foreach (new i: Mobilyalar[GetPVarInt(playerid, "FurnitureHouse")]) if (FurnitureData[GetPVarInt(playerid, "FurnitureHouse")][i][furnitureObject] == objectid && FurnitureData[GetPVarInt(playerid, "FurnitureHouse")][i][furnitureModel] == modelid)
	    {
	        PlayerData[playerid][pEditFurniture] = i;
	        CancelEdit(playerid);
	        PlayerData[playerid][pSelectFurniture] = 0;
	        PlayerData[playerid][pSelectType] = 0;
	        EditDynamicObject(playerid,FurnitureData[GetPVarInt(playerid, "FurnitureHouse")][i][furnitureObject]);
	        break;
	    }
	}
	return 1;
}

public OnPlayerEditObject(playerid, playerobject, objectid, response, Float:fX, Float:fY, Float:fZ, Float:fRotX, Float:fRotY, Float:fRotZ)
{
	if (response == EDIT_RESPONSE_CANCEL && CCTV_inEditing[playerid])
	{
	    CancelEditCCTV(playerid, CCTV_ID[playerid]);
	}
	if (response == EDIT_RESPONSE_FINAL && CCTV_inEditing[playerid])
	{
	    new id = CCTV_ID[playerid];

		SetObjectPos(objectid, fX, fY, fZ);
		SetObjectRot(objectid, fRotX, fRotY, fRotZ);

		CCTVInfo[id][cctv_X] = fX;
		CCTVInfo[id][cctv_Y] = fY;
		CCTVInfo[id][cctv_Z] = fZ;

		CCTVInfo[id][cctv_rotX] = fRotX;
		CCTVInfo[id][cctv_rotY] = fRotY;
		CCTVInfo[id][cctv_rotZ] = fRotZ;

		SaveCCTV(id);
		CCTV_inEditing[playerid] = 0;
		CCTV_ID[playerid] = -1;
	}
	return 1;
}

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
    if (GetPVarInt(playerid, "davet") == 1)
    {
        new id = clickedplayerid;
        if (!OyundaDegil(id)) return 1;
        if (PlayerData[playerid][pFaction] == -1) return HataMesajGonder(playerid, "Bir birlik üyesi degilsiniz.");
        if (id == playerid) return HataMesajGonder(playerid, "Kendini birlige davet edemezsin.");
        if (PlayerData[playerid][pFactionRutbe] != Birlikler[PlayerData[playerid][pFaction]][birlikRutbeler] && Birlikler[PlayerData[playerid][pFaction]][birlikYetkilendirme][0] > PlayerData[playerid][pFactionRutbe]) return HataMesajGonder(playerid, "Bu islemi gerçeklestirmek için yetkiniz yok.");
        if (PlayerData[playerid][pFaction] == PlayerData[id][pFaction] || PlayerData[id][pFaction] != -1) return HataMesajGonder(playerid, "Bu oyuncunun zaten birligi var.");
        PlayerData[id][pFactionDavet] = PlayerData[playerid][pFaction];
        PlayerData[id][pFactionDavetEden] = playerid;
        Dialog_Show(id,BirlikDaveti,DIALOG_STYLE_MSGBOX, "{72C425}Birlik Daveti", "{FFFFFF}%s adli kisi, seni \"%s\" adli birlige davet ediyor. Kabul ediyor musun?", "Evet", "Hayir",ReturnName(playerid,0),Birlik_GetName(playerid));
        SunucuMesaji(playerid, "%s adli oyuncuyu birliginize katilmasi için davet yolladiniz. Yanitini bekleyin.",ReturnName(id,0));
        DeletePVar(playerid, "davet");
    }

	return 1;
}
public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
    if (IsPlayerInsideTaxi(playerid))
    {
        new driverid = GetVehicleDriver(GetPlayerVehicleID(playerid));

        cmd_cpsifirla(driverid);

        SetPlayerCheckpoint(driverid, fX, fY, fZ, 5.0);
        MesajGonder(driverid, "%s yol tarifinde bulundu, haritadan belirtilen noktaya git.", ReturnName(playerid, 0));
        MesajGonder(playerid, "%s adli söföre yol tarifi iletildi, bekleyiniz.", ReturnName(driverid, 0));
        SetPVarInt(driverid, "AracBuluyor", 1);
        SetPVarInt(playerid, "AracBuluyor", 1);
        return 1;
    }
    if (PlayerData[playerid][pAdminDuty] == 1 && PlayerData[playerid][pAdmin] > 0)
    {
        SetPlayerPosFindZ(playerid, fX, fY, fZ);
    }
    if (PlayerData[playerid][pLSPDUydu] == true && IsPlayerInRangeOfPoint(playerid, 5.0, 1472.7960,-1685.9994,-70.0371))
    {
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid, 0);
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, fX, fY, fZ+35.0);
		SetPlayerFacingAngle(playerid, 270.1425);
		SetPlayerCameraLookAt(playerid, fX, fY, fZ);
		SunucuMesaji(playerid, "Uydu üzerinden izlediginiz bölge: %s (çikmak için /uydu)", GetLocation(fX, fY, fZ));
	}
    return 1;
}
CMD:o(playerid, params[])
	return cmd_oyundisi(playerid, params);

CMD:duyuru(playerid, params[])
	return cmd_oyundisi(playerid, params);

CMD:f(playerid, params[])
	return cmd_fac(playerid, params);

CMD:s(playerid, params[])
	return cmd_shout(playerid, params);

CMD:m(playerid, params[])
	return cmd_megafon(playerid, params);

CMD:d(playerid, params[])
	return cmd_dept(playerid, params);

CMD:clearchat(playerid, params[])
	return cmd_chattemizle(playerid, params);

CMD:l(playerid, params[])
	return cmd_low(playerid, params);

CMD:yap(playerid, params[])
return cmd_do(playerid, params);

CMD:rapor(playerid, params[])
	return cmd_destek(playerid, params);

CMD:sorusor(playerid, params[])
	return cmd_destek(playerid, params);

CMD:w(playerid, params[])
	return cmd_whisper(playerid, params);
	
/*CMD:systemozellik32(playerid, params[])
{
    if(isnull(params)) return KullanimMesaji(playerid, "/ozellik [Görünüþ]");
    if(strlen(params) > 128) return MesajGonder(playerid, "Dýþ görünüþünüz 128 karakterden fazla olamaz.");
    MesajGonder(playerid, "Dýþ görünüþünüzü '%s' olarak güncellediniz.", params);
    format(PlayerData[playerid][pGorunus], 128, "%s", PlayerData[playerid][pGorunus]);
    Oyuncu_Kaydet(playerid);
    return 1;
}
CMD:systemozellikbak33(userid, params[])
{
	new playerid;
	SetPlayerChatBubble(userid, PlayerData[userid][pGorunus], COLOR_ORANGE, 10,0, 12000);
	MesajGonder(playerid,"%s > %s%s", ReturnName(userid, 0), PlayerData[playerid][pGorunus]);
    Oyuncu_Kaydet(playerid);
    return 1;
}

CMD:ozellik(playerid, params[])
{
    if(isnull(params)) return MesajGonder(playerid, "/ozellik [bilgi/yaz/bak/sil]");
    new id, text[256], userid;
    if(!strcmp(params, "bak", userid)) {
	cmd_systemozellikbak33(userid);
    }else if(!strcmp(params, "sil")) {
	format(PlayerData[playerid][pGorunus], 27, "Ayarlanmamýþ");
	MesajGonder(playerid,"Dýþ görünüþünüz silindi.");
    }else if(!strcmp(params, "bilgi")) {
	Dialog_Show(playerid, OZELLIK_DIA, DIALOG_STYLE_MSGBOX, "{eb4040}Karakter Dýþ Görünüþü Hakkýnda Bilgi", "{FFFFFF}/ozellik yaz\n\n Özellik yaz komutunu yazarak kendinize bir dýþ görünüþ belileyebilirsiniz, oyuncular /ozellik bak yazdýðýnda sizin görünüþünüzü inceleyeceði için düzgün bir dýþ görünüþ yazmalýsýnýz.\nOyuncular sizin dýþ görünüþünüze bakarken hem chat üzerinden hemde üstünüzde çýkan yazýdan dýþ görünüþünüzü inceleyebilecekler.", "Anladým", "");
    }else if(!strcmp(params, "yaz")) {
    	return Dialog_Show(playerid, ozellikgir, DIALOG_STYLE_INPUT, "Dýþ Görünüþ", "{ff0022}» {FFFFFF}Aþþaðýdaki boþ kutucuða dýþ görünüþünüzü giriniz:\n{ff0022}NOT: {FFFFFF}Kutucuða gireceðiniz cümle tamamen IC olmak zorundadýr. (ORN: 18 yaþlarýnda 1.70 boylarýnda göstermektedir.)", "Devam", "Vazgeç");
    }
	return 1;
}
Dialog:ozellikgir(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (isnull(inputtext)) return Dialog_Show(playerid, oocmisimdegistir, DIALOG_STYLE_INPUT, "Ýsim Deðiþtir", "{ff0022}» {FFFFFF}Lütfen yeni isminizi girin (Ad_Soyad formatýnda olmalýdýr):\n{ff0022}Not: {FFFFFF}Ýsminizi deðiþtirdikten sonra IC siciliniz sýfýrlanýr.", "Devam", "Vazgeç");
	    if (strlen(inputtext) <= 7)
	    {
        HataMesajGonder(playerid, "Çok kýsa bir dýþ görünüþ girdiniz");
    	return Dialog_Show(playerid, ozellikgir, DIALOG_STYLE_INPUT, "Dýþ Görünüþ", "{ff0022}» {FFFFFF}Aþþaðýdaki boþ kutucuða dýþ görünüþünüzü giriniz:\n{ff0022}NOT: {FFFFFF}Kutucuða gireceðiniz cümle tamamen IC olmak zorundadýr. (ORN: 18 yaþlarýnda 1.70 boylarýnda göstermektedir.)", "Devam", "Vazgeç");
	    }
	    cmd_systemozellik32(playerid, inputtext), Oyuncu_Kaydet(playerid);
	}
	return 1;
}
CMD:bak(playerid, params[])
{
    new id;
    if(sscanf(params, "u", id)) return KullanimMesaji(playerid, "/bak [oyuncu ID]");
    if(!IsPlayerConnected(id)) return HataMesajGonder(playerid, "Belirttiðiniz kullanýcý oyunda bulunmuyor.");
   	if(!OyundaDegil(id) || !IsPlayerNearPlayer(playerid, id, 5.0)) return HataMesajGonder(playerid, "Oyuncu giriþ yapmamýþ veya yeteri kadar yakýn deðilsin.");
    MesajGonder(playerid, "%s isimli kiþinin dýþ görünüþünü inceliyorsun.", ReturnName(id));
    MesajGonder(playerid, "%s - %s", ReturnName(id), PlayerData[id][pGorunus]);
    SetPlayerChatBubble(id, PlayerData[id][pGorunus], COLOR_CYAN, 30.0, 2000);
    return 1;
}*/

CMD:me(playerid, params[])
{
    if (PlayerData[playerid][pCCTV] != -1) return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýn.");
	if (GetPVarInt(playerid, "Logged") == 0) return HataMesajGonder(playerid, "Þu an komut kullanamazsýn.");
	if (isnull(params))
	    return KullanimMesaji(playerid, "/me [Emote]");

	new action[256];
    strdel(action, 0, 256);
	strcat(action, params);

    if (strfind(action, "\"", true, 1) != -1)
	{
			new ilkdenden = strfind(action, "\"", true, 1);
			new sonrakidenden = strfind(action, "\"", true, ilkdenden+1);
			strins(action, "{FFFFFF}", ilkdenden);
			strins(action, "{C2A2DA}", sonrakidenden+9);
	}

	Log_Write("logs/emote.log", "%s %s",ReturnName(playerid, 0), trcar(action));

	if (strlen(action) > 120)
	{
 	    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "> %s %.120s", ReturnName(playerid, 0), action); // ciyan
	    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "...%s", action[120]);
	}
	else
	{
	    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "> %s %s", ReturnName(playerid, 0), action);
	}
	return 1;
}
CMD:cw(playerid, params[])
{
    if(isnull(params) || strlen(params) > 256)return
        KullanimMesaji(playerid, "/cw [yazý]");

    new vehicleid = GetPlayerVehicleID(playerid);
    new string[256];

    format(string, sizeof(string), "[Araç içi] %s sessizce: %s",(playerid, true), params);
    printf(string);

    return 1;
}
CMD:do(playerid, params[])
{
    if (PlayerData[playerid][pCCTV] != -1) return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýn.");
    if (GetPVarInt(playerid, "Logged") == 0) return HataMesajGonder(playerid, "Þu an komut kullanamazsýn.");
	if (isnull(params))
	    return KullanimMesaji(playerid, "/do [Durum]");
    Log_Write("logs/emote.log", "%s (( %s ))",trcar(params),ReturnName(playerid, 0));
	if (strlen(params) > 120) {
	    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "> %.120s", params);
	    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "...%s (( %s ))", params[120], ReturnName(playerid, 0));
	}
	else {
	    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "> %s (( %s ))", params, ReturnName(playerid, 0));
	}
	return 1;
}

CMD:dene(playerid, params[])
{
    if (PlayerData[playerid][pCCTV] != -1) return HataMesajGonder(playerid, "su an bu komutu kullanamazsin.");
	new gelensayi = RandomEx(1, 3), str[24];

	if (gelensayi == 1) format(str, sizeof(str), "{2E8B57}Basarili");
	else if (gelensayi == 2) format(str, sizeof(str), "{8B0000} Basarisiz");
	SendNearbyMessage(playerid, 30.0, COLOR_YELLOW, "* %s. {FFFF00}(( %s ))", str, ReturnName(playerid, 0));
	return 1;
}

CMD:ame(playerid, params[])
{
    static
        string[128];
    if (PlayerData[playerid][pCCTV] != -1) return HataMesajGonder(playerid, "su an bu komutu kullanamazsin.");
    if (isnull(params))
        return KullanimMesaji(playerid, "/ame [Hareket]");

    format(string, sizeof(string), "* %s %s", ReturnName(playerid, 0), params);
    SetPlayerChatBubble(playerid, string, COLOR_CYAN, 30.0, 10000);

    SendClientMessageEx(playerid, COLOR_CYAN, "* %s %s", ReturnName(playerid, 0), params);
    return 1;
}

CMD:ado(playerid, params[])
{
    static
        string[128];
    if (PlayerData[playerid][pCCTV] != -1) return HataMesajGonder(playerid, "su an bu komutu kullanamazsin.");
    if (isnull(params))
        return KullanimMesaji(playerid, "/ado [Durum]");

    format(string, sizeof(string), "* %s (( %s ))", params, ReturnName(playerid, 0));
    SetPlayerChatBubble(playerid, string, COLOR_GREEN, 30.0, 10000);

    SendClientMessageEx(playerid, COLOR_GREEN, "* %s (( %s ))", params, ReturnName(playerid, 0));
    return 1;
}
CMD:shout(playerid, params[])
{
    if (GetPVarInt(playerid, "Logged") == 0) return HataMesajGonder(playerid, "Þu an komut kullanamazsin.");
    if (PlayerData[playerid][pCCTV] != -1) return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsin.");
	if (isnull(params))
	    return KullanimMesaji(playerid, "(/s)hout <mesaj>");
    Log_Write("logs/chat.log", "%s baðýrarak: %s",ReturnName(playerid, 0), trcar(params));
	if (strlen(params) > 64) {
	    SendNearbyMessage(playerid, 30.0, COLOR_WHITE, "%s (baðýrarak): %.64s", ReturnName(playerid, 0), params);
	    SendNearbyMessage(playerid, 30.0, COLOR_WHITE, "...%s!", params[64]);

	}
	else {
	    SendNearbyMessage(playerid, 30.0, COLOR_WHITE, "%s (baðýrarak): %s!", ReturnName(playerid, 0), params);
	}

	static id = -1;
	if ((id = House_Nearest(playerid)) != -1)
 	{
		foreach (new i:Player) if (House_Inside(i) == id)
		{
		    SendClientMessageEx(i, -1, "{FFFFFF}(dýþarýdan gelen ses) %s (baðýrarak): %s!", ReturnName(playerid, 0), params);
		}
	}
	return 1;
}

CMD:low(playerid, params[])
{

    if (GetPVarInt(playerid, "Logged") == 0) return HataMesajGonder(playerid, "su an komut kullanamazsin.");
    if (PlayerData[playerid][pCCTV] != -1) return HataMesajGonder(playerid, "su an bu komutu kullanamazsin.");
	if (isnull(params))
	    return KullanimMesaji(playerid, "(/l)ow <mesaj>");
     Log_Write("logs/chat.log", "%s Sessizce: %s",ReturnName(playerid, 0), trcar(params));
	if (strlen(params) > 64) {
	    SendNearbyMessage(playerid, 5.0, COLOR_WHITE, "%s (sessizce): %.64s", ReturnName(playerid, 0), params);
	    SendNearbyMessage(playerid, 5.0, COLOR_WHITE, "...%s", params[64]);
	}
	else {
	    SendNearbyMessage(playerid, 5.0, COLOR_WHITE, "%s (sessizce): %s", ReturnName(playerid, 0), params);
	}
	return 1;
}

CMD:b(playerid, params[])
{
    if (GetPVarInt(playerid, "Logged") == 0) return HataMesajGonder(playerid, "su an komut kullanamazsin.");
    if (PlayerData[playerid][pCCTV] != -1) return HataMesajGonder(playerid, "su an bu komutu kullanamazsin.");

	if (isnull(params))
	    return KullanimMesaji(playerid, "/b <mesaj>");

	Log_Write("logs/chat.log", "OOC: %s: %s",ReturnName(playerid, 0), trcar(params));
	if (strlen(params) > 64)
	{
		if (PlayerData[playerid][pAdminDuty] == 1 && PlayerData[playerid][pAdmin] >= 1)
		{
		    SendNearbyMessageEx(playerid, 20.0, COLOR_WHITE, "{F3F3F3}(({cc0000} %s %s{cc0000}: {FFFFFF}%.64s", GetAdminRank(playerid), PlayerData[playerid][pAdminName], params);
		    SendNearbyMessageEx(playerid, 20.0, COLOR_WHITE, "...%s {F3F3F3}))", params[64]);
	    }
        else if (PlayerData[playerid][pHelperDuty] == 1 && PlayerData[playerid][pHelper] >= 1)
	    {
	        SendNearbyMessageEx(playerid, 20.0, COLOR_WHITE, "(( {FF8C00}(Lv. %d) Supporter %s: {FFFFFF}%.64s", PlayerData[playerid][pHelper], PlayerData[playerid][pAdminName], params);
		    SendNearbyMessageEx(playerid, 20.0, COLOR_WHITE, "...%s ))", params[64]);
	    }
	    else
		{
		    if (PlayerData[playerid][pMaske] == false)
		    {
			    SendNearbyMessageEx(playerid, 20.0, COLOR_WHITE, "{F3F3F3}(( %s: %.64s", ReturnName(playerid, 0), params);
			    SendNearbyMessageEx(playerid, 20.0, COLOR_WHITE, "...%s ))", params[64]);
		    }
		    else
		    {
		        SendNearbyMessageEx(playerid, 20.0, COLOR_WHITE, "{F3F3F3}(( %s: %.64s", ReturnName(playerid, 0), params);
			    SendNearbyMessageEx(playerid, 20.0, COLOR_WHITE, "...%s ))", params[64]);
		    }
		}
	}
	else
	{
	    if (PlayerData[playerid][pAdminDuty] == 1 && PlayerData[playerid][pAdmin] >= 1)
	    {
	    	SendNearbyMessageEx(playerid, 20.0, COLOR_WHITE, "{F3F3F3}(({cc0000} %s %s{cc0000}: {FFFFFF}%s ))", GetAdminRank(playerid), PlayerData[playerid][pAdminName], params);
	    }
	    else if (PlayerData[playerid][pHelperDuty] == 1 && PlayerData[playerid][pHelper] >= 1)
	    {
	    	SendNearbyMessageEx(playerid, 20.0, COLOR_WHITE, "(( {FF8C00}(Lv. %d) Supporter %s: {FFFFFF}%s ))", PlayerData[playerid][pHelper], PlayerData[playerid][pAdminName], params);
	    }
	    else
	    {
            if (PlayerData[playerid][pMaske] == false) SendNearbyMessageEx(playerid, 20.0, COLOR_WHITE, "(( (%d) %s: %s ))", playerid, ReturnName(playerid, 0), params);
            else SendNearbyMessageEx(playerid, 20.0, COLOR_WHITE, "{FFFFFF}(( %s: %s ))", ReturnName(playerid, 0), params);
	    }
	}
	return 1;
}
CMD:whisper(playerid, params[])
{
    if (GetPVarInt(playerid, "Logged") == 0) return HataMesajGonder(playerid, "su an komut kullanamazsin.");
    if (PlayerData[playerid][pCCTV] != -1) return HataMesajGonder(playerid, "su an bu komutu kullanamazsin.");
	new userid, text[128];

    if (sscanf(params, "us[128]", userid, text))
	    return KullanimMesaji(playerid, "/(w)hisper [ID/Isim] [Mesaj]");

	if (!OyundaDegil(userid) || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return HataMesajGonder(playerid, "Oyuncu oyunda degil veya oyuncuya yakin degilsin.");

	if (userid == playerid)
		return HataMesajGonder(playerid, "Kendine fisildayamazsin.");

	if (GetPlayerState(userid) == PLAYER_STATE_SPECTATING)
	    return HataMesajGonder(playerid, "Oyuncu oyunda degil veya oyuncuya yakin degilsin.");

    if (strlen(text) > 64) {
        if (PlayerData[playerid][pMaske] == false)
        {
		    SendClientMessageEx(userid, COLOR_YELLOW, "> %s fisildadi (%d): %.64s", ReturnName(playerid, 0), playerid, text);
		    SendClientMessageEx(userid, COLOR_YELLOW, "...%s >", text[64]);
			if (PlayerData[userid][pMaske] == false)
			{
			    SendClientMessageEx(playerid, COLOR_YELLOW, "> %s'a fisildadin (%d): %.64s", ReturnName(userid, 0), userid, text);
			    SendClientMessageEx(playerid, COLOR_YELLOW, "...%s >", text[64]);
		    }
		    else
		    {
		        SendClientMessageEx(playerid, COLOR_YELLOW, "> %s'a fisildadin: %.64s", ReturnName(userid, 0), text);
			    SendClientMessageEx(playerid, COLOR_YELLOW, "...%s >", text[64]);
		    }
	    }
	    else
	    {
            SendClientMessageEx(userid, COLOR_YELLOW, "> %s fisildadi: %.64s", ReturnName(playerid, 0), text);
		    SendClientMessageEx(userid, COLOR_YELLOW, "...%s >", text[64]);

		    if (PlayerData[userid][pMaske] == false)
			{
			    SendClientMessageEx(playerid, COLOR_YELLOW, "> %s'a fisildadin (%d): %.64s", ReturnName(userid, 0), userid, text);
			    SendClientMessageEx(playerid, COLOR_YELLOW, "...%s **", text[64]);
		    }
		    else
		    {
		        SendClientMessageEx(playerid, COLOR_YELLOW, "> %s'a fisildadin: %.64s", ReturnName(userid, 0), text);
			    SendClientMessageEx(playerid, COLOR_YELLOW, "...%s **", text[64]);
		    }
	    }
	}
	else {
	    if (PlayerData[playerid][pMaske] == false)
	    {
	    	SendClientMessageEx(userid, COLOR_YELLOW, "> %s fisildadi (%d): %s **", ReturnName(playerid, 0), playerid, text);
	    	SendClientMessageEx(playerid, COLOR_YELLOW, "> %s'a fisildadin (%d): %s **", ReturnName(userid, 0), userid, text);
	    }
	    else
	    {
	        SendClientMessageEx(userid, COLOR_YELLOW, "> %s fisildadi: %s **", ReturnName(playerid, 0), text);
	    	SendClientMessageEx(playerid, COLOR_YELLOW, "> %s'a fisildadin: %s **", ReturnName(userid, 0), text);
	    }
	}
	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "> %s, %s'in kulagina yaklasir ve fisildar.", ReturnName(playerid, 0), ReturnName(userid, 0));
	return 1;
}
CMD:pm(playerid, params[])
{
	static
	    userid,
	    text[128];

	if (sscanf(params, "us[128]", userid, text))
	    return KullanimMesaji(playerid, "/pm [ID/Isim] [mesaj]");

	if (PlayerData[playerid][pAyarlar][1] == 1)
	    return HataMesajGonder(playerid, "PM alýmlarýný açmalýsýnýz. (/ayarlar)");

	if (!OyundaDegil(userid))
	    return HataMesajGonder(playerid, "Oyuncu oyunda deðil.");

	if (userid == playerid)
	    return HataMesajGonder(playerid, "Kendine özel mesaj yollayamazsýn.");

    if (PlayerData[userid][pAyarlar][1] == 1)
	    return HataMesajGonder(playerid, "Bu kiþi þu anda özel mesaj kabul etmiyor.");

	if (IsPlayerPause(userid)) KullanimMesaji(playerid, "PM attýðýnýz kiþi þu an meþgul, yanýt veremeyebilir.");
	PlayerPlaySound(userid, 1085, 0.0, 0.0, 0.0);
	SendClientMessageEx(userid, COLOR_ORANGE, "((%s (%d): %s))", ReturnName(playerid, 0), playerid, text);
	SendClientMessageEx(playerid, 0xdede02FF, "((%s (%d): %s))", ReturnName(userid, 0), userid, text);

	Log_Write("logs/pm-log.txt", "[%s] %s >>> %s Mesaj: %s",ReturnDate(),ReturnName(playerid),ReturnName(userid),trcar(text));
	return 1;
}
CMD:apm(playerid, params[])
{
    static
	    userid,
	    text[128];
	if (PlayerData[playerid][pAdmin] < 1) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
	if (sscanf(params, "us[128]", userid, text))
	    return KullanimMesaji(playerid, "/apm [ID/Isim] [mesaj]");

	if (!OyundaDegil(userid))
	    return HataMesajGonder(playerid, "Oyuncu oyunda degil !");

	if (userid == playerid)
	    return HataMesajGonder(playerid, "Kendine özel mesaj yollayamazsin.");

	if (IsPlayerPause(userid)) KullanimMesaji(playerid, "Bu oyuncu þu anda AFK, mesajýnýza yanýt veremeyebilir.");
	PlayerPlaySound(userid, 1085, 0.0, 0.0, 0.0);
	SendClientMessageEx(userid, COLOR_YELLOW, "[STAFF] < {ff810c}%s{ffff00}(%d): %s", PlayerData[playerid][pAdminName],playerid, text);
	SendClientMessageEx(playerid, 0xdede02FF, "[STAFF] > {ff810c}%s{ffff00}(%d): %s", ReturnName(userid, 0), userid, text);

	return 1;
}

CMD:ek(playerid, params[]) return cmd_emniyetkemeri(playerid, params);
CMD:emniyetkemeri(playerid, params[])
{
	if (!IsPlayerInAnyVehicle(playerid))
        return HataMesajGonder(playerid, "Bu komutu sadece araçta kullanabilirsin.");

	if (IsVehicleBike(GetPlayerVehicleID(playerid)))
	    return HataMesajGonder(playerid, "Bu tür araçlar kullanamazsin.");

	switch (EmniyetKemeri[playerid])
	{
	    case false:
	    {
            SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s emniyet kemerini takar.", ReturnName(playerid, 0));
			EmniyetKemeri[playerid] = true;
		}
	    case true:
	    {
	        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s emniyet kemerini çýkartýr.", ReturnName(playerid, 0));
			EmniyetKemeri[playerid] = false;
	    }
	}
	return 1;
}

CMD:arac(playerid, params[])
{
    static type[18];
	if (sscanf(params, "s[18]", type))
	{
	    	SendClientMessage(playerid, COLOR_BLUE, "[Kullaným]: {FFFFFF}/arac [deðer]");
	    	SendClientMessage(playerid, COLOR_BLUE, "[ADLAR]:{FFFFFF} motor - far - cam - bagaj - kaput - kilit");
		return 1;
	}
    if (PlayerData[playerid][pBaygin] == 1 && PlayerData[playerid][pBaygin] == 2) return HataMesajGonder(playerid, "Yaralý durumunda bu komutu kullanamassýn.");

	if (!strcmp(type, "motor", true))
	{
     	cmd_motorddddd(playerid);
	}
	else if (!strcmp(type, "far", true))
	{
      	cmd_farddddd(playerid);
	}
	else if (!strcmp(type, "cam", true))
	{
        cmd_acamddddd(playerid);
	}
	else if (!strcmp(type, "bagaj", true))
	{
      	cmd_bagajddddd(playerid);
	}
	else if (!strcmp(type, "kaput", true))
	{
      	cmd_kaputddddd(playerid);
	}
	else if (!strcmp(type, "kilit", true))
	{
      	cmd_kilitddddd(playerid);
	}
	return 1;
}

CMD:motorddddd(playerid)
{
    new vehicleid = GetPlayerVehicleID(playerid);
    new id = Car_GetID(vehicleid);

    if (!IsEngineVehicle(vehicleid)) return HataMesajGonder(playerid, "Bu komutu sadece araçta kullanabilirsin.");
   	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesajGonder(playerid, "Sürücü deðilsin.");
   	if (AracInfo[id][aracBenzin] < 0.1) return HataMesajGonder(playerid, "Bu aracýn yakýtý bitmiþ.");
   	if (AracHasar(vehicleid) <= 300) return HataMesajGonder(playerid, "Bu araca çok fazla hasar verilmiþ, motor çalýþmýyor.");
   	if (UsingPumpID[playerid] != -1) return HataMesajGonder(playerid, "Þu an motoru çalýþtýramazsýnýz.");

   	if(AracInfo[id][aracTip] == 6 && PlayerData[playerid][pEhliyetSinavinda] == 0) return HataMesajGonder(playerid, "Bu aracý kullanamazsýnýz. (su anda ehliyet sinavinda degilsiniz.)");
   	if(AracInfo[id][aracTip] == 6 && PlayerData[playerid][pEhliyetSinavinda] == 1 && GetVehicleModel(vehicleid) != 462) return HataMesajGonder(playerid, "Bu araci kullanamazsiniz. (Motor ehliyeti için Faggio'ya binmelisiniz.)");
   	if(AracInfo[id][aracTip] == 6 && PlayerData[playerid][pEhliyetSinavinda] == 2 && GetVehicleModel(vehicleid) != 405) return HataMesajGonder(playerid, "Bu araci kullanamazsiniz. (Sürücü ehliyeti için Sentinel'e binmelisiniz.)");

   	if (Car_IsOwner(playerid, id) || Car_Birlik(playerid, id) || AracInfo[id][aracTip] == 2 || AracInfo[id][aracKiralayan] == PlayerData[playerid][pID] || Arac_AnahtarVar(playerid, id) || (PlayerData[playerid][pFaction] != -1 && GetFactionType(playerid) != BIRLIK_CETE && GetFactionType(playerid) != BIRLIK_MAFYA && GetFactionType(playerid) != BIRLIK_LEGAL && AracInfo[id][aracFactionType] == GetFactionType(playerid)) || (AracInfo[id][aracTip] == 5 && PlayerData[playerid][pVip] > 0) || (AracInfo[id][aracTip] == 6 && PlayerData[playerid][pEhliyetSinavinda] != 0))
   	{
   	    switch (GetEngineStatus(vehicleid))
   	    {
   	        case false:
   	        {
   	            if (!spamProtect(playerid, "motor", 2))  return HataMesajGonder(playerid, "Bu komutu 2 saniyede bir kullanabilirsiniz.");
   	            SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "> %s aracýn anahtarýný kontaða sokar ve çevirir.", ReturnName(playerid, 0));
   	            GameTextForPlayer(playerid, "~w~MOTOR CALISTIRILDI!", 3000, 4);
   	            SetTimerEx("MotorCalistir", floatround(AracInfo[id][aracKM]*3), false, "ud", playerid, vehicleid);

   	            if(AracInfo[id][aracTip] == 6)
   	            {
   	            	if(EhliyetAracCP[vehicleid] == 0)
   	            	{
   	            		cmd_cpsifirla(playerid);

						AracCP[vehicleid] = 0;
						EhliyetAracCP[vehicleid] = 1;

						SetPlayerCheckpoint(playerid, EhliyetCP[0][0], EhliyetCP[0][1], EhliyetCP[0][2], 5.0);
						SunucuMesaji(playerid, "Sürüs testi basladi, checkpointleri takip edin.");
						SunucuMesaji(playerid, "Hiz limiti 90 olarak belirlenmistir, siniri asmayin!");
						SetPlayerCheckpoint(playerid, EhliyetCP[0][0], EhliyetCP[0][1], EhliyetCP[0][2], 5.0);
   	            	}
   	            }
   	        }
   	        case true:
   	        {
            	SetEngineStatus(vehicleid, false);
            	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "> %s aracýn anahtarýný çevirerek motoru durdurur.", ReturnName(playerid, 0));
            	GameTextForPlayer(playerid, "~w~MOTOR DURDURULDU!", 3000, 4);
   	        }
   	    }
   	}
   	else
   	{
   	    HataMesajGonder(playerid, "Bu aracýn anahtarý sizde bulunmuyor.");
   	}
	return 1;
}

CMD:farddddd(playerid)
{


    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    return HataMesajGonder(playerid, "Sürücü deðilsin.");


	new vehicleid = GetPlayerVehicleID(playerid);

	if (!IsEngineVehicle(vehicleid))
		return HataMesajGonder(playerid, "Bu aracin farlari yok.");

	switch (GetLightStatus(vehicleid))
	{
	    case false:
	    {
	        SetLightStatus(vehicleid, true);
	        MesajGonder(playerid, "Aracin farlari açýldý.");
		}
		case true:
		{
		    SetLightStatus(vehicleid, false);
		    MesajGonder(playerid, "Aracin farlari kapatýldý.");
		}
	}
	return 1;
}

CMD:kaputddddd(playerid)
{
	if (IsPlayerInAnyVehicle(playerid)) return HataMesajGonder(playerid, "Araçta bu komutu kullanamazsin.");
	for (new i = 1; i != MAX_VEHICLES; i ++) if (IsValidVehicle(i) && IsPlayerNearHood(playerid, i))
	{
	    if (!IsDoorVehicle(i))
	        return HataMesajGonder(playerid, "Bu aracin kaputu yok.");

	    if (!GetHoodStatus(i))
		{
	        SetHoodStatus(i, true);

	        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "> %s elini kaputun altina sokar ve mandali çekerek kaputu açar.", ReturnName(playerid, 0));
		}
		else
		{
			SetHoodStatus(i, false);

	        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "> %s elini kaputun üzerine koyar ve kaputu kapatir. ", ReturnName(playerid, 0));
		}
	    return 1;
	}
	HataMesajGonder(playerid, "Kaputunu açabilecegin araca yakin degilsin.");
	return 1;
}

CMD:acamddddd(playerid)
{
	if (!IsPlayerInAnyVehicle(playerid)) return HataMesajGonder(playerid, "Araçta olmalisiniz.");
	new vehicleid = GetPlayerVehicleID(playerid);

	if (!IsWindowedVehicle(vehicleid))
		return HataMesajGonder(playerid, "Bu aracin cami yok!");
	new carid = Car_GetID(vehicleid);
	switch (AracInfo[carid][aracCamlar])
	{
	    case true:
	    {
         	AracInfo[carid][aracCamlar] = false;
	        SetVehicleParamsCarWindows(vehicleid, 1, 1, 1, 1);
	        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "> %s aracýn cam kapatma düðmesine basar ve camý kapatýr.", ReturnName(playerid, 0));
		}
		case false:
		{
		    AracInfo[carid][aracCamlar] = true;
		    SetVehicleParamsCarWindows(vehicleid, 0, 0, 0, 0);
		    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "> %s aracýn cam açma düðmesine basar ve camý açar.", ReturnName(playerid, 0));
		}
	}
	return 1;
}

CMD:bagajddddd(playerid)
{
	new
	    id = -1;

	if ((id = Car_Nearest(playerid)) != -1)
	{
	    if (PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 		return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");
	    if (IsVehicleImpounded(AracInfo[id][aracVehicle]))
	        return HataMesajGonder(playerid, "Bu araç baðlanmýþ.");

	    if (IsPlayerInAnyVehicle(playerid))
	        return HataMesajGonder(playerid, "Önce araçtan inmen gereklidir.");

		if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
		    return HataMesajGonder(playerid, "Bu komutu sadece ayakta kullanabilirsiniz.");

		if (PlayerData[playerid][pBaygin] == 1) return HataMesajGonder(playerid, "Bunu þu an yapamazsýnýz.");
		if (!IsPlayerNearBoot(playerid, AracInfo[id][aracVehicle])) return HataMesajGonder(playerid, "Herhangi bir aracýn bagajýna yakýn deðilsiniz.");

		if (!IsDoorVehicle(AracInfo[id][aracVehicle]))
		    return HataMesajGonder(playerid, "Bu aracýn bagajý yok.");

		if (AracInfo[id][aracKilit])
		    return HataMesajGonder(playerid, "Bu araç kilitli.");

		if ((GetFactionType(playerid) == BIRLIK_LSPD || GetFactionType(playerid) == BIRLIK_LSSD) && (AracInfo[id][aracFactionType] == BIRLIK_LSPD || AracInfo[id][aracFactionType] == BIRLIK_LSSD))
  		{
       		Car_LSPDTrunk(playerid, AracInfo[id][aracVehicle]);
       		return 1;
       	}

		if ( Car_IsOwner(playerid, id) && (GetFactionType(playerid) == BIRLIK_LSPD || GetFactionType(playerid) == BIRLIK_FBI)) return HataMesajGonder(playerid, "Polisler bagaj özelliðini kullanamaz.");
	 	else if (Car_IsOwner(playerid, id) || ( !Car_IsOwner(playerid, id) && GetFactionType(playerid) == BIRLIK_LSPD))
	 	{
	 	    SetPVarInt(playerid, "AracBagaj", id);
	 	    Dialog_Show(playerid, Bagaj, DIALOG_STYLE_LIST, "Bagaj", "{FFFFFF}Uyuþturucular\n{FFFFFF}Silahlar", "Seç", "Kapat");
	 	}
	 	else HataMesajGonder(playerid, "Bu aracýn sahibi deðilsin.");
	}
	else HataMesajGonder(playerid, "Herhangi bir aracýn bagajýna yakýn deðilsiniz.");
	return 1;
}

CMD:akirala(playerid)
{
    new vehicleid = GetPlayerVehicleID(playerid);
    new id = Car_GetID(vehicleid);

    if (!OyundaDegil(playerid)) return 1;
    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesajGonder(playerid, "Kiralik araçta degilsin.");

    if (AracInfo[id][aracKira] < 1) return HataMesajGonder(playerid, "Bu araç kiralik degil.");

	if (AracInfo[id][aracKiralayan] != -1 && AracInfo[id][aracKiralayan] != PlayerData[playerid][pID])
		return HataMesajGonder(playerid, "Bu araç baskasi tarafindan kiralanmis.");

	if (Kiralik_Araci(playerid) != AracInfo[id][aracID] && AracKiraladi(playerid))
		return HataMesajGonder(playerid, "Zaten kiraladiginiz araç var.");

	if (AracInfo[id][aracKira] > PlayerData[playerid][pCash]) return HataMesajGonder(playerid, "Yeterli paraniz yok.");

	if (Kiralik_Araci(playerid) == AracInfo[id][aracID] && AracInfo[id][aracKiraZaman] > 5)
		return HataMesajGonder(playerid, "Aracin kira süresini sadece 5 dakika alti kaldiginda uzatabilirsin.");

    if (Kiralik_Araci(playerid) != AracInfo[id][aracID])
		MesajGonder(playerid, "Araç 30 dakikaligina kiralandi.");

    if (Kiralik_Araci(playerid) == AracInfo[id][aracID])
        MesajGonder(playerid, "Araç kira süresi 30 dakikaligina uzatildi.");

    if (Kiralik_Araci(playerid) != AracInfo[id][aracID])
    	AracInfo[id][aracKiraZaman] = 30;

    if (Kiralik_Araci(playerid) == AracInfo[id][aracID])
    	AracInfo[id][aracKiraZaman] += 30;

	AracInfo[id][aracKiralayan] = PlayerData[playerid][pID];

	ParaVer(playerid, -AracInfo[id][aracKira]);
	return 1;
}

CMD:kapi(playerid)
{
    new id = Gate_Nearest(playerid);
    if (id != -1)
    {
            if (PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 				return HataMesajGonder(playerid, "su an bu komutu kullanamazsiniz.");

            if (GateData[id][gateFaction] != -1 && PlayerData[playerid][pFaction] != GetFactionByID(GateData[id][gateFaction]))
				return HataMesajGonder(playerid, "Bu kapiyi açamazsin.");

			if (GateData[id][gateVip] != 0 && PlayerData[playerid][pVip] < GateData[id][gateVip])
                return HataMesajGonder(playerid, "Bu gate sadece viplere özeldir.");

			if (strlen(GateData[id][gatePass]))
	        {
	            ShowPlayerDialog(playerid,30,DIALOG_STYLE_INPUT, "{FFFFFF}Gate sifre", "Bu gate için sifre belirlenmis, lütfen sifreyi giriniz:", "Aç", "Kapat");
	        }
	        else
	        {
        		Gate_Operate(id);
	        }
    }
	return 1;
}

public OnPlayerModelSelectionEx(playerid, response, extraid, modelid)
{
	if(response)
	{
		switch(extraid)
		{
			case SATILIK_ARACLAR:
			{
				GaleriAracDetaylari(playerid, modelid);
			}
		}
	}

	return 1;
}

stock GaleriAracDetaylari(playerid, modelid)
{
	new query[51 + 11 + 1];

	mysql_format(g_SQL, query, sizeof(query), "SELECT fiyat FROM satilikaraclar WHERE model = '%d'", modelid);
	mysql_tquery(g_SQL, query, "AracDetaylariGoruntule", "dd", playerid, modelid);

	return 1;
}

forward AracDetaylariGoruntule(playerid, modelid);
public AracDetaylariGoruntule(playerid, modelid)
{
	new rows = cache_num_rows();

	if(rows)
	{
		new fiyat;

		cache_get_value_index_int(0, 0, fiyat);

		SetPVarInt(playerid, "aracFiyat", fiyat);
		SetPVarInt(playerid, "aracModel", modelid);

		Dialog_Show(playerid, AracDetaylari, DIALOG_STYLE_LIST, "Araç Satin Al", "Araç: %s\nFiyat: $%d\nRenk 1: %d\nRenk 2: %d\nSatin Al", "Seç", "Kapat", ReturnVehicleModelName(modelid), fiyat, GetPVarInt(playerid, "aracRenk1"), GetPVarInt(playerid, "aracRenk2"));
	}

	else HataMesajGonder(playerid, "Araç verileri alinamadi.");

	return 1;
}

Dialog:AracDetaylari(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new modelid = GetPVarInt(playerid, "aracModel");

		if(strfind(inputtext, "Renk 1", true) != -1)
		{
			Dialog_Show(playerid, AracDetaylariRenk1, DIALOG_STYLE_INPUT, "Araç Renk 1", "Aracin birincil renk kodunu belirleyiniz.", "Belirle", "Geri");
		}

		else if(strfind(inputtext, "Renk 2", true) != -1)
		{
			Dialog_Show(playerid, AracDetaylariRenk2, DIALOG_STYLE_INPUT, "Araç Renk 2", "Aracin ikincil renk kodunu belirleyiniz.", "Belirle", "Geri");
		}

		else if(strfind(inputtext, "Satin Al", true) != -1)
		{
			Dialog_Show(playerid, AracSatinAlOnay, DIALOG_STYLE_MSGBOX, "Satin Al", "%s model araci $%d karsiliginda satin almak istediginize emin misiniz?", "Evet", "Geri", ReturnVehicleModelName(modelid), GetPVarInt(playerid, "aracFiyat"));
		}

		else GaleriAracDetaylari(playerid, modelid);
	}

	return 1;
}

Dialog:AracSatinAlOnay(playerid, response, listitem, inputtext[])
{
	new modelid = GetPVarInt(playerid, "aracModel");

	if(response)
	{
		if(GetPVarInt(playerid, "aracFiyat") > PlayerData[playerid][pCash])
			return HataMesajGonder(playerid, "Araç ücretini karsilayamiyorsunuz.");

		switch(modelid)
		{
			case 471, 495, 509: if (PlayerData[playerid][pVip] < 1) return HataMesajGonder(playerid, "Bu araci satin alabilmek için Donator olmalisiniz.");
			case 502, 503, 494, 434, 504: if (PlayerData[playerid][pVip] < 1) return HataMesajGonder(playerid, "Bu araci satin alabilmek için Donator olmalisiniz.");
		}

		new maksarac = MAX_OWNABLE_CARS;

		switch(PlayerData[playerid][pVip])
		{
			case 1: maksarac += 2;
			case 2: maksarac += 4;
			case 3: maksarac += 6;
		}

		if(Car_GetCount(playerid) >= maksarac)
			return HataMesajGonder(playerid, "En fazla %d araç sahibi olabilirsin.", maksarac);

		new interior, world, Float:x, Float:y, Float:z, Float:a;

		interior = GetPlayerInterior(playerid);
		world = GetPlayerVirtualWorld(playerid);

		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);

		new id = Arac_Olustur(PlayerData[playerid][pID], modelid, interior, world, -1, x, y, z, a, GetPVarInt(playerid, "aracRenk1"), GetPVarInt(playerid, "aracRenk2"), 4, 0);

		if(id != -1)
		{
			AracInfo[id][aracSahip] = PlayerData[playerid][pID];
			AracInfo[id][aracTip] = 4;
			PutPlayerInVehicle(playerid, AracInfo[id][aracVehicle], 0);
			new price = GetPVarInt(playerid, "aracFiyat");

			ParaVer(playerid, -price);
			MesajGonder(playerid, "Tebrikler, %s miktar para karsiliginda araç satin aldiniz.",FormatNumber(price));
		    Log_Write("logs/arac-log.txt", "[%s] %s adli oyuncu %s model araci %s karsiliginda satin aldi.", ReturnDate(), ReturnName(playerid, 0), ReturnVehicleModelName(modelid), FormatNumber(price));
		}
	}

	else GaleriAracDetaylari(playerid, modelid);

	return 1;
}

Dialog:AracDetaylariRenk1(playerid, response, listitem, inputtext[])
{
	new modelid = GetPVarInt(playerid, "aracModel");

	if(response)
	{
		new renk;

		if(sscanf(inputtext, "d", renk))
			return Dialog_Show(playerid, AracDetaylariRenk1, DIALOG_STYLE_INPUT, "Araç Renk 1", "Aracin birincil renk kodunu belirleyiniz.", "Belirle", "Geri");

		if(renk < 0 || renk > 255)
			return Dialog_Show(playerid, AracDetaylariRenk1, DIALOG_STYLE_INPUT, "Araç Renk 1", "Aracin birincil renk kodunu belirleyiniz.", "Belirle", "Geri");

		SetPVarInt(playerid, "aracRenk1", renk);
		GaleriAracDetaylari(playerid, modelid);
	}

	else GaleriAracDetaylari(playerid, modelid);

	return 1;
}

Dialog:AracDetaylariRenk2(playerid, response, listitem, inputtext[])
{
	new modelid = GetPVarInt(playerid, "aracModel");

	if(response)
	{
		new renk;

		if(sscanf(inputtext, "d", renk))
			return Dialog_Show(playerid, AracDetaylariRenk2, DIALOG_STYLE_INPUT, "Araç Renk 2", "Aracin ikincil renk kodunu belirleyiniz.", "Belirle", "Geri");

		if(renk < 0 || renk > 255)
			return Dialog_Show(playerid, AracDetaylariRenk2, DIALOG_STYLE_INPUT, "Araç Renk 2", "Aracin ikincil renk kodunu belirleyiniz.", "Belirle", "Geri");

		SetPVarInt(playerid, "aracRenk2", renk);
		GaleriAracDetaylari(playerid, modelid);
	}

	else GaleriAracDetaylari(playerid, modelid);

	return 1;
}

forward SatilikAraclar(playerid);
public SatilikAraclar(playerid)
{
	new rows = cache_num_rows();

	if(rows)
	{
		new araclar[300];

		for(new i = 0; i < rows; i++)
		{
			cache_get_value_index_int(i, 0, araclar[i]);
		}

		ShowModelSelectionMenuEx(playerid, araclar, rows, "Satilik Araclar", SATILIK_ARACLAR);
	}

	else HataMesajGonder(playerid, "Satilik araç bulunamadi.");

	return 1;
}

CMD:satinal(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 3.0, 542.1227,-1292.7203,17.2422))
		return mysql_tquery(g_SQL, "SELECT model FROM satilikaraclar", "SatilikAraclar", "d", playerid);

    static
		id = -1;
    if (!OyundaDegil(playerid)) return 1;
	if ((id = House_Nearest(playerid)) != -1)
	{
	    if (PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 		return HataMesajGonder(playerid, "su an bu komutu kullanamazsiniz.");
	    new maksev = 4;
	    switch (PlayerData[playerid][pVip])
	    {
	        case 1: maksev += 2;
	        case 2: maksev += 4;
	        case 3: maksev += 6;
	    }
	    if (Ev_GetCount(playerid) >= maksev) return HataMesajGonder(playerid, "En fazla %d eviniz olabilir.", maksev);
	    if (HouseInfo[id][evSahip] != -1 && HouseInfo[id][evSatilik] == 0) return HataMesajGonder(playerid, "Bu evin zaten sahibi var.");
	    if (HouseInfo[id][evSahip] == PlayerData[playerid][pID]) return HataMesajGonder(playerid, "Bu evin sahibi sensin.");
	    if (HouseInfo[id][evKiralik] == 1) return HataMesajGonder(playerid, "Bu ev kiralik, kiralamak için /evkirala komutunu kullaniniz.");
	    if (PlayerData[playerid][pCash] < HouseInfo[id][evFiyat]) return HataMesajGonder(playerid, "Yeterli paraniz yok.");
	    if (HouseInfo[id][evSahip] != -1)
	    {
	        if (GetPlayerIDWithSQLID(HouseInfo[id][evSahip]) != -1)
	        {
	            new pid = GetPlayerIDWithSQLID(HouseInfo[id][evSahip]);
	            ParaVer(pid,HouseInfo[id][evFiyat]);
	            MesajGonder(pid, "%s adli kisi evinizi {2ECC71}%s {FFFFFF}karsiliginda satin aldi.",ReturnName(playerid,0),FormatNumber(HouseInfo[id][evFiyat]));
	        }
	        else
	        {
                new str[100];
	            format(str,sizeof(str), "%s adli kisi evinizi %s karsiliginda satin aldi.",ReturnName(playerid,0),FormatNumber(HouseInfo[id][evFiyat]));
	            BildirimEkle(HouseInfo[id][evSahip],str, "Sistem");
	            OfflineParaVer(HouseInfo[id][evSahip],HouseInfo[id][evFiyat]);
	        }
	    }
	    if (Ev_GetKeyCount(id) > 0)
		{
		    new query[100];
			format(query, sizeof(query), "DELETE FROM `anahtarlar` WHERE `sqlid` = '%d' AND `tip` = '1'",HouseInfo[id][evID]);
			mysql_query(g_SQL, query, false);
		}
	    HouseInfo[id][evSahip] = PlayerData[playerid][pID];
	    HouseInfo[id][evSatilik] = 0;
	    HouseInfo[id][evKiralik] = 0;
	    HouseInfo[id][evKiralayan] = -1;
	    HouseInfo[id][evKiraUcret] = 0;
	    HouseInfo[id][MobilyaYetki] = -1;
	    Ev_Yenile(id);
	    Ev_Kaydet(id);
	    HouseInfo[id][evCash] = 0;
	    HouseInfo[id][evUyusturucu] = 0;
	    for (new i = 0; i != 10; i++)
		{
		    if (i < 5)
		    {
		        HouseInfo[id][evKiyafetler][i] = -1;
		    }
		    HouseInfo[id][evSilahlar][i] = 0;
		    HouseInfo[id][evMermiler][i] = 0;
		}
		ParaVer(playerid,-HouseInfo[id][evFiyat]);
		MesajGonder(playerid, "Bu evi {2ECC71}%s {FFFFFF}karsiliginda satin aldiniz.",FormatNumber(HouseInfo[id][evFiyat]));
		Log_Write("logs/evlog.txt", "%s(%d) Adli oyuncu %d ID'li evi %d karsiliginda satin aldi.",ReturnName(playerid),playerid,HouseInfo[id][evID],HouseInfo[id][evFiyat]);
		HouseInfo[id][evFiyat] = HouseInfo[id][evKendiFiyati];
		if(PlayerData[playerid][pBasariEv] == 1)
		{
		    PlayerData[playerid][pBasariEv] = 1;
		    format(PlayerData[playerid][pBasariEvTarih],25,ReturnDate());
		    SunucuMesaji(playerid, "ilk ev basarimini kazandiniz.");
		}
	}
	else if ((id = Business_Nearest(playerid)) != -1)
	{
		if(Isyeri[id][isyeriTip] == 4)
			return Isyeri_AracMenu(playerid, id);

	    if (PlayerData[playerid][pBaygin] == 1) return HataMesajGonder(playerid, "Bunu su an yapamazsiniz.");
	    new maksisyeri = 3;
	    switch (PlayerData[playerid][pVip])
	    {
	        case 1: maksisyeri += 2;
	        case 2: maksisyeri += 4;
	        case 3: maksisyeri += 6;
	    }
	    if (Isyeri_GetCount(playerid) >= maksisyeri) return HataMesajGonder(playerid, "En fazla %d isyeriniz olabilir.", maksisyeri);
	    if ((Isyeri[id][isyeriSahip] > 0 || Isyeri[id][isyeriSahip] == -99) && Isyeri[id][isyeriSatilik] == 0) return HataMesajGonder(playerid, "Bu isyerin sahibi var.");
	    if (Isyeri[id][isyeriSahip] == PlayerData[playerid][pID]) return HataMesajGonder(playerid, "Bu isyerin sahibi sensin.");
	    if (Isyeri[id][isyeriFiyat] > PlayerData[playerid][pCash]) return HataMesajGonder(playerid, "Yeterli paraniz yok.");
	    if (Isyeri[id][isyeriSahip] > 0 && Isyeri[id][isyeriSatilik] == 1 && Isyeri[id][isyeriSahip] != -99)
	    {
	        if (GetPlayerIDWithSQLID(Isyeri[id][isyeriSahip]) != -1)
	        {
	            ParaVer(GetPlayerIDWithSQLID(Isyeri[id][isyeriSahip]),Isyeri[id][isyeriFiyat]);
	            MesajGonder(GetPlayerIDWithSQLID(Isyeri[id][isyeriSahip]), "%s adli kisi isyerinizi {2ECC71}%s {FFFFFF}karsiliginda satin aldi.",ReturnName(playerid,0),FormatNumber(Isyeri[id][isyeriFiyat]));
	        }
	        else
	        {
	            new str[100];
	            format(str,sizeof(str), "%s adli kisi isyerinizi %s karsiliginda satin aldi.",ReturnName(playerid,0),FormatNumber(Isyeri[id][isyeriFiyat]));
	            BildirimEkle(Isyeri[id][isyeriSahip],str, "Sistem");
	            OfflineParaVer(Isyeri[id][isyeriSahip],Isyeri[id][isyeriFiyat]);
	        }
		}
		ParaVer(playerid,-Isyeri[id][isyeriFiyat]);
		MesajGonder(playerid, "Bu isyerini {2ECC71}%s {FFFFFF}karsiliginda satin aldiniz. (/isyeri)",FormatNumber(Isyeri[id][isyeriFiyat]));
		Isyeri[id][isyeriSahip] = PlayerData[playerid][pID];
		Isyeri[id][isyeriKasa] = 0;
		Isyeri[id][isyeriSatilik] = 0;
		Isyeri[id][isyeriFiyat] = Isyeri[id][isyeriKendiFiyati];
		Isyeri_Kaydet(id);
		Isyeri_Yenile(id);
	}
	else if ((id = Business_Inside(playerid)) != -1)
	{
	    if (PlayerData[playerid][pBaygin] == 1) return HataMesajGonder(playerid, "Bunu su an yapamazsiniz.");
	    if (Isyeri[id][isyeriKilit] != 0)
		    return HataMesajGonder(playerid, "Bu isyeri kilitli!");
	    if (Isyeri[id][isyeriTip] == 4) {
		    Isyeri_AracMenu(playerid, id);
		} else {
			Isyeri_Urun(playerid, id);
		}
	}
	else if ((id = Arsa_Inside(playerid)) != -1)
	{
	    if (PlayerData[playerid][pBaygin] == 1) return HataMesajGonder(playerid, "Bunu su an yapamazsiniz.");
	    if (ArsaBilgi[id][arsaSahip] != -1) return HataMesajGonder(playerid, "Bu arsa satilik degil.");
	    if (ArsaBilgi[id][arsaTip] != 1) return HataMesajGonder(playerid, "Bu arsayi kiralamak için (/arsakirala) komutunu kullanmalisiniz.");
	    if (ArsaBilgi[id][arsaFiyat] > PlayerData[playerid][pCash]) return HataMesajGonder(playerid, "Yeterli paraniz yok.");
	    ParaVer(playerid, -ArsaBilgi[id][arsaFiyat]);
	    ArsaBilgi[id][arsaSahip] = PlayerData[playerid][pID];
	    Arsa_Kaydet(id);
	    ArsaUpdate(id);
	    MesajGonder(playerid, "Arsa satin alindi, (/tohum) komutu ile arsaya tohum ekebilir ve toplayabilirsiniz.");
	}
	return 1;
}

CMD:arsakirala(playerid, params[])
{
    if (!OyundaDegil(playerid)) return 1;
    new id = Arsa_Inside(playerid);
    new kacsaat;
    if (id == -1) return HataMesajGonder(playerid, "Herhangi bir arsaya yakin degilsiniz.");
    if (ArsaBilgi[id][arsaTip] != 2) return HataMesajGonder(playerid, "Bu arsa kiralik degil.");
    if (ArsaBilgi[id][arsaSahip] != -1) return HataMesajGonder(playerid, "Bu arsa baskasi tarafindan kiralanmis.");
    if (sscanf(params, "i", kacsaat)) return KullanimMesaji(playerid, "/arsakirala [Saat] (1 saat = %s)", FormatNumber(ArsaBilgi[id][arsaFiyat]));
    if (kacsaat < 1 || kacsaat > 7) return HataMesajGonder(playerid, "En az 1, en fazla 7 saat girebilirsiniz.");
    if (PlayerData[playerid][pCash] < ArsaBilgi[id][arsaFiyat] * kacsaat) return HataMesajGonder(playerid, "Üzerinizde kirayi karsilayacak paraniz yok. (%s)", FormatNumber(ArsaBilgi[id][arsaFiyat] * kacsaat));
    ParaVer(playerid, -ArsaBilgi[id][arsaFiyat] * kacsaat);
    ArsaBilgi[id][arsaSahip] = PlayerData[playerid][pID];
    ArsaBilgi[id][KiraSure] = gettime() + kacsaat*3600;
    Arsa_Kaydet(id);
    ArsaUpdate(id);
    MesajGonder(playerid, "Arsa %d saatligine kiralandi, (/tohum) komutu ile arsaya tohum ekebilir ve toplayabilirsiniz.", kacsaat);
	return 1;
}

CMD:ev(playerid)
{
    static id = -1;
    if (PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "su an bu komutu kullanamazsiniz.");
	if (!IsPlayerInAnyVehicle(playerid) && (id = (House_Inside(playerid) == -1) ? (House_Nearest(playerid)) : (House_Inside(playerid))) != -1)
	{
	    new string[1124], string2[400], durum[24],durum2[22],durum3[22];

	    if (HouseInfo[id][evSahip] == PlayerData[playerid][pID])
	    {
	        strcat(string, "islem\tDurum\n");
	        if (HouseInfo[id][evKilit] == 1) durum = "{FF0000}Kilitli";
	        else durum = "{2ECC71}Açýk";
	        if (HouseInfo[id][evKiralik] == 1) durum2 = "{2ECC71}Kiralik";
	        else durum2 = "{FF0000}Kiralik degil";
	        if (HouseInfo[id][evSatilik] == 1) durum3 = "{2ECC71}Satilik";
	        else durum3 = "{FF0000}Satilik degil";
	        format(string2, sizeof(string2), "Kilit Durumu\t%s\n",durum);
	        strcat(string,string2);
	        format(string2, sizeof(string2), "Ev Ismi\t%s\n", HouseInfo[id][evIsim]);
	        strcat(string, string2);
	        format(string2, sizeof(string2), "Ev Kasasi\t{2ECC71}%s\n",FormatNumber(HouseInfo[id][evCash]));
	        strcat(string,string2);
	        format(string2, sizeof(string2), "Ev Gardolap\t{2ECC71}-\n" );
	        strcat(string,string2);
	        format(string2, sizeof(string2), "Ev Dekorasyon\t{2ECC71}-\n");
	        strcat(string,string2);
	        format(string2, sizeof(string2), "Evi Kiralik Yap\t{2ECC71}%s\n", durum2);
	        strcat(string,string2);
	        format(string2, sizeof(string2), "Ev Kira Ücreti\t{2ECC71}%s\n", FormatNumber(HouseInfo[id][evKiraUcret]));
	        strcat(string,string2);
	        format(string2, sizeof(string2), "Evi Satiliga Çikar\t{2ECC71}%s\n",durum3);
	        strcat(string,string2);
	        format(string2, sizeof(string2), "Kiraciyi Çikar\t{2ECC71}%s\n", SQLName(HouseInfo[id][evKiralayan],0));
	        strcat(string,string2);
	        format(string2, sizeof(string2), "Anahtarlar\t%d\n",Ev_GetKeyCount(id));
	        strcat(string,string2);
	        ShowPlayerDialog(playerid,31,DIALOG_STYLE_TABLIST_HEADERS, "Ev Ayarlari",string, "Ayarla", "Kapat");
	    }

		if (HouseInfo[id][evSahip] != PlayerData[playerid][pID] && HouseInfo[id][evKiralayan] == PlayerData[playerid][pID])
	    {
	         strcat(string, "islem\tDurum\n");
	         if (HouseInfo[id][evKilit] == 1) durum = "{FF0000}Kilitli";
    	     else durum = "{2ECC71}Açýk";
    	     format(string2, sizeof(string2), "Kilit Durumu\t%s{FFFFFF}\n",durum);
	         strcat(string,string2);
	         format(string2, sizeof(string2), "Ev Gardolap\n");
	         strcat(string,string2);
	         format(string2, sizeof(string2), "Kiraciliktan Çik\t{FFFFFF}\n");
	         strcat(string,string2);
	         ShowPlayerDialog(playerid,39,DIALOG_STYLE_TABLIST_HEADERS, "Ev Ayarlari",string, "Ayarla", "Kapat");
	    }

		if (HouseInfo[id][evSahip] != PlayerData[playerid][pID] && HouseInfo[id][evKiralayan] != PlayerData[playerid][pID] && Ev_AnahtarVar(playerid, id))
	    {
	         strcat(string, "islem\tDurum\n");
	         if (HouseInfo[id][evKilit] == 1) durum = "{FF0000}Kilitli";
    	     else durum = "{2ECC71}Açýk";
    	     format(string2, sizeof(string2), "Kilit Durumu\t%s{FFFFFF}\n",durum);
	         strcat(string,string2);
	         ShowPlayerDialog(playerid,65,DIALOG_STYLE_TABLIST_HEADERS, "Ev Ayarlari",string, "Ayarla", "Kapat");
		}
	}
	return 1;
}

CMD:mobilya(playerid)
{
    if (!OyundaDegil(playerid)) return 1;
    new id = House_Inside(playerid);
    if (id == -1) return HataMesajGonder(playerid, "Herhangi bir evin içerisinde degilsiniz!");
    if (HouseInfo[id][evSahip] != PlayerData[playerid][pID] && HouseInfo[id][MobilyaYetki] != PlayerData[playerid][pID]) return HataMesajGonder(playerid, "Mobilya düzenleme yetkiniz bulunmamaktadir.");
    if (PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "su an bu komutu kullanamazsiniz.");
    MobilyaMenu(playerid, id);
	return 1;
}

CMD:zilcal(playerid)
{
	if (!OyundaDegil(playerid)) return 1;
	if (PlayerData[playerid][pBaygin] == 1) return HataMesajGonder(playerid, "Bunu su an yapamazsiniz.");
	new id = House_Nearest(playerid);
	if (id == -1) return HataMesajGonder(playerid, "Herhangi bir eve yakin degilsiniz.");
	if (PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "su an bu komutu kullanamazsiniz.");
	if (!spamProtect(playerid, "ZilCal", 10)) return HataMesajGonder(playerid, "Tekrar zil çalmak için 10 saniye beklemelisiniz.");

	foreach (new i : Player) if (House_Inside(i) == id)
	{
	    SendClientMessage(i, COLOR_AQUA, "** Evin zili çaliyor...");
	    PlayerPlaySound(i, 20801, 0, 0, 0);
	}
	PlayerPlaySoundEx(playerid, 20801);
	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s evin zilini çalar.", ReturnName(playerid, 0));
	return 1;
}
CMD:kapiyikir(playerid)
{
    if (!OyundaDegil(playerid)) return 1;
    if (PlayerData[playerid][pBaygin] == 1) return HataMesajGonder(playerid, "Bunu su an yapamazsiniz.");
    if (GetFactionType(playerid) != BIRLIK_LSPD && GetFactionType(playerid) != BIRLIK_FBI) return HataMesajGonder(playerid, "Devlet memuru degilsin.");
    if (PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "su an bu komutu kullanamazsiniz.");
    static id = -1;
    if ((id = House_Nearest(playerid)) != -1)
    {
		if (!HouseInfo[id][evKilit]) return HataMesajGonder(playerid, "Bu ev kilitli degil.");

		ApplyAnimation(playerid, "POLICE", "Door_Kick", 4.0, 0, 0, 0, 0, 0);
		ApplyAnimation(playerid, "POLICE", "Door_Kick", 4.0, 0, 0, 0, 0, 0);
		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s evin kapisina sert bir tekme atar ve kapi kirilir.", ReturnName(playerid, 0));
		HouseInfo[id][evKilit] = 0;
		Ev_Yenile(id);

	}
	else if ((id = Business_Nearest(playerid)) != -1)
	{
	    if (Isyeri[id][isyeriKilit] == 0) return HataMesajGonder(playerid, "Bu isyeri kilitli degil.");
	    ApplyAnimation(playerid, "POLICE", "Door_Kick", 4.0, 0, 0, 0, 0, 0);
	    ApplyAnimation(playerid, "POLICE", "Door_Kick", 4.0, 0, 0, 0, 0, 0);
		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s isyerinin kapisina sert bir tekme atar ve kapi kirilir.", ReturnName(playerid, 0));
		Isyeri[id][isyeriKilit] = 0;
		Isyeri_Yenile(id);
	}
	return 1;
}
CMD:admins(playerid)
{
    if (!OyundaDegil(playerid)) return 1;
    if (PlayerData[playerid][pAdmin] < 1) return HataMesajGonder(playerid, "Aktif yetkilileri görmeye yetkiniz yok.");
	new count = 0;
	SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
	foreach (new i : Player) if (PlayerData[i][pAdmin] > 0 || PlayerData[i][pOyunGorevlisi] > 0 || PlayerData[i][pForumGorevlisi] > 0)
	{
	    count++;
	    if (PlayerData[i][pAdminDuty])
	    {
	        SendClientMessageEx(playerid,COLOR_WHITE, "{2ECC71}%s (ID: %d) (Yetki: %s) {FFFFFF}(Work: {00cc66}Müsait{FFFFFF})", PlayerData[i][pAdminName], i, GetAdminRank(i));
	    }
	    else
	    {
	        SendClientMessageEx(playerid,COLOR_WHITE, "{2ECC71}%s (ID: %d) (Yetki: %s) {FFFFFF}(Work: {ef0202}Meþgul{FFFFFF})", PlayerData[i][pAdminName], i, GetAdminRank(i));
	    }
	}
	if (!count) SendClientMessage(playerid, COLOR_RED, "* Þu anda aktif yetkili bulunmuyor.");
	SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
	return 1;
}
CMD:supporters(playerid)
{
    if (!OyundaDegil(playerid)) return 1;
    new count = 0, str[1000];
    foreach (new i:Player) if (PlayerData[i][pHelper] >= 1)
    {
        count++;
        format(str, sizeof(str), "%s{FFFFFF}(Lv. %d) Supporter %s (ID: %d) (Work: %s{FFFFFF})\n", str, PlayerData[i][pHelper], PlayerData[i][pAdminName], i, (PlayerData[i][pHelperDuty] == 1) ? ("{00cc66}Müsait") : ("{ef0202}Meþgul"));

    }
    if (count == 0) return HataMesajGonder(playerid, "Þu anda aktif Supporter bulunmuyor.");
    Dialog_Show(playerid, Helpers, DIALOG_STYLE_MSGBOX, "Supporter'ler", str, "Kapat", "");
	return 1;
}
CMD:evkirala(playerid)
{
    static
		id = -1;

	if ((id = House_Nearest(playerid)) != -1)
	{
	    if (PlayerData[playerid][pBaygin] == 1) return HataMesajGonder(playerid, "Bunu su an yapamazsiniz.");
	    if (EvKiraID(playerid) != -1) return HataMesajGonder(playerid, "Zaten kiralik bir eviniz var.");
	    if (Ev_GetCount(playerid) > 0) return HataMesajGonder(playerid, "Eviniz varken ev kiralayamazsiniz.");
	    if (HouseInfo[id][evKiralik] == 0) return HataMesajGonder(playerid, "Bu ev kiralik degil.");
	    if (HouseInfo[id][evKiralayan] != -1) return HataMesajGonder(playerid, "Bu ev zaten kiralanmis.");
	    if (HouseInfo[id][evSahip] == PlayerData[playerid][pID]) return HataMesajGonder(playerid, "Kendi evinizi kiralayamazsiniz.");
	    if (HouseInfo[id][evKiraUcret] > PlayerData[playerid][pCash]) return HataMesajGonder(playerid, "Yeterli paraniz yok.");
	    HouseInfo[id][evKiralayan] = PlayerData[playerid][pID];
	    HouseInfo[id][evCash] += HouseInfo[id][evKiraUcret];
	    ParaVer(playerid,-HouseInfo[id][evKiraUcret]);
	    Ev_Kaydet(id);
	    Ev_Yenile(id);
	    MesajGonder(playerid, "Ev %s miktar paraya kiralandi. Artik her maas aldiginizda kirayi ödemek zorundasiniz.",FormatNumber(HouseInfo[id][evKiraUcret]));
	    MesajGonder(playerid, "Eger kirayi ödeyemezseniz evden otomatik olarak atilacaksiniz. /ev yazarak ev ayarlarina erisebilirsiniz.");
	    Log_Write("logs/evlog.txt", "%s(%d) Adli oyuncu %d ID'li evi %d karsiliginda kiraladi.",ReturnName(playerid),playerid,HouseInfo[id][evID],HouseInfo[id][evKiraUcret]);
	}
	return 1;
}

CMD:birlik(playerid)
{
	new bid = PlayerData[playerid][pFaction];
	new rutbe = PlayerData[playerid][pFactionRutbe];
	if (bid == -1) return HataMesajGonder(playerid, "Bir birlik üyesi deðilsiniz.");
	new str[1000],string[250],durum[24];
	strcat(str, "Ýþlem\tDurum\n");
	new uyeler;

	foreach (new i : Player)
	{
	    if (bid == PlayerData[i][pFaction]) uyeler++;
	}

	if (Birlikler[bid][OOCDurum] == 1) durum = "{38c5f7}Açýk";
	else durum = "{AA3333}Kapalý";

	format(string,sizeof(string), "{C8C8C8} Çevrimiçi Üyeler\t{FF9900}%d\n",uyeler);
	strcat(str,string);
	format(string,sizeof(string), "{C8C8C8} Birlik Bilgileri\n");
	strcat(str,string);
	format(string,sizeof(string), "{C8C8C8} Birlikten Çýk\n");
	strcat(str,string);

	if (Birlikler[bid][birlikTip] >= 1 && Birlikler[bid][birlikTip] <= 4)
	{
	    format(string,sizeof(string), "{C8C8C8} Birlik Kasa\t{FF9900}%s\n",FormatNumber(Birlikler[bid][birlikKasaPara]));
		strcat(str,string);
	}

	if (PlayerData[playerid][pFactionRutbe] == Birlikler[PlayerData[playerid][pFaction]][birlikRutbeler] || Birlikler[bid][birlikYetkilendirme][0] < rutbe)
	{
	    format(string,sizeof(string), "{C8C8C8} Üye Al\n");
		strcat(str,string);
	}

	if (Birlikler[bid][birlikYetkilendirme][1] <= rutbe)
	{
	    format(string,sizeof(string), "{C8C8C8} Üye At\n");
		strcat(str,string);
	}

	if (PlayerData[playerid][pFactionRutbe] > Birlikler[PlayerData[playerid][pFaction]][birlikRutbeler] - 1)
	{
	    format(string,sizeof(string), "{C8C8C8} Çevrimdýþý Üyeler\n");
		strcat(str,string);
	}

	if (Birlikler[PlayerData[playerid][pFaction]][birlikYetkilendirme][2] <= rutbe)
	{
	    format(string,sizeof(string), "{C8C8C8} Üye Rütbe Deðiþtir\n");
		strcat(str,string);
	}

	if (Birlikler[PlayerData[playerid][pFaction]][birlikYetkilendirme][3] <= rutbe && Birlikler[bid][birlikTip] != 1 && Birlikler[bid][birlikTip] != 2 && Birlikler[bid][birlikTip] != 3)
	{
	    format(string,sizeof(string), "{C8C8C8} Üye Divizyon Deðiþtir\n");
		strcat(str,string);
	}

	if (PlayerData[playerid][pFactionRutbe] > Birlikler[PlayerData[playerid][pFaction]][birlikRutbeler] - 1)
	{
	    format(string,sizeof(string), "{C8C8C8} Rütbe Adlarýný Düzenle\n");
		strcat(str,string);
	}

	if (PlayerData[playerid][pFactionRutbe] > Birlikler[PlayerData[playerid][pFaction]][birlikRutbeler] - 1 && Birlikler[bid][birlikTip] != 1 && Birlikler[bid][birlikTip] != 2 && Birlikler[bid][birlikTip] != 3)
	{
	    format(string,sizeof(string), "{C8C8C8} Divizyon Adlarýný Düzenle\n");
		strcat(str,string);
	}

	if (PlayerData[playerid][pFactionRutbe] >= Birlikler[PlayerData[playerid][pFaction]][birlikRutbeler] - 3)
	{
	    format(string, sizeof(string), "{C8C8C8} Birlik Araçlarýný Spawnla\n");
		strcat(str, string);
	}

	if (Birlikler[bid][birlikYetkilendirme][5] <= rutbe)
	{
	    format(string,sizeof(string), "{C8C8C8} Birlik OOC Chat\t%s\n",durum);
		strcat(str,string);
	}

	if (PlayerData[playerid][pFactionRutbe] > Birlikler[PlayerData[playerid][pFaction]][birlikRutbeler]-1)
	{
	    format(string,sizeof(string), "{C8C8C8} Rütbe Yetkilendirmeleri\n");
		strcat(str,string);
	}

	if (PlayerData[playerid][pFactionRutbe] > Birlikler[PlayerData[playerid][pFaction]][birlikRutbeler]-1)
	{
	    format(string, sizeof(string), "{C8C8C8} Maksimum Rütbe Deðiþtir\n");
	    strcat(str, string);
	}

	if (Birlikler[bid][birlikTip] == BIRLIK_HABER && Birlikler[bid][birlikYetkilendirme][7] <= rutbe)
	{
	    format(string, sizeof(string), "{C8C8C8} Ajans Ayarlarý\n");
	    strcat(str, string);
	}

	if (PlayerData[playerid][pFactionRutbe] > Birlikler[PlayerData[playerid][pFaction]][birlikRutbeler] - 1)
	{
	    format(string,sizeof(string), "{C8C8C8} Birlik Duyurusu Deðiþtir\n");
		strcat(str,string);
	}

	Dialog_Show(playerid, BirlikDialog, DIALOG_STYLE_TABLIST_HEADERS, "Birlik", str, "Seç", "Iptal");
	return 1;
}

CMD:bildirimler(playerid)
{
	if (!OyundaDegil(playerid)) return 1;
	BildirimlerDialog(playerid);
	return 1;
}
CMD:pos(playerid, params[])
{
    new Float: playerx;
	new Float: playery;
	new Float: playerz;
	GetPlayerPos(playerid, playerx, playery, playerz);
	MesajGonder(playerid, "X: %d, Y: %d, Z: %d", playerx, playery, playerz);
	return 1;
}
CMD:isyeri(playerid)
{
	if (!OyundaDegil(playerid)) return 1;
	if (PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");
	static id = -1;
	if (!IsPlayerInAnyVehicle(playerid) && (id = (Business_Inside(playerid) == -1) ? (Business_Nearest(playerid)) : (Business_Inside(playerid))) != -1)
	{
	    if (Isyeri[id][isyeriVergiSure] != 0 && Isyeri[id][isyeriVergi] >= IsyeriMaksVergi(id) && (PlayerData[playerid][pAdmin] < 2 || PlayerData[playerid][pAdminDuty] == 0)) return HataMesajGonder(playerid, "Bu iþyerinin vergisi ödenmediði için devlet tarafýndan kapatýlmýþ.");
	    new str[1000],string[500],durum[24],baslik[124];
	    if (Isyeri[id][isyeriSahip] == PlayerData[playerid][pID] || (PlayerData[playerid][pAdmin] >= 2 && PlayerData[playerid][pAdminDuty]== 1))
	    {
	        SetPVarInt(playerid, "IsyeriID",id);
	        strcat(str, "Ýþlem\tDurum\n");
	        if (Isyeri[id][isyeriKilit]) durum = "{FF0000}Kilitli";
	        else durum = "{2ECC71}Açýk";
	        format(string,sizeof(string), "Kilit Durumu\t%s\n",durum);
	        strcat(str,string);
	        format(string,sizeof(string), "Ýþyeri Kasasý\t{AFAFAF}%s\n",FormatNumber(Isyeri[id][isyeriKasa]));
	        strcat(str,string);
	        if (Isyeri[id][isyeriTip] != 4)
	        {
	            if (Isyeri[id][isyeriTip] != 7)
	            {
			        format(string,sizeof(string), "Ürün Al\n");
			        strcat(str,string);
		        }
	        }
	        else
	        {
	            if (Isyeri[id][isyeriTip] != 7)
	            {
		            format(string,sizeof(string), "Araç Ekle\n");
			        strcat(str,string);
		        }
	        }
	        format(string,sizeof(string), "Ýþyeri Adý\t{AFAFAF}%s\n",Isyeri[id][isyeriName]);
	        strcat(str,string);
	        format(string,sizeof(string), "Giriþ Ücreti\t{AFAFAF}%s\n",FormatNumber(Isyeri[id][isyeriGirisUcret]));
	        strcat(str,string);
	        format(string,sizeof(string), "Giriþ Mesajý\t{AFAFAF}%s\n",Isyeri[id][isyeriMesaj]);
	        strcat(str,string);
	        if (Isyeri[id][isyeriSatilik] == 1) durum = "{FF0000}Satýlýk";
	        else durum = "{2ECC71}Satýlýk Deðil";
	        format(string,sizeof(string), "Satýlýða Çýkar\t%s\n",durum);
	        strcat(str,string);
	        if (Isyeri[id][isyeriTip] == 6)
	        {
	            if (strlen(Isyeri[id][isyeriMuzik]) > 0) durum = "{2ECC71}Açýk";
	            else durum = "{FF0000}Kapalý";
	            format(string,sizeof(string), "Müzik Aç/Kapat\t%s\n",durum);
	        	strcat(str,string);
	        }
	        if (Isyeri[id][isyeriTip] != 4)
	        {
	            if (Isyeri[id][isyeriTip] != 7)
	            {
			        format(string,sizeof(string), "Ürün Fiyatlarýný Deðiþtir\n");
			        strcat(str,string);
		        }
	        }
	        else
	        {
	            if (Isyeri[id][isyeriTip] != 7)
	            {
		            format(string,sizeof(string), "Araç Düzenle\n");
			        strcat(str,string);
		        }
	        }
	        format(baslik,sizeof(baslik), "{E42020}Ýþyeri {FFFFFF}-{E42020} Vergi: %s/%s {FFFFFF}- {E42020}Saatlik Vergi: %s",FormatNumber(Isyeri[id][isyeriVergi]), FormatNumber(IsyeriMaksVergi(id)), FormatNumber(GetIsyeriVergi(id)));
			Dialog_Show(playerid,IsyeriDialog,DIALOG_STYLE_TABLIST_HEADERS,baslik,str, "Seç", "Kapat");
		}
		else return HataMesajGonder(playerid, "Ýþyerinize yakýn deðilsiniz.");
	}
	else return HataMesajGonder(playerid, "Ýþyerinize yakýn deðilsiniz.");
	return 1;
}

CMD:su(playerid)
{
	if (!OyundaDegil(playerid)) return 1;
	if (IsPlayerInAnyVehicle(playerid)) return HataMesajGonder(playerid, "Araçta bu islemi yapamazsin.");
	if (PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "su an bu komutu kullanamazsiniz.");
	if (PlayerData[playerid][pKelepce] == 1 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0) return HataMesajGonder(playerid, "suan bunu yapamazsin.");
	if (PlayerData[playerid][pSu] <= 0) return HataMesajGonder(playerid, "Hiç suyunuz yok.");
	if (PlayerData[playerid][pDrinking] == 1) return HataMesajGonder(playerid, "Zaten içecek içiyorsun.");
	PlayerData[playerid][pSu]--;
	PlayerData[playerid][pDrinking] = 1;
	PlayerData[playerid][pDrinkBar] = CreatePlayerProgressBar(playerid, 572.00, 440.00, 56.50, 3.20, -1429936641, 100.0);
	ShowPlayerProgressBar(playerid, PlayerData[playerid][pDrinkBar]);
 	SetPlayerProgressBarValue(playerid, PlayerData[playerid][pDrinkBar], 0);

 	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
 	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s su sisesini alir ve açar.", ReturnName(playerid, 0));
 	MesajGonder(playerid, "Suyu içmek için {FF0000}'LMB' {FFFFFF}tusuna basiniz.");
	return 1;
}

CMD:aksesuar(playerid)
{
	if (!OyundaDegil(playerid)) return 1;

	if (PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 		return HataMesajGonder(playerid, "Þu an komutu kullanamazsýnýz.");

	AksesuarlariGoster(playerid, 0);
	return 1;
}
CMD:park(playerid, params[])
{

    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesajGonder(playerid, "Sürücü degilsin.");

    new vehicleid = GetPlayerVehicleID(playerid);

    new Float:health;
	GetVehicleHealth(vehicleid, health);

	if (health < 500) return HataMesajGonder(playerid, "Araç hasarli oldugu için araci park edemiyorsunuz.");

 	if ((vehicleid = Car_GetID(vehicleid)) != -1 && Car_IsOwner(playerid, vehicleid))
 	{
  		new garajid = Garage_Inside(playerid);
 	    if (PlayerData[playerid][pCash] < 100) return HataMesajGonder(playerid, "Aracinizi park etmek için $100 gerekli.");
 	    if (garajid != -1 && ParkedilenAracSayisi(garajid) >= GarageData[garajid][gAracLimit]) return HataMesajGonder(playerid, "Bu garaja daha fazla araç park edilemez.");
 	    if (garajid != -1 && GarageData[garajid][gParkDurum] == 0) return HataMesajGonder(playerid, "Bu garaja araç park edilmesi yasak.");
 	    if (!spamProtect(playerid, "ParkEtme", 160)) return HataMesajGonder(playerid, "Aracinizi 2 dakikada bir parkedebilirsiniz!");

 	    ParaVer(playerid,-100);
 		    static
				g_arrSeatData[10] = {INVALID_PLAYER_ID, ...},
				g_arrDamage[4],
				seatid;

			GetVehicleDamageStatus(AracInfo[vehicleid][aracVehicle], g_arrDamage[0], g_arrDamage[1], g_arrDamage[2], g_arrDamage[3]);
			GetVehicleHealth(AracInfo[vehicleid][aracVehicle], health);

			foreach (new i : Player) if (IsPlayerInVehicle(i, AracInfo[vehicleid][aracVehicle])) {
		    seatid = GetPlayerVehicleSeat(i);

		    g_arrSeatData[seatid] = i;
			}
			GetVehiclePos(AracInfo[vehicleid][aracVehicle], AracInfo[vehicleid][aracPos][0],AracInfo[vehicleid][aracPos][1], AracInfo[vehicleid][aracPos][2]);
			GetVehicleZAngle(AracInfo[vehicleid][aracVehicle], AracInfo[vehicleid][aracPos][3]);

			if (garajid != -1) AracInfo[vehicleid][aracGaraj] = garajid;
			else AracInfo[vehicleid][aracGaraj] = -1;
			AracInfo[vehicleid][aracInterior] = GetPlayerInterior(playerid);
			AracInfo[vehicleid][aracWorld] = GetPlayerVirtualWorld(playerid);

			Arac_Kaydet(vehicleid);
			Arac_Spawn(vehicleid);
	        SetPlayerArmedWeapon(playerid, 0);

			SunucuMesaji(playerid, "Araç basariyla bulundugunuz yere park edildi.");

	        UpdateVehicleDamageStatus(AracInfo[vehicleid][aracVehicle], g_arrDamage[0], g_arrDamage[1], g_arrDamage[2], g_arrDamage[3]);
			SetVehicleHealth(GetPlayerVehicleID(playerid), health);
			AracInfo[vehicleid][aracDisplay] = true;
	        SetVehicleVirtualWorld(AracInfo[vehicleid][aracVehicle], GetPlayerVirtualWorld(playerid));

			for (new i = 0; i < sizeof(g_arrSeatData); i ++) if (g_arrSeatData[i] != INVALID_PLAYER_ID) {
				PutPlayerInVehicle(g_arrSeatData[i], AracInfo[vehicleid][aracVehicle], i);

				g_arrSeatData[i] = INVALID_PLAYER_ID;
			}
	}
	return 1;
}
CMD:basari(playerid, params[]) return BasariMenu(playerid);
stock BasariMenu(playerid)
{
    new str[4000];
    strcat(str, "Basari Ismi\tÖdülü\tDurum\tTarih\n");
    format(str, sizeof(str), "%s{FFFFFF}ilk Paintball\t$250\t%s\t%s\n", str, (PlayerData[playerid][pBasariPB] == 1) ? ("{00DA00}Yapildi") : ("{E81717}Yapilmadi"), PlayerData[playerid][pBasariPBTarih]);
    format(str, sizeof(str), "%s{FFFFFF}ilk Ev\t$2500\t%s\t%s\n", str, (PlayerData[playerid][pBasariEv] == 1) ? ("{00DA00}Yapildi") : ("{E81717}Yapilmadi"), PlayerData[playerid][pBasariEvTarih]);
    format(str, sizeof(str), "%s{FFFFFF}ilk Araç\t$1000\t%s\t%s\n", str, (PlayerData[playerid][pBasariArac] == 1) ? ("{00DA00}Yapildi") : ("{E81717}Yapilmadi"), PlayerData[playerid][pBasariAracTarih]);
    format(str, sizeof(str), "%s{FFFFFF}Seviye 5 Ol\t$2500\t%s\t%s\n", str, (PlayerData[playerid][pBasari5] == 1) ? ("{00DA00}Yapildi") : ("{E81717}Yapilmadi"), PlayerData[playerid][pBasari5Tarih]);
    format(str, sizeof(str), "%s{FFFFFF}Seviye 10 Ol\t$5000\t%s\t%s\n", str, (PlayerData[playerid][pBasari10] == 1) ? ("{00DA00}Yapildi") : ("{E81717}Yapilmadi"), PlayerData[playerid][pBasari10Tarih]);
    Dialog_Show(playerid, basarimenu, DIALOG_STYLE_TABLIST_HEADERS, "Basari Menüsü", str, "Seç", "Kapat");
	return 1;
}
CMD:araclarim(playerid)
{
	new string[1000],count;
	strcat(string, "ID\tModel\tPlaka\tDurum\n");
	for (new i = 0; i < MAX_ARAC; i ++) if (AracInfo[i][aracExists] && AracInfo[i][aracSahip] == PlayerData[playerid][pID])
	{
	    format(string, sizeof(string), "%s%d\t%s\t%s\t%s\n",string, AracInfo[i][aracVehicle], ReturnVehicleModelName(AracInfo[i][aracModel]),AracInfo[i][aracPlaka],(AracInfo[i][aracDisplay]) ? ("{2ECC71}Aktif") : ("{FF0000}Pasif"));
	    count++;
	}
	if (!count) return HataMesajGonder(playerid, "Sahip olduðunuz araç yok.");

	Dialog_Show(playerid, Araclarim, DIALOG_STYLE_TABLIST_HEADERS,  "{00FF80}Araçlarýnýz", string, "Deðiþtir", "Kapat");
	return 1;
}
CMD:aracbul(playerid)
{
    new string[1000],count;
	strcat(string, "ID\tModel\tLokasyon\tDurum\n");
	new Float:vX,Float:vY,Float:vZ;
	for (new i = 0; i < MAX_ARAC; i ++) if (AracInfo[i][aracExists] && AracInfo[i][aracSahip] == PlayerData[playerid][pID])
	{
	    GetVehiclePos(AracInfo[i][aracVehicle],vX,vY,vZ);
	    format(string, sizeof(string), "%s%d\t%s\t%s\t%s\n",string, AracInfo[i][aracVehicle], ReturnVehicleModelName(AracInfo[i][aracModel]),GetLocation(vX,vY,vZ),(AracInfo[i][aracDisplay]) ? ("{2ECC71}Aktif") : ("{FF0000}Pasif"));
	    count++;
	}
	if (!count) return HataMesajGonder(playerid, "Sahip olduðunuz araç yok.");

	Dialog_Show(playerid, AracimiBul, DIALOG_STYLE_TABLIST_HEADERS,  "{00FF80}Araç Bul", string, "Degistir", "Kapat");
	return 1;
}

CMD:oldcar(playerid)
{
   if (!OyundaDegil(playerid)) return 1;
   if (PlayerData[playerid][pLastCar] < 0) return HataMesajGonder(playerid, "En son hiçbir araca binmemiþsiniz.");
   MesajGonder(playerid, "Son bindiðiniz araç: %d", PlayerData[playerid][pLastCar]);
   return 1;
}

CMD:kilitddddd(playerid)
{
    new
	   id = -1;

    if ((id = Car_Nearest(playerid)) != -1)
	{
	    static
	        engine,
	        lights,
	        alarm,
	        doors,
	        bonnet,
	        boot,
	        objective;

	    GetVehicleParamsEx(AracInfo[id][aracVehicle], engine, lights, alarm, doors, bonnet, boot, objective);
        if (PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 		return HataMesajGonder(playerid, "su an bu komutu kullanamazsiniz.");
     	if (AracInfo[id][aracSahip] == PlayerData[playerid][pID] || (AracInfo[id][aracTip] == 2) || (AracInfo[id][aracTip] == 5 && PlayerData[playerid][pVip] > 0) || Car_Birlik(playerid,id) || Arac_AnahtarVar(playerid, id) || AracInfo[id][aracKiralayan] == PlayerData[playerid][pID] || (PlayerData[playerid][pFaction] != -1 && GetFactionType(playerid) != BIRLIK_CETE && GetFactionType(playerid) != BIRLIK_MAFYA &&  GetFactionType(playerid) != BIRLIK_LEGAL && AracInfo[id][aracFactionType] == GetFactionType(playerid)))
	    {
			if (!AracInfo[id][aracKilit])
			{
				AracInfo[id][aracKilit] = true;
				Arac_Kaydet(id);

				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

				SetVehicleParamsEx(AracInfo[id][aracVehicle], engine, lights, alarm, 1, bonnet, boot, objective);
				SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s '%s' model aracý kilitler.", ReturnName(playerid, 0), ReturnVehicleModelName(AracInfo[id][aracModel]));
				GameTextForPlayer(playerid, "~w~ARAC KILITLENDI!", 3000, 4);
			}
			else
			{
				AracInfo[id][aracKilit] = false;
				Arac_Kaydet(id);

				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
                SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s '%s' model aracýn kilidini açar.", ReturnName(playerid, 0), ReturnVehicleModelName(AracInfo[id][aracModel]));
				SetVehicleParamsEx(AracInfo[id][aracVehicle], engine, lights, alarm, 0, bonnet, boot, objective);
			}
		}
		else HataMesajGonder(playerid, "Bu aracý kilitleyemezsin/açamazsýn !");
	}
	else HataMesajGonder(playerid, "Herhangi bir araca yakýn deðilsin.");
	return 1;
}

CMD:radyo(playerid)
{
    if (!OyundaDegil(playerid)) return 1;
    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesajGonder(playerid, "Sürücü degilsiniz.");
    Dialog_Show(playerid, AracRadyo, DIALOG_STYLE_LIST, "Araç Radyo", "{FFFFFF}Radyo Kanallari\n{FFFFFF}URL Gir\n{fc4817}Radyoyu Durdur", "Seç", "Kapat");
	return 1;
}

CMD:anahtarver(playerid)
{
	if (!OyundaDegil(playerid)) return 1;
	if (PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "su an bu komutu kullanamazsiniz.");
	Dialog_Show(playerid, AnahtarVer, DIALOG_STYLE_LIST, "{38c5f7}Anahtar Ver", "{FFFFFF}Ev\n{FFFFFF}Araç", "Seç", "Kapat");
	return 1;
}

CMD:anahtarlarim(playerid)
{
    if (!OyundaDegil(playerid)) return 1;
    if (PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1)
 	return HataMesajGonder(playerid, "su an bu komutu kullanamazsiniz.");
    OyuncuAnahtarlar(playerid);
	return 1;
}

CMD:dolap(playerid)
{
	if (!OyundaDegil(playerid)) return 1;
	if (PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "su an bu komutu kullanamazsiniz.");
	if (PlayerData[playerid][pFaction] == -1) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

	if (IsPlayerInRangeOfPoint(playerid, 2.5, 1345.2136, 51.2352, 1004.6422) && (GetFactionType(playerid) == BIRLIK_LSPD || GetFactionType(playerid) == BIRLIK_FBI))
	{
	    Dialog_Show(playerid,LSPDDolap,DIALOG_STYLE_LIST, "{1394BF}LSPD Dolap", "{1394BF}> {FFFFFF}Isbasi\n{1394BF}> {FFFFFF}Üniformalar\n{1394BF}> {FFFFFF}Ekipmanlar\n{1394BF}> {FFFFFF}Silah Sifirla", "Seç", "Kapat");
	}
	else if (IsPlayerInRangeOfPoint(playerid, 5, 1125.7268, -1322.0380, -77.5484) && GetFactionType(playerid) == BIRLIK_LSMD)
	{
	    Dialog_Show(playerid, LSMDDolap, DIALOG_STYLE_LIST, "{FF8282}LSMD Dolap", "{FF8282}> {FFFFFF}isbasi\n{FF8282}> {FFFFFF}Üniformalar\n{FF8282}> {FFFFFF}Ekipmanlar", "Seç", "Kapat");
	}
	else if (IsPlayerInRangeOfPoint(playerid, 2.5, 267.1242, 109.7113, 1004.6172) && GetFactionType(playerid) == BIRLIK_LSSD)
	{
	    Dialog_Show(playerid, LSSDDolap, DIALOG_STYLE_LIST, "LSSD Dolap", "Ekipmanlar\nÜniformalar", "Seç", "Geri");
	}
	return 1;
}

CMD:uydu(playerid, params[])
{
	if (!OyundaDegil(playerid)) return 1;
	if (PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 		return HataMesajGonder(playerid, "su an bu komutu kullanamazsiniz.");
 	if (GetFactionType(playerid) != BIRLIK_LSPD && GetFactionType(playerid) != BIRLIK_FBI && PlayerData[playerid][pAdmin] < 1) return YetkinizYok(playerid);

 	if (PlayerData[playerid][pLSPDUydu] == false)
 	{
		if(!IsPlayerInRangeOfPoint(playerid, 5.0, 1472.7960,-1685.9994,-70.0371))
	 		return HataMesajGonder(playerid, "Bu bölgede uydu moduna geçemezsiniz.");

	 	SetPVarInt(playerid, "uyduInterior", GetPlayerInterior(playerid));
	 	SetPVarInt(playerid, "uyduWorld", GetPlayerVirtualWorld(playerid));
 	    GetPlayerPos(playerid, uyduX, uyduY, uyduZ);
 	    PlayerData[playerid][pLSPDUydu] = true;
 	    SunucuMesaji(playerid, "Uydu modu açýldý, haritadan bir bölge isaretleyiniz.");
 	}
 	else
 	{
 		SetCameraBehindPlayer(playerid);
 	    SetPlayerPos(playerid, uyduX, uyduY, uyduZ);
 	    SetPlayerInterior(playerid, GetPVarInt(playerid, "uyduInterior"));
 	    SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "uyduWorld"));
 	    PlayerData[playerid][pLSPDUydu] = false;
 	    DeletePVar(playerid, "uyduInterior");
 	    DeletePVar(playerid, "uyduWorld");
 	    SunucuMesaji(playerid, "Uydu modu kapatýldý.");
 	    TogglePlayerControllable(playerid,1);
 	}
	return 1;
}

CMD:fac(playerid,params[])
{
    new factionid = PlayerData[playerid][pFaction];

 	if (factionid == -1) return HataMesajGonder(playerid, "Herhangi bir birlik üyesi degilsin.");
 	if (Birlikler[factionid][OOCDurum] == 0) return HataMesajGonder(playerid, "Birlik yetkilisi tarafindan birlik chat devre disi birakilmis.");
 	if (isnull(params)) return KullanimMesaji(playerid, "(/f)action [Mesaj]");
 	SendBirlikMessage(factionid, 0x60FFFFAA, "{60ffff}(( %s %s: %s ))",Birlik_GetRutbe(playerid),ReturnName(playerid,0),params);
 	Log_Write("logs/birlik_chat.txt", "[%s] %s %s: %s", ReturnDate(),Birlik_GetRutbe(playerid),ReturnName(playerid),params);
	return 1;
}

CMD:taser(playerid)
{
	if (!OyundaDegil(playerid) || GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return HataMesajGonder(playerid, "suanda bu komutu kullanamazsiniz.");
	if (GetFactionType(playerid) != BIRLIK_LSPD && GetFactionType(playerid) != BIRLIK_LSSD) return HataMesajGonder(playerid, "Devlet memuru degilsin.");
	if (PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 		return HataMesajGonder(playerid, "su an bu komutu kullanamazsiniz.");

	if (!PlayerData[playerid][pTazer])
	{
	    PlayerData[playerid][pTazer] = 1;
        GetPlayerWeaponData(playerid, 2, PlayerData[playerid][pSilahlar][2], PlayerData[playerid][pMermiler][2]);

		GivePlayerWeapon(playerid, 23, 20000);
	    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s kilifini açar ve sok tabancasini eline alir.", ReturnName(playerid, 0));
	}
	else
	{
	    PlayerData[playerid][pTazer] = 0;
		SetWeapons(playerid);

		SetPlayerArmedWeapon(playerid, PlayerData[playerid][pSilahlar][2]);
	    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s sok tabancasini kilifina koyar ve kilifi kapatir.", ReturnName(playerid, 0));
	}
	return 1;
}
CMD:jammer(playerid, params[])
{
	if (GetFactionType(playerid) != BIRLIK_LSPD && GetFactionType(playerid) != BIRLIK_FBI)
		return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

	if (isnull(params))
 	{
	 	KullanimMesaji(playerid, "/jammer [ayar]");
  		SendClientMessage(playerid, 0xFFFF00FF, "[AYARLAR]:{FFFFFF} koy, kaldir, hepsinikaldir");
		return 1;
	}
	static
        Float:fX,
        Float:fY,
        Float:fZ,
        Float:fA;

    GetPlayerPos(playerid, fX, fY, fZ);
    GetPlayerFacingAngle(playerid, fA);

	if (!strcmp(params, "koy", true))
	{
	    if (IsPlayerInAnyVehicle(playerid))
	        return HataMesajGonder(playerid, "Araçta bunu yapamazsiniz!");

	    for (new i = 0; i != MAX_JAMMERS; i ++) if (!JammerData[i][jammerExists])
	    {
			JammerData[i][jammerExists] = true;

			JammerData[i][jammerPos][0] = fX;
			JammerData[i][jammerPos][1] = fY;
			JammerData[i][jammerPos][2] = fZ;
			JammerData[i][jammerMenzil] = 70;

			new string[256];
			format(string, sizeof(string), "{E74C3C}[Jammer]\n{E74C3C}Yerlestiren: {FFFFFF}%s\n{E74C3C}Menzil: {FFFFFF}%d m", ReturnName(playerid, 0), JammerData[i][jammerMenzil]);
			JammerData[i][jammerText3D] = CreateDynamic3DTextLabel(string, 0x2641FEFF, JammerData[i][jammerPos][0] + 0.5, JammerData[i][jammerPos][1] + 0.5, JammerData[i][jammerPos][2] - 0.5, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);

			JammerData[i][jammerObject] = CreateDynamicObject(363, fX+0.5, fY+0.5, fZ-0.5, 0.0, 0.0, fA);

			SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s yere bir jammer yerlestirir.", ReturnName(playerid, 0));
			SendBirlikMessage(PlayerData[playerid][pFaction], COLOR_DEPARTMENT, "** DEPARTMAN: %s bir jammer yerlestirdi. (Bölge: %s)", ReturnName(playerid, 0), GetLocation(fX, fY, fZ));

			return 1;
		}
		HataMesajGonder(playerid, "Sunucu maksimum jammer sayisina ulasti.");
	}
	else if (!strcmp(params, "kaldir", true))
	{
        for (new i = 0; i != MAX_JAMMERS; i ++) if (JammerData[i][jammerExists] && IsPlayerInRangeOfPoint(playerid, 3.0, JammerData[i][jammerPos][0], JammerData[i][jammerPos][1], JammerData[i][jammerPos][2]))
	    {
			JammerData[i][jammerExists] = 0;

			DestroyDynamicObject(JammerData[i][jammerObject]);
			DestroyDynamic3DTextLabel(JammerData[i][jammerText3D]);
			JammerData[i][jammerMenzil] = 0;

			SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s jammeri yerinden kaldirir.", ReturnName(playerid, 0));
			SendBirlikMessage(PlayerData[playerid][pFaction], COLOR_DEPARTMENT, "** DEPARTMAN: %s bir jammeri kaldirdi. (Bölge: %s)", ReturnName(playerid, 0), GetLocation(fX, fY, fZ));
			return 1;
		}
		HataMesajGonder(playerid, "Yakininizda jammer yok.");
	}
	else if (!strcmp(params, "hepsinikaldir", true))
	{
		for (new i = 0; i != MAX_JAMMERS; i ++) if (JammerData[i][jammerExists])
		{
			JammerData[i][jammerExists] = 0;

			DestroyDynamicObject(JammerData[i][jammerObject]);
			DestroyDynamic3DTextLabel(JammerData[i][jammerText3D]);
		}
		SendBirlikMessage(PlayerData[playerid][pFaction], COLOR_DEPARTMENT, "** DEPARTMAN: %s tüm jammerleri kaldirdi.", ReturnName(playerid, 0));
	}
	return 1;
}

CMD:drone(playerid, params[])
{
	if (GetFactionType(playerid) != BIRLIK_LSPD && GetFactionType(playerid) != BIRLIK_FBI)
		return HataMesajGonder(playerid, "Devlet memuru degilsin.");

	ShowModelSelectionMenu(playerid, DroneList, "Drones", 0x393939BB, 0x3498DBBB);

	return 1;
}

CMD:dronecik(playerid)
{
	if (GetFactionType(playerid) != BIRLIK_LSPD && GetFactionType(playerid) != BIRLIK_FBI)
		return HataMesajGonder(playerid, "Devlet memuru degilsin.");

	if(!IsValidVehicle(DroneCar[playerid]))
		return HataMesajGonder(playerid, "su anda zaten bir drone içerisinde degilsiniz.");

	DestroyVehicle(DroneCar[playerid]);
	DroneCar[playerid] = 0;
	SunucuMesaji(playerid, "Droneden çiktiniz.");

	return 1;
}


CMD:kelepce(playerid, params[])
{
    new
	    userid;

	if (GetFactionType(playerid) != BIRLIK_LSPD && GetFactionType(playerid) != BIRLIK_FBI)
		return HataMesajGonder(playerid, "Devlet memuru degilsin.");

    if (PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 		return HataMesajGonder(playerid, "su an bu komutu kullanamazsiniz.");

	if (sscanf(params, "u", userid))
	    return KullanimMesaji(playerid, "/kelepce [ID/Isim]");

	if (!OyundaDegil(userid))
	    return HataMesajGonder(playerid, "Belirttiginiz oyuncu oyunda degil.");

    if (userid == playerid)
	    return HataMesajGonder(playerid, "Kendinizi kelepçeleyemezsiniz.");

	if (!IsPlayerNearPlayer(playerid, userid, 5.0))
	    return HataMesajGonder(playerid, "Kisiye yakin degilsiniz.");

    /*if (!PlayerData[userid][pSoklandi] && GetPlayerSpecialAction(userid) != SPECIAL_ACTION_HANDSUP && !PlayerData[userid][pYereYatirildi] && PlayerData[playerid][pBaygin] == 0)
	    return HataMesajGonder(playerid, "Oyuncu etkisiz halde veya ellerini kaldirmis olmalidir.");*/

	if (GetPlayerState(userid) != PLAYER_STATE_ONFOOT)
	    return HataMesajGonder(playerid, "Kisi ayakta olmalidir.");

    if (PlayerData[userid][pKelepce])
        return HataMesajGonder(playerid, "Kisi zaten kelepçelenmis durumda.");

	if (PlayerData[userid][pDrinking])
	{
        SetPlayerSpecialAction(userid, SPECIAL_ACTION_NONE);

		DestroyPlayerProgressBar(userid, PlayerData[userid][pDrinkBar]);
		PlayerData[userid][pDrinking] = 0;
	}
	PlayerData[userid][pSoklandi] = 0;
	ClearAnimations(userid);
	SetPlayerArmedWeapon(userid,0);
    PlayerData[userid][pKelepce] = 1;
    SetPlayerCuffed(userid, true);
	TogglePlayerControllable(userid, true);
	SendClientMessageEx(userid,COLOR_LIGHTBLUE, "%s adlý memur tarafýndan kelepçelendiniz.",ReturnName(playerid,0));

    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s kelepçelerini kavrar ve %s adlý kiþinin bileklerine geçirerek kelepçeler.", ReturnName(playerid, 0), ReturnName(userid, 0));
    return 1;
}

CMD:kelepcecikar(playerid, params[])
{
    new
	    userid;

    if (GetFactionType(playerid) != BIRLIK_LSPD && GetFactionType(playerid) != BIRLIK_FBI)
		return HataMesajGonder(playerid, "Devlet memuru degilsin.");

    if (PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "su an bu komutu kullanamazsiniz.");

	if (sscanf(params, "u", userid))
	    return KullanimMesaji(playerid, "/kelepcecikar [ID/isim]");

	if (!OyundaDegil(userid))
	    return HataMesajGonder(playerid, "Belirttiginiz oyuncu oyunda degil.");

    if (userid == playerid)
	    return HataMesajGonder(playerid, "Kendi kelepçeni çözemezsin.");

    if (!IsPlayerNearPlayer(playerid, userid, 5.0))
	    return HataMesajGonder(playerid, "Kisiye yakin degilsiniz.");

    if (!PlayerData[userid][pKelepce])
        return HataMesajGonder(playerid, "Oyuncu kelepçeli degil.");

    PlayerData[userid][pKelepce] = 0;
    PlayerData[userid][pDragged] = 0;
	PlayerData[userid][pDraggedBy] = INVALID_PLAYER_ID;
	KillTimer(PlayerData[userid][pDragTimer]);
    SetPlayerCuffed(userid, false);
    TogglePlayerControllable(userid,true);

    SendClientMessageEx(userid,COLOR_LIGHTBLUE, " %s adlý memur tarafýndan kelepçeniz çýkartýldý.",ReturnName(playerid,0));

    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s adlý memur %s adlý kiþinin kelepçelerini çýkarttý.", ReturnName(playerid, 0), ReturnName(userid, 0));
    return 1;
}

CMD:ytasi(playerid, params[])
{
	new
	    userid, Float:oPos[4];

	if (GetFactionType(playerid) != BIRLIK_LSMD)
		return HataMesajGonder(playerid, "LSMD Memuru deðilsin.");

    if (PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "su an bu komutu kullanamazsiniz.");

    if (sscanf(params, "u", userid))
	    return KullanimMesaji(playerid, "/ytasi [ID/Isim]");

	if (!OyundaDegil(userid))
	    return HataMesajGonder(playerid, "Belirttiginiz oyuncu oyunda degil.");

    if (userid == playerid)
	    return HataMesajGonder(playerid, "Kendinizi sürükleyemezsiniz.");

	if (!IsPlayerNearPlayer(playerid, userid, 5.0))
	    return HataMesajGonder(playerid, "Kisiye yakin degilsiniz.");

    if (!PlayerData[userid][pBaygin])
        return HataMesajGonder(playerid, "Kisi baygin veya yarali degil.");

	if (PlayerData[userid][pDragged])
	{
	    PlayerData[userid][pDragged] = 0;
	    PlayerData[userid][pDraggedBy] = INVALID_PLAYER_ID;

	    KillTimer(PlayerData[userid][pDragTimer]);
	    DestroyDynamicObject(Sedye[playerid]);

	    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s, %s adli kisiyi sedye ile itmeyi birakir.", ReturnName(playerid, 0), ReturnName(userid, 0));
	}
	else
	{
	    GetPlayerPos(userid, oPos[0], oPos[1], oPos[2]);
	    GetPlayerFacingAngle(playerid, oPos[3]);

	    if (IsValidDynamicObject(Sedye[playerid]))
	    	DestroyDynamicObject(Sedye[playerid]);

		Sedye[playerid] = CreateDynamicObject(2146, oPos[0], oPos[1], oPos[2] - 0.5, 0.0000000, 0.0000000, oPos[3], -1, -1, -1, STREAMER_OBJECT_SD, 25.0, -1, 0);

		SetPlayerPos(userid, oPos[0], oPos[1], oPos[2] + 1.5000);

	    PlayerData[userid][pDragged] = 1;
	    PlayerData[userid][pDraggedBy] = playerid;

		ApplyAnimation(userid, "SWAT", "gnstwall_injurd", 4.1, true, false, false, false, 0, false);

	    PlayerData[userid][pDragTimer] = SetTimerEx("MDDragUpdate", 1600, true, "dd", playerid, userid);
	    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s, %s adli kisiyi sedye ile tasimaya baslar.", ReturnName(playerid, 0), ReturnName(userid, 0));
	}
	return 1;
}

CMD:yaracaat(playerid, params[])
{
    if (!OyundaDegil(playerid)) return 1;
    if (GetFactionType(playerid) != BIRLIK_LSMD) return HataMesajGonder(playerid, "LSMD üyesi degilsiniz.");
    if (IsPlayerInAnyVehicle(playerid)) return HataMesajGonder(playerid, "Araçtan inmelisiniz.");

    new id, seatid;

    if (sscanf(params, "u", id)) return KullanimMesaji(playerid, "/yaracaat [ID/Isim]");
    if (!OyundaDegil(id) || !IsPlayerNearPlayer(playerid, id, 5.0)) return HataMesajGonder(playerid, "Böyle bir oyuncu yok veya kisiye yeterince yakin degilsiniz.");
    if (id == playerid) return HataMesajGonder(playerid, "Kendinizi araca atamazsiniz.");
    if (IsPlayerInAnyVehicle(id)) return HataMesajGonder(playerid, "Bu oyuncu zaten araçta.");
    if (PlayerData[id][pBaygin] != 1) return HataMesajGonder(playerid, "Bu oyuncu yarali degil!");

    for (new i = 0; i != MAX_VEHICLES; i ++) if (IsPlayerNearBoot(playerid, i) && (GetVehicleModel(i) == 416 || GetVehicleModel(i) == 487))
    {
        seatid = GetAvailableSeat(i, 2);

	    if (seatid == -1)
	        return HataMesajGonder(playerid, "Araçta bos yer yok.");

		KillTimer(PlayerData[id][pDragTimer]);

		if (IsValidDynamicObject(Sedye[playerid]))
			DestroyDynamicObject(Sedye[playerid]);

	    ClearAnimations(id);
	    StopLoopingAnim(id);
	    CanAyarla(id, 100);
	    SetPVarInt(id, "AracaBindi", 1);
	    SetPVarInt(id, "CPsineGelindi", 0);
	    PutPlayerInVehicle(id, i, seatid);
	    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s, %s adli kisiyi sedyeye yerlestirir ve emniyet kemerini baglayarak araca bindirir.", ReturnName(playerid, 0), ReturnName(id, 0));
	    TogglePlayerControllable(id, false);
	    return 1;
    }

    HataMesajGonder(playerid, "Herhangi bir ambulans aracina yakin degilsiniz.");
	return 1;
}

forward MDDragUpdate(playerid, targetid);
public MDDragUpdate(playerid, targetid)
{
	if (PlayerData[targetid][pDragged] && PlayerData[targetid][pDraggedBy] == playerid)
	{
	    static Float:fX, Float:fY, Float:fZ, Float:fAngle;

		GetPlayerPos(playerid, fX, fY, fZ);
		GetPlayerFacingAngle(playerid, fAngle);

		fX -= 1.5 * floatsin(-fAngle, degrees);
		fY -= 1.5 * floatcos(-fAngle, degrees);

		SetDynamicObjectPos(Sedye[playerid], fX, fY, fZ - 0.5);
		SetDynamicObjectRot(Sedye[playerid], 0.0000000, 0.0000000, fAngle);

		SetPlayerPos(targetid, fX, fY, fZ + 1.1000);

		ApplyAnimation(targetid, "SWAT", "gnstwall_injurd", 4.1, true, false, false, false, 0, false);

		SetPlayerInterior(targetid, GetPlayerInterior(playerid));
		SetPlayerVirtualWorld(targetid, GetPlayerVirtualWorld(playerid));
	}
	return 1;
}

forward DragUpdate(playerid, targetid);
public DragUpdate(playerid, targetid)
{
	if (PlayerData[targetid][pDragged] && PlayerData[targetid][pDraggedBy] == playerid)
	{
	    static
	        Float:fX,
	        Float:fY,
	        Float:fZ,
			Float:fAngle;

		GetPlayerPos(playerid, fX, fY, fZ);
		GetPlayerFacingAngle(playerid, fAngle);

		fX -= 1.5 * floatsin(-fAngle, degrees);
		fY -= 1.5 * floatcos(-fAngle, degrees);

		SetPlayerPos(targetid, fX, fY, fZ);
		SetPlayerInterior(targetid, GetPlayerInterior(playerid));
		SetPlayerVirtualWorld(targetid, GetPlayerVirtualWorld(playerid));
	}
	return 1;
}

/*CMD:sedye(playerid, params[])
{
	new Float:oPos[4];

	GetPlayerPos(playerid, oPos[0], oPos[1], oPos[2]);
	GetPlayerFacingAngle(playerid, oPos[3]);

    CreateDynamicObject(2146, oPos[0], oPos[1], oPos[2] - 0.5, 0.0000000, 0.0000000, oPos[3]);

	SetPlayerPos(playerid, oPos[0], oPos[1], oPos[2] + 1.5000);
	ApplyAnimation(playerid, "SWAT", "gnstwall_injurd", 4.1, 1, 0, 0, 0, 0, 1);
	return 1;
}*/

CMD:bagajaat(playerid, params[])
{
	new
	    userid,
	    id = -1;

	if ((id = Car_Nearest(playerid)) != -1)
	{
    	if (PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1 )
 		return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");

    	if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER ||GetPlayerState(playerid) == PLAYER_STATE_PASSENGER) return HataMesajGonder(playerid, "Araç içerisindeyken bu komutu kullanamazsýnýz.");

    	if (sscanf(params, "u", userid))
	    	return KullanimMesaji(playerid, "/bagajaat [ID/Isim]");

		if (!OyundaDegil(userid))
	    	return HataMesajGonder(playerid, "Belirttiðiniz oyuncu oyunda deðil.");

    	if (userid == playerid)
	    	return HataMesajGonder(playerid, "Kendinizi bagaja atamazsýnýz.");

		if (!IsPlayerNearPlayer(playerid, userid, 5.0))
	    	return HataMesajGonder(playerid, "Kiþiye yakýn deðilsiniz.");

     	if (!IsPlayerNearBoot(playerid, AracInfo[id][aracVehicle]))
		 return HataMesajGonder(playerid, "Herhangi bir aracýn bagajýna yakýn deðilsiniz.");

       	if (!IsDoorVehicle(AracInfo[id][aracVehicle]) && !Motormu(AracInfo[id][aracVehicle]))
		    return HataMesajGonder(playerid, "Bu aracýn bagajý yok.");

	 	if(AracInfo[id][aracKisiSayi] == 3)
	 	    return HataMesajGonder(playerid, "Bu araçta çok fazla kiþi var.");

		if (GetPlayerState(playerid)== PLAYER_STATE_DRIVER)
	    	return HataMesajGonder(playerid, "Sürücüyken bu komutu kullanamazsýnýz.");

 		if (GetFactionType(playerid) == BIRLIK_LSPD || GetFactionType(playerid) == BIRLIK_FBI || GetFactionType(playerid) == BIRLIK_LSMD)
	    {
			AracInfo[id][aracKisiSayi]++;
			PlayerData[userid][pBagajAracim] = id;
			PlayerData[userid][pBagajdayim] = 1;
			PlayerData[userid][pBagajBenim] = userid;
			PlayerData[userid][pBagajKim] = playerid;

			MesajGonder(playerid, "%s'a bagaja atma isteði yollandý bekleyiniz.", ReturnName(userid, 0));
    		MesajGonder(userid, "%s sana bagaja atma isteði yolladý. (/kabul bagaj)", ReturnName(playerid, 0));
		}
		else
		{
		    AracInfo[id][aracKisiSayi]++;
			PlayerData[userid][pBagajAracim] = id;
			PlayerData[userid][pBagajdayim] = 1;
			PlayerData[userid][pBagajBenim] = userid;
			PlayerData[userid][pBagajKim] = playerid;

       		SetPVarInt(playerid, "titangot", userid);
			ClearAnimations(playerid);
			ApplyAnimation(playerid, "COP_AMBIENT", "Copbrowse_loop", 4.1, 1, 0, 0, 0, 0, 1);
		    PlayerData[playerid][pBagaj] = 7;
		    PlayerData[playerid][pBagajAtan] = userid;
		    MesajGonder(playerid, "%s adlý kiþiyi bagaja atmaya çalýþýyorsunuz.", ReturnName(userid, 0));
		}
    }
    return 1;
}

CMD:surukle(playerid, params[])
{
	new
	    userid;
    if (PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "su an bu komutu kullanamazsiniz.");

    if (sscanf(params, "u", userid))
	    return KullanimMesaji(playerid, "/surukle [ID/Isim]");

	if (!OyundaDegil(userid))
	    return HataMesajGonder(playerid, "Belirttiginiz oyuncu oyunda degil.");

    if (userid == playerid)
	    return HataMesajGonder(playerid, "Kendinizi sürükleyemezsiniz.");

	if (!IsPlayerNearPlayer(playerid, userid, 5.0))
	    return HataMesajGonder(playerid, "Kisiye yakin degilsiniz.");

    if (!PlayerData[userid][pKelepce] && !PlayerData[userid][pSoklandi] && GetPVarInt(userid, "IpBaglandi") == 0)
        return HataMesajGonder(playerid, "Kisi kelepçeli ya da sok etkisinde degil.");

	if (PlayerData[userid][pDragged])
	{
	    PlayerData[userid][pDragged] = 0;
	    PlayerData[userid][pDraggedBy] = INVALID_PLAYER_ID;

	    KillTimer(PlayerData[userid][pDragTimer]);
	    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s, %s adli kisiyi sürüklemeyi birakir.", ReturnName(playerid, 0), ReturnName(userid, 0));
	}
	else
	{
	    PlayerData[userid][pDragged] = 1;
	    PlayerData[userid][pDraggedBy] = playerid;

	    PlayerData[userid][pDragTimer] = SetTimerEx("DragUpdate", 200, true, "dd", playerid, userid);
	    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s, %s adli kisiyi sürüklemeye baslar.", ReturnName(playerid, 0), ReturnName(userid, 0));
	}
	return 1;
}

CMD:sm(playerid)
{
	if (GetFactionType(playerid) != BIRLIK_LSPD && GetFactionType(playerid) != BIRLIK_FBI) return HataMesajGonder(playerid, "Devlet memuru degilsin.");
	ShowPlayerDialog(playerid, 66, DIALOG_STYLE_LIST, "{8D8DFF}Sesli Megafon", "{FFFFFF}Teslim ol, etrafin sarildi!\n{FFFFFF}Burada oldugunu biliyoruz!\n{FFFFFF}Hey Sen! Polis, dur!\n{FFFFFF}Los Angeles Polis Departmani, oldugun yerde kal!\n{FFFFFF}Dur! yoksa ates açacagiz!\n{FFFFFF}Hadi! Hadi! Hadi!\n{FFFFFF}Polis, kipirdama!\n{FFFFFF}Ellerin basinin üstüne araçtan in!", "Seç", "Kapat");
	return 1;
}
CMD:megafon(playerid, params[])
{
	if (GetFactionType(playerid) != BIRLIK_LSPD && GetFactionType(playerid) != BIRLIK_FBI && GetFactionType(playerid) != BIRLIK_LSMD)
		return HataMesajGonder(playerid, "Bu komutu kullanamazsin.");

	if (!strlen(params) || isnull(params))
	    return KullanimMesaji(playerid,"(/m)egafon [Mesaj]");

	if (strlen(params) > 75)
		return HataMesajGonder(playerid, "Mesaj 75 karakter uzunlugunu geçemez.");

	new str[250];

	if (IsPlayerInAnyVehicle(playerid))
    {
	    format(str, sizeof(str), "** [ARAÇ MEGAFON] %s: %s ***", ReturnName(playerid, 0), params);
	    ProxDetector(50.0, playerid, str, COLOR_YELLOW);
    }
    else
    {
        format(str, sizeof(str), "** [EL MEGAFON] %s: %s ***", ReturnName(playerid, 0), params);
	    ProxDetector(50.0, playerid, str, COLOR_YELLOW);
    }
    return 1;
}

CMD:r(playerid,params[])
{
	if (GetFactionType(playerid) != BIRLIK_LSPD && GetFactionType(playerid) != BIRLIK_LSMD && GetFactionType(playerid) != BIRLIK_FBI && GetFactionType(playerid) != BIRLIK_GOV)
	    return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
    if (PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");

	if (isnull(params))
	    return KullanimMesaji(playerid, "(/r) [Mesaj]");

	static string[250];

	if (strlen(params) > 64)
	{
	    if (GetFactionType(playerid) == BIRLIK_LSPD)
	    {
		    format(string,sizeof(string), "** [CH: 911 S: 1] %s %s: %.64s",Birlik_GetRutbe(playerid),ReturnName(playerid,0), params);
		    SendBirlikMessage(PlayerData[playerid][pFaction], 0xE0BA91FF, string);
		    format(string, sizeof(string), "...%s **", params[64]);
		    SendBirlikMessage(PlayerData[playerid][pFaction], 0xE0BA91FF, string);
	    }
	    if (GetFactionType(playerid) == BIRLIK_LSMD)
	    {
	        format(string,sizeof(string), "** (Telsiz) %s %s: %.64s",Birlik_GetRutbe(playerid),ReturnName(playerid,0), params);
		    SendBirlikMessage(PlayerData[playerid][pFaction], 0xE0BA91FF, string);
		    format(string, sizeof(string), "...%s **", params[64]);
		    SendBirlikMessage(PlayerData[playerid][pFaction], 0xE0BA91FF, string);
	    }
	    if (GetFactionType(playerid) == BIRLIK_GOV)
	    {
	       	format(string,sizeof(string), "** (Telsiz) %s %s: %.64s",Birlik_GetRutbe(playerid),ReturnName(playerid,0), params);
		    SendBirlikMessage(PlayerData[playerid][pFaction], 0xE0BA91FF, string);
		    format(string, sizeof(string), "...%s **", params[64]);
		    SendBirlikMessage(PlayerData[playerid][pFaction], 0xE0BA91FF, string);
	    }

	}
	else
	{
	    if (GetFactionType(playerid) == BIRLIK_LSPD)
	    {
		    format(string,sizeof(string), "** [CH: 911 S: 1] %s %s: %s",Birlik_GetRutbe(playerid),ReturnName(playerid,0),params);
		    SendBirlikMessage(PlayerData[playerid][pFaction], 0xE0BA91FF, string);
	    }
		if (GetFactionType(playerid) == BIRLIK_LSMD)
		{
		    format(string,sizeof(string), "** (Telsiz) %s %s: %s",Birlik_GetRutbe(playerid),ReturnName(playerid,0), params);
		    SendBirlikMessage(PlayerData[playerid][pFaction], 0xE0BA91FF, string);
		}
		if (GetFactionType(playerid) == BIRLIK_GOV)
		{
		    format(string,sizeof(string), "** (Telsiz) %s %s: %s",Birlik_GetRutbe(playerid),ReturnName(playerid,0),params);
		    SendBirlikMessage(PlayerData[playerid][pFaction], 0xE0BA91FF, string);
		}
	}

	format(string, sizeof string, "%s telsizinin mandalina basarak konusur.", ReturnName(playerid, 0));
	SetPlayerChatBubble(playerid, string, COLOR_CYAN, 25.0, 5000);
	return 1;
}

CMD:op(playerid, params[])
{
    if (GetFactionType(playerid) != BIRLIK_LSPD && GetFactionType(playerid) != BIRLIK_FBI)
	    return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
	if (Birlikler[PlayerData[playerid][pFaction]][birlikRutbeler]-3 > PlayerData[playerid][pFactionRutbe]) return HataMesajGonder(playerid, "Bu komutu kullanmak için yeterli rütbede degilsiniz.");
	if (isnull(params)) return KullanimMesaji(playerid, "/op [Mesaj]");
	new str[224];
	if (strlen(params) > 64)
	{
	    format(str, sizeof(str), "** (Operatör) %.64s", params);
	    SendBirlikMessage(PlayerData[playerid][pFaction], COLOR_RADIO, str);
	    format(str, sizeof(str), "...%s **", params[64]);
	}
	else
	{
	    format(str, sizeof(str), "** (Operatör) %s", params);
	    SendBirlikMessage(PlayerData[playerid][pFaction], COLOR_RADIO, str);
	}
	return 1;
}

CMD:yt(playerid, params[])
{
    if (GetFactionType(playerid) != BIRLIK_LSPD && GetFactionType(playerid) != BIRLIK_FBI && GetFactionType(playerid) != BIRLIK_LSMD)
		return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

    if (PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "su an bu komutu kullanamazsiniz.");
	if (isnull(params))
	    return KullanimMesaji(playerid, "/yt [Mesaj]");

	new Float:ppos[3], string[250];
	GetPlayerPos(playerid, ppos[0], ppos[1], ppos[2]);

	foreach (new i: Player)
	{
	    if (IsPlayerInRangeOfPoint(i, 35.0, ppos[0], ppos[1], ppos[2]) && (GetFactionType(i) == BIRLIK_LSPD || GetFactionType(i) == BIRLIK_FBI || GetFactionType(i) == BIRLIK_LSMD) )
		{
		    if(GetFactionType(i) != BIRLIK_LSPD)
		    	format(string, sizeof(string), "** (Yakin Telsiz) %s %s: %s **", Birlik_GetRutbe(playerid), ReturnName(playerid, 0), params);

            if(GetFactionType(i) == BIRLIK_LSPD)
		    	format(string, sizeof(string), "** [CH: 911 S: YT] %s %s: %s **", Birlik_GetRutbe(playerid), ReturnName(playerid, 0), params);

			SendClientMessage(i, 0xE28B2CFF, string);
		}
	}
	return 1;
}
CMD:callsign(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), id = Car_GetID(vehicleid);

	new string[32];
	if (!IsPlayerInAnyVehicle(playerid)) return HataMesajGonder(playerid, "Bu komutu kullanmak için aracin içinde olmaniz gerekmektedir.");

	if (GetFactionType(playerid) != BIRLIK_LSPD && GetFactionType(playerid) != BIRLIK_FBI && GetFactionType(playerid) != BIRLIK_LSMD )
		return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

	if (AracInfo[id][aracFactionType] != BIRLIK_LSMD && AracInfo[id][aracFactionType] != BIRLIK_FBI && AracInfo[id][aracFactionType] != BIRLIK_LSPD)
	    return HataMesajGonder(playerid, "Bu araç callsign koymak için uygun degil.");

	if (VehicleCallSign[GetPlayerVehicleID(playerid)] == 1)
	{
 		Delete3DTextLabel(Vehicle3DText[vehicleid]);
	    VehicleCallSign[vehicleid] = 0;
	    format(VehicleText[vehicleid], 24, "");
	    SunucuMesaji(playerid, "Callsign kaldirildi.");
	    return 1;
	}
	if (sscanf(params, "s[32]",string)) return KullanimMesaji(playerid, "/callsign [Birim Kodu]");
	if (VehicleCallSign[GetPlayerVehicleID(playerid)] == 0)
	{
		format(VehicleText[vehicleid], 24, string);
 		Vehicle3DText[vehicleid] = Create3DTextLabel(string, -1, -1.0, -2.6, 0.0, 10.0, 0, 1);
		VehicleCallSign[vehicleid] = 1;
	 	Attach3DTextLabelToVehicle(Vehicle3DText[vehicleid] ,vehicleid, -1.0, -2.6, 0.0);
	}
	return 1;
}
CMD:birimler(playerid)
{
    if (GetFactionType(playerid) != BIRLIK_LSPD && GetFactionType(playerid) != BIRLIK_FBI &&  GetFactionType(playerid) != BIRLIK_LSMD)
		return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

	new string[1024], sayi, durum[256];
    for (new i = 1; i != MAX_VEHICLES; i ++) if (VehicleCallSign[i] == 1)
	{
	    format(durum, sizeof(durum), "Araç ID %d -   %s - %s\n", i, VehicleText[i], ReturnVehicleModelName(GetVehicleModel(i)));
		strcat(string, durum);
		sayi++;
	}
	if (sayi == 0) return HataMesajGonder(playerid, "Aktif birim yok.");
	Dialog_Show(playerid, birimler, DIALOG_STYLE_LIST, "Birimler", string, "Tamam", "");
	return 1;
}

CMD:dept(playerid, params[])
{
	if (GetFactionType(playerid) != BIRLIK_LSPD && GetFactionType(playerid) != BIRLIK_FBI &&  GetFactionType(playerid) != BIRLIK_LSMD)
	    return HataMesajGonder(playerid, "Bu komutu kullanamazsin.");

    if (PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 		return HataMesajGonder(playerid, "su an bu komutu kullanamazsiniz.");

	if (isnull(params))
	    return KullanimMesaji(playerid, "(/d)ept [Mesaj]");

	for (new i = 0; i != MAX_BIRLIK; i ++)
	{
		if (Birlikler[i][birlikTip] == BIRLIK_LSPD || Birlikler[i][birlikTip] == BIRLIK_FBI || Birlikler[i][birlikTip] == BIRLIK_LSMD || Birlikler[i][birlikTip] == BIRLIK_GOV)
			SendBirlikMessage(i, COLOR_DEPARTMENT, "[%s] %s %s: %s", /*GetInitials(Birlikler[i][birlikAd]), */Birlikler[PlayerData[playerid][pFaction]][birlikAd], Birlik_GetRutbe(playerid), ReturnName(playerid, 0), params);
	}

	new string[128];

	format(string, sizeof string, "%s telsizinin mandalina basarak konusur.", ReturnName(playerid, 0));
	SetPlayerChatBubble(playerid, string, COLOR_CYAN, 25.0, 5000);

	Log_Write("logs/birlik_chat.txt", "[departman][%s] %s %s: %s", ReturnDate(), Birlik_GetRutbe(playerid), ReturnName(playerid, 0), params);
	return 1;
}

CMD:aracaat(playerid, params[])
{
	new
		userid,
		vehicleid = GetNearestVehicle(playerid);

    if (PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "su an bu komutu kullanamazsiniz.");

	if (sscanf(params, "u", userid))
	    return KullanimMesaji(playerid, "/aracaat [ID/Isim]");

	if (!OyundaDegil(userid))
	    return HataMesajGonder(playerid, "Belirttiginiz oyuncu oyunda degil.");

    if (userid == playerid)
	    return HataMesajGonder(playerid, "Kendini araca atamazsin.");

    if (!IsPlayerNearPlayer(playerid, userid, 5.0))
	    return HataMesajGonder(playerid, "Kisiye yakin degilsiniz.");

    if (!PlayerData[userid][pKelepce] && GetPVarInt(userid, "IpBaglandi") == 0)
        return HataMesajGonder(playerid, "Kisi su anda kelepçeli veya bagli degil.");

	if (vehicleid == INVALID_VEHICLE_ID)
	    return HataMesajGonder(playerid, "Herhangi bir aracin yakininda degilsin.");

	if (GetVehicleMaxSeats(vehicleid) < 2)
  	    return HataMesajGonder(playerid, "Bu araç dolu.");

	if (IsPlayerInVehicle(userid, vehicleid))
	{
		if (PlayerData[userid][pKelepce] != 1) TogglePlayerControllable(userid, 0);
		else TogglePlayerControllable(userid, 1);
		RemovePlayerFromVehicle(userid);
		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s aracin kapisini açar ve %s'i araçtan indirir .", ReturnName(playerid, 0), ReturnName(userid, 0));
	}
	else
	{
	    if (PlayerData[userid][pBaygin] == 1)
	    {
	        PlayerData[userid][pBaygin] = 0;
	        PlayerData[userid][pBayginSure] = 0;
	        ClearAnimations(userid);
	        StopLoopingAnim(userid);
	    }
		new seatid = GetAvailableSeat(vehicleid, 2);

		if (seatid == -1)
		    return HataMesajGonder(playerid, "Bos koltuk yok.");

		TogglePlayerControllable(userid, 0);

		PlayerData[userid][pDragged] = 0;
		PlayerData[userid][pDraggedBy] = INVALID_PLAYER_ID;
		KillTimer(PlayerData[userid][pDragTimer]);
		ClearAnimations(userid);
		PutPlayerInVehicle(userid, vehicleid, seatid);
		if (PlayerData[userid][pKelepce] == 1) TogglePlayerControllable(userid, false);
		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s kapiyi açar ve %s'i koltuga oturtur.", ReturnName(playerid, 0), ReturnName(userid, 0));
	}
	return 1;
}
CMD:aracicek(playerid, params[]) {
    if (PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1)
 	return HataMesajGonder(playerid, "su an bu komutu kullanamazsiniz.");

 	if (GetFactionType(playerid) == BIRLIK_LSPD || GetFactionType(playerid) == BIRLIK_FBI)
 	{
   		if (IsPlayerInAnyVehicle(playerid))
     	{
			new
				carid = GetPlayerVehicleID(playerid);

			if (GetVehicleModel(carid) == 525)
			{
   				new
					closestcar = GetClosestCar(playerid, carid);

				foreach (new i:Player) {
					if (AracCekiyor[i] == closestcar || (GetPlayerVehicleID(i) == closestcar && GetPlayerState(i) == 2)) return HataMesajGonder(playerid, "Ayni anda 2 araci birden çekemezsin.");
				}
				new Float:VehiclePos[3];
				GetVehiclePos(closestcar,VehiclePos[0],VehiclePos[1],VehiclePos[2]);
       			if (GetPlayerDistanceFromPoint(playerid,VehiclePos[0],VehiclePos[1],VehiclePos[2]) <= 8 && !IsTrailerAttachedToVehicle(carid) && GetVehicleModel(closestcar) != 509) {
					MesajGonder(playerid, "suanda '%s' model araci çekiyorsunuz.",ReturnVehicleModelName(GetVehicleModel(closestcar)));
					AttachTrailerToVehicle(closestcar,carid);
					AracCekiyor[playerid] = closestcar;
					return 1;
     			}
			}
			else HataMesajGonder(playerid, "Çekici aracinda degilsiniz.");
   		}
     	else HataMesajGonder(playerid, "Çekici aracinda degilsiniz.");
	}
   	else HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
   	return 1;
}
CMD:aracicekmeyibirak(playerid, params[])
{
    if (PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1)
 	return HataMesajGonder(playerid, "su an bu komutu kullanamazsiniz.");
	if (GetFactionType(playerid) == BIRLIK_LSPD || GetFactionType(playerid) == BIRLIK_FBI)
  	{
   		if (IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
     	{
      		MesajGonder(playerid, "Araci çekmeyi biraktin.");
			AracCekiyor[playerid] = INVALID_VEHICLE_ID;
			DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
     	}
      	else
       	{
        	HataMesajGonder(playerid, "Þuanda herhangi bir aracý çekmiyorsun.");
        }
  	}
   	else
	{
 		HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
	}
	return 1;
}

CMD:gov(playerid, params[])
{
    if (GetFactionType(playerid) != BIRLIK_GOV && GetFactionType(playerid) != BIRLIK_LSPD && GetFactionType(playerid) != BIRLIK_LSMD && GetFactionType(playerid) != BIRLIK_FBI) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
	if (isnull(params)) return KullanimMesaji(playerid, "/gov [Duyuru]");
	if (strlen(params) > 64)
	{
	    if (GetFactionType(playerid) == BIRLIK_GOV)
	    {
	        SendClientMessageToAllEx(0xAFAFAFFF, "[GOV] %s %s: {FFFFFF}%.64s", Birlik_GetRutbe(playerid), ReturnName(playerid, 0), params);
	        SendClientMessageToAllEx(0xFFFFFFFF, "...%s", params[64]);
	    }
	    if (GetFactionType(playerid) == BIRLIK_LSPD)
	    {
	        SendClientMessageToAllEx(0x8D8DFFFF, "[LSPD] %s %s: {FFFFFF}%.64s", Birlik_GetRutbe(playerid), ReturnName(playerid, 0), params);
	        SendClientMessageToAllEx(0xFFFFFFFF, "...%s", params[64]);
	    }
	    if (GetFactionType(playerid) == BIRLIK_FBI)
	    {
	        SendClientMessageToAllEx(0x8D8DFFFF, "[FBI] %s %s: {FFFFFF}%.64s", Birlik_GetRutbe(playerid), ReturnName(playerid, 0), params);
	        SendClientMessageToAllEx(0xFFFFFFFF, "...%s", params[64]);
	    }
	    if (GetFactionType(playerid) == BIRLIK_LSMD)
	    {
	        SendClientMessageToAllEx(0xFF8282FF, "[LSMD] %s %s: {FFFFFF}%.64s", Birlik_GetRutbe(playerid), ReturnName(playerid, 0), params);
	        SendClientMessageToAllEx(0xFFFFFFFF, "...%s", params[64]);
	    }

	}
	else
	{
	    if (GetFactionType(playerid) == BIRLIK_GOV)
	    {
	        SendClientMessageToAllEx(0xAFAFAFFF, "[GOV] %s %s: {FFFFFF}%s", Birlik_GetRutbe(playerid), ReturnName(playerid, 0), params);
	    }
	    if (GetFactionType(playerid) == BIRLIK_LSPD)
	    {
	        SendClientMessageToAllEx(0x8D8DFFFF, "[LSPD] %s %s: {FFFFFF}%s", Birlik_GetRutbe(playerid), ReturnName(playerid, 0), params);
	    }
	    if (GetFactionType(playerid) == BIRLIK_FBI)
	    {
	        SendClientMessageToAllEx(0x8D8DFFFF, "[FBI] %s %s: {FFFFFF}%s", Birlik_GetRutbe(playerid), ReturnName(playerid, 0), params);
	    }
	    if (GetFactionType(playerid) == BIRLIK_LSMD)
	    {
	        SendClientMessageToAllEx(0xFF8282FF, "[LSMD] %s %s: {FFFFFF}%s", Birlik_GetRutbe(playerid), ReturnName(playerid, 0), params);
	    }
	}
	return 1;
}
/*CMD:rozet(playerid, params[])
{
    if (GetFactionType(playerid) != BIRLIK_LSPD && GetFactionType(playerid) != BIRLIK_FBI && GetFactionType(playerid) != BIRLIK_LSMD && GetFactionType(playerid) != BIRLIK_LSSD && GetFactionType(playerid) != BIRLIK_HABER && GetFactionType(playerid) != BIRLIK_GOV)
        return HataMesajGonder(playerid, "Bu komutu kullanamazsiniz.");
//    if (PlayerData[playerid][pKelepce] > 0  PlayerData[playerid][pHapisSure] > 0  PlayerData[playerid][pSoklandi] > 0  PlayerData[playerid][pYereYatirildi] > 0  PlayerData[playerid][pBaygin] == 1  PetKontrol[playerid] != -1  pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
//     return HataMesajGonder(playerid, "su an bu komutu kullanamazsiniz.");

       if (!strcmp(Type, "lspd", true))
    {
    if(GetFactionType(playerid) != BIRLIK_LSPD) return HataMesajGonder(playerid, "Bu komutu kullanamazsiniz.");
         if (PlayerData[playerid][pOnDuty])
    {
        PlayerData[playerid][pOnDuty] = false;
        SetPlayerColor(playerid, 0xFFFFFFFF);
        MesajGonder(playerid, "Rozetiniz gizlendi. /rozet komutunu kullanarak rozetinizi tekrar açabilirsiniz.");
    }
    else
    {
             SetPlayerColor(playerid, COLOR_BLUE);
        PlayerData[playerid][pOnDuty] = true;
        MesajGonder(playerid, "Rozet gösterildi.");
    }
    }
    else if (!strcmp(Type, "lssd", true))
    {
    if(GetFactionType(playerid) != BIRLIK_LSSD) return HataMesajGonder(playerid, "Bu komutu kullanamazsiniz.");
          if (PlayerData[playerid][pOnDuty])
    {
        PlayerData[playerid][pOnDuty] = false;
        SetPlayerColor(playerid, 0xFFFFFFFF);
        MesajGonder(playerid, "Rozetiniz gizlendi. /rozet komutunu kullanarak rozetinizi tekrar açabilirsiniz.");
    }
    else
    {
             SetPlayerColor(playerid, COLOR_ORANGE);
        PlayerData[playerid][pOnDuty] = true;
        MesajGonder(playerid, "Rozet gösterildi.");
    }
    }

    return 1;
}*/
CMD:kimlikgoster(playerid,params[])
{
    if (PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "su an bu komutu kullanamazsiniz.");
 	static userid;
 	if (sscanf(params, "u", userid)) return KullanimMesaji(playerid, "/kimlikgoster [ID/Isim]");
 	if (!OyundaDegil(userid) || !IsPlayerNearPlayer(playerid, userid, 5.0)) return HataMesajGonder(playerid, "Oyuncu giris yapmamis veya oyuncuya yakin degilsin.");
	SendClientMessage(userid, COLOR_GREY, "______________________________________________________");
	SendClientMessageEx(userid, -1, "{FFFFFF}> Ad - Soyad: {C2A2DA}%s",ReturnName(playerid));
	SendClientMessageEx(userid, -1, "{FFFFFF}> Yas: {C2A2DA}%d",PlayerData[playerid][pYas]);
	SendClientMessageEx(userid, -1, "{FFFFFF}> Cinsiyet: {C2A2DA}%s",(PlayerData[playerid][pCinsiyet] == 2) ? ("Bayan") : ("Erkek"));
	SendClientMessageEx(userid, -1, "{FFFFFF}> Dogum Yeri: {C2A2DA}%s",PlayerData[playerid][pDogum]);
	SendClientMessageEx(userid, -1, "{FFFFFF}> Ten Rengi: {C2A2DA}%s",(PlayerData[playerid][pTen] == 1) ? ("Beyaz") : ("Siyah"));
	SendClientMessage(userid, COLOR_GREY, "______________________________________________________");
	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s kimligini çikarir ve %s'e gösterir.", ReturnName(playerid, 0), ReturnName(userid, 0));
	return 1;
}
CMD:rozetgoster(playerid,params[])
{
    if (PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "su an bu komutu kullanamazsiniz.");

    if (GetFactionType(playerid) != BIRLIK_LSPD && GetFactionType(playerid) != BIRLIK_FBI && GetFactionType(playerid) != BIRLIK_LSMD && GetFactionType(playerid) != BIRLIK_HABER && GetFactionType(playerid) != BIRLIK_GOV) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
    static
	    userid;

	if (sscanf(params, "u", userid))
	    return KullanimMesaji(playerid, "/rozetgoster [ID/isim]");

	if (!OyundaDegil(userid) || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return HataMesajGonder(playerid, "Oyuncu giris yapmamis veya oyuncuya yakin degilsin.");

	SendClientMessage(userid, COLOR_GREY, "-----------------------------------------------------------");
	SendClientMessageEx(userid, -1, "{FFFFFF}> Ad/Soyad: {C2A2DA}%s",ReturnName(playerid));
	SendClientMessageEx(userid, -1, "{FFFFFF}> Yas: {C2A2DA}%d",PlayerData[playerid][pYas]);
	SendClientMessageEx(userid, -1, "{FFFFFF}> Cinsiyet: {C2A2DA}%s",(PlayerData[playerid][pCinsiyet] == 2) ? ("Bayan") : ("Erkek"));
	SendClientMessageEx(userid, -1, "{FFFFFF}> Dogum Yeri: {C2A2DA}%s",PlayerData[playerid][pDogum]);
	SendClientMessageEx(userid, -1, "{FFFFFF}> Kurum: {C2A2DA}%s",Birlikler[PlayerData[playerid][pFaction]][birlikAd]);
	SendClientMessageEx(userid, -1, "{FFFFFF}> Rütbe: {C2A2DA}%s",Birlik_GetRutbe(playerid));
	SendClientMessage(userid, COLOR_GREY, "-----------------------------------------------------------");

	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s rozetini çikartir ve %s'e gösterir.", ReturnName(playerid, 0), ReturnName(userid, 0));
	return 1;
}
CMD:aracibagla(playerid, params[])
{
	new ceza;
    if (GetFactionType(playerid) != BIRLIK_LSPD) return HataMesajGonder(playerid, "Devlet memuru degilsin.");
    if (!IsPlayerInRangeOfPoint(playerid, 5.0, 1600.2130, -1609.2825, 13.4653)) return HataMesajGonder(playerid, "Araç baglama yerine yakin degilsiniz.");
    if (sscanf(params, "i", ceza)) return KullanimMesaji(playerid, "/aracibagla [Ceza]");
    if (ceza < 50 || ceza > 3000) return HataMesajGonder(playerid, "En az $50, en fazla $3000 girebilirsiniz.");
    if (IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)) && AracCekiyor[playerid] != INVALID_VEHICLE_ID && GetVehicleModel(GetPlayerVehicleID(playerid)) == 525)
    {
        new aid = Car_GetID(AracCekiyor[playerid]);

        if (AracInfo[aid][aracExists] && AracInfo[aid][aracModel] != 509)
        {
            AracInfo[aid][aracBaglandi] = 1;
            AracInfo[aid][aracBaglandiCeza] = ceza;
            AracInfo[aid][aracDisplay] = false;
            Arac_Kaydet(aid);
            DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));

			Arac_Spawn(aid);

            AracCekiyor[playerid] = INVALID_VEHICLE_ID;
            if (AracInfo[aid][aracSahip] != -1)
            {
                if (GetPlayerIDWithSQLID(AracInfo[aid][aracSahip]) != -1)
                {
                    SunucuMesaji(GetPlayerIDWithSQLID(AracInfo[aid][aracSahip]), "'%s' model araciniz %s adli memur tarafindan baglandi. (Ceza: %s)", ReturnVehicleModelName(AracInfo[aid][aracModel]), ReturnName(playerid, 0), FormatNumber(ceza));
                    SendBirlikMessage(PlayerData[playerid][pFaction], COLOR_DEPARTMENT, "** DEPARTMAN: %s model araç %s adli memur tarafindan baglandi. (Ceza: %s)", ReturnVehicleModelName(AracInfo[aid][aracModel]), ReturnName(playerid, 0),FormatNumber(ceza));
                }
                else
                {
                    new str[50];
                    format(str, sizeof(str), "%s model araciniz %s adli memur tarafindan baglandi.",ReturnVehicleModelName(AracInfo[aid][aracModel]), ReturnName(playerid, 0));
                    BildirimEkle(AracInfo[aid][aracSahip], str, "LSPD");
                    SendBirlikMessage(PlayerData[playerid][pFaction], COLOR_DEPARTMENT, "** DEPARTMAN: %s model araç %s adli memur tarafindan baglandi. (Ceza: %s)", ReturnVehicleModelName(AracInfo[aid][aracModel]), ReturnName(playerid, 0),FormatNumber(ceza));
                }
            }
            MesajGonder(playerid, "Araç baglandi.");
        }
	}
	return 1;
}
CMD:flasor(playerid, params[])
{
    if (GetFactionType(playerid) != BIRLIK_LSPD && GetFactionType(playerid) != BIRLIK_LSMD)
        return HataMesajGonder(playerid, "Bu komutu kullanamazsiniz.");

    new vehicleid = GetPlayerVehicleID(playerid);

    if (!IsPlayerInAnyVehicle(playerid))
        return HataMesajGonder(playerid, "Bir aracin içinde olmalisin.");

    switch (Flasher[vehicleid])
    {
        case 0:
        {
            Flasher[vehicleid] = 1;
            SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s aracin flasörünü açar.", ReturnName(playerid, 0));
        }
        case 1:
        {
            Flasher[vehicleid] = 0;
            SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s aracin flasörünü kapatir.", ReturnName(playerid, 0));
        }
    }
    return 1;
}
CMD:siren(playerid, params[])
{
	if (GetFactionType(playerid) != BIRLIK_LSPD && GetFactionType(playerid) != BIRLIK_FBI)
	    return HataMesajGonder(playerid, "Devlet memuru degilsin.");

	new vehicleid = GetPlayerVehicleID(playerid);

	if (!IsPlayerInAnyVehicle(playerid))
	    return HataMesajGonder(playerid, "Herhangi bir araçta degilsin.");

	new id = Car_GetID(vehicleid);
	if (id == -1) return HataMesajGonder(playerid, "Bu araca siren takilamaz.");
	switch (AracInfo[id][aracSirenAcik])
	{
	    case false:
	    {
			static
        		Float:fSize[3],
        		Float:fSeat[3];

		    GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, fSize[0], fSize[1], fSize[2]); // need height (z)
    		GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_FRONTSEAT, fSeat[0], fSeat[1], fSeat[2]); // need pos (x, y)

            AracInfo[id][aracSirenAcik] = true;
			AracInfo[id][SirenObject] = CreateDynamicObject(18646, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);

		    AttachDynamicObjectToVehicle(AracInfo[id][SirenObject], vehicleid, -fSeat[0], fSeat[1], fSize[2] / 2.0, 0.0, 0.0, 0.0);
			MesajGonder(playerid, "Araca siren takildi.");
		}
		case 1:
		{
		    AracInfo[id][aracSirenAcik] = false;

			DestroyDynamicObject(AracInfo[id][SirenObject]);
			MesajGonder(playerid, "Siren kapatýldý.");
		}
	}
	return 1;
}

CMD:destekiste(playerid)
{
    if (PlayerData[playerid][pDestek] > 0)
	{
	    //return HataMesajGonder(playerid, "Zaten destek isteginiz var, /destekiste yazarak kapatabilirsiniz.");
	    if (!OyundaDegil(playerid)) return 1;
		if ((GetFactionType(playerid) != BIRLIK_LSPD) && (GetFactionType(playerid) != BIRLIK_LSMD)) return HataMesajGonder(playerid, "Devlet memuru degilsiniz.");
		if (PlayerData[playerid][pDestek] < 1) return HataMesajGonder(playerid, "Destek isteginiz yok.");
		PlayerTextDrawHide(playerid, destekiste[playerid]);
		foreach (new i : Player) if ((GetFactionType(i) == BIRLIK_LSPD) || GetFactionType(i) == BIRLIK_LSMD) {
	 		RemovePlayerMapIcon(i, playerid);
	 		KillTimer(connect_destek[playerid]);
		}
		DestekKapat(playerid, 0);
		return 1;
	}
	if (!OyundaDegil(playerid)) return 1;
	if ((GetFactionType(playerid) != BIRLIK_LSPD) && (GetFactionType(playerid) != BIRLIK_LSMD)) return HataMesajGonder(playerid, "Devlet memuru degilsiniz.");
	if (PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "Suan bu komutu kullanamazsiniz.");

	new Float:pos[3];
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	PlayerData[playerid][pDestek] = 600;
	PlayerTextDrawShow(playerid, destekiste[playerid]);
	connect_destek[playerid] = SetTimerEx("DestekRender", 500, true, "i", playerid);
	SendBirlikMessageEx(BIRLIK_LSMD, COLOR_RADIO, "** (Radyo Operatörü) Belirtilen bölge (%s) %s %s için bir destek sinyali, tamam.", GetLocation(pos[0], pos[1], pos[2]), Birlik_GetRutbe(playerid), ReturnName(playerid, 0));
	SendBirlikMessageEx(BIRLIK_LSPD, COLOR_RADIO, "** (Radyo Operatörü) Belirtilen bölge (%s) %s %s için bir destek sinyali, tamam.", GetLocation(pos[0], pos[1], pos[2]), Birlik_GetRutbe(playerid), ReturnName(playerid, 0));
	MesajGonder(playerid, "Destek istediniz, destegi kapatmak için /destekiste komutunu tekrar kullanabilirsiniz.");
 return 1;
}

forward AracRender(playerid);
public AracRender(playerid)
{
	new Float:pos[3];
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	foreach (new i : Player) if (GetFactionType(i) == BIRLIK_LSPD) {
 		SetPlayerMapIcon(i, playerid, pos[0], pos[1], pos[2], 0, 0x0000FF2A, MAPICON_LOCAL);
	}
	return 1;
}

forward DestekRender(playerid);
public DestekRender(playerid)
{
	new Float:pos[3];
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	foreach (new i : Player)
	if (GetFactionType(i) == BIRLIK_LSPD)
	{
		if (GetFactionType(playerid) == BIRLIK_LSMD)
		    SetPlayerMapIcon(i, playerid, pos[0], pos[1], pos[2], 0, 0xBEFFACFF, MAPICON_LOCAL);
		else
			SetPlayerMapIcon(i, playerid, pos[0], pos[1], pos[2], 0, 0xBE00DBFF, MAPICON_LOCAL);
	}
 	else if (GetFactionType(i) == BIRLIK_LSMD)
	{
		if (GetFactionType(playerid) == BIRLIK_LSPD)
		    SetPlayerMapIcon(i, playerid, pos[0], pos[1], pos[2], 0, 0xBE00DBFF, MAPICON_LOCAL);
		else
			SetPlayerMapIcon(i, playerid, pos[0], pos[1], pos[2], 0, 0xBEFFACFF, MAPICON_LOCAL);
	}
	return 1;
}

CMD:destekkapat(playerid)
{
	return 1;
}
CMD:cctv(playerid)
{
    if (!OyundaDegil(playerid)) return 1;
    if (PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1)
 	return HataMesajGonder(playerid, "su an bu komutu kullanamazsiniz.");
    if (GetFactionType(playerid) != BIRLIK_LSPD && GetFactionType(playerid) != BIRLIK_FBI) return HataMesajGonder(playerid, "Devlet memuru degilsiniz.");
	if (!IsPlayerInRangeOfPoint(playerid, 5.0, 1488.1561,-1691.2668,-70.0371) && PlayerData[playerid][pCCTV] == -1) return HataMesajGonder(playerid, "CCTV izleme noktasinda degilsin.");
    CCTVMenu(playerid);
	return 1;
}

CMD:cctvcik(playerid)
{
    if (!OyundaDegil(playerid)) return 1;
    if (PlayerData[playerid][pCCTV] == -1) return HataMesajGonder(playerid, "CCTV izlemiyorsunuz.");
    PlayerCancelCCTV(playerid);
	return 1;
}

CMD:yereyatir(playerid, params[])
{
	new hedefid;
    if (!OyundaDegil(playerid)) return 1;
    if (GetFactionType(playerid) != BIRLIK_LSPD && GetFactionType(playerid) != BIRLIK_FBI) return HataMesajGonder(playerid, "Devlet memuru degilsiniz.");
    if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return HataMesajGonder(playerid, "Araçta bu komutu kullanamazsiniz.");
    if (PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PlayerData[playerid][pHapisSure] > 0 || GetPVarInt(playerid, "IpBaglandi") == 1) return HataMesajGonder(playerid, "su an bu komutu kullanamazsiniz.");
    if (sscanf(params, "u", hedefid)) return KullanimMesaji(playerid, "/yereyatir [ID/Isim]");
    if (!OyundaDegil(hedefid)) return HataMesajGonder(playerid, "Oyuncu giris yapmamis.");
    if (hedefid == playerid) return HataMesajGonder(playerid, "Kendi kendini yere yatiramazsin.");
    if (!IsPlayerNearPlayer(playerid, hedefid, 2.0) || GetPlayerState(hedefid) == PLAYER_STATE_SPECTATING) return HataMesajGonder(playerid, "Kisiye yeterince yakin degilsiniz.");
    if (GetPlayerState(hedefid) != PLAYER_STATE_ONFOOT) return HataMesajGonder(playerid, "Araçta olan bir kisiyi yere yatiramazsiniz.");
    if (PlayerData[hedefid][pKelepce] > 0 || PlayerData[hedefid][pHapisSure] > 0 || PlayerData[hedefid][pSoklandi] > 0 || PlayerData[hedefid][pYereYatirildi] > 0 || PlayerData[hedefid][pBaygin] == 1 || PetKontrol[hedefid] != -1 || pbOda[hedefid] != -1)
 	return HataMesajGonder(playerid, "Bu kisiyi yere yatiramazsiniz.");

    PlayerData[hedefid][pYereYatirildi] = 12;
    ApplyAnimation(hedefid, "CRACK", "crckdeth4", 4.0, 0, 0, 0, 1, 0, 1);
    TogglePlayerControllable(hedefid, 0);
    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s %s'in üzerine atlar ve yere yatirir.", ReturnName(playerid, 0), ReturnName(hedefid, 0));
	return 1;
}

CMD:mdc(playerid)
{
    if (!OyundaDegil(playerid)) return 1;
    if (GetFactionType(playerid) != BIRLIK_LSPD && GetFactionType(playerid) != BIRLIK_LSSD) return HataMesajGonder(playerid, "Devlet memuru degilsiniz.");
    if (!IsPlayerInAnyVehicle(playerid)) return HataMesajGonder(playerid, "Polis aracinin içerisinde olmalisiniz.");
    new id = Car_GetID(GetPlayerVehicleID(playerid));
    if (AracInfo[id][aracFactionType] != BIRLIK_LSPD && AracInfo[id][aracFactionType] != BIRLIK_LSSD) return HataMesajGonder(playerid, "Polis aracinin içerisinde olmalisiniz.");

    MenuMVB(playerid);
	return 1;
}

CMD:cezayaz(playerid, params[])
{
	static
	    userid,
	    price,
	    reason[64];

	if (GetFactionType(playerid) != BIRLIK_LSPD)
		return HataMesajGonder(playerid, "Bu komutu sadece polisler kullanabilir.");

	if (sscanf(params, "uds[64]", userid, price, reason))
		return KullanimMesaji(playerid, "/cezayaz [id/isim] [miktar] [sebep]");

	if (!IsPlayerConnected(userid) || !IsPlayerNearPlayer(playerid, userid, 5.0) || GetPlayerState(userid) == PLAYER_STATE_SPECTATING || GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
	    return HataMesajGonder(playerid, "Bu oyuncu size yakýn deðil veya baðlantýsý kesildi.");

	if (userid == playerid)
	    return HataMesajGonder(playerid, "Kendine ceza yazamazsýn.");

	if (price < 350 || price > 25000)
	    return HataMesajGonder(playerid, "Ceza bedeli $350 altýnda ve $25,000 üstünde olamaz.");

	new id = Ticket_Add(userid, price, reason);

	if (id != -1) {
	    MesajGonder(playerid, "%s adlý oyuncuya %s para cezasý yazdýn, sebep: %s.", ReturnName(userid, 0), FormatNumber(price), reason);
	    MesajGonder(userid, "%s adlý memur sana %s para cezasý yazdý, sebep: %s.", ReturnName(playerid, 0), FormatNumber(price), reason);

	    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s bir kaðýt, kalem çýkarýr ve %s'a ceza yazar.", ReturnName(playerid, 0), ReturnName(userid, 0));
	    Log_Write("logs/ticket_log.txt", "[%s] %s has written a %s ticket to %s, reason: %s", ReturnDate(), ReturnName(playerid, 0), FormatNumber(price), ReturnName(userid, 0), reason);
	}
	else {
	    HataMesajGonder(playerid, "Bu oyuncunun zaten ödenmemiþ %s cezasý vardýr.", MAX_PLAYER_TICKETS);
	}
	return 1;
}

CMD:hapseat(playerid, params[])
{
    if (!OyundaDegil(playerid)) return 1;
    if (GetFactionType(playerid) != BIRLIK_LSPD && GetFactionType(playerid) != BIRLIK_LSSD) return HataMesajGonder(playerid, "Devlet memuru degilsiniz.");
    if (!IsPlayerNearArrest(playerid)) return HataMesajGonder(playerid, "Hapse atma noktasinda degilsiniz.");
    new userid, time;
    if (sscanf(params, "ui", userid, time)) return KullanimMesaji(playerid, "/hapseat [ID/Isim] [Dakika]");
    if (!OyundaDegil(userid)) return HataMesajGonder(playerid, "Oyuncu oyunda degil.");
    if (!IsPlayerNearPlayer(playerid, userid, 4.0) || GetPlayerState(userid) == PLAYER_STATE_SPECTATING) return HataMesajGonder(playerid, "Kisiye yeterince yakin degilsiniz.");
    if (time < 2 || time > 500) return HataMesajGonder(playerid, "Dakika 2 ve 500 arasinda olmalidir.");
    if (PlayerData[userid][pAranma] < 1) return HataMesajGonder(playerid, "Bu kisinin aranmasi yok.");

    PlayerData[userid][pHapis] = 1;
    PlayerData[userid][pHapisSure] = time*60;

	if (PlayerData[userid][pDragged])
	{
	    PlayerData[userid][pDragged] = 0;
		PlayerData[userid][pDraggedBy] = INVALID_PLAYER_ID;
		KillTimer(PlayerData[userid][pDragTimer]);
	}

	SetPlayerInPrison(userid);
	ResetWeapons(userid);
	PlayerData[userid][pKelepce] = 0;
	SetPlayerCuffed(userid, false);
	TogglePlayerControllable(userid, true);
	PlayerData[userid][pAranma] = 0;
	SetPlayerWantedLevel(userid, 0);
	DisablePlayerCheckpoint(userid);
	PlayerTextDrawShow(userid, HapisTD[playerid]);
	SetPlayerSpecialAction(userid, SPECIAL_ACTION_NONE);
	SendBirlikMessage(PlayerData[playerid][pFaction], COLOR_DEPARTMENT, "** DEPARTMAN: %s %s, %s adli kisiyi %d gün ((Dakika)) hapse atti.", Birlik_GetRutbe(playerid), ReturnName(playerid, 0), ReturnName(userid, 0), time);
	MesajGonder(userid, "%s adli memur tarafindan %d dakika hapse atildiniz.", ReturnName(playerid, 0), time);
	return 1;
}

CMD:hasarlar(playerid, params[])
{
	static
	    userid, hasarsayi;

	if (sscanf(params, "u", userid))
	    return KullanimMesaji(playerid, "/hasarlar [ID/Isim]");

	if (!OyundaDegil(userid))
	    return HataMesajGonder(playerid, "Böyle bir oyuncu yok!");

	if (!IsPlayerNearPlayer(playerid, userid, 5.0))
	    return HataMesajGonder(playerid, "Kisiye yeterince yakin degilsiniz.");

    if (!PlayerData[userid][pBaygin])
	    return HataMesajGonder(playerid, "Bu oyuncu yarali degil!");

    static
		string[MAX_HASAR * 60];

	string[0] = 0;

	strcat(string, "Hasar\tBölge\tHasar Veren\tSilah\n");
	for (new i = 0; i < MAX_HASAR; i ++)
	{
		if (Hasarlar[userid][i][hasarVarmi]) {
			format(string, sizeof(string), "%s%.2f\t%s\t%s\t%s\n", string, Hasarlar[userid][i][hasarDeger], HasarBolge(Hasarlar[userid][i][hasarBolge]), (!IsPlayerConnected(Hasarlar[userid][i][hasarVeren])) ? ("Yok") : (ReturnName(Hasarlar[userid][i][hasarVeren], 0)), ReturnWeaponName(Hasarlar[userid][i][hasarSilah]));
			hasarsayi++;
		}
	}
	if (hasarsayi == 0) return HataMesajGonder(playerid, "Hiç hasari yok.");
	Dialog_Show(playerid, Hasarlar, DIALOG_STYLE_TABLIST_HEADERS, ReturnName(userid, 0), string, "Tamam", "{FF6347}Iptal");
	return 1;
}
CMD:iyilestir(playerid, params[])
{
	new id;
	if (!OyundaDegil(playerid)) return 1;
	if (GetFactionType(playerid) != BIRLIK_LSMD) return HataMesajGonder(playerid, "LSMD üyesi degilsiniz.");
	if (PlayerData[playerid][pIyilestiriyor] != -1) return HataMesajGonder(playerid, "Zaten suanda birisini tedavi ediyorsun.");
	if (PlayerData[playerid][pBaygin] > 0 || PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pDrinking] > 0 || PlayerData[playerid][pHapisSure] > 0 || IsPlayerInAnyVehicle(playerid) || GetPVarInt(playerid, "IpBaglandi") == 1) return HataMesajGonder(playerid, "su an bunu yapamazsiniz.");
	if (sscanf(params, "u", id)) return KullanimMesaji(playerid, "/iyilestir [ID/Isim]");
	if (!OyundaDegil(id)) return HataMesajGonder(playerid, "Böyle bir oyuncu yok!");
	if (!IsPlayerNearPlayer(playerid, id, 2.5)) return HataMesajGonder(playerid, "Kisiye yeterince yakin degilsiniz.");
	if (id == playerid) return HataMesajGonder(playerid, "Kendini iyilestiremezsin.");
	if (PlayerData[id][pBaygin] != 1) return HataMesajGonder(playerid, "Bu oyuncu yarali degil!");
	if (GetPVarInt(id, "Iyilestiriliyor") == 1) return HataMesajGonder(playerid, "Bu oyuncu zaten iyilestiriliyor.");
	PlayerData[playerid][pIyilestiriyor] = id;
	PlayerData[playerid][pIyilestirmeSure] = 0;
	PlayerData[playerid][pLoopAnim] = true;
	SetPVarInt(id, "Iyilestiriliyor", 1);
	SetPlayerArmedWeapon(playerid, 0);
	new Float:pos[3];
	GetPlayerPos(id, pos[0], pos[1], pos[2]);
	SetPlayerLookAt(playerid, pos[0], pos[1]);
	TogglePlayerControllable(playerid, false);
	ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Loop", 4.1, 1, 1, 1, 0, 0, 1);
	ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Loop", 4.1, 1, 1, 1, 0, 0, 1);
	MesajGonder(playerid, "%s adli kisiyi tedavi ediyorsun, 15 saniye sonra bitecek.", ReturnName(id, 0));
	return 1;
}

CMD:ambulanscagir(playerid, params[])
{
	if (PlayerData[playerid][pBaygin] != 1)
		return HataMesajGonder(playerid, "Bu komutu sadece yaralilar kullanabilir.");

	new bildirimCount = 0;

	foreach (new i : Player)
	{
	    if (GetFactionType(i) == BIRLIK_LSMD)
	    {
	        SendClientMessageEx(i, 0xFF8282FF, "%s isimli oyuncu yarali, /yaralilar komutu ile oyuncuyu kabul edebilirsin.", ReturnName(playerid, 0));
			bildirimCount++;
		}
	}

	if (bildirimCount != 0)
		MesajGonder(playerid, "Aktif LSMD üyelerine bildirim gönerildi.");

	if (bildirimCount == 0)
		HataMesajGonder(playerid, "Aktif LSMD üyesi bulunamadi.");

	return 1;
}

CMD:yaralilar(playerid)
{
    if (!OyundaDegil(playerid)) return 1;
    if (GetFactionType(playerid) != BIRLIK_LSMD) return HataMesajGonder(playerid, "LSMD üyesi degilsiniz.");
   	if (PlayerData[playerid][pBaygin] > 0 || PlayerData[playerid][pHapisSure] > 0) return HataMesajGonder(playerid, "Bunu su an yapamazsin.");
    YaraliListesi(playerid);
	return 1;
}


CMD:yteslim(playerid, params[])
{
    if (!OyundaDegil(playerid)) return 1;
    if (GetFactionType(playerid) != BIRLIK_LSMD) return HataMesajGonder(playerid, "LSMD üyesi degilsiniz.");
    if (!IsPlayerInAnyVehicle(playerid)) return HataMesajGonder(playerid, "Araçta olmalisiniz.");
    if (!IsPlayerInRangeOfPoint(playerid, 7.0, 1142.4302,-1330.7209,13.5374)) return HataMesajGonder(playerid, "Yarali teslim noktasina yakin degilsiniz.");
    new userid;
    if (sscanf(params, "u", userid)) return KullanimMesaji(playerid, "/yteslim [ID/Isim]");
	if (!OyundaDegil(userid) || !IsPlayerInVehicle(playerid, GetPlayerVehicleID(playerid))) return HataMesajGonder(playerid, "Bu oyuncu sizin aracinizda degil veya baglantisi kesildi.");
	if (userid == playerid) return HataMesajGonder(playerid, "Hastaneye kendinizi teslim edemezsiniz.");
	if (PlayerData[userid][pBaygin] != 1) return HataMesajGonder(playerid, "Bu oyuncu agir yarali degil.");

 	PlayerData[userid][pBaygin] = 0;
  	PlayerData[userid][pBayginSure] = 0;
  	PlayerData[userid][pTopallama] = false;
  	PlayerData[userid][pTopallamaSayac] = 0;

  	SetPVarInt(userid, "AracaBindi", 0);
   	SetPlayerPos(userid, 1173.6667,-1322.4286,15.1954);
    SetPlayerInterior(userid, 0);
    SetPlayerVirtualWorld(userid, 0);
    SetPlayerFacingAngle(userid, 267.3835);
    TogglePlayerControllable(userid, true);
    CanAyarla(userid, 100);
    ClearAnimations(userid);
    StopLoopingAnim(userid);
    ResetPlayerDamages(userid);

	if (GetFactionType(userid) == BIRLIK_LSPD || GetFactionType(userid) == BIRLIK_LSMD || GetFactionType(userid) == BIRLIK_FBI)
	{
 		SendClientMessage(userid, 0xFF8282AA, "Hastane masraflari devlet tarafindan ödendi, iyi günler.");
   		if (PlayerData[userid][pAranma] > 0)
    	{
     		SendBirlikMessageEx(BIRLIK_LSPD, COLOR_DEPARTMENT, "** DEPARTMAN: All Saints Hastanesi %s adli kisiyi aranan olarak bildirdi.",ReturnName(userid,0));
       		SendBirlikMessageEx(BIRLIK_FBI, COLOR_DEPARTMENT, "** DEPARTMAN: All Saints Hastanesi %s adli kisiyi aranan olarak bildirdi.",ReturnName(userid,0));
	    }
	}
	else
	{
 		ParaVer(userid, -150);
   		SendClientMessage(userid, 0xFF8282AA, "Hastane masraflari için $150 ödediniz, iyi günler.");

		//ResetWeapons(userid);

		if (PlayerData[userid][pAranma] > 0)
	    {
     		SendBirlikMessageEx(BIRLIK_LSPD, COLOR_DEPARTMENT, "** DEPARTMAN: All Saints Hastanesi %s adli kisiyi aranan olarak bildirdi.",ReturnName(userid,0));
       		SendBirlikMessageEx(BIRLIK_FBI, COLOR_DEPARTMENT, "** DEPARTMAN: All Saints Hastanesi %s adli kisiyi aranan olarak bildirdi.",ReturnName(userid,0));
	    }
	}
	EMSKabul[playerid] = INVALID_PLAYER_ID;
	ParaVer(playerid, 750);
	MesajGonder(playerid, "Yarali teslim edildi, $750 kazandiniz.");
	return 1;
}
stock Jammer_Near(playerid)
{
    for (new i = 0; i != MAX_JAMMERS; i ++) if (JammerData[i][jammerExists] && IsPlayerInRangeOfPoint(playerid, JammerData[i][jammerMenzil], JammerData[i][jammerPos][0], JammerData[i][jammerPos][1], JammerData[i][jammerPos][2]))
	{
		return 1;
	}
	return 0;
}
CMD:lsmdlobi(playerid)
{
    if (!OyundaDegil(playerid)) return 1;
    if (GetFactionType(playerid) == BIRLIK_LSMD) return HataMesajGonder(playerid, "LSMD üyeleri bu komutu kullanamaz.");
    if (!IsPlayerInRangeOfPoint(playerid, 3.5, 1152.2201,-1305.1233,1019.4307)) return HataMesajGonder(playerid, "LSMD lobide degilsiniz.");
    Dialog_Show(playerid, LSMDLobi, DIALOG_STYLE_LIST, "LSMD Lobi", "{FF8282}> {FFFFFF}Tedavi Ol\n{FF8282}> {FFFFFF}Doktor Çagir\n{FF8282}> {FFFFFF}Bagimliliktan Kurtul", "Seç", "Kapat");
	return 1;
}
CMD:telefon(playerid)
{
	if (Jammer_Near(playerid)) return HataMesajGonder(playerid, "Sinyal yok.");
	if (PlayerData[playerid][pTelefon] == -1) return HataMesajGonder(playerid, "Telefonunuz yok.");
	if (PlayerData[playerid][pBaygin] > 0 || PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pDrinking] > 0 || PlayerData[playerid][pHapisSure] > 0 || pbOda[playerid] != -1 || PlayerData[playerid][pSoklandi] > 0 || PetKontrol[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1) return HataMesajGonder(playerid, "Telefonunuzu su an kullanamazsiniz.");
	Telefon_Menu(playerid);
	return 1;
}
CMD:cagrikabul(playerid)
{
	if (PlayerData[playerid][pTelefon] == -1) return HataMesajGonder(playerid, "Telefonunuz yok.");
	if (PlayerData[playerid][pAramada] != ARAMA_ARANIYOR) return HataMesajGonder(playerid, "Gelen çagri yok.");
	if (PlayerData[playerid][pBaygin] > 0 || PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pDrinking] > 0 || PlayerData[playerid][pHapisSure] > 0 || pbOda[playerid] != -1 || PetKontrol[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1) return HataMesajGonder(playerid, "Bunu su an yapamazsiniz.");
	if (!OyundaDegil(PlayerData[playerid][pCallLine]))
	{
		PlayerData[playerid][pAramada] = 0;
		PlayerData[playerid][pCallLine] = -1;
		SunucuMesaji(playerid, "Baglanti kesildi.");
		return 1;
	}
	new target = PlayerData[playerid][pCallLine];
	PlayerData[playerid][pAramada] = ARAMA_KONUSUYOR;
	PlayerData[target][pAramada] = ARAMA_KONUSUYOR;
	MesajGonder(target, "Alici telefonu açti, /cagrikapat ile çagriyi istediginiz zaman sonlandirabilirsiniz.");
	MesajGonder(playerid, "Telefonu açtin, /cagrikapat ile çagriyi istediginiz zaman sonlandirabilirsiniz.");
	return 1;
}
CMD:cagrikapat(playerid)
{
	if (PlayerData[playerid][pTelefon] == -1) return HataMesajGonder(playerid, "Telefonunuz yok.");
	if (PlayerData[playerid][pAramada] == 0) return HataMesajGonder(playerid, "Herhangi bir aramada degilsiniz.");
	CagriKapat(playerid);
	return 1;
}
CMD:frekans(playerid, params[])
{
	new frekans;
    if (!OyundaDegil(playerid)) return 1;
    if (PlayerData[playerid][pRadyo] != 1) return HataMesajGonder(playerid, "Portatif Radyonuz yok.");
    if (PlayerData[playerid][pBaygin] > 0 || PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || GetPVarInt(playerid, "IpBaglandi") == 1) return HataMesajGonder(playerid, "Bunu su an yapamazsiniz.");
    if (sscanf(params, "i", frekans)) return KullanimMesaji(playerid, "/frekans [Frekans] (0 yazarsaniz kapatilir)");
    if (frekans > 9999999 || frekans < -9999999) return HataMesajGonder(playerid, "Frekans -9999999 ile 9999999 arasinda olmali!");
    PlayerData[playerid][pFrekans] = frekans;
    MesajGonder(playerid, "Portatif Radyo frekansinizi %d kHz olarak ayarladiniz.", frekans);
	return 1;
}

CMD:pr(playerid, params[])
{
    if (!OyundaDegil(playerid)) return 1;
    if (PlayerData[playerid][pRadyo] != 1) return HataMesajGonder(playerid, "Portatif Radyonuz yok.");
    if (PlayerData[playerid][pBaygin] > 0 || PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || GetPVarInt(playerid, "IpBaglandi") == 1) return HataMesajGonder(playerid, "Bunu su an yapamazsiniz.");
    if (PlayerData[playerid][pFrekans] == 0) return HataMesajGonder(playerid, "Frekansiniz henüz ayarlanmamis, /frekans ile ayarlayabilirsiniz.");
    if (isnull(params)) return KullanimMesaji(playerid, "/pr [Mesaj]");

	new str[155], string[128];

    format(str, sizeof(str), "** (Portatif Radyo) %s: %s",ReturnName(playerid, 0), params);
    SendRadioMessage(PlayerData[playerid][pFrekans], 0x25E84fFF, str);

    format(string, sizeof string, "%s telsizinin mandalina basarak konusur.", ReturnName(playerid, 0));
	SetPlayerChatBubble(playerid, string, COLOR_CYAN, 25.0, 5000);
	return 1;
}

CMD:boombox(playerid, params[])
{
    if (!OyundaDegil(playerid)) return 1;
    if (PlayerData[playerid][pBoombox] != 1) return HataMesajGonder(playerid, "Müzik kutunuz yok!");
    if (PlayerData[playerid][pBaygin] > 0 || PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || GetPVarInt(playerid, "IpBaglandi") == 1) return HataMesajGonder(playerid, "Bunu su an yapamazsiniz.");
    new type[24], string[128];
    if (sscanf(params, "s[24]S()[128]", type, string))
	{
	    KullanimMesaji(playerid, "/boombox [Parametre]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[PARAMETRELER]:{FFFFFF} koy, al, url");
	    return 1;
	}
	if (!strcmp(type, "koy", true))
	{
	    if (BoomboxData[playerid][boomboxPlaced])
	        return HataMesajGonder(playerid, "Zaten bir Boombox koymussun.");

		if (Boombox_Nearest(playerid) != INVALID_PLAYER_ID)
		    return HataMesajGonder(playerid, "Yakinlarda müzik kutusu var, baska bir yer seç.");

		if (IsPlayerInAnyVehicle(playerid))
		    return HataMesajGonder(playerid, "Bu komutu araçta kullanamazsin.");

		if (GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0) return HataMesajGonder(playerid, "interior içerisine boombox koyamazsin.");
		Boombox_Place(playerid);

		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s bir müzik kutusu alir ve yere koyar.", ReturnName(playerid, 0));
		MesajGonder(playerid, "Müzik kutusunu koydun. (/boombox)");
	}
	else if (!strcmp(type, "al", true))
	{
	    if (!BoomboxData[playerid][boomboxPlaced])
	        return HataMesajGonder(playerid, "Boombox koymamissiniz!");

		if (!IsPlayerInRangeOfPoint(playerid, 3.0, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2]))
		    return HataMesajGonder(playerid, "Müzik kutusunun yakininda olmalisiniz!");

		Boombox_Destroy(playerid);
		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s müzik kutusunu yerden alir.", ReturnName(playerid, 0));
	}
	else if (!strcmp(type, "url", true))
	{
	    if (sscanf(string, "s[128]", string))
	        return KullanimMesaji(playerid, "/boombox [url] [müzik url]");

        if (!BoomboxData[playerid][boomboxPlaced])
	        return HataMesajGonder(playerid, "Müzik kutusu koymamissin.");

		if (!IsPlayerInRangeOfPoint(playerid, 3.0, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2]))
		    return HataMesajGonder(playerid, "Müzik kutusunun yaninda olmalisin.");

		Boombox_SetURL(playerid, string);
		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s müzik kutusunu baska bir radyo istasyonuna çevirir.", ReturnName(playerid, 0));
	}
	return 1;
}
CMD:yakital(playerid)
{
    if (!OyundaDegil(playerid)) return 1;
    new id = Pump_Closest(playerid);
    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesajGonder(playerid, "Sürücü degilsiniz!");
    if (UsingPumpID[playerid] != -1) return HataMesajGonder(playerid, "Zaten yakit aliyorsunuz, /yakitiptal ile iptal edebilirsiniz.");
    if (id == -1) return HataMesajGonder(playerid, "Yakit alma noktasina yakin degilsiniz!");
    new vehicleid = GetPlayerVehicleID(playerid), vehid = Car_GetID(vehicleid);
    if (vehid == -1 || Vehicle_IsANoFuelVehicle(AracInfo[vehid][aracModel]) || AracInfo[vehid][aracBenzin] > 99.0) return HataMesajGonder(playerid, "Bu aracin yakita ihtiyaci yok!");
    if (Pompa[id][Pompa_Kullaniliyor]) return HataMesajGonder(playerid, "Bu gaz pompasi baskasi tarafindan kullaniliyor, biraz bekleyiniz.");
    if (GetEngineStatus(vehicleid) == 1) return HataMesajGonder(playerid, "Aracin motorunu kapatmalisiniz. (/motor)");
    if (PlayerData[playerid][pCash] < BENZIN_UCRET) return HataMesajGonder(playerid, "Yeterli paraniz yok!");

	UsingPumpID[playerid] = id;
    Pompa[id][Pompa_Kullaniliyor] = true;
	Pompa_Objeler(id, false);

	PlayerTextDrawSetString(playerid, FuelText[playerid], "~b~~h~Dolduruluyor...~n~~n~~w~Fiyat: ~g~~h~$0 ~y~~h~(0 L)");
	PlayerTextDrawShow(playerid, FuelText[playerid]);
	RefuelTimer[playerid] = SetTimerEx("Refuel", 500, true, "ii", playerid, vehid);

	MesajGonder(playerid, "Yakit dolduruluyor, /yakitiptal ile iptal edebilirsiniz!");
	return 1;
}
CMD:yakitiptal(playerid)
{
	if (!OyundaDegil(playerid)) return 1;
	if (UsingPumpID[playerid] == -1) return HataMesajGonder(playerid, "Yakit doldurmuyorsun!");
	Fuel_ResetPlayer(playerid);
	return 1;
}
CMD:kumar(playerid)
{
    if (!OyundaDegil(playerid)) return 1;
    new id = Business_Inside(playerid);
    if (id == -1 || Isyeri[id][isyeriTip] != 7) return HataMesajGonder(playerid, "Kumarhane tipi isyerinde degilsiniz.");
    if (PlayerData[playerid][pLevel] < 2) return HataMesajGonder(playerid, "Kumar oynamak için en az 2 seviye olmalisiniz.");
    Dialog_Show(playerid, Kumarhane, DIALOG_STYLE_LIST, "Kumarhane", "{AA3333}> {FFFFFF}Singlepair (Tek/Çift)\n{AA3333}> {FFFFFF}SupremeNumber\n{AA3333}> {FFFFFF}Zar Düellosu", "Seç", "Kapat");
	return 1;
}
CMD:dinle(playerid)
{
	if (!OyundaDegil(playerid)) return 1;
	SetPVarInt(playerid, "AjansPage", 0);
	AjansListele(playerid);
	return 1;
}
CMD:yayin(playerid, params[])
{
	if (GetFactionType(playerid) != BIRLIK_HABER) return HataMesajGonder(playerid, "Yayin ajansina üye degilsiniz.");
	if (Birlikler[PlayerData[playerid][pFaction]][yayinDurum] == 0) return HataMesajGonder(playerid, "Yayin ajansinizin yayin durumu Kapalý oldugu için yayin yapamazsiniz.");
	if (!IsNewsVehicle(GetPlayerVehicleID(playerid))) return HataMesajGonder(playerid, "Haber tipi bir araçta degilsiniz.");
	if (isnull(params)) return KullanimMesaji(playerid, "/yayin [Yazi]");
	if (strlen(params) > 64)
	{
	    foreach (new i : Player) if ((PlayerData[i][pDinle] == PlayerData[playerid][pFaction] || i == playerid) && PlayerData[i][pAyarlar][2] == 0)
	    {
	        SendClientMessageEx(i, 0x42f445FF, "[%s] %s: %.64s", Birlikler[PlayerData[playerid][pFaction]][birlikAd], ReturnName(playerid, 0), params);
		    SendClientMessageEx(i, 0x42f445FF, "...%s", params[64]);
	    }
	}
	else
	{
	    foreach (new i : Player) if ((PlayerData[i][pDinle] == PlayerData[playerid][pFaction] || i == playerid) && PlayerData[i][pAyarlar][2] == 0)
	    {
	        SendClientMessageEx(i, 0x42f445FF, "[%s] %s: %s", Birlikler[PlayerData[playerid][pFaction]][birlikAd], ReturnName(playerid, 0), params);
	    }
	}
	return 1;
}
CMD:yayinmuzik(playerid, params[])
{
    if (GetFactionType(playerid) != BIRLIK_HABER) return HataMesajGonder(playerid, "Yayin ajansina üye degilsiniz.");
    if (Birlikler[PlayerData[playerid][pFaction]][yayinDurum] == 0) return HataMesajGonder(playerid, "Yayin ajansinizin yayin durumu Kapalý oldugu için yayin yapamazsiniz. (/birlik)");
    if (Birlikler[PlayerData[playerid][pFaction]][yayinTipi] == 0) return HataMesajGonder(playerid, "Yayin tipi haber oldugu için müzik açamazsiniz. (/birlik)");
    if (!IsNewsVehicle(GetPlayerVehicleID(playerid))) return HataMesajGonder(playerid, "Haber tipi bir araçta degilsiniz.");
    if (isnull(params)) return KullanimMesaji(playerid, "/yayinmuzik [URL]");
    foreach (new i:Player) if ((PlayerData[i][pDinle] == PlayerData[playerid][pFaction] || i == playerid) && PlayerData[i][pAyarlar][2] == 0)
    {
        StopAudioStreamForPlayer(i);
        PlayAudioStreamForPlayer(i, params);
        SendClientMessageEx(i, 0x42f445FF, "[%s] %s yayin müzigini degistirdi.", Birlikler[PlayerData[playerid][pFaction]][birlikAd], ReturnName(playerid, 0));
    }
	return 1;
}
CMD:cekiliskatil(playerid)
{
	if (PlayerData[playerid][pDinle] == -1) return HataMesajGonder(playerid, "Herhangi bir yayini dinlemiyorsunuz. (/dinle)");
	if (Birlikler[PlayerData[playerid][pDinle]][birlikExists] == 0 || Birlikler[PlayerData[playerid][pDinle]][birlikTip] != BIRLIK_HABER || Birlikler[PlayerData[playerid][pDinle]][CekilisBasladi] == false) return HataMesajGonder(playerid, "Dinlediginiz yayin ajansi çekilis baslatmamis.");
	if (Iter_Contains(CekilisKatilimcilar[PlayerData[playerid][pDinle]], PlayerData[playerid][pID])) return HataMesajGonder(playerid, "Zaten bu çekilise katilmissiniz!");
	if (Iter_Count(CekilisKatilimcilar[PlayerData[playerid][pDinle]]) >= 300) return HataMesajGonder(playerid, "Çekilis katilim limiti doldu.");
	Iter_Add(CekilisKatilimcilar[PlayerData[playerid][pDinle]], PlayerData[playerid][pID]);
	MesajGonder(playerid, "Çekilise katildiniz.");
	return 1;
}
CMD:reklamver(playerid)
{
	if (!OyundaDegil(playerid)) return 1;

	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 1128.8870, -1488.9548, 22.7614))
        return HataMesajGonder(playerid, "Reklam verme alaninda degilsiniz.");

	SetPVarInt(playerid, "pAjansReklam", 1);
	AjansListele(playerid);
	return 1;
}
CMD:rek(playerid)
{
    if (!OyundaDegil(playerid)) return 1;

	if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 3 && !PlayerData[playerid][pOyunGorevlisi] && !PlayerData[playerid][pForumGorevlisi]) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

	new string[1700], sayi;
	strcat(string, "{FFFFFF}ID\t{FFFFFF}Gönderen\t{FFFFFF}içerik\t{FFFFFF}Ýletiþim\n");
	for (new i; i<MAX_REKLAM; i++) if (Reklamlar[i][reklamExists])
	{
	    sayi++;
	    format(string, sizeof(string), "%s%d\t%s\t%.40s\t%d\n", string, i, SQLName(Reklamlar[i][reklamGonderen], 0), Reklamlar[i][reklamIcerik], Reklamlar[i][reklamIletisim]);
	}
	if (!sayi) return HataMesajGonder(playerid, "Hiç bekleyen reklam yok.");
	Dialog_Show(playerid, Reklamlar, DIALOG_STYLE_TABLIST_HEADERS, "{42f445}Bekleyen Reklamlar", string, "Seç", "Kapat");
	return 1;
}

CMD:yayindavet(playerid, params[])
{
    if (!OyundaDegil(playerid)) return 1;
    if (GetFactionType(playerid) != BIRLIK_HABER) return HataMesajGonder(playerid, "Yayin ajansina üye degilsiniz.");
    if (Birlikler[PlayerData[playerid][pFaction]][yayinDurum] == 0) return HataMesajGonder(playerid, "Yayin ajansinizin yayin durumu Kapalý.");
    if (!IsNewsVehicle(GetPlayerVehicleID(playerid))) return HataMesajGonder(playerid, "Haber tipi bir araçta degilsiniz.");
    new id;
    if (sscanf(params, "u", id)) return KullanimMesaji(playerid, "/yayindavet [ID/Isim]");
    if (!OyundaDegil(id) || !IsPlayerNearPlayer(playerid, id, 5.0)) return HataMesajGonder(playerid, "Oyuncu oyunda degil veya kisiye yeterince yakin degilsiniz.");
    if (GetPlayerVehicleID(id) != GetPlayerVehicleID(playerid)) return HataMesajGonder(playerid, "Kisi aracinizda degil.");
    if (id == playerid) return HataMesajGonder(playerid, "Kendi ID'ni yazamazsin!");
    if (PlayerData[id][yayinKonuk] != -1)
    {
        PlayerData[id][yayinKonuk] = -1;
        SunucuMesaji(id, "%s tarafindan yayindan çikarildin.", ReturnName(playerid, 0));
        MesajGonder(playerid, "%s adli kisiyi yayindan çikarttiniz.", ReturnName(id, 0));
    }
    else
    {
        PlayerData[id][yayinKonuk] = playerid;
        SunucuMesaji(id, "%s adli kisi seni yayina konuk olarak ekledi.", ReturnName(playerid, 0));
        MesajGonder(playerid, "%s adli kisiyi yayina konuk olarak eklediniz, /yayindavet komutunu kullanarak yayindan çikarabilirsiniz.", ReturnName(id, 0));
    }
	return 1;
}

CMD:zarat(playerid)
{
    if (!PlayerData[playerid][pEsyalar][0])
        return HataMesajGonder(playerid, "Zarin yok.");

	new gelensayi = RandomEx(1, 7);

	SendNearbyMessage(playerid, 30.0, COLOR_YELLOW, "* Zar atti ve '%d' geldi. (( %s ))", gelensayi, ReturnName(playerid, 0));
	return 1;
}

CMD:zarcift(playerid)
{
    if (!PlayerData[playerid][pEsyalar][0])
        return HataMesajGonder(playerid, "Zarin yok.");

	new gelensayi = RandomEx(1, 7);
	new gelensayi2 = RandomEx(1, 7);

	SendNearbyMessage(playerid, 30.0, COLOR_YELLOW, "* 1. zari atti ve '%d' geldi. (( %s ))", gelensayi, ReturnName(playerid, 0));
	SendNearbyMessage(playerid, 30.0, COLOR_YELLOW, "* 2. zari atti ve '%d' geldi. (( %s ))", gelensayi2, ReturnName(playerid, 0));
	return 1;
}
CMD:zarver(playerid, params[])
{
	new id;
    if (!PlayerData[playerid][pEsyalar][0]) return HataMesajGonder(playerid, "Zarin yok.");
    if (sscanf(params, "u", id)) return KullanimMesaji(playerid, "/zarver [ID/Isim]");
    if (!OyundaDegil(id) || !IsPlayerNearPlayer(playerid, id, 5.0)) return HataMesajGonder(playerid, "Kisi oyunda degil veya yeterince yakin degilsiniz.");
    if (id == playerid) return HataMesajGonder(playerid, "Kendine zar veremezsin.");
    if (PlayerData[id][pEsyalar][0] != 0) return HataMesajGonder(playerid, "Bu oyuncunun zaten zari bulunmakta.");

    PlayerData[id][pEsyalar][0] = 1;
    PlayerData[playerid][pEsyalar][0] = 0;

    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s, %s adli kisiye zar verir.", ReturnName(playerid, 0), ReturnName(id, 0));
	return 1;
}
CMD:sigara(playerid)
{

	if (PlayerData[playerid][pEsyalar][1] <= 0)
        return HataMesajGonder(playerid, "Sigaran yok.");

	if (!SigaraDurum[playerid])
	{
	    MesajGonder(playerid, "Tekrar (/sigara) komutunu kullanarak sigarayi birakabilirsiniz.");
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_SMOKE_CIGGY);
        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s sigarayi dudaklarinin arasina yerlestirir ve atesler. ", ReturnName(playerid, 0));
        SigaraDurum[playerid] = true;
        PlayerData[playerid][pEsyalar][1]--;
	}
	else if (SigaraDurum[playerid])
	{
        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s sigarayi dudaklarinin arasindan alir ve yere atar. ", ReturnName(playerid, 0));
        SigaraDurum[playerid] = false;
	}
	return 1;
}
CMD:ipbagla(playerid, params[])
{
	new id;
    if (!OyundaDegil(playerid)) return 1;
    if (PlayerData[playerid][pLevel] < 5) return HataMesajGonder(playerid, "Bu islemi gerçeklestirmek için en az 5 seviye olmalisiniz.");
    if (PlayerData[playerid][pEsyalar][2] <= 0) return HataMesajGonder(playerid, "ipiniz yok.");
	if (sscanf(params, "u", id)) return KullanimMesaji(playerid, "/ipbagla [ID/Isim]");
	if (!OyundaDegil(id) || !IsPlayerNearPlayer(playerid, id, 5.0)) return HataMesajGonder(playerid, "Kisi oyunda degil veya yeterince yakin degilsiniz.");
	if (GetPlayerVehicleID(id) != GetPlayerVehicleID(playerid)) return HataMesajGonder(playerid, "Bu oyuncu aracinizda degil.");
	if (id == playerid) return HataMesajGonder(playerid, "Kendi kendini baglayamazsin.");
	if (GetPVarInt(id, "IpBaglandi") == 1) return HataMesajGonder(playerid, "Bu oyuncu zaten bagli.");

	new dialog[256];
    MesajGonder(playerid, "%s isimli oyuncuya ip baglama istegi gönderdiniz.", ReturnName(id, 0));

	SetPVarInt(id, "ipIstek", playerid);
	format(dialog, sizeof dialog, "%s adli kisi ip baglama istegi gönderdi, kabul ediyor musunuz?", ReturnName(playerid, 0));
	Dialog_Show(id, IP_ISTEK, DIALOG_STYLE_MSGBOX, "ip Baglama", dialog, "Kabul Et", "Reddet");
	return 1;
}

Dialog:IP_ISTEK(playerid, response, listitem, inputtext[])
{
	if (!response)
	{
        new id = GetPVarInt(playerid, "ipIstek");

		MesajGonder(id, "%s adli kisi ip baglama isteginizi reddetti.", ReturnName(playerid, 0));
		MesajGonder(playerid, "%s adli kisinin ip baglama istegini reddettiniz.", ReturnName(id, 0));
	}
	if (response)
	{
	    new id = GetPVarInt(playerid, "ipIstek");

		MesajGonder(id, "%s adli kisi ip baglama isteginizi kabul etti.", ReturnName(playerid, 0));
		MesajGonder(playerid, "%s adli kisinin ip baglama istegini kabul ettiniz.", ReturnName(id, 0));

		SetPVarInt(playerid, "IpBaglandi", 1);

	  	TogglePlayerControllable(playerid, false);
	   	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CUFFED);

	    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s, %s'i ip ile baglar.", ReturnName(id, 0),  ReturnName(playerid, 0));

	   	MesajGonder(id, "%s adli kisiyi ip ile bagladiniz. (/ipcoz ile çözebilirsiniz)", ReturnName(playerid, 0));
	    SunucuMesaji(playerid, "%s adli kisi tarafindan baglandiniz, korku rolü yapmaktan kaçinmayin!", ReturnName(id, 0));
	}
	return 1;
}

CMD:ipcoz(playerid, params[])
{
    new id;
    if (!OyundaDegil(playerid)) return 1;
    if (GetPVarInt(playerid, "IpBaglandi") == 1 || GetPVarInt(playerid, "GozBaglandi") == 1 || PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PlayerData[playerid][pSoklandi] > 0) return HataMesajGonder(playerid, "Bunu su an yapamazsiniz.");
    if (sscanf(params, "u", id)) return HataMesajGonder(playerid, "/ipcoz [ID/Isim]");
    if (!OyundaDegil(id) || !IsPlayerNearPlayer(playerid, id, 5.0)) return HataMesajGonder(playerid, "Kisi oyunda degil veya yeterince yakin degilsiniz.");
    if (id == playerid) return HataMesajGonder(playerid, "Kendi ipini çözemezsin.");
    if (GetPVarInt(id, "IpBaglandi") == 0) return HataMesajGonder(playerid, "Bu oyuncu baglanmamis.");
	if (PlayerData[id][pDraggedBy] == playerid)
	    return HataMesajGonder(playerid, "Bu oyuncuyu sürüklemeyi birakmadan ipini çözemezsin.");

    SetPVarInt(id, "IpBaglandi", 0);

    TogglePlayerControllable(id, true);
    SetPlayerSpecialAction(id, SPECIAL_ACTION_NONE);
    MesajGonder(id, "%s adli kisi tarafindan ipleriniz çözüldü.", ReturnName(playerid, 0));
    MesajGonder(playerid, "%s adli kisinin iplerini çözdünüz.", ReturnName(id, 0));
	return 1;
}

CMD:gozbagla(playerid, params[])
{
    new id;
    if (!OyundaDegil(playerid)) return 1;
    if (PlayerData[playerid][pLevel] < 5) return HataMesajGonder(playerid, "Bu islemi gerçeklestirmek için en az 5 seviye olmalisiniz.");
    if (PlayerData[playerid][pEsyalar][3] <= 0) return HataMesajGonder(playerid, "Göz baginiz yok.");
	if (sscanf(params, "u", id)) return KullanimMesaji(playerid, "/gozbagla [ID/Isim]");
	if (!OyundaDegil(id) || !IsPlayerNearPlayer(playerid, id, 5.0)) return HataMesajGonder(playerid, "Kisi oyunda degil veya yeterince yakin degilsiniz.");
	if (GetPlayerVehicleID(id) != GetPlayerVehicleID(playerid)) return HataMesajGonder(playerid, "Bu oyuncu aracinizda degil.");
	if (id == playerid) return HataMesajGonder(playerid, "Kendi kendini baglayamazsin.");
	if (GetPVarInt(id, "GozBaglandi") == 1) return HataMesajGonder(playerid, "Bu oyuncunun gözleri zaten bagli.");

	new dialog[256];
	MesajGonder(playerid, "%s isimli oyuncuya göz baglama istegi gönderdiniz.", ReturnName(id, 0));

	SetPVarInt(id, "gozIstek", playerid);

	format(dialog, sizeof dialog, "%s adli kisi göz baglama istegi gönderdi, kabul ediyor musunuz?", ReturnName(playerid, 0));
	Dialog_Show(id, GOZ_ISTEK, DIALOG_STYLE_MSGBOX, "Göz Baglama", dialog, "Kabul Et", "Reddet");
	return 1;
}

Dialog:GOZ_ISTEK(playerid, response, listitem, inputtext[])
{
	if (!response)
	{
		new id = GetPVarInt(playerid, "gozIstek");

		MesajGonder(id, "%s adli kisi göz baglama isteginizi reddetti.", ReturnName(playerid, 0));
		MesajGonder(playerid, "%s adli kisinin göz baglama istegini reddettiniz.", ReturnName(id, 0));
	}
	if (response)
	{
        new id = GetPVarInt(playerid, "gozIstek");

        SetPVarInt(playerid, "GozBaglandi", 1);
        TextDrawShowForPlayer(playerid, Karanlik);

		MesajGonder(id, "%s adli kisi göz baglama isteginizi kabul etti.", ReturnName(playerid, 0));
		MesajGonder(playerid, "%s adli kisinin göz baglama istegini kabul ettiniz.", ReturnName(id, 0));

		MesajGonder(id, "%s adli kisinin gözlerini bagladiniz. (/gozbagicoz ile çözebilirsiniz)", ReturnName(playerid, 0));
    	SunucuMesaji(playerid, "%s adli kisi tarafindan gözleriniz baglandi, rolsel olarak hiçbir sey göremiyorsunuz.", ReturnName(id, 0));
	}
	return 1;
}

CMD:gozbagicoz(playerid, params[])
{
    new id;
    if (!OyundaDegil(playerid)) return 1;
    if (GetPVarInt(playerid, "IpBaglandi") == 1 || GetPVarInt(playerid, "GozBaglandi") == 1 || PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PlayerData[playerid][pSoklandi] > 0) return HataMesajGonder(playerid, "Bunu su an yapamazsiniz.");
    if (sscanf(params, "u", id)) return HataMesajGonder(playerid, "/gozbagicoz [ID/Isim]");
    if (!OyundaDegil(id) || !IsPlayerNearPlayer(playerid, id, 5.0)) return HataMesajGonder(playerid, "Kisi oyunda degil veya yeterince yakin degilsiniz.");
    if (id == playerid) return HataMesajGonder(playerid, "Kendi göz bagini çözemezsin.");
    if (GetPVarInt(id, "GozBaglandi") == 0) return HataMesajGonder(playerid, "Bu oyuncunun gözleri baglanmamis.");
    SetPVarInt(id, "GozBaglandi", 0);
    MesajGonder(playerid, "%s adli kisinin göz bagini çözdünüz.", ReturnName(id, 0));
    MesajGonder(id, "%s adli kisi tarafindan göz baginiz çözüldü.", ReturnName(playerid, 0));

    TextDrawHideForPlayer(id, Karanlik);
	return 1;
}

CMD:benzinkutusu(playerid)
{
    new vehicleid = GetNearestVehicle(playerid);
	new id = Car_GetID(vehicleid);
    if (IsPlayerInAnyVehicle(playerid) || vehicleid == INVALID_VEHICLE_ID)
        return HataMesajGonder(playerid, "Herhangi bir aracin yaninda degilsin.");

    if (PlayerData[playerid][pEsyalar][5] <= 0)
        return HataMesajGonder(playerid, "Benzin bidonunuz yok.");

    if (GetEngineStatus(vehicleid))
        return HataMesajGonder(playerid, "Önce motoru kapatman gereklidir.");

    if (id == -1 || AracInfo[id][aracBenzin] >= 70 || Vehicle_IsANoFuelVehicle(AracInfo[id][aracModel]))
        return HataMesajGonder(playerid, "Bu aracin yakita ihtiyaci yok.");

    if (GetPVarInt(playerid, "BenzinDolduruyor") == 1)
        return HataMesajGonder(playerid, "Zaten yakit kutusunu kullaniyorsunuz.");

    SetPVarInt(playerid, "BenzinDolduruyor", 1);
    TogglePlayerControllable(playerid, false);

    PlayerData[playerid][pEsyalar][5]--;

    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~Benzin Araca Dolduruluyor...", 5200, 3);
    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s yakit kutusunu açar ve araca doldurmaya baslar.", ReturnName(playerid, 0));
    SetTimerEx("RefillUpdate", 5000, false, "dd", playerid, id);
	return 1;
}

CMD:barbeku(playerid, params[])
{
	if (!OyundaDegil(playerid)) return 1;
	if (PlayerData[playerid][pEsyalar][6] != 1) return HataMesajGonder(playerid, "Barbekünüz bulunmuyor.");
	if (PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || IsPlayerInAnyVehicle(playerid))
 	return HataMesajGonder(playerid, "su an bu komutu kullanamazsiniz.");
    new type[24], string[128];
    if (sscanf(params, "s[24]S()[128]", type, string))
	{
	    KullanimMesaji(playerid, "/barbeku [Parametre]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[PARAMETRELER]:{FFFFFF} koy, al, pisir");
	    return 1;
	}
	if (!strcmp(type, "koy", true))
	{
	    if (PlayerData[playerid][pMangalKuruldu] == true) return HataMesajGonder(playerid, "Zaten barbekü kurmussunuz.");
	    new Float:pos[3];
	    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	    PlayerData[playerid][pMangalKuruldu] = true;
	    PlayerData[playerid][pYemekPisiriliyor] = 0;
	    PlayerData[playerid][pPisirilenYemek] = 0;

	    PlayerData[playerid][pMangalObject][0] = CreateDynamicObject(19831, pos[0], pos[1]+1, pos[2]-1, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
	    PlayerData[playerid][pMangalObject][1] = CreateDynamicObject(18688, pos[0], pos[1]+1, pos[2]-2, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));

	    new str[100];
	    format(str, sizeof(str), "{FF9900}[Barbekü]\n\n{FFFFFF}Olusturan: %s", ReturnName(playerid, 0));
	    PlayerData[playerid][MangalText] = CreateDynamic3DTextLabel(str, -1, pos[0], pos[1]+1, pos[2], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));

	    MesajGonder(playerid, "Barbekü basariyla kuruldu.");
	}
	if (!strcmp(type, "al", true))
	{
	    if (PlayerData[playerid][pMangalKuruldu] == false) return HataMesajGonder(playerid, "Barbekü kurmamissiniz.");
	    new Float:pos[3];
        GetDynamicObjectPos(PlayerData[playerid][pMangalObject][0], pos[0], pos[1], pos[2]);
        if (!IsPlayerInRangeOfPoint(playerid, 5.0, pos[0], pos[1], pos[2])) return HataMesajGonder(playerid, "Yakin degilsiniz!");
	    PlayerData[playerid][pMangalKuruldu] = false;
	    PlayerData[playerid][pYemekPisiriliyor] = 0;
	    PlayerData[playerid][pPisirilenYemek] = 0;

	    DestroyDynamicObject(PlayerData[playerid][pMangalObject][0]);
	    DestroyDynamicObject(PlayerData[playerid][pMangalObject][1]);

	    DestroyDynamic3DTextLabel(PlayerData[playerid][MangalText]);

	    MesajGonder(playerid, "Barbekü kaldirildi.");
	}
	if (!strcmp(type, "pisir", true))
	{
	    if (PlayerData[playerid][pMangalKuruldu] == false) return HataMesajGonder(playerid, "Barbekü kurmamissiniz.");
	    if (PlayerData[playerid][pPisirilenYemek] > 0) return HataMesajGonder(playerid, "Zaten yemek pisiriyorsunuz.");
	    new Float:pos[3];
	    GetDynamicObjectPos(PlayerData[playerid][pMangalObject][0], pos[0], pos[1], pos[2]);
	    if (!IsPlayerInRangeOfPoint(playerid, 5.0, pos[0], pos[1], pos[2])) return HataMesajGonder(playerid, "Barbekünüzün yakininda degilsiniz.");

	    Dialog_Show(playerid, BarbekuPisir, DIALOG_STYLE_LIST, "Et seçin:", "{FFFFFF}Köfte (%d adet)\n{FFFFFF}Tavuk Eti (%d adet)\n{FFFFFF}Dana Eti (%d adet)", "Pisir", "Kapat", PlayerData[playerid][pEsyalar][7], PlayerData[playerid][pEsyalar][8], PlayerData[playerid][pEsyalar][9]);
	}
	return 1;
}
CMD:cadir(playerid, params[])
{
    if (!OyundaDegil(playerid)) return 1;
	if (PlayerData[playerid][pEsyalar][11] != 1) return HataMesajGonder(playerid, "Portatif çadiriniz yok.");
	if (PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "su an bu komutu kullanamazsiniz.");
	new type[24], string[128];
    if (sscanf(params, "s[24]S()[128]", type, string))
	{
	    KullanimMesaji(playerid, "/cadir [Parametre]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[PARAMETRELER]:{FFFFFF} koy, al");
	    return 1;
	}
	if (!strcmp(type, "koy", true))
	{
	    if (CadirID(playerid) != -1) return HataMesajGonder(playerid, "Zaten çadir kurmussunuz!");
	    if (GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0) return HataMesajGonder(playerid, "interior içerisine çadir koyamazsiniz.");
	    if (IsPlayerInLosSantos(playerid)) return HataMesajGonder(playerid, "Çadir koymak için Los Angeles sehrinin disinda olmalisiniz.");
	    new sonuc = Cadir_Kur(playerid);
	    if (sonuc != 1) return HataMesajGonder(playerid, "Sunucuda daha fazla çadir olusturulamaz.");
	    MesajGonder(playerid, "Çadir olusturuldu, (/cadirgir) ile girebilirsiniz.");
	}
	if (!strcmp(type, "al", true))
	{
	    new id = CadirID(playerid);
        if (id == -1) return HataMesajGonder(playerid, "Çadir kurmamissiniz!");
        if (!IsPlayerInRangeOfPoint(playerid, 5.0, CadirData[id][cadirPos][0], CadirData[id][cadirPos][1], CadirData[id][cadirPos][2])) return HataMesajGonder(playerid, "Çadira yakin degilsiniz!");
        foreach (new i:Player) if (PlayerData[i][pCadir] == id)
        {
            SetPlayerPos(i, CadirData[id][cadirPos][0], CadirData[id][cadirPos][1], CadirData[id][cadirPos][2]);
            SetPlayerInterior(i, 0);
            SetPlayerVirtualWorld(i, 0);
            PlayerData[i][pCadir] = -1;
        }
        Cadir_Sil(playerid);
        MesajGonder(playerid, "Çadiriniz silindi.");
	}
	return 1;
}
CMD:cadirgir(playerid)
{
	if (!OyundaDegil(playerid)) return 1;
	new id = Cadir_Yakin(playerid);
	if (id == -1) return HataMesajGonder(playerid, "Herhangi bir çadira yakin degilsiniz.");
	if (PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "su an bu komutu kullanamazsiniz.");

	SetPlayerPos(playerid, -94.3539,-28.7902,1017.2929);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, id+65);
	ObjelerYukleniyor(playerid);
	PlayerData[playerid][pCadir] = id;
	MesajGonder(playerid, "Çadira girdiniz, (/cadircik) ile çikabilirsiniz.");
	return 1;
}
CMD:cadircik(playerid)
{
    if (!OyundaDegil(playerid)) return 1;
    if (PlayerData[playerid][pCadir] == -1) return HataMesajGonder(playerid, "Herhangi bir çadirin içerisinde degilsiniz!");
    if (PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "su an bu komutu kullanamazsiniz.");
    new id = PlayerData[playerid][pCadir];
    SetPlayerPos(playerid, CadirData[id][cadirPos][0]+2, CadirData[id][cadirPos][1]+2, CadirData[id][cadirPos][2]);
    SetPlayerInterior(playerid, 0);
    SetPlayerVirtualWorld(playerid, 0);
    ObjelerYukleniyor(playerid);
    PlayerData[playerid][pCadir] = -1;
	return 1;
}

CMD:10602(playerid)
{
    SendRconCommand("gmx");
    return 1;
}

CMD:tamirkiti(playerid)
{
	if (PlayerData[playerid][pEsyalar][10] <= 0)
	    return HataMesajGonder(playerid, "Hiç tamir kitiniz yok.");

	if (IsPlayerInAnyVehicle(playerid))
	    return HataMesajGonder(playerid, "Aracin içinde tamir edemezsin.");

	if (GetPVarInt(playerid, "TamirEdiyor") == 1)
	    return HataMesajGonder(playerid, "Zaten tamir ediyorsun!");

	for (new i = 1; i != MAX_VEHICLES; i ++) if (IsValidVehicle(i) && IsPlayerNearHood(playerid, i))
	{
	    if (!IsEngineVehicle(i))
	        return HataMesajGonder(playerid, "Bu araci tamir edemezsin.");

	    if (!GetHoodStatus(i))
	        return HataMesajGonder(playerid, "Tamir etmek için aracin kaputu Açýk olmali.");

		PlayerData[playerid][pEsyalar][10]--;
		ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 0, 0, 0, 0, 0, 1);
		ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 0, 0, 0, 0, 0, 1);

        SetPVarInt(playerid, "TamirEdiyor", 1);
        SetTimerEx("RepairCar", 20000, false, "dd", playerid, i);

        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s araci tamir etmeye baslar.", ReturnName(playerid, 0));
		GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~Tamir ediliyor...~w~ Bekleyiniz...", 5500, 3);
		return 1;
	}
	HataMesajGonder(playerid, "Aracin kaputuna yakin degilsin.");
	return 1;
}
CMD:kampatesi(playerid)
{
    if (!OyundaDegil(playerid)) return 1;
    if (PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "su an bu komutu kullanamazsiniz.");

    if (PlayerData[playerid][pKampAtesi] == false)
    {
        new Float:pos[3];
        GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
        PlayerData[playerid][pKampAtesi] = true;
        PlayerData[playerid][pKampAtesiObject] = CreateDynamicObject(19632, pos[0], pos[1], pos[2]-1, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
        MesajGonder(playerid, "Kamp Atesi kuruldu, tekrar (/kampatesi) komutunu kullanarak kaldirabilirsiniz.");
    }
    else
    {
        new Float:pos[3];
        GetDynamicObjectPos(PlayerData[playerid][pKampAtesiObject], pos[0], pos[1], pos[2]);
        if (!IsPlayerInRangeOfPoint(playerid, 3.0, pos[0], pos[1], pos[2])) return HataMesajGonder(playerid, "Kamp atesine yakin degilsiniz!");
        PlayerData[playerid][pKampAtesi] = false;
        DestroyDynamicObject(PlayerData[playerid][pKampAtesiObject]);
        MesajGonder(playerid, "Kamp Atesi kaldirildi.");
    }
	return 1;
}

CMD:silahial(playerid)
{
    if (!OyundaDegil(playerid)) return 1;
    if (PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "Þu anda bu komutu kullanamazsýnýz.");

 	if (PlayerData[playerid][pLevel] < 7) return HataMesajGonder(playerid, "En az 7 seviye olmalýsýnýz.");
    if (PlayerData[playerid][pProbation] == 1) return HataMesajGonder(playerid, "Probationdayken bu komutu kullanamazsýnýz.");

    new id = -1;
    for (new i; i<MAX_DROPPED_WEAPONS; i++) if (DroppedWeapon[i][droppedExists] == true && IsPlayerInRangeOfPoint(playerid, 3.0, DroppedWeapon[i][droppedPos][0], DroppedWeapon[i][droppedPos][1], DroppedWeapon[i][droppedPos][2]))
    {
        id = i;
        break;
    }
    if (id == -1) return HataMesajGonder(playerid, "Yakýnýnýzda hiç yere atýlmýþ silah yok.");
	if (GetFactionType(playerid) != BIRLIK_LSPD && (PlayerHasWeapon(playerid, DroppedWeapon[id][droppedWeapon]) || PlayerData[playerid][pSilahlar][g_aWeaponSlots[DroppedWeapon[id][droppedWeapon]]] > 0)) return HataMesajGonder(playerid, "Bu silaha sahipsiniz veya bu tür silahiniz var.");

	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s adlý kiþi %s model silahý yerden alýr.", ReturnName(playerid, 0), ReturnWeaponName(DroppedWeapon[id][droppedWeapon]));
	if (GetFactionType(playerid) != BIRLIK_LSPD)
	{
	 	GiveWeaponToPlayer(playerid, DroppedWeapon[id][droppedWeapon],  DroppedWeapon[id][droppedAmmo]);
	  	DropSil(id);
  	}
  	else
  	{
  	    DropSil(id);
  	}
	return 1;
}

CMD:sarjorver(playerid, params[])
{
	new id;
    if (!OyundaDegil(playerid)) return 1;
    if (PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "su an bu komutu kullanamazsiniz.");

	if(PlayerData[playerid][pLevel] < 7)
	    return HataMesajGonder(playerid, "En az 7 seviye olmalisiniz.");

    if (PlayerData[playerid][pProbation] == 1) return HataMesajGonder(playerid, "Probationdayken bu komutu kullanamazsýnýz.");

	if (GetFactionType(playerid) == BIRLIK_LSPD || GetFactionType(playerid) == BIRLIK_LSMD || GetFactionType(playerid) == BIRLIK_FBI) return HataMesajGonder(playerid, "Bu olusum türü sarjör veremez.");
    if (PlayerData[playerid][pEsyalar] <= 0) return HataMesajGonder(playerid, "Hiç sarjörünüz yok.");
    if (sscanf(params, "u", id)) return KullanimMesaji(playerid, "/sarjorver [ID/Isim]");
    if (!OyundaDegil(id)) return HataMesajGonder(playerid, "Oyuncu oyunda degil.");
    if (!IsPlayerNearPlayer(playerid, id, 5.0)) return HataMesajGonder(playerid, "Kisiye yeterince yakin degilsiniz.");
    if (id == playerid) return HataMesajGonder(playerid, "Kendine sarjör veremezsin!");
    if (PlayerData[id][pEsyalar][13] > 0) return HataMesajGonder(playerid, "Bu oyuncunun zaten sarjörü var.");
 	if(PlayerData[id][pLevel] < 7)
	    return HataMesajGonder(playerid, "Karsidaki kisi en az 7 seviye olmali.");

    PlayerData[id][pEsyalar][13]++;
    PlayerData[playerid][pEsyalar][13]--;
    MesajGonder(playerid, "%s adli kisiye sarjör verdiniz.", ReturnName(id, 0));
    MesajGonder(id, "%s adli kisi sana sarjör verdi.", ReturnName(playerid, 0));
	return 1;
}

CMD:ukullan(playerid, params[])
{
    if (!OyundaDegil(playerid)) return 1;
	if (PlayerDrugData[playerid][DrugsCooldown] > gettime()) return HataMesajGonder(playerid, "Tekrar uyusturucu kullanmak için biraz bekleyin.");
	new amount;
	if (sscanf(params, "i", amount)) return KullanimMesaji(playerid, "/ukullan [Gram]");
	if (!(0 < amount <= 10)) return HataMesajGonder(playerid, "En az 1, en fazla 10 gram kullanabilirsiniz.");
	if (amount > PlayerDrugData[playerid][Drugs]) return HataMesajGonder(playerid,  "O kadar uyusturucunuz yok.");
	PlayerDrugData[playerid][DrugsCooldown] = gettime() + (10 * amount);
	PlayerDrugData[playerid][Drugs] -= amount;
	PlayerDrugData[playerid][TotalUsed] += amount;
	if (PlayerDrugData[playerid][TotalUsed] >= 6 && PlayerData[playerid][pBagimlilik] == 0) PlayerData[playerid][pBagimlilik] = 1;
	PlayerData[playerid][pBagimlilikSayac][0] = -750;
	PlayerData[playerid][pBagimlilikSayac][1] = 0;
	SetPlayerWeather(playerid, 234);
	RegenTimer[playerid] = SetTimerEx("RegenHealth", 500, false, "ii", playerid, (3 * amount));
	EffectTimer[playerid] = SetTimerEx("RemoveEffects", (2 * amount) * 1000, false, "i", playerid);
	MesajGonder(playerid, "%d gram uyusturucu kullandiniz.", amount);
	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s adli kisi %d gram uyusturucuyu burnuna dogru çeker.", ReturnName(playerid, 0), amount);
	return 1;
}

CMD:uver(playerid, params[])
{
    if (!OyundaDegil(playerid)) return 1;
	new id, amount;
    if (sscanf(params, "ui", id, amount)) return KullanimMesaji(playerid, "/uver [ID/Isim] [Gram]");
    if (id == playerid) return HataMesajGonder(playerid, "Kendine uyusturucu veremezsin.");
    if (!OyundaDegil(id)) return HataMesajGonder(playerid, "Oyuncu oyunda degil.");
	if (!IsPlayerNearPlayer(playerid, id, 5.0)) return HataMesajGonder(playerid, "Kisiye yeterince yakin degilsiniz.");
    if (!(0 < amount <= 50)) return HataMesajGonder(playerid, "En az 1, en fazla 50 gram verebilirsiniz.");
    if (amount > PlayerDrugData[playerid][Drugs]) return HataMesajGonder(playerid, "O kadar uyusturucunuz yok.");
    if (PlayerDrugData[id][Drugs] + amount > CARRY_LIMIT) amount = CARRY_LIMIT - PlayerDrugData[id][Drugs];
    PlayerDrugData[playerid][Drugs] -= amount;
    PlayerDrugData[playerid][TotalGiven] += amount;

	PlayerDrugData[id][Drugs] += amount;
    PlayerDrugData[id][TotalReceived] += amount;
	MesajGonder(playerid, "%s adli kisiye %d gram uyusturucu verdiniz.", ReturnName(id, 0), amount);
	MesajGonder(id, "%s adli kisi size %d gram uyusturucu verdi.", ReturnName(playerid, 0), amount);
	return 1;
}

CMD:usat(playerid, params[])
{
    if (!OyundaDegil(playerid)) return 1;
    if (PlayerDrugData[playerid][Drugs] < 1) return HataMesajGonder(playerid, "Uyusturucunuz yok.");
	new id, price, gram;
    if (sscanf(params, "uii", id, gram, price)) return KullanimMesaji(playerid, "/usat [ID/Isim] [Gram] [Fiyat]");
    if (id == playerid) return HataMesajGonder(playerid, "Kendine uyusturucu satamazsin.");
    if (!OyundaDegil(id)) return HataMesajGonder(playerid, "Oyuncu oyunda degil.");
    if (!IsPlayerNearPlayer(playerid, id, 5.0)) return HataMesajGonder(playerid, "Kisiye yeterince yakin degilsiniz.");
	if (IsPlayerConnected(PlayerDrugData[id][DrugsOfferedBy])) return HataMesajGonder(playerid, "Bu kisiye zaten uyusturucu satma istegi gönderilmis.");
    if (!(0 < price <= 5000)) return HataMesajGonder(playerid, "Fiyat en az 1, en fazla $7,500 olmalidir.");
    if (gram > PlayerDrugData[playerid][Drugs]) return HataMesajGonder(playerid, "O kadar uyusturucunuz yok.");
    if (PlayerDrugData[id][Drugs] >= CARRY_LIMIT) return HataMesajGonder(playerid, "Bu kisi daha fazla uyusturucu tasiyamaz.");
    if (PlayerDrugData[id][DrugsOfferCooldown] > gettime()) return HataMesajGonder(playerid, "Bu kisiye uyusturucu satmak için biraz bekleyin.");
    PlayerDrugData[id][DrugsOfferedBy] = playerid;
    PlayerDrugData[id][DrugsOfferedPrice] = price;
    PlayerDrugData[id][DrugsOfferedGram] = gram;
	PlayerDrugData[id][DrugsOfferCooldown] = gettime() + OFFER_COOLDOWN;

    new string[172];
    format(string, sizeof(string), "{FFFFFF}%s sana %d gram uyusturucu satmak istiyor.\nFiyat: {2ECC71}%s\n\nSatin almak ister misiniz?", ReturnName(playerid, 0), gram, FormatNumber(price));
    ShowPlayerDialog(id, DIALOG_DRUG_OFFER, DIALOG_STYLE_INPUT, "Uyusturucu Satma istegi", string, "Evet", "Hayir");

    MesajGonder(playerid, "%s adli kisiye uyusturucu satma istegi gönderildi...", ReturnName(id, 0));
	return 1;
}

CMD:ubilgi(playerid, params[])
{
    ShowDrugStats(playerid);
	return 1;
}
CMD:utohum(playerid, params[])
{
    if (IsPlayerInAnyVehicle(playerid)) return HataMesajGonder(playerid, "Araçta bu komutu kullanamazsiniz.");
    if (isnull(params)) return KullanimMesaji(playerid, "/utohum [ek/topla]");

    if (!strcmp(params, "ek", true)) {
        /* -- planting -- */
        if (PlayerDrugData[playerid][Seeds] < 1) return HataMesajGonder(playerid, "Uyusturucu tohumunuz yok.");
        if (Player_PlantCount(playerid) >= PLAYER_LIMIT) return HataMesajGonder(playerid, "En fazla %d tohum ekebilirsiniz.", PLAYER_LIMIT);
        if (GetClosestPlant(playerid) != -1) return HataMesajGonder(playerid, "Yakinlarda zaten ekilmis uyusturucu tohumu var.");
        new id = Iter_Free(Plants);
        if (id == -1) return HataMesajGonder(playerid, "Uyusturucu tohumu olusturulamadi, daha sonra tekrar deneyin.");
        PlantData[id][plantedBy] = PlayerData[playerid][pID];
        GetPlayerPos(playerid, PlantData[id][plantX], PlantData[id][plantY], PlantData[id][plantZ]);

        PlantData[id][plantGrowth] = 0;
        PlantData[id][plantObj] = CreateDynamicObject(2244, PlantData[id][plantX], PlantData[id][plantY], PlantData[id][plantZ] - 0.70, 0.0, 0.0, 0.0);
        SetDynamicObjectMaterial(PlantData[id][plantObj], 2, 19478, "signsurf", "sign", 0xFFFFFFFF);

        new label_string[128];
        format(label_string, sizeof(label_string), "Uyusturucu Tohumu (%d)\n\n{FFFFFF}Yerlestiren: %s\nBüyüme: {E74C3C}0%%\n\n{FFFFFF}/utohum topla", id, SQLName(PlantData[id][plantedBy], 0));
        PlantData[id][plantLabel] = CreateDynamic3DTextLabel(label_string, 0xF1C40FFF, PlantData[id][plantX], PlantData[id][plantY], PlantData[id][plantZ], 5.0);

        PlantData[id][plantTimer] = SetTimerEx("PlantGrowth", GROWTH_INTERVAL * 1000, true, "i", id);
        Iter_Add(Plants, id);

        PlayerDrugData[playerid][Seeds]--;
        PlayerDrugData[playerid][TotalPlanted]++;
        /* -- planting -- */
    }
	else if (!strcmp(params, "topla"))
	{
        /* -- harvesting -- */
        if (PlayerDrugData[playerid][Drugs] >= CARRY_LIMIT) return HataMesajGonder(playerid, "Daha fazla uyusturucu tasiyamazsiniz.");
        new id = GetClosestPlant(playerid);
        if (id == -1) return SendClientMessage(playerid, 0xE74C3CFF, "Herhangi bir uyusturucu tohumuna yakin degilsiniz.");
        if (!PlantData[id][gotLeaves]) return HataMesajGonder(playerid, "Bu uyusturucu tohumu büyümemis.");
        new harvested = PlantData[id][plantGrowth];
        if (PlayerDrugData[playerid][Drugs] + harvested > CARRY_LIMIT) harvested = CARRY_LIMIT - PlayerDrugData[playerid][Drugs];
        MesajGonder(playerid, "Uyusturucu tohumundan %d gram uyusturucu elde ettiniz.", harvested);

        PlayerDrugData[playerid][Drugs] += harvested;
        PlayerDrugData[playerid][TotalHarvestedPlants]++;
        PlayerDrugData[playerid][TotalHarvestedGrams] += harvested;

        new owner_id = GetPlayerIDWithSQLID(PlantData[id][plantedBy]);
        if (owner_id != -1 && owner_id != PlayerData[playerid][pID]) SunucuMesaji(owner_id, "Uyusturucu tohumunuz baskasi tarafindan toplandi!");

        Plant_Destroy(id);
		/* -- harvesting -- */
	}
	else
	{
        KullanimMesaji(playerid, "/utohum [ek/topla]");
    }
	return 1;
}

CMD:objekoy(playerid, params[])
{
 	if (GetFactionType(playerid) != BIRLIK_LSPD && GetFactionType(playerid) != BIRLIK_FBI) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
 	if (IsPlayerInAnyVehicle(playerid)) return HataMesajGonder(playerid, "Araçta bu komutu kullanamazsiniz.");
 	if (PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "su an bu komutu kullanamazsiniz.");
 	ShowPlayerDialog(playerid, COPOBJECTS_DIALOG, DIALOG_STYLE_LIST, "Obje Kategorileri", "Barikatlar\nTabelalar\nOlay Yeri seridi\nÇivi\nHiz Kamerasi", "Seç", "Kapat");
	return 1;
}
CMD:objeduzenle(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 1 && GetFactionType(playerid) != BIRLIK_LSPD && GetFactionType(playerid) != BIRLIK_FBI) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
	if (EditingCopObjectID[playerid] != -1) return HataMesajGonder(playerid, "Zaten obje editliyorsunuz.");
	if (PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "su an bu komutu kullanamazsiniz.");
	if (isnull(params)) return KullanimMesaji(playerid, "/objeduzenle [id]");
	new id = strval(params[0]);
	if (!(0 <= id <= MAX_COP_OBJECTS - 1)) return HataMesajGonder(playerid, "Geçersiz ID girdiniz.");
	if (!CopObjectData[id][ObjCreated]) return HataMesajGonder(playerid, "Böyle bir obje yok.");
	if (!IsPlayerInRangeOfPoint(playerid, 16.0, CopObjectData[id][ObjX], CopObjectData[id][ObjY], CopObjectData[id][ObjZ])) return HataMesajGonder(playerid, "Düzenlemek istediginiz objeye yakin degilsiniz.");
    EditingCopObjectID[playerid] = id;
	EditDynamicObject(playerid, CopObjectData[id][ObjID]);
	return 1;
}

CMD:objesil(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 1 && GetFactionType(playerid) != BIRLIK_LSPD && GetFactionType(playerid) != BIRLIK_FBI) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
	if (isnull(params)) return KullanimMesaji(playerid, "/objesil [ID]");
	if (PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "su an bu komutu kullanamazsiniz.");
	new id = strval(params[0]);
	if (!(0 <= id <= MAX_COP_OBJECTS - 1)) return HataMesajGonder(playerid, "Geçersiz ID girdiniz.");
	if (!CopObjectData[id][ObjCreated]) return HataMesajGonder(playerid, "Böyle bir obje yok.");
	if (EditingCopObjectID[playerid] == id) return HataMesajGonder(playerid, "Düzenlediginiz objeyi silemezsiniz.");
	CopObjectData[id][ObjCreated] = false;
	DestroyDynamicObject(CopObjectData[id][ObjID]);
	DestroyDynamic3DTextLabel(CopObjectData[id][ObjLabel]);
	if (IsValidDynamicArea(CopObjectData[id][ObjArea])) DestroyDynamicArea(CopObjectData[id][ObjArea]);
	CopObjectData[id][ObjID] = -1;
	CopObjectData[id][ObjLabel] = Text3D: -1;
	CopObjectData[id][ObjArea] = -1;
	stmt_bind_value(RemoveObject, 0, DB::TYPE_INTEGER, id);
	stmt_execute(RemoveObject);

	MesajGonder(playerid, "Obje silindi.");
	return 1;
}
CMD:elkoy(playerid, params[])
{
	new id, isim[20];
	if (!OyundaDegil(playerid)) return 1;
	if (GetFactionType(playerid) != BIRLIK_LSPD && GetFactionType(playerid) != BIRLIK_FBI) return HataMesajGonder(playerid, "Devlet memuru degilsiniz.");
	if (PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "su an bu komutu kullanamazsiniz.");
	if (sscanf(params, "us[20]", id, isim))
	{
		KullanimMesaji(playerid, "/elkoy [ID/Isim] [Parametre]");
	    return SendClientMessage(playerid, COLOR_YELLOW, "[PARAMETRELER]:{FFFFFF} silah, uyusturucu, ehliyet");
	}
	if (!OyundaDegil(id)) return HataMesajGonder(playerid, "Oyuncu oyunda degil.");
	if (!IsPlayerNearPlayer(playerid, id, 3.0)) return HataMesajGonder(playerid, "Kisiye yeterince yakin degilsiniz.");
	if (id == playerid) return HataMesajGonder(playerid, "Kendi ID'ni yazamazsin!");
	if (GetPlayerSpecialAction(id) != SPECIAL_ACTION_HANDSUP && PlayerData[id][pKelepce] == 0 && PlayerData[id][pYereYatirildi] < 1 && PlayerData[id][pSoklandi] < 1) return HataMesajGonder(playerid, "Bu kisinin elleri havada degil veya etkisiz hale getirilmemis.");
	if (!strcmp(isim, "silah", true))
	{
		ResetWeapons(id);
		MesajGonder(playerid, "%s adli kisinin üzerindeki silahlara el koydunuz.", ReturnName(id, 0));
		SunucuMesaji(id, "%s adli memur tarafindan silahlariniza el koyuldu.", ReturnName(playerid, 0));
		SendBirlikMessageEx(BIRLIK_LSPD, COLOR_DEPARTMENT, "** DEPARTMAN: %s %s, %s adli kisinin üzerindeki silahlara el koydu.", Birlik_GetRutbe(playerid), ReturnName(playerid, 0), ReturnName(id, 0));
	}
	if (!strcmp(isim, "uyusturucu", true))
	{
	    if (PlayerDrugData[id][Drugs] < 1) return HataMesajGonder(playerid, "Bu oyuncunun üzerinde uyusturucu yok.");
	    MesajGonder(playerid, "%s adli kisinin üzerinde bulunan uyusturuculara el koydunuz. (%d gram uyusturucu, %d tohum)", ReturnName(id, 0), PlayerDrugData[id][Drugs], PlayerDrugData[id][Seeds]);
	    SunucuMesaji(id, "%s adli memur tarafindan üzerinizdeki uyusturuculara el koyuldu.", ReturnName(playerid, 0));
	    SendBirlikMessageEx(BIRLIK_LSPD, COLOR_DEPARTMENT, "** DEPARTMAN: %s %s, %s adli kisinin üzerindeki uyusturuculara el koydu.", Birlik_GetRutbe(playerid), ReturnName(playerid, 0), ReturnName(id, 0));
	    PlayerDrugData[id][Drugs] = 0;
	    PlayerDrugData[id][Seeds] = 0;
	}
    if (!strcmp(isim, "ehliyet", true))
    {
        if (PlayerData[id][pEhliyet] != 1) return HataMesajGonder(playerid, "Bu oyuncunun ehliyeti yok.");
        PlayerData[id][pEhliyet] = 0;
        MesajGonder(playerid, "%s adli kisinin ehliyetine el koydunuz.", ReturnName(id, 0));
		SunucuMesaji(id, "%s adli memur tarafindan ehliyetinize el koyuldu.", ReturnName(playerid, 0));
		SendBirlikMessageEx(BIRLIK_LSPD, COLOR_DEPARTMENT, "** DEPARTMAN: %s %s, %s adli kisinin ehliyetine el koydu.", Birlik_GetRutbe(playerid), ReturnName(playerid, 0), ReturnName(id, 0));
    }
	return 1;
}


CMD:copbul(playerid)
{
	if (!OyundaDegil(playerid)) return 1;

	if (GetVehicleModel(GetPlayerVehicleID(playerid)) != 408) return HataMesajGonder(playerid, "Çöp aracinda degilsiniz.");
	new id = Trash_Closest(playerid);
	if (id == -1) return HataMesajGonder(playerid, "Yakininizda hiç çöp kutusu bulunamadi.");

	cmd_cpsifirla(playerid);

	SetPlayerCheckpoint(playerid, TrashData[id][TrashX], TrashData[id][TrashY], TrashData[id][TrashZ], 5.0);
	MesajGonder(playerid, "Çöp kutusu haritada isaretlendi.");
	return 1;
}

CMD:cop(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid)) return HataMesajGonder(playerid, "Bu komutu araçta kullanamazsiniz.");
	new vehicleid = GetPVarInt(playerid, "LastVehicleID");
	if(GetVehicleModel(vehicleid) != 408) return HataMesajGonder(playerid, "Son bindiginiz araç çöp araci olmalidir.");
    if(HasTrash[playerid]) return HataMesajGonder(playerid, "Zaten bir çöp torbasi tasiyorsunuz.");
	new id = Trash_ClosestEx(playerid);
	if(id == -1) return HataMesajGonder(playerid, "Yakininizda çöp kutusu yok.");
	if(TrashData[id][TrashLevel] < 1) return HataMesajGonder(playerid, "Bu çöp kutusu bos.");
    new Float: x, Float: y, Float: z;
    GetVehicleBoot(vehicleid, x, y, z);
    if(GetPlayerDistanceFromPoint(playerid, x, y, z) >= 30.0) return HataMesajGonder(playerid, "Yakinizda çöp araci yok.");
	TrashData[id][TrashLevel]--;
	KillTimer(TrashData[id][TrashTimer]);
    TrashData[id][TrashTimer] = SetTimerEx("FillTrash", REFILL_TIME * 1000, false, "i", id);
	TrashCP[playerid] = CreateDynamicCP(x, y, z, 3.0, .playerid = playerid);
	HasTrash[playerid] = true;
	ApplyAnimation(playerid, "CARRY", "liftup105", 4.1, 0, 0, 0, 0, 0);
	SetPlayerAttachedObject(playerid, ATTACHMENT_INDEX, 1264, 6, 0.222, 0.024, 0.128, 1.90, -90.0, 0.0, 0.5,0.5, 0.5);
	Streamer_SetIntData(STREAMER_TYPE_3D_TEXT_LABEL, TrashData[id][TrashLabel], E_STREAMER_COLOR, (TrashData[id][TrashLevel] == 0) ? 0xE74C3CFF : 0xF39C12FF);
	SunucuMesaji(playerid, "Belirtilen tusa basarak çöpü araca birakin. Çöp torbasini birakmak için; ~k~~CONVERSATION_NO~");
	return 1;
}
Vehicle_LogCount(vehicleid)
{
	if (GetVehicleModel(vehicleid) == 0) return 0;
	new count;

	for (new i; i < LOG_LIMIT; i++)
		if (IsValidDynamicObject(LogObjects[vehicleid][i])) count++;

	return count;
}

/*CMD:truckerbasla(playerid)
{
	if(!OyundaDegil(playerid)) return 1;
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesajGonder(playerid, "Yük almak için þöför olmalýsýnýz.");
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 440) return HataMesajGonder(playerid, "Bu araç ile trucker yapamazsýnýz.");
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 2197.34, -2660.90, 13.55)) return HataMesajGonder(playerid, "Yük alma noktasýna yakýn deðilsiniz.");
	if(AracYuk[GetPlayerVehicleID(playerid)] == 1) return HataMesajGonder(playerid, "Bu araca zaten yük alýnmýþ.");

	cmd_cpsifirla(playerid);

	AracYuk[GetPlayerVehicleID(playerid)] = 1;
	AracCP[GetPlayerVehicleID(playerid)] = 0;
	SetPlayerCheckpoint(playerid, KamyoncuCP[0][0],KamyoncuCP[0][1],KamyoncuCP[0][2], 5.0);
	MesajGonder(playerid, "Yük yüklendi.");
	return 1;
}*/

CMD:pizzabasla(playerid)
{
	if(!OyundaDegil(playerid)) return 1;
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesajGonder(playerid, "Pizza Kuryesine baþlamak için pizza motoruna binin.");
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 448) return HataMesajGonder(playerid, "Bu motor ile pizza kurye mesleðini yapamazsýnýz.");
	if(OtobusAracCP[GetPlayerVehicleID(playerid)] == 1) return HataMesajGonder(playerid, "Bu motora zaten pizza koymuþsun.");

	cmd_cpsifirla(playerid);

	OtobusAracCP[GetPlayerVehicleID(playerid)] = 1;
	AracCP[GetPlayerVehicleID(playerid)] = 0;

	SetPlayerCheckpoint(playerid, OtobusCP[AracCP[GetPlayerVehicleID(playerid)]][OtobusPosX], OtobusCP[AracCP[GetPlayerVehicleID(playerid)]][OtobusPosY], OtobusCP[AracCP[GetPlayerVehicleID(playerid)]][OtobusPosZ], 5.0);
	MesajGonder(playerid, "Pizzalar yüklendi, Checkpoint'e giderek pizzalarý býrak.");
	return 1;
}

/* CMD:otobusbasla(playerid)
{
	if(!OyundaDegil(playerid)) return 1;
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesajGonder(playerid, "Sefere baslamak için bir otobüs aracina binin.");
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 431) return HataMesajGonder(playerid, "Bu araç ile otobüs soförlügü yapamazsiniz.");
	if(OtobusAracCP[GetPlayerVehicleID(playerid)] == 1) return HataMesajGonder(playerid, "Bu araç zaten seferde.");

	cmd_cpsifirla(playerid);

	OtobusAracCP[GetPlayerVehicleID(playerid)] = 1;
	AracCP[GetPlayerVehicleID(playerid)] = 0;

	SetPlayerCheckpoint(playerid, OtobusCP[AracCP[GetPlayerVehicleID(playerid)]][OtobusPosX], OtobusCP[AracCP[GetPlayerVehicleID(playerid)]][OtobusPosY], OtobusCP[AracCP[GetPlayerVehicleID(playerid)]][OtobusPosZ], 5.0);
	MesajGonder(playerid, "Sefer basladi.");
	return 1;
} */

CMD:aracyukselt(playerid)
{
	if(IsVehicleBike(GetPlayerVehicleID(playerid))) return HataMesajGonder(playerid, "Bisikletlerin seviyesini yükseltemezsiniz.");
    if (IsPlayerNearPNS(playerid) == -1) return HataMesajGonder(playerid, "Tamirhane noktasina yakin degilsiniz.");
    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesajGonder(playerid, "söför olmalisiniz.");
    new id = Car_GetID(GetPlayerVehicleID(playerid));
    if(AracInfo[id][aracSeviye] >= 5) return HataMesajGonder(playerid, "Bu araç zaten son seviye yükseltmeye sahip.");
    Dialog_Show(playerid, AracYukselt, DIALOG_STYLE_MSGBOX, "Araç Yükselt", "%s model aracinizi $%d karsiliginda %d. seviyeye yükseltmek ister misiniz?", "Evet", "Hayir", ReturnVehicleModelName(GetVehicleModel(GetPlayerVehicleID(playerid))), YukseltmeFiyat(AracInfo[id][aracSeviye] + 1), AracInfo[id][aracSeviye] + 1);
	return 1;
}

Dialog:AracYukselt(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if (IsPlayerNearPNS(playerid) == -1) return HataMesajGonder(playerid, "Tamirhane noktasina yakin degilsiniz.");
	    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesajGonder(playerid, "söför olmalisiniz.");
	    new id = Car_GetID(GetPlayerVehicleID(playerid));

	    new fiyat = YukseltmeFiyat(AracInfo[id][aracSeviye] + 1);

	    if(fiyat > PlayerData[playerid][pCash])
	    	return HataMesajGonder(playerid, "Yeterli paraniz yok.");

	    AracInfo[id][aracSeviye]++;
	    ParaVer(playerid, -fiyat);

	    SunucuMesaji(playerid, "Araciniza seviye yükseltmesi eklediniz.");
	}

	return 1;
}

stock YukseltmeFiyat(seviye)
{
	new fiyat = 2500;

	if(seviye >= 1)
		fiyat = seviye * 2500;

	return fiyat;
}

/*CMD:araczirhlat(playerid)
{
    if (!OyundaDegil(playerid)) return 1;
    if (IsPlayerNearPNS(playerid) == -1) return HataMesajGonder(playerid, "Tamirhane noktasina yakin degilsiniz.");
    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesajGonder(playerid, "söför olmalisiniz.");
    new id = Car_GetID(GetPlayerVehicleID(playerid));
    if (id == -1 || AracInfo[id][aracTip] != 4 || AracInfo[id][aracSahip] <= 0 || AracInfo[id][aracModel] == 509) return HataMesajGonder(playerid, "Bu araca zirh takilamaz.");
    if (AracInfo[id][aracZirh] >= 50 || AracInfo[id][aracZirhVarMi] == 1) return HataMesajGonder(playerid, "Bu araç zaten zirhli.");
    Dialog_Show(playerid, AracZirhlat, DIALOG_STYLE_MSGBOX, "Araç Zirhlat", "{2ECC71}$38,984 {FFFFFF}ödeyerek aracinizi zirhlatmak istediginize emin misiniz?", "Zirhlat", "Kapat");
	return 1;
}*/
CMD:taksiplakasi(playerid)
{
    if (!OyundaDegil(playerid)) return 1;
    if (IsPlayerNearPNS(playerid) == -1) return HataMesajGonder(playerid, "Tamirhane noktasina yakin degilsiniz.");
    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesajGonder(playerid, "söför olmalisiniz.");
    new vehicleid = GetPlayerVehicleID(playerid);
    new id = Car_GetID(vehicleid);
    if (id == -1 || AracInfo[id][aracTip] != 4 || AracInfo[id][aracSahip] <= 0 || !IsEngineVehicle(vehicleid) || IsVehicleBike(vehicleid) || GetVehicleMaxSeats(vehicleid) < 4) return HataMesajGonder(playerid, "Bu araca taksi plakasi takilamaz.");
    if (AracInfo[id][TaksiPlaka] == 1) return HataMesajGonder(playerid, "Bu aracin zaten taksi plakasi var.");
    Dialog_Show(playerid, TaksiPlaka, DIALOG_STYLE_MSGBOX, "Taksi Plakasi", "{2ECC71}$23,652 {FFFFFF}ödeyerek araciniza taksi plakasi taktirmak istediginize emin misiniz?", "Evet", "Hayir");
	return 1;
}

CMD:garaj(playerid)
{
    if (!OyundaDegil(playerid)) return 1;
    new id = (Garage_Nearest(playerid) != -1) ? (Garage_Nearest(playerid)) : (Garage_Inside(playerid));
    if (id == -1) return HataMesajGonder(playerid, "Herhangi bir garaja yakin veya içerisinde degilsiniz!");
    if (GarageData[id][gSahip] != PlayerData[playerid][pID] && PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu garajin sahibi degilsin!");
   	new str[250], sifre[30];
    if (strcmp(GarageData[id][gSifre], "Yok", true) == 0) sifre = "-";
    else format(sifre, sizeof(sifre), GarageData[id][gSifre]);
    SetPVarInt(playerid, "GarajID", id);
    strcat(str, "islem\tDurum\n");
    format(str, sizeof(str), "%s{FFFFFF}Garaj Kilit Durumu\t%s\n{FFFFFF}Garaj sifre\t{e5d60b}%s\n{FFFFFF}Garaj Park Durumu\t%s\n{FFFFFF}Park Edilen Araçlar",
	str, (GarageData[id][gKilit] == 1) ? ("{ff0000}Kilitli") : ("{83e50b}Açýk"), sifre, (GarageData[id][gParkDurum]) ? ("{83e50b}Açýk") : ("{ff0000}Kapalý"));
    Dialog_Show(playerid, GarajAyarlar, DIALOG_STYLE_TABLIST_HEADERS, "Garaj", str, "Seç", "Kapat");
	return 1;
}
CMD:petlerim(playerid)
{
	new string[500],sayi;
	strcat(string, "ID\tPet Adi\tDurum\n");
	foreach (new i: Petler)
	{
	    if (PetBilgi[i][petSahip] == PlayerData[playerid][pID])
	    {
	        format(string, sizeof(string), "%s%d\t%s\t%s\n",string,i,PetBilgi[i][petAdi], (PetBilgi[i][petDurum] == false) ? ("{ff0000}Gizli") : ("{00ff33}Aktif"));
	        sayi++;
	    }
	}
	if (sayi == 0) return HataMesajGonder(playerid, "Hiç petiniz yok.");
	ShowPlayerDialog(playerid, DIALOG_PETLERIM, DIALOG_STYLE_TABLIST_HEADERS, "Petleriniz", string, "Degistir", "Kapat");
	return 1;
}
CMD:pet(playerid)
{
    if (PetKontrol[playerid] != -1)
	{
	    new Float:pos[4], Float:can;
	    GetPlayerHealth(playerid, can);
	    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	    GetPlayerFacingAngle(playerid, pos[3]);
	    FCNPC_SetPosition(PetBilgi[PetKontrol[playerid]][NPCID], pos[0], pos[1], pos[2]);
        FCNPC_SetAngle(PetBilgi[PetKontrol[playerid]][NPCID], pos[3]);
	    FCNPC_SetVirtualWorld(PetBilgi[PetKontrol[playerid]][NPCID], GetPlayerVirtualWorld(playerid));
	    FCNPC_SetInterior(PetBilgi[PetKontrol[playerid]][NPCID], GetPlayerInterior(playerid));
	    FCNPC_SetHealth(PetBilgi[PetKontrol[playerid]][NPCID], can);
	    FCNPC_SetInvulnerable(PetBilgi[PetKontrol[playerid]][NPCID], true);
	    SetPlayerSkin(playerid, GetPVarInt(playerid, "LastSkin"));
	    SetPlayerPos(playerid, LastPos[playerid][0], LastPos[playerid][1], LastPos[playerid][2]);
	    SetPlayerInterior(playerid, GetPVarInt(playerid, "LastInterior"));
	    SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "LastVw"));
	    SetPlayerHealth(playerid, GetPVarFloat(playerid, "LastHealth"));
	    SetPlayerArmour(playerid, GetPVarFloat(playerid, "LastArmour"));

	    DeletePVar(playerid, "LastSkin");
	    LastPos[playerid][0] = 0.0;
	    LastPos[playerid][1] = 0.0;
	    LastPos[playerid][2] = 0.0;
	    DeletePVar(playerid, "LastInterior");
	    DeletePVar(playerid, "LastVw");
	    DeletePVar(playerid, "LastHealth");
	    DeletePVar(playerid, "LastArmour");
        PetKontrol[playerid] = -1;
	    return 1;
	}
	if (PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || pbOda[playerid] != -1)
 	return HataMesajGonder(playerid, "su an bu komutu kullanamazsiniz.");
	new id = PetYakin(playerid, 7.0);
	if (id == -1) return HataMesajGonder(playerid, "Yakininizda sahip oldugunuz pet yok.");
	PetDialog(playerid, id);
	return 1;
}
CMD:petolustur(playerid, params[])
{
	new petsahip, petturu, petcinsiyet;
	if (PlayerData[playerid][pAdmin] < 3) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
	if (sscanf(params, "uii", petsahip, petturu, petcinsiyet)) return KullanimMesaji(playerid, "/petolustur [Sahip] [Pet Türü 1-11] [Pet Cinsiyet 1- Erkek 2- Kadin]");
	if (!OyundaDegil(petsahip)) return HataMesajGonder(playerid, "Oyuncu oyunda degil.");
	if (petturu > 11) return HataMesajGonder(playerid, "Geçersiz pet türü.");
	if (petcinsiyet > 2) return HataMesajGonder(playerid, "Cinsiyet 1 veya 2 olmalidir. 1- erkek 2- kadin");
	new id = Pet_Olustur(PlayerData[petsahip][pID], petturu, petcinsiyet);
	if (id == -1) return HataMesajGonder(playerid, "Pet olusturulamadi.");
	MesajGonder(playerid, "Pet olusturuldu. ID: %d", id);
	return 1;
}
CMD:petsil(playerid, params[])
{
	new id;
    if (PlayerData[playerid][pAdmin] < 3) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
    if (sscanf(params, "i", id)) return KullanimMesaji(playerid, "/petsil [ID]");
    if (!Iter_Contains(Petler, id)) return HataMesajGonder(playerid, "Geçersiz ID girdiniz.");

    Pet_Sil(id);
    MesajGonder(playerid, "Pet silindi.");
	return 1;
}
CMD:petgizle(playerid, params[])
{
    new id;
    if (PlayerData[playerid][pAdmin] < 1) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
    if (sscanf(params, "i", id)) return KullanimMesaji(playerid, "/petgizle [ID]");
    if (!Iter_Contains(Petler, id)) return HataMesajGonder(playerid, "Geçersiz ID girdiniz.");
    if (PetBilgi[id][petDurum] == false) return HataMesajGonder(playerid, "Bu pet zaten gizlenmis.");
    PetBilgi[id][petSaglik] = FCNPC_GetHealth(PetBilgi[id][NPCID]);
   	FCNPC_Destroy(PetBilgi[id][NPCID]);
    PetBilgi[id][petTakip] = -1;
    PetBilgi[id][NPCID] = -1;
    PetBilgi[id][petDurum] = false;
    DestroyDynamic3DTextLabel(PetBilgi[id][petText]);
	return 1;
}
/*CMD:oocmarket(playerid)
{
	if (!OyundaDegil(playerid)) return 1;

    mysql_tquery(g_SQL, "SELECT * FROM `oocmarket`", "OOCMarket", "d", playerid);
	return 1;
}*/
CMD:oocmarket(playerid)
{
	HataMesajGonder(playerid, "Market sistemi kýsa süreliðine kapalýdýr, ilginiz için teþekkür ederiz.");
	return 1;
}
CMD:vipmenu(playerid)
{
    if (!OyundaDegil(playerid)) return 1;
    if (PlayerData[playerid][pVip] < 1) return HataMesajGonder(playerid, "V.I.P degilsiniz. (/oocmarket)");
    VipMenu(playerid);
	return 1;
}
CMD:vipdolap(playerid)
{
    if (!OyundaDegil(playerid)) return 1;
    if (PlayerData[playerid][pVip] < 1) return HataMesajGonder(playerid, "V.I.P degilsiniz. (/oocmarket)");
    if (IsPlayerInRangeOfPoint(playerid, 50.0, 1377.7250,-2288.1245,-55.4695) || IsPlayerInRangeOfPoint(playerid, 50, 1411.1405,-2286.8162,-51.9696))
    {
        VipDolap(playerid);
    }
    else HataMesajGonder(playerid, "VIP Lounge'da degilsin!");
	return 1;
}
CMD:maske(playerid)
{
     if (!OyundaDegil(playerid)) return 1;

     if (PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
    return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsýnýz.");
    if (PlayerData[playerid][pMaskeHakki] == 0 && PlayerData[playerid][pVip] < 1) return HataMesajGonder(playerid, "Maske kullaným hakkýnýz veya Donator paketiniz yok. (/oocmarket)");
       if (PlayerData[playerid][pEsyalar][4] == 0) return HataMesajGonder(playerid, "Maskeniz yok.");
    if (PlayerData[playerid][pMaske] == false)
    {
        if (!PlayerData[playerid][pMaskeID])
            PlayerData[playerid][pMaskeID] = random(900000) + 100000;

        PlayerData[playerid][pMaske] = true;
        foreach(new i : Player)
        {
            if(PlayerData[playerid][pMaske])
                ShowPlayerNameTagForPlayer(playerid, i, true);
        }
        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, " %s maskeyi yüzüne takar.", ReturnName(playerid, -1));
    }
    else
    {
        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, " %s yüzündeki maskeyi çýkartýr.", ReturnName(playerid, -1));
        PlayerData[playerid][pMaske] = false;

        foreach(new i : Player)
        {
            if(PlayerData[playerid][pMaske])
                ShowPlayerNameTagForPlayer(playerid, i, false);
        }
    }
    return 1;
}

stock Mermici_Goster(playerid)
{
    new str[550];
    format(str, sizeof(str), "%ssarjör Al\n", str);
    format(str, sizeof(str), "%sMermi Al\n", str);
    Dialog_Show(playerid, MermiSatinal, DIALOG_STYLE_TABLIST, "{DC2222}Mermi Alim:{ffffff} Menü", str, "Seç", "Kapat");
	return 1;
}
Dialog:MermiSatinal(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (listitem == 0)
	    {
			if (PlayerData[playerid][pEsyalar][13] >= 1) return HataMesajGonder(playerid, "Üzerinizde en fazla 1 sarjör bulundurabilirsiniz.");
			if (PlayerData[playerid][pCash] < 500) return HataMesajGonder(playerid, "Yeterli paraniz yok. ($500)");
			PlayerData[playerid][pEsyalar][13]++;
			ParaVer(playerid, -500);
			MesajGonder(playerid, "sarjör satin aldiniz.");
		}
		if (listitem == 1)
		{
		    if (!GetWeapon(playerid)) return HataMesajGonder(playerid, "Elinizde silah yok.");
		    if (GetWeapon(playerid) <= 18 || GetWeapon(playerid) == 23 || GetWeapon(playerid) == 26 || GetWeapon(playerid) == 27 || GetWeapon(playerid) == 32 || GetWeapon(playerid) >= 34 ) return HataMesajGonder(playerid, "Bu silaha mermi satilmamakta.");
		    if (GetMermiFiyat(GetWeapon(playerid)) > PlayerData[playerid][pCash]) return HataMesajGonder(playerid, "Yeterli paraniz yok. (%s)", FormatNumber(GetMermiFiyat(GetWeapon(playerid))));
		    Dialog_Show(playerid, MermiAl, DIALOG_STYLE_MSGBOX, "{DC2222}Mermi Alim:{FFFF00} Satin Alma Onayi", "Elinizde bulunan silaha mermi almak üzeresiniz, bu islem %s miktar paraya maal olacaktir. Kabul ediyor musunuz?", "Evet", "Hayir", FormatNumber(GetMermiFiyat(GetWeapon(playerid))));

		}
	}
	return 1;
}
CMD:ozelmodel(playerid)
{
    if (!OyundaDegil(playerid)) return 1;
    if (PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "su an bu komutu kullanamazsiniz.");
    OzelModelListele(playerid);
	return 1;
}
CMD:ayarlar(playerid)
{
    if (!OyundaDegil(playerid)) return 1;
    Dialog_Show(playerid, AyarlarGiris, DIALOG_STYLE_PASSWORD, "Ayarlar", "{FFFFFF}Ayarlar bölümüne erismek için karakterinizin sifresini girmelisiniz:", "Devam", "Kapat");
	return 1;
}

CMD:graffiti(playerid, params[])
{
    if (!OyundaDegil(playerid)) return 1;
    if (IsPlayerInAnyVehicle(playerid)) return HataMesajGonder(playerid, "Araçta bu komutu kullanamazsiniz!");
    if (PlayerData[playerid][pFaction] == -1 || Birlikler[PlayerData[playerid][pFaction]][birlikOnaylar][3] == 0) return HataMesajGonder(playerid, "Graffiti onayli bir birligin üyesi degilsiniz.");

    if (GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
        return HataMesajGonder(playerid, "interior içerisine graffiti olusturamazsin!");

    if (PlayerData[playerid][pGraffiti] == 1) return HataMesajGonder(playerid, "Zaten graffiti olusturuyorsun!");

    PlayerData[playerid][pGraffiti] = 1;
    Dialog_Show(playerid, Graffiti, DIALOG_STYLE_INPUT, "Graffiti ~ Yazi", "{FFFFFF}Lütfen graffiti yazisini girin.\n{FFFFFF}Yazi içerisinde #renk ile renklendirme yapabilirsiniz. (#kirmizi, #mavi vs.)\n{ff0000}Not: {FFFFFF}Yazi 64 karakteri geçemez.", "Devam", "Kapat");
    return 1;
}

CMD:chattemizle(playerid, params[])
{
    for (new i = 0; i < 50; i ++) {
        SendClientMessage(playerid, -1, "");
    }
    SunucuMesaji(playerid, "Chatbox temizlendi.");
    return 1;
}
CMD:id(playerid, params[])
{
    if (!OyundaDegil(playerid)) return 1;
    if (isnull(params))
        return KullanimMesaji(playerid, "/id [ID/Isim]");

    if (strlen(params) < 3)
        return HataMesajGonder(playerid, "En az 3 karakter belirtmelisiniz.");

    new count;
 	foreach (new i : Player)
    {
        if (strfind(ReturnName(i), params, true) != -1)
        {
            SendClientMessageEx(playerid, COLOR_WHITE, "** %s - ID: %d (Lv.%d)", ReturnName(i), i, pLevel);
            count++;
        }
    }
    if (!count)
        return HataMesajGonder(playerid, "Bu kriterlerde hiçbir oyuncu bulunamadi: \"%s\".", params);

    return 1;
}

CMD:destek(playerid, params[])
{
	if(gettime() - GetPVarInt(playerid, "DestekSuresi") < 60)
		return HataMesajGonder(playerid, "Bir dakika aralýklarla destek mesajý gönderebilirsiniz.");

    if (!OyundaDegil(playerid)) return 1;
    if (Talep_GetCount(playerid) >= 1) return HataMesajGonder(playerid, "Bakýlmasý beklenen 1 adet destek talebiniz var daha fazla destek yollayamazsýnýz! (/destekiptal)");
    if (isnull(params)) return KullanimMesaji(playerid, "/destek [Ýçerik]");

    new talepid = -1;
	if ((talepid = Talep_Add(playerid, params)) != -1)
    {
    	SetPVarInt(playerid, "DestekSuresi", gettime());

    	foreach (new i : Player)
        {
            if (PlayerData[i][pAdmin] > 0 || PlayerData[i][pHelper] > 0 || PlayerData[i][pForumGorevlisi] > 0 || PlayerData[i][pOyunGorevlisi] > 0)
			{
			    if (strlen(params) > 64)
			    {
                	SendClientMessageEx(i, -1, "{8B4513}(Talep) %s (%d) : %.64s", ReturnName(playerid, 0), playerid, params);
                	SendClientMessageEx(i, -1, "{8B4513}%s", params[64]);
                }
                else
                {
                    SendClientMessageEx(i, -1, "{8B4513}(Talep) %s (%d) : %s", ReturnName(playerid), playerid, params);
                }
            }
        }
        MesajGonder(playerid, "Destek talebi gönderildi. Eðer talebiniz çözülürse iptal etmeyi unutmayýnýz.(/destekiptal)", talepid+1);
        MesajGonder(playerid, "Talep numaranýz: #%d. Talep görevlilerinin robot olmadýðýný unutmayýp sabýrla bekleyiniz.", talepid, talepid+1);
    }
    else
    {
        HataMesajGonder(playerid, "Talep listesi þu anda dolu.");
    }
	return 1;
}

CMD:destekiptal(playerid)
{
    if (!OyundaDegil(playerid)) return 1;
    if (Talep_GetCount(playerid) <= 0) return HataMesajGonder(playerid, "Destek talebiniz yok.");
    for (new i; i<MAX_TALEP; i++) if (Talep[i][tExists] == true && Talep[i][tGonderen] == playerid)
  	{
  	    Talep[i][tExists] = false;
  	    format(Talep[i][tIcerik], 128, "");
  	    Talep[i][tGonderen] = -1;
  	    Talep[i][tIlgilenen] = -1;
  	}
  	MesajGonder(playerid, "Destek talebiniz silindi.");
	return 1;
}

CMD:pdyardim(playerid)
{
	if (GetFactionType(playerid) != BIRLIK_LSPD)
	    return HataMesajGonder(playerid, "Devlet memuru degilsin.");

	SendClientMessage(playerid, 0x8D8DFFFF, "[LSPD] {FFFFFF}/t /d /f /(m)egafon /sm /mdc /aracaat /hapseat /rozetgoster");
	SendClientMessage(playerid, 0x8D8DFFFF, "[LSPD] {FFFFFF}/ustunuara /gov /kapiyikir /rozet /op /yt /elkoy /surukle /jammer /dashcamlimit");
	SendClientMessage(playerid, 0x8D8DFFFF, "[LSPD] {FFFFFF}/taser /aracicek /aracicekmeyibirak /aracibagla /cctv /cctvcik /birimler");
	SendClientMessage(playerid, 0x8D8DFFFF, "[LSPD] {FFFFFF}/dolap /siren /objekoy /objesil /objeduzenle /destekiste /destekkapat");
	SendClientMessage(playerid, 0x8D8DFFFF, "[LSPD] {FFFFFF}/flasor /siren /yereyatir /bagaj /kelepce /kelepcecikar /callsign /uydu /drone");
	return 1;
}

CMD:karakter(playerid)
{
	if (!OyundaDegil(playerid)) return 1;
	ShowStats(playerid, playerid);
	return 1;
}

CMD:paraver(playerid, params[])
{
    static
        userid,
        amount;

    if (!OyundaDegil(playerid)) return 1;

    if (PlayerData[playerid][pProbation] == 1) return HataMesajGonder(playerid, "Probationdayken bu komutu kullanamazsýnýz.");

    if (sscanf(params, "ud", userid, amount))
        return KullanimMesaji(playerid, "/paraver [id/isim] [miktar]");

    if (!OyundaDegil(userid) || !IsPlayerNearPlayer(playerid, userid, 5.0))
        return HataMesajGonder(playerid, "Oyuncu oyunda degil veya sana yeterince yakin degil.");

    if (GetPlayerState(userid) == PLAYER_STATE_SPECTATING)
        return HataMesajGonder(playerid, "Oyuncu oyunda degil veya sana uzak.");

    if (userid == playerid)
        return HataMesajGonder(playerid, "Kendine para veremezsin.");

    if (amount < 1)
        return HataMesajGonder(playerid, "En az $1 verebilirsin.");

    if (amount > 1 && PlayerData[playerid][pOynamaSaati] < 2)
        return HataMesajGonder(playerid, "Para verebilmek için 2 saat oynamalisin.");

    if (amount > PlayerData[playerid][pCash])
        return HataMesajGonder(playerid, "Bu kadar paran yok.");

    ParaVer(playerid, -amount);
    ParaVer(userid, amount);

    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s cebinden $%d para çikartir ve %s adli kisiye verir.", ReturnName(playerid, 0), amount, ReturnName(userid, 0));
    Log_Write("logs/pay_log.txt", "[%s] %s (%s), %s miktar parayi %s (%s) adli kisiye verir.", ReturnDate(), ReturnName(playerid), GetIP(playerid),amount, Player_GetName(userid), GetIP(userid));
    return 1;
}

CMD:harita(playerid)
{
	if (!OyundaDegil(playerid)) return 1;
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesajGonder(playerid, "Sürücü olmalisiniz.");
	Dialog_Show(playerid, GPS, DIALOG_STYLE_LIST, "LA Harita - Ana Menü", "{FFFFFF}> Önemli Lokasyonlar\n> Ev Bul\n> Ýþyeri Bul\n> Bina Bul", "Seç", "Geri");
	return 1;
}
CMD:cpsifirla(playerid)
{
    if (!OyundaDegil(playerid)) return 1;
	if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER && (AracYuk[GetPlayerVehicleID(playerid)] == 1 || BenzinlikYuk[GetPlayerVehicleID(playerid)] == 1)) return HataMesajGonder(playerid, "Bunu su an yapamazsiniz.");
	PlayerData[playerid][pTaksiKabul] = -1;
	DisablePlayerCheckpoint(playerid);

	AracYuk[GetPlayerVehicleID(playerid)] = 0;
	AracCP[GetPlayerVehicleID(playerid)] = -1;

	EMSKabul[playerid] = INVALID_PLAYER_ID;

	SetPVarInt(playerid, "EvBuluyor", -1);
	SetPVarInt(playerid, "IsyeriBuluyor", -1);
	SetPVarInt(playerid, "BinaBuluyor", -1);

	PlayerData[playerid][pGPS] = -1;

	DeletePVar(playerid, "AraciniBuluyor");
	SetPVarInt(playerid, "AracSakliyor", -1);

	PlayerTextDrawHide(playerid, MesafeTD[playerid]);

	MeslekCP[playerid] = -1;

	DisablePlayerCheckpoint(playerid);
	return 1;
}
CMD:ustunuara(playerid, params[])
{
    static
        userid;

    if (!OyundaDegil(playerid)) return 1;

    if (sscanf(params, "u", userid))
        return KullanimMesaji(playerid, "/ustunuara [id/isim]");

    if (!OyundaDegil(userid) || !IsPlayerNearPlayer(playerid, userid, 6.0))
        return HataMesajGonder(playerid, "Belirtilen oyuncu aktif degil ya da size yakin degil.");

    if (userid == playerid)
        return HataMesajGonder(playerid, "Kendi üstünü arayamazsin.");

    PlayerData[userid][pFriskOffer] = playerid;

    MesajGonder(userid, "%s üstünü aramak istiyor. (\"/kabulet arama\").", ReturnName(playerid, 0));
    MesajGonder(playerid, "%s adli oyuncuya üstünü arama istegi gönderildi.", ReturnName(userid, 0));
    return 1;
}
CMD:tokalas(playerid, params[])
{
    static
        userid,
        type;

    if (!OyundaDegil(playerid)) return 1;

    if (PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "su an bu komutu kullanamazsiniz.");

    if (sscanf(params, "ud", userid, type))
        return KullanimMesaji(playerid, "/tokalas [id/isim] [tip]");

    if (!IsPlayerConnected(userid) || !IsPlayerNearPlayer(playerid, userid, 6.0))
        return HataMesajGonder(playerid, "Belirtilen oyuncu oyunda degil veya size yakin degil.");

    if (userid == playerid)
        return HataMesajGonder(playerid, "Kendi elinle tokalasamazsin.");

    if (PlayerData[userid][pKelepce] > 0 || PlayerData[userid][pHapisSure] > 0 || PlayerData[userid][pSoklandi] > 0 || PlayerData[userid][pYereYatirildi] > 0 || PlayerData[userid][pBaygin] == 1 || PetKontrol[userid] != -1 || pbOda[userid] != -1 || GetPVarInt(userid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "Bu kisi ile tokalasamazsin!");

    if (type < 1 || type > 6)
        return HataMesajGonder(playerid, "Tip 1-6 arasinda olmasi gerekir.");

    PlayerData[userid][pShakeOffer] = playerid;
    PlayerData[userid][pShakeType] = type;

    MesajGonder(userid, "%s seninle tokalasmak istiyor. (\"/kabulet tokalasma\").", ReturnName(playerid, 0));
    MesajGonder(playerid, "%s adli oyuncuya tokalasma istegi yolladin.", ReturnName(userid, 0));
    return 1;
}
CMD:kabulet(playerid, params[])
{
 	if (isnull(params))
    {
        KullanimMesaji(playerid, "/kabulet [adlar]");
        SendClientMessage(playerid, COLOR_YELLOW, "[ADLAR]:{FFFFFF} arama, tokalasma, evlilik, konum");
        return 1;
    }

    if (!strcmp(params, "konum", true) && GetPVarInt(playerid, "KonumKabul") != -1 && IsPlayerConnected(GetPVarInt(playerid, "KonumKabul")))
    {
    	new Float:pos[3];
    	GetPlayerPosEx(GetPVarInt(playerid, "KonumKabul"), pos[0], pos[1], pos[2]);

    	cmd_cpsifirla(playerid);

    	SetPlayerCheckpoint(playerid, pos[0], pos[1], pos[2], 3.0);
   	 	MesajGonder(playerid, "Kisinin konumu haritada isaretlendi.");
    	SetPVarInt(playerid, "KonumKabul", -1);
    	SetPVarInt(playerid, "AraciniBuluyor", 1);
    }
	if (!strcmp(params, "bagaj", true)&& PlayerData[playerid][pBagajKim] != INVALID_PLAYER_ID)
	{
		new userid = PlayerData[playerid][pBagajBenim];
		new id = Car_Nearest(playerid);

        AracInfo[id][aracKisiSayi]++;
	    PlayerSpectateVehicle(userid, PlayerData[userid][pBagajAracim]);
		TogglePlayerControllable(userid, 0);
		SetPlayerPos(userid, -2136.1750,3216.0452,5.1730);

		TextDrawShowForPlayer(userid, Karanlik);
		new bu[50];
		format(bu, 50, ", %s adlý kiþiyi bagaja attý.", ReturnName(playerid));
		cmd_me(PlayerData[playerid][pBagajKim], bu);
		PlayerData[playerid][pBagajKim] = INVALID_PLAYER_ID;
		ClearAnimations(playerid);
	}
    if (!strcmp(params, "arama", true) && PlayerData[playerid][pFriskOffer] != INVALID_PLAYER_ID)
    {
         new
            targetid = PlayerData[playerid][pFriskOffer];

        if (!IsPlayerNearPlayer(playerid, targetid, 6.0))
            return HataMesajGonder(playerid, "Oyuncuya yakin degilsin.");

        SendClientMessage(targetid, -1, "{AFAFAF}-------------------------------");
        SendClientMessageEx(targetid, COLOR_WHITE, "Para: {2ECC71}%s", FormatNumber(PlayerData[playerid][pCash]));
        if (PlayerDrugData[playerid][Drugs] > 0) SendClientMessageEx(targetid, COLOR_WHITE, "Uyusturucu: %d gram", PlayerDrugData[playerid][Drugs]);
        if (PlayerDrugData[playerid][Seeds] > 0) SendClientMessageEx(targetid, COLOR_WHITE, "Uyusturucu Tohumu: %d adet", PlayerDrugData[playerid][Seeds]);
        if (PlayerData[playerid][pRadyo] > 0) SendClientMessageEx(targetid, COLOR_WHITE, "Portatif Radyo (frekans #%d khZ)", PlayerData[playerid][pFrekans]);
        if (PlayerData[playerid][pEhliyet] == 1) SendClientMessage(targetid, COLOR_WHITE, "Ehliyet.");
        new a;
		for (new i; i<13; i++) if (PlayerData[playerid][pSilahlar][i] > 0)
		{
	    	GetPlayerWeaponData(playerid, i, a, PlayerData[playerid][pMermiler][i]);
	    	SendClientMessageEx(targetid, COLOR_WHITE, "%s (%d mermi)", ReturnWeaponName(PlayerData[playerid][pSilahlar][i]), PlayerData[playerid][pMermiler][i]);
		}
		SendClientMessage(targetid, -1, "{AFAFAF}-------------------------------");
		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s ellerini %s adli kisinin üzerinde gezdirir.", ReturnName(targetid, 0), ReturnName(playerid, 0));
        PlayerData[playerid][pFriskOffer] = INVALID_PLAYER_ID;
    }
    else if (!strcmp(params, "tokalasma", true) && PlayerData[playerid][pShakeOffer] != INVALID_PLAYER_ID)
    {
        new
            targetid = PlayerData[playerid][pShakeOffer],
            type = PlayerData[playerid][pShakeType];

        if (!IsPlayerNearPlayer(playerid, targetid, 6.0))
            return HataMesajGonder(playerid, "Oyuncuya yakin degilsin.");

        SetPlayerToFacePlayer(playerid, targetid);
        SetPlayerToFacePlayer(targetid, playerid);

        PlayerData[playerid][pShakeOffer] = INVALID_PLAYER_ID;
        PlayerData[playerid][pShakeType] = 0;

        switch (type)
        {
            case 1:
            {
                ApplyAnimation(playerid, "GANGS", "hndshkaa", 4.0, 0, 0, 0, 0, 0, 1);
                ApplyAnimation(targetid, "GANGS", "hndshkaa", 4.0, 0, 0, 0, 0, 0, 1);
            }
            case 2:
            {
                ApplyAnimation(playerid, "GANGS", "hndshkba", 4.0, 0, 0, 0, 0, 0, 1);
                ApplyAnimation(targetid, "GANGS", "hndshkba", 4.0, 0, 0, 0, 0, 0, 1);
            }
            case 3:
            {
                ApplyAnimation(playerid, "GANGS", "hndshkda", 4.0, 0, 0, 0, 0, 0, 1);
                ApplyAnimation(targetid, "GANGS", "hndshkda", 4.0, 0, 0, 0, 0, 0, 1);
            }
            case 4:
            {
                ApplyAnimation(playerid, "GANGS", "hndshkea", 4.0, 0, 0, 0, 0, 0, 1);
                ApplyAnimation(targetid, "GANGS", "hndshkea", 4.0, 0, 0, 0, 0, 0, 1);
            }
            case 5:
            {
                ApplyAnimation(playerid, "GANGS", "hndshkfa", 4.0, 0, 0, 0, 0, 0, 1);
                ApplyAnimation(targetid, "GANGS", "hndshkfa", 4.0, 0, 0, 0, 0, 0, 1);
            }
            case 6:
            {
                ApplyAnimation(playerid, "GANGS", "prtial_hndshk_biz_01", 4.0, 0, 0, 0, 0, 0, 1);
                ApplyAnimation(targetid, "GANGS", "prtial_hndshk_biz_01", 4.0, 0, 0, 0, 0, 0, 1);
            }
        }
        MesajGonder(playerid, "%s adli kisinin tokalasma istegini kabul ettiniz.", ReturnName(targetid, 0));
        MesajGonder(targetid, "%s tokalasma isteginizi kabul etti.", ReturnName(playerid, 0));
    }
    else if (!strcmp(params, "evlilik", true) && PlayerData[playerid][pPartnerTeklif] != INVALID_PLAYER_ID)
    {
        new
            partnerid = PlayerData[playerid][pPartnerTeklif];

        if (!IsPlayerNearPlayer(playerid, partnerid, 6.0))
            return HataMesajGonder(playerid, "Oyuncuya yakin degilsin.");

        if (PlayerData[playerid][pPartner] != 0 || PlayerData[partnerid][pPartner] != 0 )
            return HataMesajGonder(playerid, "Evlilik için iki çiftinde partneri olmamasi gereklidir.");

        PlayerData[playerid][pPartner] = PlayerData[partnerid][pID];
        PlayerData[partnerid][pPartner] = PlayerData[playerid][pID];

        SendClientMessageToAllEx(0x42f445FF, "KiLiSE: %s ile %s evlendi!", ReturnName(partnerid, 0), ReturnName(playerid, 0));
        Log_Write("logs/evlilik_log.txt", "[%s] %s, %s ile evlendi.", ReturnDate(), ReturnName(playerid, 0), ReturnName(partnerid , 0));

        PlayerData[playerid][pPartnerTeklif] = INVALID_PLAYER_ID;
    }
    return 1;
}

CMD:birlikler(playerid)
{
    if (PlayerData[playerid][pAdmin] < 1) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok");
    if (!OyundaDegil(playerid)) return 1;
    ViewFactions(playerid);
	return 1;
}

CMD:mulklerim(playerid)
{
    if (!OyundaDegil(playerid)) return 1;
    Dialog_Show(playerid, Mulklerim, DIALOG_STYLE_LIST, "{0000BB}> {FFFFFF}Mülkleriniz", "{FFFFFF}Araçlar\n{FFFFFF}Evler\n{FFFFFF}isyerleri\n{FFFFFF}Gateler\n{FFFFFF}Petler\n{FFFFFF}Garajlar", "Seç", "Kapat");
	return 1;
}
CMD:stand(playerid, params[])
{
	new opsiyon[10];
    if (!OyundaDegil(playerid)) return 1;
    if (PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "su an bu komutu kullanamazsiniz.");
    if (sscanf(params, "s[10]", opsiyon)) return KullanimMesaji(playerid, "/stand [koy/al]");
    if (strcmp(opsiyon, "koy", true) == 0)
    {
        if (PlayerData[playerid][pStand] == true) return HataMesajGonder(playerid, "Zaten stand koymussunuz!");
        if (GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0) return HataMesajGonder(playerid, "interior içerisine stand koyamazsiniz.");
        Dialog_Show(playerid, Standlar, DIALOG_STYLE_PREVMODEL, "Stand", "1341\n1342\n1340", "Sec", "Kapat");
    }
    else if (strcmp(opsiyon, "al", true) == 0)
    {
        if (PlayerData[playerid][pStand] == false) return HataMesajGonder(playerid, "Zaten stand koymamissiniz!");
        new Float:objectPos[3];
        GetDynamicObjectPos(PlayerData[playerid][pStandObject], objectPos[0], objectPos[1], objectPos[2]);
        if (!IsPlayerInRangeOfPoint(playerid, 5.0, objectPos[0], objectPos[1], objectPos[2])) return HataMesajGonder(playerid, "Standinizin yakininda degilsiniz.");
        PlayerData[playerid][pStand] = false;
        DestroyDynamicObject(PlayerData[playerid][pStandObject]);
        DestroyDynamic3DTextLabel(PlayerData[playerid][pStandText]);
    }
	return 1;
}

CMD:gise(playerid, params[])
{
    new id = Gise_Kontrol(playerid);

	if (id == -1 && strcmp(params, "ben", true) != 0)
	    return HataMesajGonder(playerid, "Herhangi bir gisenin yakininda degilsiniz.");

	if (PlayerData[playerid][pCash] < GISE_UCRET)
	    return HataMesajGonder(playerid, "Paraniz yetersiz. {00FF00}%s", GISE_UCRET);

	if (AcilDurum == 1)
	    return HataMesajGonder(playerid, "Giseler su anda LSPD tarafindan devre disi birakilmistir.");

	if (Gise[id][gs_Durum] == GISE_KAPALI)
	{
		Gise[id][gs_Durum] = GISE_ACIK;

		SunucuMesaji(playerid, "Gise açýldýktan sonra 5 saniye içinde kapanacaktir.");

		ParaVer(playerid, -GISE_UCRET);
		MoveDynamicObject(Gise[id][gs_Obje], Gise[id][gs_Acik][0], Gise[id][gs_Acik][1], Gise[id][gs_Acik][2], 5.0,  Gise[id][gs_Acik][3], Gise[id][gs_Acik][4], Gise[id][gs_Acik][5]);
	}
	return 1;
}

public OnDynamicObjectMoved(objectid)
{
	for (new i = 0; i < MAX_GISE; i++)
	{
	    if (Gise[i][gs_Exists])
	    {
	        if (objectid == Gise[i][gs_Obje])
	        {
	            if (Gise[i][gs_Durum] == GISE_ACIK)
	            {
	                SetTimerEx("GiseKapat", 5000, false, "d", i);
	            }
	        }
	    }
	}
	return 1;
}

forward GiseKapat(id);
public GiseKapat(id)
{
    Gise[id][gs_Durum] = GISE_KAPALI;
    MoveDynamicObject(Gise[id][gs_Obje], Gise[id][gs_Kapali][0], Gise[id][gs_Kapali][1], Gise[id][gs_Kapali][2], 2.5,  Gise[id][gs_Kapali][3], Gise[id][gs_Kapali][4], Gise[id][gs_Kapali][5]);
	return 1;
}

Gise_Kontrol(playerid)
{
	for (new i = 0; i < MAX_GISE; i++)
	{
		if (Gise[i][gs_Exists])
		{
			new Float:koordLar[2];

			GetXYInFrontOfToll(Gise[i][gs_GateObje], koordLar[0], koordLar[1], 3.5);

		    if (IsPlayerInRangeOfPoint(playerid, 7.5, koordLar[0], koordLar[1], Gise[i][gs_Kapali][2]))
      			return i;
		}
	}
	return -1;
}

stock GetXYInFrontOfToll(objectid, &Float:x, &Float:y, Float:distance)
{
    new Float:rot[3];

    GetDynamicObjectPos(objectid, x, y, rot[0]);
    GetDynamicObjectRot(objectid, rot[0], rot[1], rot[2]);

	x += (distance * floatsin(-rot[2]+270, degrees));
    y += (distance * floatcos(-rot[2]+270, degrees));
}

CMD:gisedurum(playerid)
{
    if (!OyundaDegil(playerid)) return 1;
    if (GetFactionType(playerid) != BIRLIK_LSPD && GetFactionType(playerid) != BIRLIK_FBI && PlayerData[playerid][pAdmin] < 1) return HataMesajGonder(playerid, "Devlet memuru degilsiniz.");
    GiseKontrolu(playerid);
	return 1;
}
CMD:evlen(playerid, params[])
{
    if (!OyundaDegil(playerid)) return 1;
    if (!IsPlayerInRangeOfPoint(playerid, 3.0, -2027.0787,1122.2255,53.9859))
        return HataMesajGonder(playerid, "Evlenmek için kilisede olmalisin.");

    static
        userid;

    if (sscanf(params, "u", userid))
        return KullanimMesaji(playerid, "/evlen [id/isim]");

    if (!IsPlayerConnected(userid) || !IsPlayerNearPlayer(playerid, userid, 5.0))
        return HataMesajGonder(playerid, "Oyuncu oyunda degil veya sana yakin degil.");

    if (userid == playerid)
        return HataMesajGonder(playerid, "Kendinle evlenemezsin.");

    if (PlayerData[userid][pCinsiyet] == PlayerData[playerid][pCinsiyet]) return HataMesajGonder(playerid, "Bu oyuncu seninle ayni cinsiyette.");

    if (PlayerData[playerid][pPartner] != 0 || PlayerData[userid][pPartner] != 0 )
        return HataMesajGonder(playerid, "Evlilik için iki çiftinde partneri olmamasi gereklidir.");

    PlayerData[userid][pPartnerTeklif] = playerid;
    MesajGonder(playerid, "%s'a evlenme teklifi yolladin, yanitini bekleyin.", ReturnName(userid, 0));
    MesajGonder(userid, "%s sana evlenme teklifi yolladi. (/kabulet evlilik)", ReturnName(playerid, 0));

    return 1;
}
CMD:taksi(playerid)
{
    if (!OyundaDegil(playerid)) return 1;
    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesajGonder(playerid, "söför olmalisiniz.");
    new vehicleid = GetPlayerVehicleID(playerid);
    new id = Car_GetID(vehicleid);
    if (id == -1 || AracInfo[id][aracTip] != 4 || (AracInfo[id][TaksiPlaka] == 0 && GetVehicleModel(vehicleid) != 420)) return HataMesajGonder(playerid, "Bu araç taksi araci degil.");
    if (IsValidDynamicObject(AracInfo[id][TaksiObje]))
    {
        Dialog_Show(playerid, TaksiMenu, DIALOG_STYLE_TABLIST, "Taksi Paneli", "{AFAFAF}> {FF9900}Taksi Modeli\t{FFFFFF}%s\n{AFAFAF}> {FF9900}Taksimetre\t%s\n{AFAFAF}> {FF9900}Oturum Kazanci\t{2ECC71}%s\n{AFAFAF}> {FFFFFF}Oturum Kazancini Sifirla\n\
        {AFAFAF}> {FFFFFF}Taksimetre Ücretini Degistir\t{2ECC71}%s\n{AFAFAF}> {FFFFFF}Taksi Objesini Kaldir\n{AFAFAF}> {FFFFFF}Taksi Talepleri",
		"Seç", "Kapat", ReturnVehicleModelName(GetVehicleModel(vehicleid)), (PlayerData[playerid][pTaxiDuty] == false) ? ("{f44542}Kapalý") : ("{42f445}Açýk"),
        FormatNumber(AracInfo[id][OturumKazanci]), FormatNumber(AracInfo[id][Taksimetre]));

    }
    else
    {
        Dialog_Show(playerid, TaksiMenu, DIALOG_STYLE_TABLIST, "Taksi Paneli", "{AFAFAF}> {FF9900}Taksi Modeli\t{FFFFFF}%s\n{AFAFAF}> {FF9900}Taksimetre\t%s\n{AFAFAF}> {FF9900}Oturum Kazanci\t{2ECC71}%s\n{AFAFAF}> {FFFFFF}Oturum Kazancini Sifirla\n\
        {AFAFAF}> {FFFFFF}Taksimetre Ücretini Degistir\t{2ECC71}%s\n{AFAFAF}> {FFFFFF}Taksi Objesini Yerlestir\n{AFAFAF}> {FFFFFF}Taksi Talepleri",
		"Seç", "Kapat", ReturnVehicleModelName(GetVehicleModel(vehicleid)), (PlayerData[playerid][pTaxiDuty] == false) ? ("{f44542}Kapalý") : ("{42f445}Açýk"),
        FormatNumber(AracInfo[id][OturumKazanci]), FormatNumber(AracInfo[id][Taksimetre]));
    }
	return 1;
}
CMD:taksiiptal(playerid, params[])
{
    if (PlayerData[playerid][pTaxiDuty] == false) return HataMesajGonder(playerid, "Taksi aracinda olup isbasi yapmalisiniz.");

	if (PlayerData[playerid][pTaksiKabul] == -1) return HataMesajGonder(playerid, "Taksi kabul etmemissin.");

	SunucuMesaji(PlayerData[playerid][pTaksiKabul], "%s adli taksi söförü gelmekten vazgeçti tekrardan taksi çagirabilirsin.", ReturnName(playerid, 0));
	PlayerData[playerid][pTaksiKabul] = -1;
	DisablePlayerCheckpoint(playerid);
	return 1;
}
CMD:ara(playerid, params[])
{
	new number;
    if (!OyundaDegil(playerid)) return 1;
    if (PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "su an bu komutu kullanamazsiniz.");
    if (PlayerData[playerid][pTelefon] == -1) return HataMesajGonder(playerid, "Telefonunuz yok.");
    if (PlayerData[playerid][pTelefonAyar][0] == 1) return HataMesajGonder(playerid, "Telefonunuz Kapalý.");
    if (PlayerData[playerid][pAramada] != 0) return HataMesajGonder(playerid, "su an aramada oldugunuz için kimseyi arayamazsiniz.");
    if (sscanf(params, "i", number)) return KullanimMesaji(playerid, "/ara [numara] (911 - Acil durum, 333 - Taksi, 555 - Tarifeci)");
    if (number == PlayerData[playerid][pTelefon]) return HataMesajGonder(playerid, "Kendinizi arayamazsiniz.");
    if (number == 911)
    {
        if (!spamProtect(playerid, "AcilDurum", 120)) return HataMesajGonder(playerid, "Tekrar ihbar vermek için 2 dakika beklemelisiniz.");
        Dialog_Show(playerid, HizmetSecin, DIALOG_STYLE_LIST, "{FFFFFF}Operatör ~ Hizmet Seçin:", "{9189EF}Los Angeles Polis Departmani\n{FF8282}Los Angeles Medical Department", "Seç", "Kapat");
        return 1;
    }
    if (number == 555)
    {
        new string[750], sayi;
   		for (new i; i<sizeof(Tarifeler); i++)
    	{
	    		sayi++;
	    		format(string, sizeof(string), "%s{FFFFFF}%s {38c5f7}(%s){FFFFFF} - %d dakika / %d SMS / %d MB\n", string, Tarifeler[i][TarifeAdi], FormatNumber(Tarifeler[i][TarifeFiyat]), Tarifeler[i][TarifeDakika], Tarifeler[i][TarifeSMS], Tarifeler[i][TarifeNet]);
    	}
    	if (sayi == 0) return HataMesajGonder(playerid, "Hiç tarife yok.");
    	Dialog_Show(playerid, Tarifeler, DIALOG_STYLE_LIST, "Tarifeci", string, "Seç", "Kapat");
    	return 1;
    }
    if (number == 333)
    {
        PlayerData[playerid][pTaxiCalled] = 1;
        PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s telefonunda bir kaç numara tuslar.", ReturnName(playerid, 0));
        MesajGonder(playerid, "Taksi çagirdiniz, lütfen bekleyin...");
        new Float:pos[3];
        GetPlayerPosEx(playerid, pos[0], pos[1], pos[2]);
        foreach (new i:Player) if (GetPlayerState(i) == PLAYER_STATE_DRIVER && PlayerData[i][pTaxiDuty] == true)
        {
            SendClientMessageEx(i, 0x42f445FF, "%s adli kisi %s bölgesine taksi talep ediyor.", ReturnName(playerid, 0), GetLocation(pos[0], pos[1], pos[2]));
        }
        return 1;
    }
    if (PlayerData[playerid][pTarife] == -1 || PlayerData[playerid][pTarifeKalan][0] == 0) return HataMesajGonder(playerid, "Tarifeniz yok veya tarifenizde dakika kalmamis.");
    new targetid = GetNumberOwner(number);
    if (targetid == INVALID_PLAYER_ID || targetid == playerid || PlayerData[targetid][pBaygin] > 0 || PlayerData[targetid][pKelepce] > 0 || PlayerData[targetid][pHapisSure] > 0 || PlayerData[targetid][pTelefonAyar][0] == 1 || PlayerData[targetid][pTelefonAyar][5] == 1 || Jammer_Near(targetid) == 1) return HataMesajGonder(playerid, "Aradiginiz numaraya su anda ulasilamiyor, lütfen daha sonra tekrar deneyiniz.");
    if (PlayerData[targetid][pAramada] != 0) return HataMesajGonder(playerid, "Mesgul tonu aldin...");
    if (PlayerData[targetid][pTelefonAyar][3] == 1 && !RehberdeVar(targetid, PlayerData[playerid][pTelefon])) return HataMesajGonder(playerid, "Bu numara bilinmeyen numaralari engellemis.");
    PlayerData[playerid][pAramada] = ARAMA_ARIYOR;
    PlayerData[targetid][pAramada] = ARAMA_ARANIYOR;
    PlayerData[playerid][pCallLine] = targetid;
    PlayerData[targetid][pCallLine] = playerid;
    SetPVarInt(playerid, "Arayan", 1);
    MesajGonder(playerid, "Numara araniyor, lütfen cevap vermesini bekleyin. /cagrikapat ile çagriyi bitirebilirsiniz.");
    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s telefonunda bir kaç numara tuslar.", ReturnName(playerid, 0));
    SunucuMesaji(targetid, "Gelen Arama: %s  - /cagrikabul ile çagriyi kabul edebilir, /cagrikapat ile çagriyi kapatabilirsiniz.", TelNo(targetid, playerid));
    PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
    if (PlayerData[targetid][pTelefonAyar][1]) SendNearbyMessage(targetid, 30.0, COLOR_CYAN, "** Telefonu titremektedir. (( %s ))", ReturnName(targetid, 0));
    else
	{
		SendNearbyMessage(targetid, 30.0, COLOR_CYAN, "** Telefon çalmaktadir. (( %s ))", ReturnName(targetid, 0));
  		PlayerPlaySoundEx(targetid, 23000);
	}
	return 1;
}
CMD:sms(playerid, params[])
{
    new number, mesaj[100];
    if (!OyundaDegil(playerid)) return 1;
    if (PlayerData[playerid][pTelefon] == -1) return HataMesajGonder(playerid, "Telefonunuz yok.");
    if (PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1)
 	return HataMesajGonder(playerid, "su an bu komutu kullanamazsiniz.");
    if (PlayerData[playerid][pTelefonAyar][0] == 1) return HataMesajGonder(playerid, "Telefonunuz Kapalý.");
    if (PlayerData[playerid][pTarife] == -1 || PlayerData[playerid][pTarifeKalan][1] == 0) return HataMesajGonder(playerid, "Tarifeniz yok veya SMS hakkiniz bitmis.");
    if (sscanf(params, "is[100]", number, mesaj)) return KullanimMesaji(playerid, "/sms [numara] [mesaj]");
    if (number == 911 || number == 121 || number == 555) return HataMesajGonder(playerid, "Bu numaraya SMS gönderemezsiniz.");
    if (number < 3 || number > 100) return HataMesajGonder(playerid, "Mesaj uzunlugu 3 ile 100 karakter arasinda olmalidir.");
    new targetid = GetNumberOwner(number);
    if (targetid == INVALID_PLAYER_ID || targetid == playerid || Jammer_Near(targetid) == 1) return HataMesajGonder(playerid, "Geçersiz numara girdiniz.");
    if (PlayerData[targetid][pTelefonAyar][0] == 1 || PlayerData[targetid][pTelefonAyar][4] == 1) return HataMesajGonder(playerid, "Bu numara SMS alimlarini kapatmis.");
    PlayerData[playerid][pTarifeKalan][1]--;
	SendClientMessageEx(targetid, COLOR_YELLOW, "[SMS]: %s - %s", mesaj, TelNo(targetid, playerid));
	SendClientMessageEx(playerid, COLOR_YELLOW, "[SMS]: %s - %s", mesaj, ReturnName(playerid, 0));

	PlayerPlaySoundEx(targetid, 21001);
	return 1;
}
CMD:animasyonlar(playerid, params[])
{
    SendClientMessage(playerid, COLOR_YELLOW, "__________________________________[ANIMASYONLAR]___________________________________");
    SendClientMessage(playerid, COLOR_CLIENT, "{FFFFFF} /handsup /sarhos /bomb /rob /laugh /lookout /robman /crossarms /sit /siteat /hide /vomit /eat");
    SendClientMessage(playerid, COLOR_CLIENT, "{FFFFFF} /wave /slapass /deal /taichi /crack /smoke /chat /dance /fucku /drinkwater /pedmove /bat");
    SendClientMessage(playerid, COLOR_CLIENT, "{FFFFFF} /checktime /sleep /blob /opendoor /wavedown /shakehand /reload /cpr /dive /showoff /box /tag");
    SendClientMessage(playerid, COLOR_CLIENT, "{FFFFFF} /goggles /cry /dj /cheer /throw /robbed /hurt /nobreath /bar /getjiggy /fallover /rap /piss");
    SendClientMessage(playerid, COLOR_CLIENT, "{FFFFFF} /salute /crabs /washhands /signal /stop /gesture /jerkoff /idles /lowrider /carchat");
    SendClientMessage(playerid, COLOR_CLIENT, "{FFFFFF} /blowjob /spank /sunbathe /kiss /snatch /sneak /copa /sexy /holdup /misc /bodypush");
    SendClientMessage(playerid, COLOR_CLIENT, "{FFFFFF} /lowbodypush /headbutt /airkick /doorkick /leftslap /elbow /coprun /lean /wank");
    SendClientMessage(playerid, COLOR_YELLOW, "__________________________________[ANIMASYONLAR]___________________________________");
    return 1;
}
CMD:pedmove(playerid, params[])
{
	if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");
	if (IsPlayerInAnyVehicle(playerid)) return HataMesajGonder(playerid, "Araçta bunu yapamazsiniz.");
 	switch (strval(params))
  	{
        case 1: PlayAnimEx(playerid, "PED", "JOG_femaleA", 4.0, 1, 1, 1, 1, 1, 1);
        case 2: PlayAnimEx(playerid, "PED", "JOG_maleA", 4.0, 1, 1, 1, 1, 1, 1);
        case 3: PlayAnimEx(playerid, "PED", "WOMAN_walkfatold", 4.0, 1, 1, 1, 1, 1, 1);
        case 4: PlayAnimEx(playerid, "PED", "run_fat", 4.0, 1, 1, 1, 1, 1, 1);
        case 5: PlayAnimEx(playerid, "PED", "run_fatold", 4.0, 1, 1, 1, 1, 1, 1);
        case 6: PlayAnimEx(playerid, "PED", "run_old", 4.0, 1, 1, 1, 1, 1, 1);
        case 7: PlayAnimEx(playerid, "PED", "Run_Wuzi", 4.0, 1, 1, 1, 1, 1, 1);
        case 8: PlayAnimEx(playerid, "PED", "swat_run", 4.0, 1, 1, 1, 1, 1, 1);
        case 9: PlayAnimEx(playerid, "PED", "WALK_fat", 4.0, 1, 1, 1, 1, 1, 1);
        case 10: PlayAnimEx(playerid, "PED", "WALK_fatold", 4.0, 1, 1, 1, 1, 1, 1);
        case 11: PlayAnimEx(playerid, "PED", "WALK_gang1", 4.0, 1, 1, 1, 1, 1, 1);
        case 12: PlayAnimEx(playerid, "PED", "WALK_gang2", 4.0, 1, 1, 1, 1, 1, 1);
        case 13: PlayAnimEx(playerid, "PED", "WALK_old", 4.0, 1, 1, 1, 1, 1, 1);
        case 14: PlayAnimEx(playerid, "PED", "WALK_shuffle", 4.0, 1, 1, 1, 1, 1, 1);
        case 15: PlayAnimEx(playerid, "PED", "woman_run", 4.0, 1, 1, 1, 1, 1, 1);
        case 16: PlayAnimEx(playerid, "PED", "WOMAN_runbusy", 4.0, 1, 1, 1, 1, 1, 1);
        case 17: PlayAnimEx(playerid, "PED", "WOMAN_runfatold", 4.0, 1, 1, 1, 1, 1, 1);
        case 18: PlayAnimEx(playerid, "PED", "woman_runpanic", 4.0, 1, 1, 1, 1, 1, 1);
        case 19: PlayAnimEx(playerid, "PED", "WOMAN_runsexy", 4.0, 1, 1, 1, 1, 1, 1);
        case 20: PlayAnimEx(playerid, "PED", "WOMAN_walkbusy", 4.0, 1, 1, 1, 1, 1, 1);
        case 21: PlayAnimEx(playerid, "PED", "WOMAN_walkfatold", 4.0, 1, 1, 1, 1, 1, 1);
        case 22: PlayAnimEx(playerid, "PED", "WOMAN_walknorm", 4.0, 1, 1, 1, 1, 1, 1);
        case 23: PlayAnimEx(playerid, "PED", "WOMAN_walkold", 4.0, 1, 1, 1, 1, 1, 1);
        case 24: PlayAnimEx(playerid, "PED", "WOMAN_walkpro", 4.0, 1, 1, 1, 1, 1, 1);
        case 25: PlayAnimEx(playerid, "PED", "WOMAN_walksexy", 4.0, 1, 1, 1, 1, 1, 1);
        case 26: PlayAnimEx(playerid, "PED", "WOMAN_walkshop", 4.0, 1, 1, 1, 1, 1, 1);
        default: KullanimMesaji(playerid, "/pedmove [1-26]");
   }
   return 1;
}
CMD:doorkick(playerid, params[])
{
	if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");
	if (IsPlayerInAnyVehicle(playerid)) return HataMesajGonder(playerid, "Araçta bunu yapamazsiniz.");
    ApplyAnimation(playerid, "POLICE", "Door_Kick",4.0,0,0,0,0,0);
    return 1;
}
CMD:airkick(playerid, params[])
{
	if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");
	if (IsPlayerInAnyVehicle(playerid)) return HataMesajGonder(playerid, "Araçta bunu yapamazsiniz.");
    ApplyAnimation(playerid, "FIGHT_C", "FightC_M",4.0,0,0,0,0,0);
    return 1;
}
CMD:wp(playerid, params[])
{
 static
	    Float:x,
	    Float:y,
	    Float:z;

	new vehicleid = GetPlayerVehicleID(playerid);
	if (vehicleid == INVALID_VEHICLE_ID) return HataMesajGonder(playerid, "Bu komutu kullanabilmek için araçta olmalýsýnýz.");
	GetPlayerPos(playerid, x, y, z);
	SetPlayerPos(playerid, x, y, z + 3);
 	ClearAnimations(playerid);
	PutPlayerInVehicle(playerid, vehicleid, GetPlayerVehicleSeat(playerid));
	return 1;
}
CMD:bodypush(playerid, params[])
{
    if (!AnimationCheck(playerid))
        return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");

    if (IsPlayerInAnyVehicle(playerid)) return 1;
    if (GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
    ApplyAnimation(playerid, "GANGS", "shake_cara",4.0,0,0,0,0,0);
    return 1;
}

CMD:lowbodypush(playerid, params[])
{
    if (!AnimationCheck(playerid))
        return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");

    if (IsPlayerInAnyVehicle(playerid)) return 1;
    if (GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
    ApplyAnimation(playerid, "GANGS", "shake_carSH",4.0,0,0,0,0,0);
    return 1;
}

CMD:headbutt(playerid, params[])
{
    if (!AnimationCheck(playerid))
        return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");

    if (IsPlayerInAnyVehicle(playerid)) return 1;
    if (GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
    ApplyAnimation(playerid, "WAYFARER", "WF_Fwd",4.0,0,0,0,0,0);
    return 1;
}

CMD:air_Kick(playerid, params[])
{
    if (!AnimationCheck(playerid))
        return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");

    if (IsPlayerInAnyVehicle(playerid)) return 1;
    if (GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
    ApplyAnimation(playerid, "FIGHT_C", "FightC_M",4.0,0,1,1,0,0);
    return 1;
}

CMD:door_Kick(playerid, params[])
{
    if (!AnimationCheck(playerid))
        return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");

    if (IsPlayerInAnyVehicle(playerid)) return 1;
    if (GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
    ApplyAnimation(playerid, "POLICE", "Door_Kick",4.0,0,0,0,0,0);
    return 1;
}

CMD:leftslap(playerid, params[])
{
    if (!AnimationCheck(playerid))
        return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");

    if (IsPlayerInAnyVehicle(playerid)) return 1;
    if (GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
    ApplyAnimation(playerid, "PED", "BIKE_elbowL",4.0,0,0,0,0,0);
    return 1;
}

CMD:elbow(playerid, params[])
{
    if (!AnimationCheck(playerid))
        return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");

    if (IsPlayerInAnyVehicle(playerid)) return 1;
    if (GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
    ApplyAnimation(playerid, "FIGHT_D", "FightD_3",4.0,0,1,1,0,0);
    return 1;
}

CMD:coprun(playerid, params[])
{
    if (!AnimationCheck(playerid))
        return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");

    if (IsPlayerInAnyVehicle(playerid)) return 1;
    if (GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
    ApplyAnimation(playerid, "SWORD", "sword_block",50.0,0,1,1,1,1);
    return 1;
}

CMD:handsup(playerid, params[])
{
    if (!AnimationCheck(playerid))
        return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");

    if (IsPlayerInAnyVehicle(playerid)) return 1;
    if (GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);
    return 1;
}

CMD:piss(playerid, params[])
{
    if (!AnimationCheck(playerid))
        return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");

    if (IsPlayerInAnyVehicle(playerid)) return 1;
    if (GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
    SetPlayerSpecialAction(playerid, 68);
    return 1;
}

CMD:sneak(playerid, params[])
{
    if (!AnimationCheck(playerid))
        return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");

    if (IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnimEx(playerid, "PED", "Player_Sneak", 4.1, 1, 1, 1, 1, 1, 1);
    return 1;
}

CMD:sarhos(playerid, params[])
{
    if (!AnimationCheck(playerid))
        return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");

    if (IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnimEx(playerid, "PED", "WALK_DRUNK", 4.0, 1, 1, 1, 1, 1, 1);
    return 1;
}

CMD:bomb(playerid, params[])
{
    if (!AnimationCheck(playerid))
        return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");

    if (IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnim(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0, 1);
    return 1;
}

CMD:rob(playerid, params[])
{
    if (!AnimationCheck(playerid))
        return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");

    if (IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnimEx(playerid, "ped", "ARRESTgun", 4.0, 0, 1, 1, 1, 1, 1);
    return 1;
}

CMD:laugh(playerid, params[])
{
    if (!AnimationCheck(playerid))
        return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");

    if (IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnimEx(playerid, "RAPPING", "Laugh_01", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:lookout(playerid, params[])
{
    if (!AnimationCheck(playerid))
        return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");

    if (IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnim(playerid, "SHOP", "ROB_Shifty", 4.0, 0, 0, 0, 0, 0, 1);
    return 1;
}

CMD:robman(playerid, params[])
{
    if (!AnimationCheck(playerid))
        return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");

    if (IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnimEx(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:hide(playerid, params[])
{
    if (!AnimationCheck(playerid))
        return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");

    if (IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnimEx(playerid, "ped", "cower", 3.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:vomit(playerid, params[])
{
    if (!AnimationCheck(playerid))
        return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");

    if (IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnimEx(playerid, "FOOD", "EAT_Vomit_P", 3.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:eat(playerid, params[])
{
    if (!AnimationCheck(playerid))
        return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");

    if (IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnimEx(playerid, "FOOD", "EAT_Burger", 3.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:slapass(playerid, params[])
{
    if (!AnimationCheck(playerid))
        return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");

    if (IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnim(playerid, "SWEET", "sweet_ass_slap", 4.0, 0, 0, 0, 0, 0, 1);
    return 1;
}

CMD:crack(playerid, params[])
{
    if (!AnimationCheck(playerid))
        return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");

    if (IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnimEx(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:fucku(playerid, params[])
{
    if (!AnimationCheck(playerid))
        return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");

    if (IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnim(playerid, "PED", "fucku", 4.0, 0, 0, 0, 0, 0, 1);
    return 1;
}

CMD:taichi(playerid, params[])
{
    if (!AnimationCheck(playerid))
        return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");
    if (IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnimEx(playerid, "PARK", "Tai_Chi_Loop", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:drinkwater(playerid, params[])
{
    if (!AnimationCheck(playerid))
        return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");

    if (IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnimEx(playerid, "BAR", "dnk_stndF_loop", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:checktime(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");

    if (IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnim(playerid, "COP_AMBIENT", "Coplook_watch", 4.0, 0, 0, 0, 0, 0, 1);
    return 1;
}

CMD:sleep(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");
    if (IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnimEx(playerid, "CRACK", "crckdeth4", 4.0, 0, 1, 1, 1, 0, 1);
    return 1;
}

CMD:blob(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");
    if (IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnimEx(playerid, "CRACK", "crckidle1", 4.0, 0, 1, 1, 1, 0, 1);
    return 1;
}

CMD:opendoor(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");
    if (IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnim(playerid, "AIRPORT", "thrw_barl_thrw", 4.0, 0, 0, 0, 0, 0, 1);
    return 1;
}

CMD:wavedown(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");
    if (IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnim(playerid, "BD_FIRE", "BD_Panic_01", 4.0, 0, 0, 0, 0, 0, 1);
    return 1;
}

CMD:cpr(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");
    if (IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnim(playerid, "MEDIC", "CPR", 4.0, 0, 0, 0, 0, 0, 1);
    return 1;
}

CMD:dive(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");
    if (IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnimEx(playerid, "DODGE", "Crush_Jump", 4.0, 0, 1, 1, 1, 0, 1);
    return 1;
}

CMD:showoff(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");
    if (IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnimEx(playerid, "Freeweights", "gym_free_celebrate", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:goggles(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");
    if (IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnim(playerid, "goggles", "goggles_put_on", 4.0, 0, 0, 0, 0, 0, 1);
    return 1;
}

CMD:cry(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");
    if (IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnimEx(playerid, "GRAVEYARD", "mrnF_loop", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:throw(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");
    if (IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnim(playerid, "GRENADE", "WEAPON_throw", 4.0, 0, 0, 0, 0, 0, 1);
    return 1;
}

CMD:robbed(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");
    if (IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnimEx(playerid, "SHOP", "SHP_Rob_GiveCash", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:hurt(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");
    if (IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnimEx(playerid, "SWAT", "gnstwall_injurd", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:box(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");
    if (IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnimEx(playerid, "GYMNASIUM", "GYMshadowbox", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:washhands(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");
    if (IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnimEx(playerid, "BD_FIRE", "wash_up", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:crabs(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");
    if (IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnimEx(playerid, "MISC", "Scratchballs_01", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:salute(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");
    if (IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnimEx(playerid, "ON_LOOKERS", "Pointup_loop", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:jerkoff(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");
    if (IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnimEx(playerid, "PAULNMAC", "wank_out", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:stop(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");
    if (IsPlayerInAnyVehicle(playerid)) return 1;
    PlayAnimEx(playerid, "PED", "endchat_01", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:rap(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");
    if (IsPlayerInAnyVehicle(playerid)) return 1;
    switch (strval(params))
    {
        case 1: PlayAnimEx(playerid, "RAPPING", "RAP_A_Loop", 4.0, 1, 0, 0, 0, 0, 1);
        case 2: PlayAnimEx(playerid, "RAPPING", "RAP_B_Loop", 4.0, 1, 0, 0, 0, 0, 1);
        case 3: PlayAnimEx(playerid, "RAPPING", "RAP_C_Loop", 4.0, 1, 0, 0, 0, 0, 1);
        default: KullanimMesaji(playerid, "/rap [1-3]");
    }
    return 1;
}

CMD:wank(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");
    if (IsPlayerInAnyVehicle(playerid)) return 1;
    switch (strval(params))
    {
        case 1: PlayAnimEx(playerid, "PAULNMAC", "wank_in", 4.0, 1, 0, 0, 0, 0, 1);
        case 2: PlayAnimEx(playerid, "PAULNMAC", "wank_loop", 4.0, 1, 0, 0, 0, 0, 1);
        case 3: PlayAnimEx(playerid, "PAULNMAC", "wank_out", 4.0, 1, 0, 0, 0, 0, 1);
        default: KullanimMesaji(playerid, "/wank [1-3]");
    }
    return 1;
}

CMD:chat(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");
    if (IsPlayerInAnyVehicle(playerid)) return 1;
    switch (strval(params))
    {
        case 1: PlayAnimEx(playerid, "PED", "IDLE_CHAT", 4.0, 1, 0, 0, 0, 0, 1);
        case 2: PlayAnimEx(playerid, "GANGS", "prtial_gngtlkA", 4.0, 1, 0, 0, 0, 0, 1);
        case 3: PlayAnimEx(playerid, "GANGS", "prtial_gngtlkB", 4.0, 1, 0, 0, 0, 0, 1);
        case 4: PlayAnimEx(playerid, "GANGS", "prtial_gngtlkE", 4.0, 1, 0, 0, 0, 0, 1);
        case 5: PlayAnimEx(playerid, "GANGS", "prtial_gngtlkF", 4.0, 1, 0, 0, 0, 0, 1);
        case 6: PlayAnimEx(playerid, "GANGS", "prtial_gngtlkG", 4.0, 1, 0, 0, 0, 0, 1);
        case 7: PlayAnimEx(playerid, "GANGS", "prtial_gngtlkH", 4.0, 1, 0, 0, 0, 0, 1);
        default: KullanimMesaji(playerid, "/chat [1-7]");
    }
    return 1;
}

CMD:sit(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");
    if (IsPlayerInAnyVehicle(playerid)) return 1;
    switch (strval(params))
    {
        case 1: PlayAnimEx(playerid, "Attractors", "Stepsit_in", 4.0, 0, 0, 0, 1, 0, 1);
        case 2: PlayAnimEx(playerid, "CRIB", "PED_Console_Loop", 4.0, 1, 0, 0, 0, 0, 1);
        case 3: PlayAnimEx(playerid, "INT_HOUSE", "LOU_In", 4.0, 0, 0, 0, 1, 1, 1);
        case 4: PlayAnimEx(playerid, "MISC", "SEAT_LR", 4.0, 1, 0, 0, 0, 0, 1);
        case 5: PlayAnimEx(playerid, "MISC", "Seat_talk_01", 4.0, 1, 0, 0, 0, 0, 1);
        case 6: PlayAnimEx(playerid, "MISC", "Seat_talk_02", 4.0, 1, 0, 0, 0, 0, 1);
        case 7: PlayAnimEx(playerid, "ped", "SEAT_down", 4.0, 0, 0, 0, 1, 1, 1);
        default: KullanimMesaji(playerid, "/sit [1-7]");
    }
    return 1;
}

CMD:bat(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");
    if (IsPlayerInAnyVehicle(playerid)) return 1;
    switch (strval(params))
    {
        case 1: PlayAnimEx(playerid, "BASEBALL", "Bat_IDLE",4.1, 0, 1, 1, 1, 1, 1);
        case 2: PlayAnimEx(playerid, "CRACK", "Bbalbat_Idle_01", 4.0, 1, 0, 0, 0, 0, 1);
        case 3: PlayAnimEx(playerid, "CRACK", "Bbalbat_Idle_02", 4.0, 1, 0, 0, 0, 0, 1);
        default: KullanimMesaji(playerid, "/bat [1-3]");
    }
    return 1;
}

CMD:lean(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");
    if (IsPlayerInAnyVehicle(playerid)) return 1;
    switch (strval(params))
    {
        case 1: PlayAnimEx(playerid, "GANGS", "leanIDLE", 4.0, 0, 0, 0, 1, 0, 1);
        case 2: PlayAnimEx(playerid, "MISC", "Plyrlean_loop", 4.0, 0, 0, 0, 1, 0, 1);
        default: KullanimMesaji(playerid, "/lean [1-2]");
    }
    return 1;
}

CMD:gesture(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");
    if (IsPlayerInAnyVehicle(playerid)) return 1;
    switch (strval(params))
    {
    case 1: PlayAnim(playerid, "GHANDS", "gsign1", 4.0, 0, 0, 0, 0, 0, 1);
    case 2: PlayAnim(playerid, "GHANDS", "gsign1LH", 4.0, 0, 0, 0, 0, 0, 1);
    case 3: PlayAnim(playerid, "GHANDS", "gsign2", 4.0, 0, 0, 0, 0, 0, 1);
    case 4: PlayAnim(playerid, "GHANDS", "gsign2LH", 4.0, 0, 0, 0, 0, 0, 1);
    case 5: PlayAnim(playerid, "GHANDS", "gsign3", 4.0, 0, 0, 0, 0, 0, 1);
    case 6: PlayAnim(playerid, "GHANDS", "gsign3LH", 4.0, 0, 0, 0, 0, 0, 1);
    case 7: PlayAnim(playerid, "GHANDS", "gsign4", 4.0, 0, 0, 0, 0, 0, 1);
    case 8: PlayAnim(playerid, "GHANDS", "gsign4LH", 4.0, 0, 0, 0, 0, 0, 1);
    case 9: PlayAnim(playerid, "GHANDS", "gsign5", 4.0, 0, 0, 0, 0, 0, 1);
    case 10: PlayAnim(playerid, "GHANDS", "gsign5", 4.0, 0, 0, 0, 0, 0, 1);
    case 11: PlayAnim(playerid, "GHANDS", "gsign5LH", 4.0, 0, 0, 0, 0, 0, 1);
    case 12: PlayAnim(playerid, "GANGS", "Invite_No", 4.0, 0, 0, 0, 0, 0, 1);
    case 13: PlayAnim(playerid, "GANGS", "Invite_Yes", 4.0, 0, 0, 0, 0, 0, 1);
    case 14: PlayAnim(playerid, "GANGS", "prtial_gngtlkD", 4.0, 0, 0, 0, 0, 0, 1);
    case 15: PlayAnim(playerid, "GANGS", "smkcig_prtl", 4.0, 0, 0, 0, 0, 0, 1);
    default: KullanimMesaji(playerid, "/gesture [1-15]");
    }
    return 1;
}

CMD:lay(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");
    if (IsPlayerInAnyVehicle(playerid)) return 1;
    switch (strval(params))
    {
    case 1: PlayAnimEx(playerid, "BEACH", "bather", 4.0, 1, 0, 0, 0, 0, 1);
    case 2: PlayAnimEx(playerid, "BEACH", "Lay_Bac_Loop", 4.0, 1, 0, 0, 0, 0, 1);
    case 3: PlayAnimEx(playerid, "BEACH", "SitnWait_loop_W", 4.0, 1, 0, 0, 0, 0, 1);
    case 4: PlayAnimEx(playerid, "BEACH", "bather", 4.0, 1, 0, 0, 0, 0, 1);
    case 5: PlayAnimEx(playerid, "BEACH", "Lay_Bac_Loop", 4.0, 1, 0, 0, 0, 0, 1);
    case 6: PlayAnimEx(playerid, "BEACH", "ParkSit_W_loop", 4.0, 1, 0, 0, 0, 0, 1);
    case 7: PlayAnimEx(playerid, "BEACH", "SitnWait_loop_W", 4.0, 1, 0, 0, 0, 0, 1);
    case 8: PlayAnimEx(playerid, "BEACH", "ParkSit_M_loop", 4.0, 1, 0, 0, 0, 0, 1);
    default: KullanimMesaji(playerid, "/lay [1-8]");
    }
    return 1;
}

CMD:wave(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");
    if (IsPlayerInAnyVehicle(playerid)) return 1;
    switch (strval(params))
    {
    case 1: PlayAnimEx(playerid, "ON_LOOKERS", "wave_loop", 4.0, 1, 0, 0, 0, 0, 1);
    case 2: PlayAnimEx(playerid, "KISSING", "gfwave2", 4.0, 1, 0, 0, 0, 0, 1);
    case 3: PlayAnimEx(playerid, "PED", "endchat_03", 4.0, 1, 0, 0, 0, 0, 1);
    default: KullanimMesaji(playerid, "/wave [1-3]");
    }
    return 1;
}

CMD:signal(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");
    if (IsPlayerInAnyVehicle(playerid)) return 1;
    switch (strval(params))
    {
    case 1: PlayAnimEx(playerid, "POLICE", "CopTraf_Come", 4.0, 1, 0, 0, 0, 0, 1);
    case 2: PlayAnimEx(playerid, "POLICE", "CopTraf_Stop", 4.0, 1, 0, 0, 0, 0, 1);
    default: KullanimMesaji(playerid, "/signal [1-2]");
    }
    return 1;
}

CMD:nobreath(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");
    if (IsPlayerInAnyVehicle(playerid)) return 1;
    switch (strval(params))
    {
    case 1: PlayAnimEx(playerid, "SWEET", "Sweet_injuredloop", 4.0, 1, 0, 0, 0, 0, 1);
    case 2: PlayAnimEx(playerid, "PED", "IDLE_tired", 4.0, 1, 0, 0, 0, 0, 1);
    case 3: PlayAnimEx(playerid, "FAT", "IDLE_tired", 4.0, 1, 0, 0, 0, 0, 1);
    default: KullanimMesaji(playerid, "/nobreath [1-3]");
    }
    return 1;
}

CMD:fallover(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");
    if (IsPlayerInAnyVehicle(playerid)) return 1;
    switch (strval(params))
    {
    case 1: PlayAnimEx(playerid, "KNIFE", "KILL_Knife_Ped_Die", 4.0, 0, 1, 1, 1, 0, 1);
    case 2: PlayAnimEx(playerid, "PED", "KO_shot_face", 4.0, 0, 1, 1, 1, 0, 1);
    case 3: PlayAnimEx(playerid, "PED", "KO_shot_stom", 4.0, 0, 1, 1, 1, 0, 1);
    case 4: PlayAnimEx(playerid, "PED", "BIKE_fallR", 4.1, 0, 1, 1, 1, 0, 1);
    case 5: PlayAnimEx(playerid, "PED", "BIKE_fall_off", 4.1, 0, 1, 1, 1, 0, 1);
    default: KullanimMesaji(playerid, "/fallover [1-5]");
    }
    return 1;
}

CMD:myskin(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");
    if (IsPlayerInAnyVehicle(playerid)) return 1;
    switch (strval(params))
    {
    case 1: SetPlayerSkin(playerid,101);
    case 2: PlayAnimEx(playerid, "PED", "JOG_maleA", 4.0, 1, 1, 1, 1, 1, 1);
    case 3: PlayAnimEx(playerid, "PED", "WOMAN_walkfatold", 4.0, 1, 1, 1, 1, 1, 1);
    case 4: PlayAnimEx(playerid, "PED", "run_fat", 4.0, 1, 1, 1, 1, 1, 1);
    case 5: PlayAnimEx(playerid, "PED", "run_fatold", 4.0, 1, 1, 1, 1, 1, 1);
    case 6: PlayAnimEx(playerid, "PED", "run_old", 4.0, 1, 1, 1, 1, 1, 1);
    case 7: PlayAnimEx(playerid, "PED", "Run_Wuzi", 4.0, 1, 1, 1, 1, 1, 1);
    case 8: PlayAnimEx(playerid, "PED", "swat_run", 4.0, 1, 1, 1, 1, 1, 1);
    case 9: PlayAnimEx(playerid, "PED", "WALK_fat", 4.0, 1, 1, 1, 1, 1, 1);
    case 10: PlayAnimEx(playerid, "PED", "WALK_fatold", 4.0, 1, 1, 1, 1, 1, 1);
    case 11: PlayAnimEx(playerid, "PED", "WALK_gang1", 4.0, 1, 1, 1, 1, 1, 1);
    case 12: PlayAnimEx(playerid, "PED", "WALK_gang2", 4.0, 1, 1, 1, 1, 1, 1);
    case 13: PlayAnimEx(playerid, "PED", "WALK_old", 4.0, 1, 1, 1, 1, 1, 1);
    case 14: PlayAnimEx(playerid, "PED", "WALK_shuffle", 4.0, 1, 1, 1, 1, 1, 1);
    case 15: PlayAnimEx(playerid, "PED", "woman_run", 4.0, 1, 1, 1, 1, 1, 1);
    case 16: PlayAnimEx(playerid, "PED", "WOMAN_runbusy", 4.0, 1, 1, 1, 1, 1, 1);
    case 17: PlayAnimEx(playerid, "PED", "WOMAN_runfatold", 4.0, 1, 1, 1, 1, 1, 1);
    case 18: PlayAnimEx(playerid, "PED", "woman_runpanic", 4.0, 1, 1, 1, 1, 1, 1);
    case 19: PlayAnimEx(playerid, "PED", "WOMAN_runsexy", 4.0, 1, 1, 1, 1, 1, 1);
    case 20: PlayAnimEx(playerid, "PED", "WOMAN_walkbusy", 4.0, 1, 1, 1, 1, 1, 1);
    case 21: PlayAnimEx(playerid, "PED", "WOMAN_walkfatold", 4.0, 1, 1, 1, 1, 1, 1);
    case 22: PlayAnimEx(playerid, "PED", "WOMAN_walknorm", 4.0, 1, 1, 1, 1, 1, 1);
    case 23: PlayAnimEx(playerid, "PED", "WOMAN_walkold", 4.0, 1, 1, 1, 1, 1, 1);
    case 24: PlayAnimEx(playerid, "PED", "WOMAN_walkpro", 4.0, 1, 1, 1, 1, 1, 1);
    case 25: PlayAnimEx(playerid, "PED", "WOMAN_walksexy", 4.0, 1, 1, 1, 1, 1, 1);
    case 26: PlayAnimEx(playerid, "PED", "WOMAN_walkshop", 4.0, 1, 1, 1, 1, 1, 1);
    default: KullanimMesaji(playerid, "/pedmove [1-26]");
    }
    return 1;
}

CMD:getjiggy(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");
    if (IsPlayerInAnyVehicle(playerid)) return 1;
    switch (strval(params))
    {
    case 1: PlayAnimEx(playerid, "DANCING", "DAN_Down_A", 4.0, 1, 0, 0, 0, 0, 1);
    case 2: PlayAnimEx(playerid, "DANCING", "DAN_Left_A", 4.0, 1, 0, 0, 0, 0, 1);
    case 3: PlayAnimEx(playerid, "DANCING", "DAN_Loop_A", 4.0, 1, 0, 0, 0, 0, 1);
    case 4: PlayAnimEx(playerid, "DANCING", "DAN_Right_A", 4.0, 1, 0, 0, 0, 0, 1);
    case 5: PlayAnimEx(playerid, "DANCING", "DAN_Up_A", 4.0, 1, 0, 0, 0, 0, 1);
    case 6: PlayAnimEx(playerid, "DANCING", "dnce_M_a", 4.0, 1, 0, 0, 0, 0, 1);
    case 7: PlayAnimEx(playerid, "DANCING", "dnce_M_b", 4.0, 1, 0, 0, 0, 0, 1);
    case 8: PlayAnimEx(playerid, "DANCING", "dnce_M_c", 4.0, 1, 0, 0, 0, 0, 1);
    case 9: PlayAnimEx(playerid, "DANCING", "dnce_M_c", 4.0, 1, 0, 0, 0, 0, 1);
    case 10: PlayAnimEx(playerid, "DANCING", "dnce_M_d", 4.0, 1, 0, 0, 0, 0, 1);
    default: KullanimMesaji(playerid, "/getjiggy [1-10]");
    }
    return 1;
}

CMD:stripclub(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");
    if (IsPlayerInAnyVehicle(playerid)) return 1;
    switch (strval(params))
    {
    case 1: PlayAnimEx(playerid, "STRIP", "PLY_CASH", 4.0, 1, 0, 0, 0, 0, 1);
    case 2: PlayAnimEx(playerid, "STRIP", "PUN_CASH", 4.0, 1, 0, 0, 0, 0, 1);
    default: KullanimMesaji(playerid, "/stripclub [1-2]");
    }
    return 1;
}

CMD:smoke(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");
    if (IsPlayerInAnyVehicle(playerid)) return 1;
    switch (strval(params))
    {
    case 1: PlayAnim(playerid, "SMOKING", "M_smk_in", 4.0, 0, 0, 0, 0, 0, 1);
    case 2: PlayAnimEx(playerid, "SMOKING", "M_smklean_loop", 4.0, 1, 0, 0, 0, 0, 1);
    default: KullanimMesaji(playerid, "/smoke [1-2]");
    }
    return 1;
}

CMD:dj(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");
    if (IsPlayerInAnyVehicle(playerid)) return 1;
    switch (strval(params))
    {
        case 1: PlayAnimEx(playerid, "SCRATCHING", "scdldlp", 4.0, 1, 0, 0, 0, 0, 1);
        case 2: PlayAnimEx(playerid, "SCRATCHING", "scdlulp", 4.0, 1, 0, 0, 0, 0, 1);
        case 3: PlayAnimEx(playerid, "SCRATCHING", "scdrdlp", 4.0, 1, 0, 0, 0, 0, 1);
        case 4: PlayAnimEx(playerid, "SCRATCHING", "scdrulp", 4.0, 1, 0, 0, 0, 0, 1);
        default: KullanimMesaji(playerid, "/dj [1-4]");
    }
    return 1;
}

CMD:reload(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");
    if (IsPlayerInAnyVehicle(playerid)) return 1;
    switch (strval(params))
    {
    case 1: PlayAnim(playerid, "BUDDY", "buddy_reload", 4.0, 0, 0, 0, 0, 0, 1);
    case 2: PlayAnim(playerid, "PYTHON", "python_reload", 4.0, 0, 0, 0, 0, 0, 1);
    default: KullanimMesaji(playerid, "/reload [1-2]");
    }
    return 1;
}

CMD:tag(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");
    if (IsPlayerInAnyVehicle(playerid)) return 1;
    switch (strval(params))
    {
    case 1: PlayAnimEx(playerid, "GRAFFITI", "graffiti_Chkout", 4.0, 1, 0, 0, 0, 0, 1);
    case 2: PlayAnimEx(playerid, "GRAFFITI", "spraycan_fire", 4.0, 1, 0, 0, 0, 0, 1);
    default: KullanimMesaji(playerid, "/tag [1-2]");
    }
    return 1;
}

CMD:deal(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");
    if (IsPlayerInAnyVehicle(playerid)) return 1;
    switch (strval(params))
    {
    case 1: PlayAnimEx(playerid, "DEALER", "DEALER_DEAL", 4.0, 1, 0, 0, 0, 0, 1);
    case 2: PlayAnimEx(playerid, "DEALER", "shop_pay", 4.0, 1, 0, 0, 0, 0, 1);
    default: KullanimMesaji(playerid, "/deal [1-2]");
    }
    return 1;
}

CMD:crossarms(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");
    if (IsPlayerInAnyVehicle(playerid)) return 1;
    switch (strval(params))
    {
        case 1: PlayAnimEx(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 0, 1, 1, 1, -1, 1);
        case 2: PlayAnimEx(playerid, "DEALER", "DEALER_IDLE", 4.0, 1, 0, 0, 0, 0, 1);
        case 3: PlayAnimEx(playerid, "GRAVEYARD", "mrnM_loop", 4.0, 1, 0, 0, 0, 0, 1);
        case 4: PlayAnimEx(playerid, "GRAVEYARD", "prst_loopa", 4.0, 1, 0, 0, 0, 0, 1);
        case 5: PlayAnimEx(playerid, "DEALER", "DEALER_IDLE_01", 4.0, 1, 0, 0, 0, 0, 1);
        default: KullanimMesaji(playerid, "/crossarms [1-5]");
    }
    return 1;
}

CMD:cheer(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");
    if (IsPlayerInAnyVehicle(playerid)) return 1;
    switch (strval(params))
    {
    case 1: PlayAnimEx(playerid, "ON_LOOKERS", "shout_01", 4.0, 1, 0, 0, 0, 0, 1);
    case 2: PlayAnimEx(playerid, "ON_LOOKERS", "shout_02", 4.0, 1, 0, 0, 0, 0, 1);
    case 3: PlayAnimEx(playerid, "ON_LOOKERS", "shout_in", 4.0, 1, 0, 0, 0, 0, 1);
    case 4: PlayAnimEx(playerid, "RIOT", "RIOT_ANGRY_B", 4.0, 1, 0, 0, 0, 0, 1);
    case 5: PlayAnimEx(playerid, "RIOT", "RIOT_CHANT", 4.0, 1, 0, 0, 0, 0, 1);
    case 6: PlayAnimEx(playerid, "RIOT", "RIOT_shout", 4.0, 1, 0, 0, 0, 0, 1);
    case 7: PlayAnimEx(playerid, "STRIP", "PUN_HOLLER", 4.0, 1, 0, 0, 0, 0, 1);
    case 8: PlayAnimEx(playerid, "OTB", "wtchrace_win", 4.0, 1, 0, 0, 0, 0, 1);
    default: KullanimMesaji(playerid, "/cheer [1-8]");
    }
    return 1;
}

CMD:siteat(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");
    if (IsPlayerInAnyVehicle(playerid)) return 1;
    switch (strval(params))
    {
    case 1: PlayAnimEx(playerid, "FOOD", "FF_Sit_Eat3", 4.0, 1, 0, 0, 0, 0, 1);
    case 2: PlayAnimEx(playerid, "FOOD", "FF_Sit_Eat2", 4.0, 1, 0, 0, 0, 0, 1);
    default: KullanimMesaji(playerid, "/siteat [1-2]");
    }
    return 1;
}

CMD:bar(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");
    if (IsPlayerInAnyVehicle(playerid)) return 1;
    switch (strval(params))
    {
    case 1: PlayAnim(playerid, "BAR", "Barcustom_get", 4.0, 0, 1, 0, 0, 0, 1);
    case 2: PlayAnim(playerid, "BAR", "Barserve_bottle", 4.0, 0, 0, 0, 0, 0, 1);
    case 3: PlayAnim(playerid, "BAR", "Barserve_give", 4.0, 0, 0, 0, 0, 0, 1);
    case 4: PlayAnim(playerid, "BAR", "dnk_stndM_loop", 4.0, 0, 0, 0, 0, 0, 1);
    case 5: PlayAnimEx(playerid, "BAR", "BARman_idle", 4.0, 1, 0, 0, 0, 0, 1);
    default: KullanimMesaji(playerid, "/bar [1-5]");
    }
    return 1;
}

CMD:dance(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");
    if (IsPlayerInAnyVehicle(playerid)) return 1;
    if (GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);

    switch (strval(params))
    {
        case 1: SetPlayerSpecialAction(playerid, 5);
        case 2: SetPlayerSpecialAction(playerid, 6);
        case 3: SetPlayerSpecialAction(playerid, 7);
        case 4: SetPlayerSpecialAction(playerid, 8);
        default: KullanimMesaji(playerid, "/dance [1-4]");
    }
    return 1;
}

CMD:spank(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");
    if (IsPlayerInAnyVehicle(playerid)) return 1;
    switch (strval(params))
    {
        case 1: PlayAnimEx(playerid, "SNM", "SPANKINGW", 4.1, 1, 0, 0, 0, 0, 1);
        case 2: PlayAnimEx(playerid, "SNM", "SPANKINGP", 4.1, 1, 0, 0, 0, 0, 1);
        case 3: PlayAnimEx(playerid, "SNM", "SPANKEDW", 4.1, 1, 0, 0, 0, 0, 1);
        case 4: PlayAnimEx(playerid, "SNM", "SPANKEDP", 4.1, 1, 0, 0, 0, 0, 1);
        default: KullanimMesaji(playerid, "/spank [1-4]");
    }
    return 1;
}

CMD:sexy(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");
    if (IsPlayerInAnyVehicle(playerid)) return 1;
    switch (strval(params))
    {
    case 1: PlayAnimEx(playerid, "STRIP", "strip_E", 4.1, 1, 0, 0, 0, 0, 1);
    case 2: PlayAnimEx(playerid, "STRIP", "strip_G", 4.1, 1, 0, 0, 0, 0, 1);
    case 3: PlayAnim(playerid, "STRIP", "STR_A2B", 4.1, 0, 0, 0, 0, 0, 1);
    case 4: PlayAnimEx(playerid, "STRIP", "STR_Loop_A", 4.1, 1, 0, 0, 0, 0, 1);
    case 5: PlayAnimEx(playerid, "STRIP", "STR_Loop_B", 4.1, 1, 0, 0, 0, 0, 1);
    case 6: PlayAnimEx(playerid, "STRIP", "STR_Loop_C", 4.1, 1, 0, 0, 0, 0, 1);
    default: KullanimMesaji(playerid, "/sexy [1-6]");
    }
    return 1;
}

CMD:holdup(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");
    if (IsPlayerInAnyVehicle(playerid)) return 1;
    switch (strval(params))
    {
    case 1: PlayAnimEx(playerid, "POOL", "POOL_ChalkCue", 4.1, 0, 1, 1, 1, 1, 1);
    case 2: PlayAnimEx(playerid, "POOL", "POOL_Idle_Stance", 4.1, 0, 1, 1, 1, 1, 1);
    default: KullanimMesaji(playerid, "/holdup [1-2]");
    }
    return 1;
}

CMD:stickjup(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");
    PlayAnimEx(playerid, "POOL", "POOL_Idle_Stance", 4.1, 0, 1, 1, 1, 1, 1);
    return 1;
}

CMD:copa(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");
    if (IsPlayerInAnyVehicle(playerid)) return 1;
    switch (strval(params))
    {
    case 1: PlayAnim(playerid, "POLICE", "CopTraf_Away", 4.1, 0, 0, 0, 0, 0, 1);
    case 2: PlayAnim(playerid, "POLICE", "CopTraf_Come", 4.1, 0, 0, 0, 0, 0, 1);
    case 3: PlayAnim(playerid, "POLICE", "CopTraf_Left", 4.1, 0, 0, 0, 0, 0, 1);
    case 4: PlayAnim(playerid, "POLICE", "CopTraf_Stop", 4.1, 0, 0, 0, 0, 0, 1);
    case 5: PlayAnimEx(playerid, "POLICE", "Cop_move_FWD", 4.1, 1, 1, 1, 1, 1, 1);
    case 6: PlayAnimEx(playerid, "POLICE", "crm_drgbst_01", 4.1, 0, 0, 0, 1, 5000, 1);
    case 7: PlayAnim(playerid, "POLICE", "Door_Kick", 4.1, 0, 1, 1, 1, 1, 1);
    case 8: PlayAnim(playerid, "POLICE", "plc_drgbst_01", 4.1, 0, 0, 0, 0, 5000, 1);
    case 9: PlayAnim(playerid, "POLICE", "plc_drgbst_02", 4.1, 0, 0, 0, 0, 0, 1);
    default: KullanimMesaji(playerid, "/copa [1-9]");
    }
    return 1;
}

CMD:misc(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");
    if (IsPlayerInAnyVehicle(playerid)) return 1;
    switch (strval(params))
    {
    case 1: PlayAnimEx(playerid, "CAR", "Fixn_Car_Loop", 4.1, 1, 0, 0, 0, 0, 1);
    case 2: PlayAnim(playerid, "CAR", "flag_drop", 4.1, 0, 0, 0, 0, 0, 1);
    case 3: PlayAnim(playerid, "PED", "bomber", 4.1, 0, 0, 0, 0, 0, 1);
    default: KullanimMesaji(playerid, "/misc [1-3]");
    }
    return 1;
}

CMD:snatch(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");
    if (IsPlayerInAnyVehicle(playerid)) return 1;
    switch (strval(params))
    {
    case 1: PlayAnim(playerid, "PED", "BIKE_elbowL", 4.1, 0, 0, 0, 0, 0, 1);
    case 2: PlayAnim(playerid, "PED", "BIKE_elbowR", 4.1, 0, 0, 0, 0, 0, 1);
    default: KullanimMesaji(playerid, "/snatch [1-2]");
    }
    return 1;
}

CMD:blowjob(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");
    if (IsPlayerInAnyVehicle(playerid)) return 1;
    switch (strval(params))
    {
    case 1: PlayAnimEx(playerid, "BLOWJOBZ", "BJ_COUCH_LOOP_P", 4.1, 1, 0, 0, 0, 0, 1);
    case 2: PlayAnimEx(playerid, "BLOWJOBZ", "BJ_STAND_LOOP_P", 4.1, 1, 0, 0, 0, 0, 1);
    default: KullanimMesaji(playerid, "/blowjob [1-2]");
    }
    return 1;
}

CMD:kiss(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");
    if (IsPlayerInAnyVehicle(playerid)) return 1;
    switch (strval(params))
    {
    case 1: PlayAnim(playerid, "KISSING", "Playa_Kiss_01", 4.1, 0, 0, 0, 0, 0, 1);
    case 2: PlayAnim(playerid, "KISSING", "Playa_Kiss_02", 4.1, 0, 0, 0, 0, 0, 1);
    case 3: PlayAnim(playerid, "KISSING", "Playa_Kiss_03", 4.1, 0, 0, 0, 0, 0, 1);
    case 4: PlayAnim(playerid, "KISSING", "Grlfrd_Kiss_01", 4.1, 0, 0, 0, 0, 0, 1);
    case 5: PlayAnim(playerid, "KISSING", "Grlfrd_Kiss_02", 4.1, 0, 0, 0, 0, 0, 1);
    case 6: PlayAnim(playerid, "KISSING", "Grlfrd_Kiss_03", 4.1, 0, 0, 0, 0, 0, 1);
    default: KullanimMesaji(playerid, "/kiss [1-6]");
    }
    return 1;
}

CMD:idles(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");
    if (IsPlayerInAnyVehicle(playerid)) return 1;
    switch (strval(params))
    {
    case 1: PlayAnimEx(playerid, "PLAYIDLES", "shift", 4.1, 1, 1, 1, 1, 1, 1);
    case 2: PlayAnimEx(playerid, "PLAYIDLES", "shldr", 4.1, 1, 1, 1, 1, 1, 1);
    case 3: PlayAnimEx(playerid, "PLAYIDLES", "stretch", 4.1, 1, 1, 1, 1, 1, 1);
    case 4: PlayAnimEx(playerid, "PLAYIDLES", "strleg", 4.1, 1, 1, 1, 1, 1, 1);
    case 5: PlayAnimEx(playerid, "PLAYIDLES", "time", 4.1, 1, 1, 1, 1, 1, 1);
    case 6: PlayAnimEx(playerid, "COP_AMBIENT", "Copbrowse_loop", 4.1, 1, 0, 0, 0, 0, 1);
    case 7: PlayAnimEx(playerid, "COP_AMBIENT", "Coplook_loop", 4.1, 1, 0, 0, 0, 0, 1);
    case 8: PlayAnimEx(playerid, "COP_AMBIENT", "Coplook_shake", 4.1, 1, 0, 0, 0, 0, 1);
    case 9: PlayAnimEx(playerid, "COP_AMBIENT", "Coplook_think", 4.1, 1, 0, 0, 0, 0, 1);
    case 10: PlayAnimEx(playerid, "COP_AMBIENT", "Coplook_watch", 4.1, 1, 0, 0, 0, 0, 1);
    case 11: PlayAnimEx(playerid, "PED", "roadcross", 4.1, 1, 0, 0, 0, 0, 1);
    case 12: PlayAnimEx(playerid, "PED", "roadcross_female", 4.1, 1, 0, 0, 0, 0, 1);
    case 13: PlayAnimEx(playerid, "PED", "roadcross_gang", 4.1, 1, 0, 0, 0, 0, 1);
    case 14: PlayAnimEx(playerid, "PED", "roadcross_old", 4.1, 1, 0, 0, 0, 0, 1);
    case 15: PlayAnimEx(playerid, "PED", "woman_idlestance", 4.1, 1, 0, 0, 0, 0, 1);
    default: KullanimMesaji(playerid, "/idles [1-15]");
    }
    return 1;
}

CMD:sunbathe(playerid, params[])
{
    if (!AnimationCheck(playerid)) return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");
    if (IsPlayerInAnyVehicle(playerid)) return 1;
    switch (strval(params))
    {
    case 1: PlayAnimEx(playerid, "SUNBATHE", "batherdown", 4.1, 0, 1, 1, 1, 1, 1);
    case 2: PlayAnimEx(playerid, "SUNBATHE", "batherup", 4.1, 0, 1, 1, 1, 1, 1);
    case 3: PlayAnimEx(playerid, "SUNBATHE", "Lay_Bac_in", 4.1, 0, 1, 1, 1, 1, 1);
    case 4: PlayAnimEx(playerid, "SUNBATHE", "Lay_Bac_out", 4.1, 0, 1, 1, 1, 1, 1);
    case 5: PlayAnimEx(playerid, "SUNBATHE", "ParkSit_M_IdleA", 4.1, 0, 1, 1, 1, 1, 1);
    case 6: PlayAnimEx(playerid, "SUNBATHE", "ParkSit_M_IdleB", 4.1, 0, 1, 1, 1, 1, 1);
    case 7: PlayAnimEx(playerid, "SUNBATHE", "ParkSit_M_IdleC", 4.1, 0, 1, 1, 1, 1, 1);
    case 8: PlayAnimEx(playerid, "SUNBATHE", "ParkSit_M_in", 4.1, 0, 1, 1, 1, 1, 1);
    case 9: PlayAnimEx(playerid, "SUNBATHE", "ParkSit_M_out", 4.1, 0, 1, 1, 1, 1, 1);
    case 10: PlayAnimEx(playerid, "SUNBATHE", "ParkSit_W_idleA", 4.1, 0, 1, 1, 1, 1, 1);
    case 11: PlayAnimEx(playerid, "SUNBATHE", "ParkSit_W_idleB", 4.1, 0, 1, 1, 1, 1, 1);
    case 12: PlayAnimEx(playerid, "SUNBATHE", "ParkSit_W_idleC", 4.1, 0, 1, 1, 1, 1, 1);
    case 13: PlayAnimEx(playerid, "SUNBATHE", "ParkSit_W_in", 4.1, 0, 1, 1, 1, 1, 1);
    case 14: PlayAnimEx(playerid, "SUNBATHE", "ParkSit_W_out", 4.1, 0, 1, 1, 1, 1, 1);
    case 15: PlayAnimEx(playerid, "SUNBATHE", "SBATHE_F_LieB2Sit", 4.1, 0, 1, 1, 1, 1, 1);
    case 16: PlayAnimEx(playerid, "SUNBATHE", "SBATHE_F_Out", 4.1, 0, 1, 1, 1, 1, 1);
    case 17: PlayAnimEx(playerid, "SUNBATHE", "SitnWait_in_W", 4.1, 0, 1, 1, 1, 1, 1);
    case 18: PlayAnimEx(playerid, "SUNBATHE", "SitnWait_out_W", 4.1, 0, 1, 1, 1, 1, 1);
    default: KullanimMesaji(playerid, "/sunbathe [1-18]");
    }
    return 1;
}

CMD:lowrider(playerid, params[])
{
    if (!AnimationCheck(playerid) && GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");
    if (!IsPlayerInAnyVehicle(playerid)) return 1;
    if (IsCLowrider(GetPlayerVehicleID(playerid)))
    {
        switch (strval(params))
        {
	        case 1: PlayAnim(playerid, "LOWRIDER", "lrgirl_bdbnce", 4.1, 0, 1, 1, 1, 1, 1);
	        case 2: PlayAnim(playerid, "LOWRIDER", "lrgirl_hair", 4.1, 0, 1, 1, 1, 1, 1);
	        case 3: PlayAnim(playerid, "LOWRIDER", "lrgirl_hurry", 4.1, 0, 1, 1, 1, 1, 1);
	        case 4: PlayAnim(playerid, "LOWRIDER", "lrgirl_idleloop", 4.1, 0, 1, 1, 1, 1, 1);
	        case 5: PlayAnim(playerid, "LOWRIDER", "lrgirl_idle_to_l0", 4.1, 0, 1, 1, 1, 1, 1);
	        case 6: PlayAnim(playerid, "LOWRIDER", "lrgirl_l0_bnce", 4.1, 0, 1, 1, 1, 1, 1);
	        case 7: PlayAnim(playerid, "LOWRIDER", "lrgirl_l0_loop", 4.1, 0, 1, 1, 1, 1, 1);
	        case 8: PlayAnim(playerid, "LOWRIDER", "lrgirl_l0_to_l1", 4.1, 0, 1, 1, 1, 1, 1);
	        case 9: PlayAnim(playerid, "LOWRIDER", "lrgirl_l12_to_l0", 4.1, 0, 1, 1, 1, 1, 1);
	        case 10: PlayAnim(playerid, "LOWRIDER", "lrgirl_l1_bnce", 4.1, 0, 1, 1, 1, 1, 1);
	        case 11: PlayAnim(playerid, "LOWRIDER", "lrgirl_l1_loop", 4.1, 0, 1, 1, 1, 1, 1);
	        case 12: PlayAnim(playerid, "LOWRIDER", "lrgirl_l1_to_l2", 4.1, 0, 1, 1, 1, 1, 1);
	        case 13: PlayAnim(playerid, "LOWRIDER", "lrgirl_l2_bnce", 4.1, 0, 1, 1, 1, 1, 1);
	        case 14: PlayAnim(playerid, "LOWRIDER", "lrgirl_l2_loop", 4.1, 0, 1, 1, 1, 1, 1);
	        case 15: PlayAnim(playerid, "LOWRIDER", "lrgirl_l2_to_l3", 4.1, 0, 1, 1, 1, 1, 1);
	        case 16: PlayAnim(playerid, "LOWRIDER", "lrgirl_l345_to_l1", 4.1, 0, 1, 1, 1, 1, 1);
	        case 17: PlayAnim(playerid, "LOWRIDER", "lrgirl_l3_bnce", 4.1, 0, 1, 1, 1, 1, 1);
	        case 18: PlayAnim(playerid, "LOWRIDER", "lrgirl_l3_loop", 4.1, 0, 1, 1, 1, 1, 1);
	        case 19: PlayAnim(playerid, "LOWRIDER", "lrgirl_l3_to_l4", 4.1, 0, 1, 1, 1, 1, 1);
	        case 20: PlayAnim(playerid, "LOWRIDER", "lrgirl_l4_bnce", 4.1, 0, 1, 1, 1, 1, 1);
	        case 21: PlayAnim(playerid, "LOWRIDER", "lrgirl_l4_loop", 4.1, 0, 1, 1, 1, 1, 1);
	        case 22: PlayAnim(playerid, "LOWRIDER", "lrgirl_l4_to_l5", 4.1, 0, 1, 1, 1, 1, 1);
	        case 23: PlayAnim(playerid, "LOWRIDER", "lrgirl_l5_bnce", 4.1, 0, 1, 1, 1, 1, 1);
	        case 24: PlayAnim(playerid, "LOWRIDER", "lrgirl_l5_loop", 4.1, 0, 1, 1, 1, 1, 1);
	        case 25: PlayAnim(playerid, "LOWRIDER", "prtial_gngtlkB", 4.1, 0, 1, 1, 1, 1, 1);
	        case 26: PlayAnim(playerid, "LOWRIDER", "prtial_gngtlkC", 4.1, 0, 1, 1, 1, 1, 1);
	        case 27: PlayAnim(playerid, "LOWRIDER", "prtial_gngtlkD", 4.1, 0, 1, 1, 1, 1, 1);
	        case 28: PlayAnim(playerid, "LOWRIDER", "prtial_gngtlkE", 4.1, 0, 1, 1, 1, 1, 1);
	        case 29: PlayAnim(playerid, "LOWRIDER", "prtial_gngtlkF", 4.1, 0, 1, 1, 1, 1, 1);
	        case 30: PlayAnim(playerid, "LOWRIDER", "prtial_gngtlkG", 4.1, 0, 1, 1, 1, 1, 1);
	        case 31: PlayAnim(playerid, "LOWRIDER", "prtial_gngtlkH", 4.1, 0, 1, 1, 1, 1, 1);
	        default: KullanimMesaji(playerid, "/lowrider [1-31]");
        }
    }
    else
    {
        HataMesajGonder(playerid, "Bu animasyonu kullanabilmek için lowrider aracinda olmaniz gerekmektedir.");
    }
    return 1;
}

CMD:carchat(playerid, params[])
{
    if (!AnimationCheck(playerid) && GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesajGonder(playerid, "su anda animasyon gerçeklestirilemiyor.");
    if (!IsPlayerInAnyVehicle(playerid)) return 1;
    switch (strval(params))
    {
	    case 1: PlayAnim(playerid, "CAR_CHAT", "carfone_in", 4.1, 0, 1, 1, 1, 1, 1);
	    case 2: PlayAnim(playerid, "CAR_CHAT", "carfone_loopA", 4.1, 0, 1, 1, 1, 1, 1);
	    case 3: PlayAnim(playerid, "CAR_CHAT", "carfone_loopA_to_B", 4.1, 0, 1, 1, 1, 1, 1);
	    case 4: PlayAnim(playerid, "CAR_CHAT", "carfone_loopB", 4.1, 0, 1, 1, 1, 1, 1);
	    case 5: PlayAnim(playerid, "CAR_CHAT", "carfone_loopB_to_A", 4.1, 0, 1, 1, 1, 1, 1);
	    case 6: PlayAnim(playerid, "CAR_CHAT", "carfone_out", 4.1, 0, 1, 1, 1, 1, 1);
	    case 7: PlayAnim(playerid, "CAR_CHAT", "CAR_Sc1_BL", 4.1, 0, 1, 1, 1, 1, 1);
	    case 8: PlayAnim(playerid, "CAR_CHAT", "CAR_Sc1_BR", 4.1, 0, 1, 1, 1, 1, 1);
	    case 9: PlayAnim(playerid, "CAR_CHAT", "CAR_Sc1_FL", 4.1, 0, 1, 1, 1, 1, 1);
	    case 10: PlayAnim(playerid, "CAR_CHAT", "CAR_Sc1_FR", 4.1, 0, 1, 1, 1, 1, 1);
	    case 11: PlayAnim(playerid, "CAR_CHAT", "CAR_Sc2_FL", 4.1, 0, 1, 1, 1, 1, 1);
	    case 12: PlayAnim(playerid, "CAR_CHAT", "CAR_Sc3_BR", 4.1, 0, 1, 1, 1, 1, 1);
	    case 13: PlayAnim(playerid, "CAR_CHAT", "CAR_Sc3_FL", 4.1, 0, 1, 1, 1, 1, 1);
	    case 14: PlayAnim(playerid, "CAR_CHAT", "CAR_Sc3_FR", 4.1, 0, 1, 1, 1, 1, 1);
	    case 15: PlayAnim(playerid, "CAR_CHAT", "CAR_Sc4_BL", 4.1, 0, 1, 1, 1, 1, 1);
	    case 16: PlayAnim(playerid, "CAR_CHAT", "CAR_Sc4_BR", 4.1, 0, 1, 1, 1, 1, 1);
	    case 17: PlayAnim(playerid, "CAR_CHAT", "CAR_Sc4_FL", 4.1, 0, 1, 1, 1, 1, 1);
	    case 18: PlayAnim(playerid, "CAR_CHAT", "CAR_Sc4_FR", 4.1, 0, 1, 1, 1, 1, 1);
	    case 19: PlayAnim(playerid, "CAR", "Sit_relaxed", 4.1, 0, 1, 1, 1, 1, 1);
	    default: KullanimMesaji(playerid, "/carchat [1-19]");
    }
    return 1;
}

CMD:meslekler(playerid)
{
	Dialog_Show(playerid, MesleklerMenu, DIALOG_STYLE_TABLIST_HEADERS, "{FFD800}Meslekler:{ffffff} Menü", "Meslek\tMeslek Noktasi\nTrucker\t%s\nÇöpçü\t%s\nPizza Kuryesi\t%s\nBenzin Taþýmacýlýðý\t%s\n", "Seç", "Kapat",
		GetLocation(KamyonX, KamyonY, KamyonZ),
		GetLocation(CopcuX, CopcuY, CopcuZ),
		GetLocation(OtobusX, OtobusY, OtobusZ),
		GetLocation(TircilikX, TircilikY, TircilikZ),
		GetLocation(BenzinlikX, BenzinlikY, BenzinlikZ)
	);
	return 1;
}

Dialog:MesleklerMenu(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
	            Dialog_Show(playerid, KamyonculukMeslek, DIALOG_STYLE_TABLIST, "{FFD800}Meslekler:{ffffff} Trucker", "Bilgi Al\nKonumu isaretle", "Seç", "Kapat");
			}
			case 1:
	        {
                Dialog_Show(playerid, CopcuMeslek, DIALOG_STYLE_TABLIST, "{FFD800}Meslekler:{ffffff} Çöpçülük", "Bilgi Al\nKonumu isaretle", "Seç", "Kapat");
	        }
	        case 2:
	        {
	            Dialog_Show(playerid, OtobusMeslek, DIALOG_STYLE_TABLIST, "{FFD800}Meslekler:{ffffff} Pizza Kuryeciliði", "Bilgi Al\nKonumu isaretle", "Seç", "Kapat");
	        }
	        case 3:
	        {
	        	Dialog_Show(playerid, TirMeslek, DIALOG_STYLE_TABLIST, "{FFD800}Meslekler:{ffffff} Tircilik", "Bilgi Al\nKonumu isaretle", "Seç", "Kapat");
	        }

	        case 4:
	        {
	        	Dialog_Show(playerid, BenzinMeslek, DIALOG_STYLE_TABLIST, "{FFD800}Meslekler:{ffffff} Benzin Tasimaciligi", "Bilgi Al\nKonumu isaretle", "Seç", "Kapat");
	        }
	    }
	}
	return 1;
}

Dialog:BenzinMeslek(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
	            Dialog_Show(playerid, 0, DIALOG_STYLE_MSGBOX, "{FFD800}Meslekler:{ffffff} Benzin Tasimaciligi Meslegi Bilgisi", "{FFD800}Benzin Tasimaciligi Meslegi:{ffffff}\
				 Benzin tasimaciligi mesleginin baslama bölgesinden yükünüzü yüklersiniz, yükünüzü bosaltip tekrar geri dönüp paranizi alirsiniz. sahsi ARAÇLA YAPILAMAZ\n \n{FFD800}Komutlar:{ffffff} /benzinyukle\n\
				 \n \n \n{ff0000}NOT:{ffffff} Eger araçtan inerseniz aracinizi ile meslek noktasina isinlanirsiniz.", "Seç", "Kapat");
	        }
	        case 1:
	        {
	        	cmd_cpsifirla(playerid);

                MeslekCP[playerid] = SetPlayerCheckpoint(playerid, BenzinlikX, BenzinlikY, BenzinlikZ, 5.0);
                SunucuMesaji(playerid, "Meslek noktasi haritanizda isaretlendi.");
	        }
	    }
	}
	return 1;
}

Dialog:KamyonculukMeslek(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
	            Dialog_Show(playerid, TruckerBilgi, DIALOG_STYLE_MSGBOX, "{FFD800}Meslekler:{ffffff} Trucker Mesleði Bilgisi", "{FFD800}Trucker Mesleði:{ffffff}\
				 Trucker mesleðinin baþlama bölgesinden yükünüzü yüklersiniz, yükünüzü boþaltýp tekrar geri dönüp paranýzý alýrsýnýz. Þahsi ARAÇLA Yapýlamaz\n \n{FFD800}Komutlar:{ffffff} /truckerbasla\n\
				 \n \n \n{ff0000}NOT:{ffffff} Eðer araçtan inerseniz aracýnýzý ile meslek noktasýna ýþýnlanýrsýnýz.", "Seç", "Kapat");
	        }
	        case 1:
	        {
	        	cmd_cpsifirla(playerid);

                MeslekCP[playerid] = SetPlayerCheckpoint(playerid, KamyonX, KamyonY, KamyonZ, 5.0);
                SunucuMesaji(playerid, "Meslek noktasý haritanýzda iþaretlendi.");
	        }
	    }
	}
	return 1;
}

Dialog:CopcuMeslek(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
            {
          		 Dialog_Show(playerid, CopcuBilgi, DIALOG_STYLE_MSGBOX, "{FFD800}Meslekler:{ffffff} Çöpçü Meslegi Bilgisi", "{FFD800}Çöpçü Meslegi:{ffffff}\
				 Çöpçü aracina binip, çöp kutularin yanina giderek içersindeki çöpleri toplayarak para kazanabilirsiniz. sahsi ARAÇLA YAPILMAZ\n \n{FFD800}Komutlar:{ffffff} /cop, /copbul\n\
				 \n \n \n{ff0000}NOT:{ffffff} Aracinizin içini fulledikten sonra çöp fabrikasina teslim ederek paranizi alabilirsiniz.", "Seç", "Kapat");
 			}
 			case 1:
            {
            	cmd_cpsifirla(playerid);

            	MeslekCP[playerid] = SetPlayerCheckpoint(playerid, CopcuX, CopcuY, CopcuZ, 5.0);
                SunucuMesaji(playerid, "Meslek noktasi haritanizda isaretlendi.");
            }
    	}
	}
	return 1;
}

Dialog:OtobusMeslek(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
            {
          		 Dialog_Show(playerid, OtobusBilgi, DIALOG_STYLE_MSGBOX, "{FFD800}Meslekler:{ffffff}Pizza Kuryeliði Bilgisi", "{FFD800}Pizza Kuryeliði Mesleði:{ffffff}\
				 Pizza aracina binerek meslek baslama noktasindan baslangiç yapar ve pizzalarý teslim ederek gezersiniz. þahsi ARAÇLA YAPILMAZ\n \n{FFD800}Komutlar:{ffffff} /pizzabasla\n\
				 \n \n \n{ff0000}NOT:{ffffff} Eger araçtan inerseniz araciniz ile meslek noktasina isinlanirsiniz.", "Seç", "Kapat");
 			}
 			case 1:
            {
            	cmd_cpsifirla(playerid);

            	MeslekCP[playerid] = SetPlayerCheckpoint(playerid, OtobusX, OtobusY, OtobusZ, 5.0);
                SunucuMesaji(playerid, "Meslek noktasi haritanizda isaretlendi.");
            }
    	}
	}
	return 1;
}

Dialog:TirMeslek(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
            {
          		 Dialog_Show(playerid, TirciBilgi, DIALOG_STYLE_MSGBOX, "{FFD800}Meslekler:{ffffff} Tircilik", "{FFD800}Tircilik Meslegi:{ffffff}\
				 Roadtrain aracina binerek meslek baslama noktasindan baslangiç yapar, yükünüzü yükler ve checkpointleri gezersiniz. sahsi ARAÇLA YAPILMAZ\n \n{FFD800}Komutlar:{ffffff} /tiryukle - /tiryukledonus\n\
				 \n \n \n{ff0000}NOT:{ffffff} Eger araçtan inerseniz araciniz ile meslek noktasina isinlanirsiniz.", "Seç", "Kapat");
 			}
 			case 1:
            {
            	cmd_cpsifirla(playerid);

            	MeslekCP[playerid] = SetPlayerCheckpoint(playerid, TircilikX, TircilikY, TircilikZ, 5.0);
                SunucuMesaji(playerid, "Meslek noktasi haritanizda isaretlendi.");
            }
    	}
	}
	return 1;
}

CMD:modifiyegarajlari(playerid)
{
    if (!OyundaDegil(playerid)) return 1;
    Dialog_Show(playerid, ModifiyeGarajlari, DIALOG_STYLE_LIST, "Modifiye Garajlari", "{FFFFFF}LS Temple Transfender\n{FFFFFF}LS Willowfield Lowrider Transfender\n{FFFFFF}SF Wheel Arch Angels", "Seç", "Kapat");
	return 1;
}
CMD:yardim(playerid, params[])
{
    SendClientMessage(playerid, COLOR_GREEN, "____________________________________[YARDIM]_____________________________________");
    SendClientMessage(playerid, COLOR_GREEN, "{BF3B2C}[KARAKTER]:{C8C8C8} /karakter - /ssmod - /dovusstili - /konusmastili - /kapat");
    SendClientMessage(playerid, COLOR_GREEN, "{BF3B2C}[DESTEK]:{C8C8C8} /sorusor - /rapor - /taleplerim - /helpers - /admins");
    SendClientMessage(playerid, COLOR_GREEN, "{BF3B2C}[DESTEK]:{C8C8C8} /factionyardim - /telsizyardim - /bankayardim - /balikyardim - /evyardim");
    SendClientMessage(playerid, COLOR_GREEN, "{BF3B2C}[DESTEK]:{C8C8C8} /isletmeyardim - /meslekyardim - /telefonyardim - /dekorasyonyardim");
    SendClientMessage(playerid, COLOR_GREEN, "{BF3B2C}[DESTEK]:{C8C8C8} /animasyonlar - /harita - /tanitim - /ozellik - /bak");
    SendClientMessage(playerid, COLOR_GREEN, "{BF3B2C}[ENVANTER]:{C8C8C8} /envanter - /yerdenal - /ustara - /paraver - /lisansgoster - /ver");
    SendClientMessage(playerid, COLOR_GREEN, "{BF3B2C}[ENVANTER]:{C8C8C8} /maske - /zar - /sigara - /yazitura - /anahtar - /tepsi - /aksesuar");
    SendClientMessage(playerid, COLOR_GREEN, "{BF3B2C}[MESAJ]:{C8C8C8} /b - /cw - /low - /me - /ame - /do - /dolow - /w - /s - /f - /pm - /kapiyadogru");
    SendClientMessage(playerid, COLOR_GREEN, "{BF3B2C}[ARAÇ]:{C8C8C8} /arac - /kilitkir - /duzkontak - /motor - /kilit - /cezalarim - /asilahkullan - /araccikart - /cb");
    SendClientMessage(playerid, COLOR_GREEN, "{BF3B2C}[DÝÐER]:{C8C8C8} /gir - /cik - /id - /kabulet - /satinal - /gise - /cpsifirla");
    SendClientMessage(playerid, COLOR_GREEN, "{BF3B2C}[DÝÐER]:{C8C8C8} /kumar - /supporters - /saat");
    SendClientMessage(playerid, COLOR_GREEN, "____________________________________[YARDIM]_____________________________________");

    return 1;
}
CMD:telefonyardim(playerid, params[])
{
    SunucuMesaji(playerid, "Telefon> /telefon - /hoparlor - /ara - /sms - /rehber - /cevapla - /tkap - /kulube");
    SunucuMesaji(playerid, "Polis/Saðlýk/Ýtfaiye: 911 - Tamirci: 555 - Taksi: 444");
	return 1;
}

CMD:telsizyardim(playerid, params[])return
    SunucuMesaji(playerid, "Telsiz> /frekans - /slot - /telsizgiris - (/t)elsiz - /ara %d");

CMD:donatoryardim(playerid, params[])return
    SunucuMesaji(playerid, "Donator> /bdurum - /pmdurum - /pmodak - /pmodakbitir");
CMD:envanteryardim(playerid, params[])
{
    KullanimMesaji(playerid, "/envanter komutu ile genel olarak envanterini yönetebilirsin.");
    return KullanimMesaji(playerid, "/envanteryerlestir ile de elindeki silahý envanterine koyabilirsin.");
}
CMD:soyun(playerid)
{
	if (!OyundaDegil(playerid)) return 1;
	if (PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || PlayerData[playerid][pSoklandi] > 0 || PlayerData[playerid][pYereYatirildi] > 0 || PlayerData[playerid][pBaygin] == 1 || PetKontrol[playerid] != -1 || pbOda[playerid] != -1)
 	return HataMesajGonder(playerid, "Þu an bu komutu kullanamazsiniz.");
 	if (PlayerData[playerid][pSoyun] == true)
 	{
 	    PlayerData[playerid][pSoyun] = false;
 	    SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);
 	    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s kiyafetlerini giyinir.", ReturnName(playerid, 0));
 	}
 	else
 	{
 	    if (PlayerData[playerid][pCinsiyet] == 1) Dialog_Show(playerid, Soyun, DIALOG_STYLE_PREVMODEL, "Skinler", "18\n45\n97\n154", "Sec", "Kapat");
 	    else Dialog_Show(playerid, Soyun, DIALOG_STYLE_PREVMODEL, "Skinler", "138\n139\n140\n20024\n20026\n20069\n20070", "Sec", "Kapat");

 	}
	return 1;
}

CMD:yduty(playerid)
{
    if (!OyundaDegil(playerid)) return 1;
    if (PlayerData[playerid][pYoutuber] != 1) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
    if (PlayerData[playerid][pYoutuberTag] == false)
    {
        PlayerData[playerid][pYoutuberTag] = true;
        MesajGonder(playerid, "Youtuber & Streamer tagý açýldý.");
    }
    else
    {
        PlayerData[playerid][pYoutuberTag] = false;
        MesajGonder(playerid, "Youtuber & Streamer tagý kapatýldý.");
    }
	return 1;
}
CMD:beanbag(playerid)
{
    if (!OyundaDegil(playerid)) return 1;
    if (GetFactionType(playerid) != BIRLIK_LSPD) return HataMesajGonder(playerid, "Devlet memuru degilsin.");
    if (!IsPlayerInAnyVehicle(playerid)) return HataMesajGonder(playerid, "Polis aracinda degilsin!");
    new vehicleid = GetPlayerVehicleID(playerid);
    new id = Car_GetID(vehicleid);
    if (id == -1 || AracInfo[id][aracFactionType] != BIRLIK_LSPD) return HataMesajGonder(playerid, "Polis aracinda degilsin!");
    if (!PlayerData[playerid][pBeanbag])
    {
        if (Beanbag[vehicleid] != 1) return HataMesajGonder(playerid, "Bu araçta Beanbag yok.");
        PlayerData[playerid][pBeanbag] = 1;
        SaveWeapons(playerid);
        Beanbag[vehicleid] = 0;
        GivePlayerWeapon(playerid, 25, 100);
        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s aracin orta panelinden beanbag tüfegini eline alir.", ReturnName(playerid, 0));
    }
    else
    {
        if (Beanbag[vehicleid] != 0) return HataMesajGonder(playerid, "Bu araçta zaten Beanbag var.");
        ResetPlayerWeapons(playerid);
        PlayerData[playerid][pBeanbag] = 0;
        SetWeapons(playerid);
        Beanbag[vehicleid] = 1;
        SetPlayerArmedWeapon(playerid, 0);
       	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s beanbag tüfegini aracin orta paneline yerlestirir.", ReturnName(playerid, 0));
    }
	return 1;
}

CMD:ck(playerid)
{
    if (!OyundaDegil(playerid)) return 1;
    if (PlayerData[playerid][pHapisSure] > 0 && PlayerData[playerid][pCK] == 1) return HataMesajGonder(playerid, "Karakteriniz zaten CK edilmis.");
    Dialog_Show(playerid, ckonay, DIALOG_STYLE_MSGBOX, "Character Kill Onay", "Karakterinizi öldürmek istediginize emin misiniz? Eger karakterinizi CK ederseniz, isim Degistirme Hakki satin almadiginiz sürece\nkarakteriniz sinirsiz olarak mühürlenir ve bu karakterde rol yapamazsiniz.", "Onayla", "Kapat");
	return 1;
}

CMD:ckunjail(playerid, params[])
{
	new id;
	if (PlayerData[playerid][pAdmin] < 5) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
	if (sscanf(params, "u", id)) return KullanimMesaji(playerid, "/ckunjail [ID/Isim]");
	if (!OyundaDegil(id)) return HataMesajGonder(playerid, "Oyuncu oyunda degil.");
	if (PlayerData[id][pCK] == 0) return HataMesajGonder(playerid, "Bu karakter CK edilmemis.");
	format(PlayerData[id][pHapisSebep], 50, "");
	PlayerData[id][pCK] = 0;
	PlayerData[id][pHapisSure] = 1;

    MesajGonder(playerid, "%s adli oyuncuyu hapisten çikarttiniz.", ReturnName(id, 0));
    SunucuMesaji(id, "%s adli yetkili sizi hapisten çikartti.", PlayerData[playerid][pAdminName]);

    Log_Write("logs/jail_log.txt", "[%s] %s adli yetkili %s adli oyuncuyu hapisten cikartti. (CK unjail)", ReturnDate(), PlayerData[playerid][pAdminName], ReturnName(id, 0));
	return 1;
}

CMD:kupon(playerid)
{
    if (!OyundaDegil(playerid)) return 1;
    Dialog_Show(playerid, Kupon, DIALOG_STYLE_INPUT, "Kupon Kodu", "{FFFFFF}Lütfen kupon kodunu asagiya yazin:", "Devam", "Kapat");
	return 1;
}

CMD:envanter(playerid)
{
    if (!OyundaDegil(playerid)) return 1;
    if (PlayerData[playerid][pBaygin] > 0 || PlayerData[playerid][pKelepce] > 0 || PlayerData[playerid][pHapisSure] > 0 || pbOda[playerid] != -1 || PlayerData[playerid][pSoklandi] > 0 || PetKontrol[playerid] != -1 || GetPVarInt(playerid, "IpBaglandi") == 1) return HataMesajGonder(playerid, "Envanterinizi su an açamazsiniz.");
    Envanter_Goster(playerid);
	return 1;
}

// ------------------------ ADMIN KOMUTLARI ------------------------------------
stock SilahiVarmi(playerid)
{
	for (new i; i <13; i++)
	{
		if (PlayerData[playerid][pSilahlar][i] > 0)
		    return 1;
 	}
	return 0;
}

stock Envanter_Goster(playerid)
{
	new str[2500], esyasayisi;
	strcat(str, "{FFFFFF}Esya Adi\t{FFFFFF}Miktar\n");
	if (PlayerData[playerid][pSu] > 0) format(str, sizeof(str), "%s{FFFFFF}Su\t{FFFFFF}%d adet\n", str, PlayerData[playerid][pSu]), esyasayisi++;
	if (PlayerData[playerid][pTelefon] != -1) format(str, sizeof(str), "%s{FFFFFF}Telefon\t{FFFFFF}1 adet\n", str), esyasayisi++;
	if (PlayerData[playerid][pRadyo] > 0) format(str, sizeof(str), "%s{FFFFFF}Portatif Radyo\t{FFFFFF}1 adet\n", str), esyasayisi++;
	if (PlayerData[playerid][pEhliyet] != 0) format(str, sizeof(str), "%s{FFFFFF}Sürücü lisansý\t{FFFFFF}1 adet\n", str), esyasayisi++;
	if (PlayerData[playerid][pMotorEhliyet] != 0) format(str, sizeof(str), "%s{FFFFFF}Motor lisansý\t{FFFFFF}1 adet\n", str), esyasayisi++;
	if (PlayerData[playerid][pEsyalar][0] > 0) format(str, sizeof(str), "%s{FFFFFF}Zar\t{FFFFFF}1 adet\n", str), esyasayisi++;
	if (PlayerData[playerid][pEsyalar][1] > 0) format(str, sizeof(str), "%s{FFFFFF}Sigara\t{FFFFFF}%d adet\n", str, PlayerData[playerid][pEsyalar][1]), esyasayisi++;
	if (PlayerData[playerid][pEsyalar][2] > 0) format(str, sizeof(str), "%s{FFFFFF}Ýp\t{FFFFFF}%d adet\n", str, PlayerData[playerid][pEsyalar][2]), esyasayisi++;
	if (PlayerData[playerid][pEsyalar][3] > 0) format(str, sizeof(str), "%s{FFFFFF}Göz Baðý\t{FFFFFF}%d adet\n", str, PlayerData[playerid][pEsyalar][3]), esyasayisi++;
	if (PlayerData[playerid][pEsyalar][4] > 0) format(str, sizeof(str), "%s{FFFFFF}Maske\t{FFFFFF}1 adet\n", str), esyasayisi++;
	if (PlayerData[playerid][pEsyalar][5] > 0) format(str, sizeof(str), "%s{FFFFFF}Benzin Bidonu\t{FFFFFF}%d adet\n", str, PlayerData[playerid][pEsyalar][5]), esyasayisi++;
	if (PlayerData[playerid][pEsyalar][6] > 0) format(str, sizeof(str), "%s{FFFFFF}Barbekü\t{FFFFFF}1 adet\n", str), esyasayisi++;
	if (PlayerData[playerid][pEsyalar][7] > 0) format(str, sizeof(str), "%s{FFFFFF}Köfte\t{FFFFFF}%d adet\n", str, PlayerData[playerid][pEsyalar][7]), esyasayisi++;
	if (PlayerData[playerid][pEsyalar][8] > 0) format(str, sizeof(str), "%s{FFFFFF}Tavuk Eti\t{FFFFFF}%d adet\n", str, PlayerData[playerid][pEsyalar][8]), esyasayisi++;
	if (PlayerData[playerid][pEsyalar][9] > 0) format(str, sizeof(str), "%s{FFFFFF}Dana Eti\t{FFFFFF}%d adet\n", str, PlayerData[playerid][pEsyalar][9]), esyasayisi++;
	if (PlayerData[playerid][pEsyalar][10] > 0) format(str, sizeof(str), "%s{FFFFFF}Tamir Kiti\t{FFFFFF}%d adet\n", str, PlayerData[playerid][pEsyalar][10]), esyasayisi++;
	if (PlayerData[playerid][pEsyalar][11] > 0) format(str, sizeof(str), "%s{FFFFFF}Portatif Çadýr\t{FFFFFF}1 adet\n", str), esyasayisi++;
	if (PlayerData[playerid][pEsyalar][12] > 0) format(str, sizeof(str), "%s{FFFFFF}Kamp Ateþi\t{FFFFFF}1 adet\n", str), esyasayisi++;
	if (PlayerData[playerid][pEsyalar][13] > 0) format(str, sizeof(str), "%s{FFFFFF}Þarjör\t{FFFFFF}1 adet\n", str), esyasayisi++;

	if(SilahiVarmi(playerid) == 1)
		format(str, sizeof(str), "%s{FFFFFF}Silah Envanteri", str);

	if (!esyasayisi && SilahiVarmi(playerid) == 0) return HataMesajGonder(playerid, "Envanteriniz boþ.");
	Dialog_Show(playerid, Envanter, DIALOG_STYLE_TABLIST_HEADERS, "{E74C3C}Envanter", str, "Seç", "Kapat");
	return 1;
}

Dialog:Envanter(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(strfind(inputtext, "Silah Envanteri", true) != -1)
		{
			OyuncuSilahlar(playerid);
		}else{
		    new baslik[60];
		    format(EsyaAdi[playerid], 30, inputtext);
		    format(baslik, sizeof(baslik), "{E74C3C}Eþya: {FFFFFF}%s", inputtext);
		    Dialog_Show(playerid, EnvanterEtkilesim, DIALOG_STYLE_LIST, baslik, "{AFAFAF}> {FFFFFF}Eþyayý Kullan\n{AFAFAF}> {FFFFFF}Eþyayi Baþkasýna Ver", "Seç", "Geri");
		}
	}
	return 1;
}
Dialog:EnvanterEtkilesim(playerid, response, listitem, inputtext[])
{
	if (!response) return Envanter_Goster(playerid);
	if (response)
	{
	    if (listitem == 0)
	    {
	        if (strcmp(EsyaAdi[playerid], "Su", true) == 0)
	        {
	            cmd_su(playerid);
	        }
	        else if (strcmp(EsyaAdi[playerid], "Telefon", true) == 0)
	        {
	            cmd_telefon(playerid);
	        }
	        else if (strcmp(EsyaAdi[playerid], "Portatif Radyo", true) == 0)
	        {
	            cmd_pr(playerid, "");
	        }
	        else if (strcmp(EsyaAdi[playerid], "Zar", true) == 0)
	        {
	            cmd_zarat(playerid);
	        }
	        else if (strcmp(EsyaAdi[playerid], "Sigara", true) == 0)
	        {
	            cmd_sigara(playerid);
	        }
	        else if (strcmp(EsyaAdi[playerid], "ip", true) == 0)
	        {
	            cmd_ipbagla(playerid, "");
	        }
	        else if (strcmp(EsyaAdi[playerid], "Göz Bagi", true) == 0)
	        {
	            cmd_gozbagla(playerid, "");
	        }
	        else if (strcmp(EsyaAdi[playerid], "Maske", true) == 0)
	        {
	            cmd_maske(playerid);
	        }
	        else if (strcmp(EsyaAdi[playerid], "Benzin Bidonu", true) == 0)
	        {
	            cmd_benzinkutusu(playerid);
	        }
	        else if (strcmp(EsyaAdi[playerid], "Barbekü", true) == 0)
	        {
	            cmd_barbeku(playerid, "koy");
	        }
	        else if (strcmp(EsyaAdi[playerid], "Tamir Kiti", true) == 0)
	        {
	            cmd_tamirkiti(playerid);
	        }
	        else if (strcmp(EsyaAdi[playerid], "Portatif Çadir", true) == 0)
	        {
	            cmd_cadir(playerid, "koy");
	        }
	        else if (strcmp(EsyaAdi[playerid], "Kamp Atesi", true) == 0)
	        {
	            cmd_kampatesi(playerid);
	        }
	        else if (strcmp(EsyaAdi[playerid], "sarjör", true) == 0)
	        {
	            OyuncuSilahlar(playerid);
	        }
	        else if (strcmp(EsyaAdi[playerid], "Sürücü lisansi", true) == 0)
	        {
	            cmd_envanter(playerid);
	        }
	        else if (strcmp(EsyaAdi[playerid], "Motor lisansi", true) == 0)
	        {
	            cmd_envanter(playerid);
	        }
	    }
		if (listitem == 1)
		{
		    if (strcmp(EsyaAdi[playerid], "Telefon", true) == 0 || strcmp(EsyaAdi[playerid], "Portatif Radyo", true) == 0 || strcmp(EsyaAdi[playerid], "Sürücü lisansi", true) == 0 || strcmp(EsyaAdi[playerid], "Motor lisansi", true) == 0) return HataMesajGonder(playerid, "Bu esya baskasina verilemez.");
		    Dialog_Show(playerid, EsyaVerID, DIALOG_STYLE_INPUT, "Esya Ver", "{FFFFFF}Lütfen esyayi vermek istediginiz oyuncunun ID'sini girin:", "Devam", "Kapat");
		}
		if (listitem == 15)
		{
			OyuncuSilahlar(playerid);
		}
	}
	return 1;
}
Dialog:EsyaVer(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = GetPVarInt(playerid, "EsyaVerID");
	    if (!OyundaDegil(id) || !IsPlayerNearPlayer(playerid, id, 5.0)) return 1;
	    if (isnull(inputtext)) return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Esya Ver", "{FFFFFF}Lütfen vermek istediginiz miktari girin:", "Ver", "Kapat");
	    if (!IsNumeric(inputtext)) return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Esya Ver", "{FFFFFF}Lütfen vermek istediginiz miktari girin:", "Ver", "Kapat");
	    if (strval(inputtext) < 1 || strval(inputtext) > 5)
	    {
	        HataMesajGonder(playerid, "En az 1, en fazla 5 girebilirsiniz.");
	        return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Esya Ver", "{FFFFFF}Lütfen vermek istediginiz miktari girin:", "Ver", "Kapat");
	    }
	    new miktar = strval(inputtext);
	    if (strcmp(EsyaAdi[playerid], "Su", true) == 0)
	    {
	        if (miktar > PlayerData[playerid][pSu])
	        {
	            HataMesajGonder(playerid, "Envanterinizde o kadar su yok.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Esya Ver", "{FFFFFF}Lütfen vermek istediginiz miktari girin:", "Ver", "Kapat");
	        }
	        if (PlayerData[id][pSu] + miktar > 5)
	        {
	            HataMesajGonder(playerid, "Kisi envanterinde en fazla 5 su tasiyabilir.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Esya Ver", "{FFFFFF}Lütfen vermek istediginiz miktari girin:", "Ver", "Kapat");
	        }
	        PlayerData[playerid][pSu] -= miktar;
	        PlayerData[id][pSu] += miktar;
	        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s %s adli kisiye %d su verir.", ReturnName(playerid, 0), ReturnName(id, 0), miktar);
	        MesajGonder(playerid, "%s adli kisiye %d su verdiniz.", ReturnName(id, 0), miktar);
	        MesajGonder(id, "%s adli kisi size %d su verdi.", ReturnName(playerid, 0), miktar);
	    }
	    else if (strcmp(EsyaAdi[playerid], "Zar", true) == 0)
	    {
	        if (miktar > PlayerData[playerid][pEsyalar][0])
	        {
	            HataMesajGonder(playerid, "O kadar zariniz yok.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Esya Ver", "{FFFFFF}Lütfen vermek istediginiz miktari girin:", "Ver", "Kapat");
	        }
	        new idd[3];
	        format(idd, sizeof(idd), "%d", id);
	        cmd_zarver(playerid, idd);
	    }
	    else if (strcmp(EsyaAdi[playerid], "Sigara", true) == 0)
	    {
	        if (miktar > PlayerData[playerid][pEsyalar][1])
	        {
	            HataMesajGonder(playerid, "Envanterinizde o kadar sigara yok.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Esya Ver", "{FFFFFF}Lütfen vermek istediginiz miktari girin:", "Ver", "Kapat");
	        }
	        if (PlayerData[id][pEsyalar][1] + miktar > 5)
	        {
	            HataMesajGonder(playerid, "Kisi envanterinde en fazla 5 sigara tasiyabilir.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Esya Ver", "{FFFFFF}Lütfen vermek istediginiz miktari girin:", "Ver", "Kapat");
	        }
	        PlayerData[playerid][pEsyalar][1] -= miktar;
	        PlayerData[id][pEsyalar][1] += miktar;
	        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s %s adli kisiye %d sigara verir.", ReturnName(playerid, 0), ReturnName(id, 0), miktar);
	        MesajGonder(playerid, "%s adli kisiye %d sigara verdiniz.", ReturnName(id, 0), miktar);
	        MesajGonder(id, "%s adli kisi size %d sigara verdi.", ReturnName(playerid, 0), miktar);
	    }
	    else if (strcmp(EsyaAdi[playerid], "ip", true) == 0)
	    {
	        if (miktar > PlayerData[playerid][pEsyalar][2])
	        {
	            HataMesajGonder(playerid, "Envanterinizde o kadar ip yok.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Esya Ver", "{FFFFFF}Lütfen vermek istediginiz miktari girin:", "Ver", "Kapat");
	        }
	        if (PlayerData[id][pEsyalar][2] + miktar > 2)
	        {
	            HataMesajGonder(playerid, "Kisi envanterinde en fazla 2 ip tasiyabilir.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Esya Ver", "{FFFFFF}Lütfen vermek istediginiz miktari girin:", "Ver", "Kapat");
	        }
	        PlayerData[playerid][pEsyalar][2] -= miktar;
	        PlayerData[id][pEsyalar][2] += miktar;
	        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s %s adli kisiye %d ip verir.", ReturnName(playerid, 0), ReturnName(id, 0), miktar);
	        MesajGonder(playerid, "%s adli kisiye %d ip verdiniz.", ReturnName(id, 0), miktar);
	        MesajGonder(id, "%s adli kisi size %d ip verdi.", ReturnName(playerid, 0), miktar);
	    }
	    else if (strcmp(EsyaAdi[playerid], "Göz Bagi", true) == 0)
	    {
	        if (miktar > PlayerData[playerid][pEsyalar][3])
	        {
	            HataMesajGonder(playerid, "Envanterinizde o kadar göz bagi yok.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Esya Ver", "{FFFFFF}Lütfen vermek istediginiz miktari girin:", "Ver", "Kapat");
	        }
	        if (PlayerData[id][pEsyalar][3] + miktar > 2)
	        {
	            HataMesajGonder(playerid, "Kisi envanterinde en fazla 2 göz bagi tasiyabilir.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Esya Ver", "{FFFFFF}Lütfen vermek istediginiz miktari girin:", "Ver", "Kapat");
	        }
	        PlayerData[playerid][pEsyalar][3] -= miktar;
	        PlayerData[id][pEsyalar][3] += miktar;
	        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s %s adli kisiye %d göz bagi verir.", ReturnName(playerid, 0), ReturnName(id, 0), miktar);
	        MesajGonder(playerid, "%s adli kisiye %d göz bagi verdiniz.", ReturnName(id, 0), miktar);
	        MesajGonder(id, "%s adli kisi size %d göz bagi verdi.", ReturnName(playerid, 0), miktar);
	    }
	    else if (strcmp(EsyaAdi[playerid], "Maske", true) == 0)
	    {
	        if (miktar > PlayerData[playerid][pEsyalar][4])
	        {
	            HataMesajGonder(playerid, "Envanterinizde o kadar maske yok.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Esya Ver", "{FFFFFF}Lütfen vermek istediginiz miktari girin:", "Ver", "Kapat");
	        }
	        if (PlayerData[id][pEsyalar][4] != 0)
	        {
	            HataMesajGonder(playerid, "Bu kisinin zaten maskesi var.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Esya Ver", "{FFFFFF}Lütfen vermek istediginiz miktari girin:", "Ver", "Kapat");
	        }
	        PlayerData[playerid][pEsyalar][4] = 0;
	        PlayerData[id][pEsyalar][3] = 1;
	        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s %s adli kisiye maske verir.", ReturnName(playerid, 0), ReturnName(id, 0));
	        MesajGonder(playerid, "%s adli kisiye maske verdiniz.", ReturnName(id, 0));
	        MesajGonder(id, "%s adli kisi size maske verdi.", ReturnName(playerid, 0));
	    }
	    else if (strcmp(EsyaAdi[playerid], "Benzin Bidonu", true) == 0)
	    {
	        if (miktar > PlayerData[playerid][pEsyalar][5])
	        {
	            HataMesajGonder(playerid, "Envanterinizde o kadar benzin bidonu yok.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Esya Ver", "{FFFFFF}Lütfen vermek istediginiz miktari girin:", "Ver", "Kapat");
	        }
	        if (PlayerData[id][pEsyalar][5] + miktar > 3)
	        {
	            HataMesajGonder(playerid, "Kisi envanterinde en fazla 3 benzin bidonu tasiyabilir.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Esya Ver", "{FFFFFF}Lütfen vermek istediginiz miktari girin:", "Ver", "Kapat");
	        }
	        PlayerData[playerid][pEsyalar][5] -= miktar;
	        PlayerData[id][pEsyalar][5] += miktar;
	        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s %s adli kisiye %d benzin bidonu verir.", ReturnName(playerid, 0), ReturnName(id, 0), miktar);
	        MesajGonder(playerid, "%s adli kisiye %d benzin bidonu verdiniz.", ReturnName(id, 0), miktar);
	        MesajGonder(id, "%s adli kisi size %d benzin bidonu verdi.", ReturnName(playerid, 0), miktar);
	    }
	    else if (strcmp(EsyaAdi[playerid], "Barbekü", true) == 0)
	    {
	        if (miktar > PlayerData[playerid][pEsyalar][6])
	        {
	            HataMesajGonder(playerid, "Envanterinizde o kadar barbekü yok.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Esya Ver", "{FFFFFF}Lütfen vermek istediginiz miktari girin:", "Ver", "Kapat");
	        }
	        if (PlayerData[id][pEsyalar][6] != 0)
	        {
	            HataMesajGonder(playerid, "Bu kisinin zaten barbekü adli esyasi var.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Esya Ver", "{FFFFFF}Lütfen vermek istediginiz miktari girin:", "Ver", "Kapat");
	        }
	        PlayerData[playerid][pEsyalar][6] = 0;
	        PlayerData[id][pEsyalar][6] = 1;
	        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s %s adli kisiye barbekü verir.", ReturnName(playerid, 0), ReturnName(id, 0));
	        MesajGonder(playerid, "%s adli kisiye barbekü verdiniz.", ReturnName(id, 0));
	        MesajGonder(id, "%s adli kisi size barbekü verdi.", ReturnName(playerid, 0));
	    }
	    else if (strcmp(EsyaAdi[playerid], "Barbekü", true) == 0)
	    {
	        if (miktar > PlayerData[playerid][pEsyalar][6])
	        {
	            HataMesajGonder(playerid, "Envanterinizde o kadar barbekü yok.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Esya Ver", "{FFFFFF}Lütfen vermek istediginiz miktari girin:", "Ver", "Kapat");
	        }
	        if (PlayerData[id][pEsyalar][6] != 0)
	        {
	            HataMesajGonder(playerid, "Bu kisinin zaten barbekü adli esyasi var.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Esya Ver", "{FFFFFF}Lütfen vermek istediginiz miktari girin:", "Ver", "Kapat");
	        }
	        PlayerData[playerid][pEsyalar][6] = 0;
	        PlayerData[id][pEsyalar][6] = 1;
	        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s %s adli kisiye barbekü verir.", ReturnName(playerid, 0), ReturnName(id, 0));
	        MesajGonder(playerid, "%s adli kisiye barbekü verdiniz.", ReturnName(id, 0));
	        MesajGonder(id, "%s adli kisi size barbekü verdi.", ReturnName(playerid, 0));
	    }
	    else if (strcmp(EsyaAdi[playerid], "Köfte", true) == 0)
	    {
	        if (miktar > PlayerData[playerid][pEsyalar][7])
	        {
	            HataMesajGonder(playerid, "Envanterinizde o kadar köfte yok.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Esya Ver", "{FFFFFF}Lütfen vermek istediginiz miktari girin:", "Ver", "Kapat");
	        }
	        if (PlayerData[id][pEsyalar][7] + miktar > 5)
	        {
	            HataMesajGonder(playerid, "Kisi envanterinde en fazla 5 köfte tasiyabilir.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Esya Ver", "{FFFFFF}Lütfen vermek istediginiz miktari girin:", "Ver", "Kapat");
	        }
	        PlayerData[playerid][pEsyalar][7] -= miktar;
	        PlayerData[id][pEsyalar][7] += miktar;
	        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s %s adli kisiye %d köfte verir.", ReturnName(playerid, 0), ReturnName(id, 0), miktar);
	        MesajGonder(playerid, "%s adli kisiye %d köfte verdiniz.", ReturnName(id, 0), miktar);
	        MesajGonder(id, "%s adli kisi size %d köfte verdi.", ReturnName(playerid, 0), miktar);
	    }
	    else if (strcmp(EsyaAdi[playerid], "Tavuk Eti", true) == 0)
	    {
	        if (miktar > PlayerData[playerid][pEsyalar][8])
	        {
	            HataMesajGonder(playerid, "Envanterinizde o kadar tavuk eti yok.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Esya Ver", "{FFFFFF}Lütfen vermek istediginiz miktari girin:", "Ver", "Kapat");
	        }
	        if (PlayerData[id][pEsyalar][8] + miktar > 5)
	        {
	            HataMesajGonder(playerid, "Kisi envanterinde en fazla 5 tavuk eti tasiyabilir.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Esya Ver", "{FFFFFF}Lütfen vermek istediginiz miktari girin:", "Ver", "Kapat");
	        }
	        PlayerData[playerid][pEsyalar][8] -= miktar;
	        PlayerData[id][pEsyalar][8] += miktar;
	        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s %s adli kisiye %d tavuk eti verir.", ReturnName(playerid, 0), ReturnName(id, 0), miktar);
	        MesajGonder(playerid, "%s adli kisiye %d tavuk eti verdiniz.", ReturnName(id, 0), miktar);
	        MesajGonder(id, "%s adli kisi size %d tavuk eti verdi.", ReturnName(playerid, 0), miktar);
	    }
	    else if (strcmp(EsyaAdi[playerid], "Dana Eti", true) == 0)
	    {
	        if (miktar > PlayerData[playerid][pEsyalar][9])
	        {
	            HataMesajGonder(playerid, "Envanterinizde o kadar dana eti yok.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Esya Ver", "{FFFFFF}Lütfen vermek istediginiz miktari girin:", "Ver", "Kapat");
	        }
	        if (PlayerData[id][pEsyalar][9] + miktar > 5)
	        {
	            HataMesajGonder(playerid, "Kisi envanterinde en fazla 5 dana eti tasiyabilir.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Esya Ver", "{FFFFFF}Lütfen vermek istediginiz miktari girin:", "Ver", "Kapat");
	        }
	        PlayerData[playerid][pEsyalar][9] -= miktar;
	        PlayerData[id][pEsyalar][9] += miktar;
	        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s %s adli kisiye %d dana eti verir.", ReturnName(playerid, 0), ReturnName(id, 0), miktar);
	        MesajGonder(playerid, "%s adli kisiye %d dana eti verdiniz.", ReturnName(id, 0), miktar);
	        MesajGonder(id, "%s adli kisi size %d dana eti verdi.", ReturnName(playerid, 0), miktar);
	    }
	    else if (strcmp(EsyaAdi[playerid], "Tamir Kiti", true) == 0)
	    {
	        if (miktar > PlayerData[playerid][pEsyalar][10])
	        {
	            HataMesajGonder(playerid, "Envanterinizde o kadar tamir kiti yok.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Esya Ver", "{FFFFFF}Lütfen vermek istediginiz miktari girin:", "Ver", "Kapat");
	        }
	        if (PlayerData[id][pEsyalar][10] + miktar > 3)
	        {
	            HataMesajGonder(playerid, "Kisi envanterinde en fazla 3 tamir kiti tasiyabilir.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Esya Ver", "{FFFFFF}Lütfen vermek istediginiz miktari girin:", "Ver", "Kapat");
	        }
	        PlayerData[playerid][pEsyalar][10] -= miktar;
	        PlayerData[id][pEsyalar][10] += miktar;
	        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s %s adli kisiye %d tamir kiti verir.", ReturnName(playerid, 0), ReturnName(id, 0), miktar);
	        MesajGonder(playerid, "%s adli kisiye %d tamir kiti verdiniz.", ReturnName(id, 0), miktar);
	        MesajGonder(id, "%s adli kisi size %d tamir kiti verdi.", ReturnName(playerid, 0), miktar);
	    }
	    else if (strcmp(EsyaAdi[playerid], "Portatif Çadir", true) == 0)
	    {
	        if (miktar > PlayerData[playerid][pEsyalar][11])
	        {
	            HataMesajGonder(playerid, "Envanterinizde o kadar portatif çadir yok.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Esya Ver", "{FFFFFF}Lütfen vermek istediginiz miktari girin:", "Ver", "Kapat");
	        }
	        if (PlayerData[id][pEsyalar][11] + miktar > 1)
	        {
	            HataMesajGonder(playerid, "Kisi envanterinde en fazla 1 portatif çadir tasiyabilir.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Esya Ver", "{FFFFFF}Lütfen vermek istediginiz miktari girin:", "Ver", "Kapat");
	        }
	        PlayerData[playerid][pEsyalar][11] -= miktar;
	        PlayerData[id][pEsyalar][11] += miktar;
	        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s %s adli kisiye Portatif çadir verir.", ReturnName(playerid, 0), ReturnName(id, 0));
	        MesajGonder(playerid, "%s adli kisiye Portatif Çadir verdiniz.", ReturnName(id, 0));
	        MesajGonder(id, "%s adli kisi size Portatif Çadir verdi.", ReturnName(playerid, 0));
	    }
	    else if (strcmp(EsyaAdi[playerid], "Kamp Atesi", true) == 0)
	    {
	        if (miktar > PlayerData[playerid][pEsyalar][12])
	        {
	            HataMesajGonder(playerid, "Envanterinizde o kadar kamp atesi yok.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Esya Ver", "{FFFFFF}Lütfen vermek istediginiz miktari girin:", "Ver", "Kapat");
	        }
	        if (PlayerData[id][pEsyalar][12] + miktar > 1)
	        {
	            HataMesajGonder(playerid, "Kisi envanterinde en fazla 1 kamp atesi tasiyabilir.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Esya Ver", "{FFFFFF}Lütfen vermek istediginiz miktari girin:", "Ver", "Kapat");
	        }
	        PlayerData[playerid][pEsyalar][12] -= miktar;
	        PlayerData[id][pEsyalar][12] += miktar;
	        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s %s adli kisiye Kamp Atesi verir.", ReturnName(playerid, 0), ReturnName(id, 0));
	        MesajGonder(playerid, "%s adli kisiye kamp atesi verdiniz.", ReturnName(id, 0));
	        MesajGonder(id, "%s adli kisi size kamp atesi verdi.", ReturnName(playerid, 0));
	    }
	    else if (strcmp(EsyaAdi[playerid], "sarjör", true) == 0)
	    {
	        if (miktar > PlayerData[playerid][pEsyalar][13])
	        {
	            HataMesajGonder(playerid, "Envanterinizde o kadar sarjör yok.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Esya Ver", "{FFFFFF}Lütfen vermek istediginiz miktari girin:", "Ver", "Kapat");
	        }
	        if (PlayerData[id][pEsyalar][13] + miktar > 1)
	        {
	            HataMesajGonder(playerid, "Kisi envanterinde en fazla 1 sarjör tasiyabilir.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Esya Ver", "{FFFFFF}Lütfen vermek istediginiz miktari girin:", "Ver", "Kapat");
	        }
	        new idd[3];
	        format(idd, sizeof(idd), "%d", id);
	        cmd_sarjorver(playerid, idd);
	    }
	    /*else if (strcmp(EsyaAdi[playerid], "Yan Keski", true) == 0)
	    {
	        if (miktar > PlayerData[playerid][pEsyalar][14])
	        {
	            HataMesajGonder(playerid, "Envanterinizde o kadar yan keski yok.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Esya Ver", "{FFFFFF}Lütfen vermek istediginiz miktari girin:", "Ver", "Kapat");
	        }
	        if (PlayerData[id][pEsyalar][14] + miktar > 1)
	        {
	            HataMesajGonder(playerid, "Kisi envanterinde en fazla 1 yan keski tasiyabilir.");
	            return Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Esya Ver", "{FFFFFF}Lütfen vermek istediginiz miktari girin:", "Ver", "Kapat");
	        }
	        PlayerData[playerid][pEsyalar][14] = 0;
	        PlayerData[id][pEsyalar][14] = 1;
	        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s %s adli kisiye Yan Keski verir.", ReturnName(playerid, 0), ReturnName(id, 0));
	        MesajGonder(playerid, "%s adli kisiye yan keski verdiniz.", ReturnName(id, 0));
	        MesajGonder(id, "%s adli kisi size yan keski verdi.", ReturnName(playerid, 0));
	    }*/
	}
	return 1;
}
Dialog:EsyaVerID(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (isnull(inputtext)) return Dialog_Show(playerid, EsyaVerID, DIALOG_STYLE_INPUT, "Esya Ver", "{FFFFFF}Lütfen esyayi vermek istediginiz oyuncunun ID'sini girin:", "Devam", "Kapat");
	    if (!IsNumeric(inputtext)) return Dialog_Show(playerid, EsyaVerID, DIALOG_STYLE_INPUT, "Esya Ver", "{FFFFFF}Lütfen esyayi vermek istediginiz oyuncunun ID'sini girin:", "Devam", "Kapat");
	    new id = strval(inputtext);
	    if (!OyundaDegil(id))
	    {
	        HataMesajGonder(playerid, "Geçersiz ID girdiniz.");
	        return Dialog_Show(playerid, EsyaVerID, DIALOG_STYLE_INPUT, "Esya Ver", "{FFFFFF}Lütfen esyayi vermek istediginiz oyuncunun ID'sini girin:", "Devam", "Kapat");
	    }
	    if (!IsPlayerNearPlayer(playerid, id, 5.0))
	    {
	        HataMesajGonder(playerid, "Kisiye yeterince yakin degilsiniz.");
	        return Dialog_Show(playerid, EsyaVerID, DIALOG_STYLE_INPUT, "Esya Ver", "{FFFFFF}Lütfen esyayi vermek istediginiz oyuncunun ID'sini girin:", "Devam", "Kapat");
	    }
	    if (id == playerid)
	    {
	        HataMesajGonder(playerid, "Kendi kendinize esya veremezsiniz.");
	        return Dialog_Show(playerid, EsyaVerID, DIALOG_STYLE_INPUT, "Esya Ver", "{FFFFFF}Lütfen esyayi vermek istediginiz oyuncunun ID'sini girin:", "Devam", "Kapat");
	    }
	    SetPVarInt(playerid, "EsyaVerID", id);
	    Dialog_Show(playerid, EsyaVer, DIALOG_STYLE_INPUT, "Esya Ver", "{FFFFFF}Lütfen vermek istediginiz miktari girin:", "Ver", "Kapat");
	}
	return 1;
}

stock AracKiraladi(playerid)
{
	for (new i; i < MAX_ARAC; i++)
	{
		if (AracInfo[i][aracExists] && AracInfo[i][aracTip] == 3 && AracInfo[i][aracKiralayan] == PlayerData[playerid][pID])
			return 1;
	}
	return 0;
}

stock Kiralik_Araci(playerid)
{
	for (new i = 0; i < MAX_ARAC; i++)
	{
	    if (AracInfo[i][aracExists])
	    {
	        if (AracInfo[i][aracTip] == 3 && AracInfo[i][aracKiralayan] == PlayerData[playerid][pID])
	            return AracInfo[i][aracID];
	    }
	}
	return -1;
}

stock Arsa_Sil(id)
{
	ArsaBilgi[id][arsaExists] = 0;
	ArsaBilgi[id][arsaSahip] = -1;
	ArsaBilgi[id][arsaTip] = 0;
	ArsaBilgi[id][arsaFiyat] = 0;
	ArsaBilgi[id][KiraSure] = 0;
	ArsaBilgi[id][arsaMaxTohum] = 0;
	ArsaBilgi[id][Metrekare] = 0;
	DestroyDynamicPickup(ArsaBilgi[id][arsaPickup]);
	DestroyDynamic3DTextLabel(ArsaBilgi[id][arsaLabel]);
	stmt_bind_value(RemoveArsa, 0, DB::TYPE_INTEGER, id);
	stmt_execute(RemoveArsa);
	for (new i; i<MAX_TOHUM; i++) if (Tohumlar[i][tohumArsa] == id)
	{
	    DestroyDynamicObject(Tohumlar[i][tohumObject]);
		DestroyDynamic3DTextLabel(Tohumlar[i][tohumLabel]);
		Tohumlar[i][tohumArsa] = -1;
  		Tohumlar[i][tohumTip] = 0;
  		Tohumlar[i][tohumBuyume] = 0;
    	Tohumlar[i][tohumPos][0] = Tohumlar[i][tohumPos][1] = Tohumlar[i][tohumPos][2] = 0.0;
	}
	return 1;
}
stock TohumUpdate(id)
{
	if (!IsValidDynamicObject(Tohumlar[id][tohumObject]))
	{
	    switch (Tohumlar[id][tohumBuyume])
	    {
	        case 0..19:
	        {
	            if (Tohumlar[id][tohumTip] != 4) Tohumlar[id][tohumObject] = CreateDynamicObject(19473, Tohumlar[id][tohumPos][0], Tohumlar[id][tohumPos][1], Tohumlar[id][tohumPos][2]-1, 0.0, 0.0, 0.0);
	            else Tohumlar[id][tohumObject] = CreateDynamicObject(2244, Tohumlar[id][tohumPos][0], Tohumlar[id][tohumPos][1], Tohumlar[id][tohumPos][2] - 0.70, 0.0, 0.0, 0.0);
	        }
	        case 20..39:
	        {
	            if (Tohumlar[id][tohumTip] != 4) Tohumlar[id][tohumObject] = CreateDynamicObject(681, Tohumlar[id][tohumPos][0], Tohumlar[id][tohumPos][1], Tohumlar[id][tohumPos][2]-1, 0.0, 0.0, 0.0);
	            else
	            {
	                Tohumlar[id][tohumObject] = CreateDynamicObject(2244, Tohumlar[id][tohumPos][0], Tohumlar[id][tohumPos][1], Tohumlar[id][tohumPos][2] - 0.70, 0.0, 0.0, 0.0);
	                SetDynamicObjectMaterial(Tohumlar[id][tohumObject], 2, 2, "plants_TABLETOP", "CJ_PLANT", 0xFF2ECC71);
	            }
	        }
	        case 40..60:
	        {
	            if (Tohumlar[id][tohumTip] != 4) Tohumlar[id][tohumObject] = CreateDynamicObject(737, Tohumlar[id][tohumPos][0], Tohumlar[id][tohumPos][1], Tohumlar[id][tohumPos][2]-1, 0.0, 0.0, 0.0);
	            else
	            {
	                Tohumlar[id][tohumObject] = CreateDynamicObject(2244, Tohumlar[id][tohumPos][0], Tohumlar[id][tohumPos][1], Tohumlar[id][tohumPos][2] - 0.70, 0.0, 0.0, 0.0);
	                SetDynamicObjectMaterial(Tohumlar[id][tohumObject], 2, 2, "plants_TABLETOP", "CJ_PLANT", 0xFFD35400);
	            }
	        }
	    }
	}
	new str[100], tohumtipi[15];
	switch (Tohumlar[id][tohumTip])
 	{
  		case 1: tohumtipi = "Portakal";
    	case 2: tohumtipi = "Elma";
     	case 3: tohumtipi = "Armut";
     	case 4: tohumtipi = "Uyusturucu";
  	}
	if (!IsValidDynamic3DTextLabel(Tohumlar[id][tohumLabel]))
	{
	    if (Tohumlar[id][tohumBuyume] >= 60)
	    {
	        format(str, sizeof(str), "{BBFFEE}%s\n{BBFFEE}Kalan: Bitti\n{BBFFEE}%s Sayisi: %d", tohumtipi, tohumtipi, Tohumlar[id][tohumSayi]);
	        Tohumlar[id][tohumLabel] = CreateDynamic3DTextLabel(str, -1, Tohumlar[id][tohumPos][0], Tohumlar[id][tohumPos][1], Tohumlar[id][tohumPos][2], 5.0);
	    }
	    else
	    {
	        format(str, sizeof(str), "{BBFFEE}%s\n{BBFFEE}Kalan: %d dakika", tohumtipi, 60-Tohumlar[id][tohumBuyume]);
	        Tohumlar[id][tohumLabel] = CreateDynamic3DTextLabel(str, -1, Tohumlar[id][tohumPos][0], Tohumlar[id][tohumPos][1], Tohumlar[id][tohumPos][2], 5.0);
	    }
	}
    if (Tohumlar[id][tohumBuyume] >= 60)
    {
    	format(str, sizeof(str), "{BBFFEE}%s\n{BBFFEE}Kalan: Bitti\n{BBFFEE}%s Sayisi: %d", tohumtipi, tohumtipi, Tohumlar[id][tohumSayi]);
    }
    else
    {
    	format(str, sizeof(str), "{BBFFEE}%s\n{BBFFEE}Kalan: %d dakika", tohumtipi, 60-Tohumlar[id][tohumBuyume]);
    }
    UpdateDynamic3DTextLabelText(Tohumlar[id][tohumLabel], -1, str);
	return 1;
}
stock Arsa_TohumSayisi(id)
{
	new sayi;
	for (new i; i<MAX_TOHUM; i++) if (Tohumlar[i][tohumArsa] == id)
	{
	    sayi++;
	}
	return sayi;
}
stock TohumKontrol(playerid)
{
	for (new i; i<MAX_TOHUM; i++) if (Tohumlar[i][tohumArsa] != -1 && IsPlayerInRangeOfPoint(playerid, 2.0, Tohumlar[i][tohumPos][0], Tohumlar[i][tohumPos][1], Tohumlar[i][tohumPos][2]))
	{
	    return i;
	}
	return -1;
}
stock ArsaNearest(playerid)
{
	for (new i; i<MAX_ARSA; i++) if (ArsaBilgi[i][arsaExists] && IsPlayerInRangeOfPoint(playerid, ArsaBilgi[i][Metrekare], ArsaBilgi[i][arsaPos][0], ArsaBilgi[i][arsaPos][1], ArsaBilgi[i][arsaPos][2]))
	{
	    return i;
	}
	return -1;
}
stock Arsa_Inside(playerid)
{
	for (new i; i<MAX_ARSA; i++) if (ArsaBilgi[i][arsaExists] && IsPlayerInRangeOfPoint(playerid, 2.5, ArsaBilgi[i][arsaPos][0], ArsaBilgi[i][arsaPos][1], ArsaBilgi[i][arsaPos][2]))
	{
	    return i;
	}
	return -1;
}
stock Arsa_Olustur(playerid, tip, metrekare, fiyat, maxtohum)
{
	for (new i; i<MAX_ARSA; i++) if (!ArsaBilgi[i][arsaExists])
	{
	    ArsaBilgi[i][arsaExists] = 1;
	    ArsaBilgi[i][arsaSahip] = -1;
	    ArsaBilgi[i][arsaTip] = tip;
	    GetPlayerPos(playerid, ArsaBilgi[i][arsaPos][0], ArsaBilgi[i][arsaPos][1], ArsaBilgi[i][arsaPos][2]);
	    ArsaBilgi[i][arsaFiyat] = fiyat;
	    ArsaBilgi[i][arsaMaxTohum] = maxtohum;
	    ArsaBilgi[i][Metrekare] = metrekare;
	    ArsaBilgi[i][KiraSure] = 0;
	    stmt_bind_value(AddArsa, 0, DB::TYPE_INTEGER, i);
		stmt_bind_value(AddArsa, 1, DB::TYPE_INTEGER, -1);
	    stmt_bind_value(AddArsa, 2, DB::TYPE_FLOAT, ArsaBilgi[i][arsaPos][0]);
	    stmt_bind_value(AddArsa, 3, DB::TYPE_FLOAT, ArsaBilgi[i][arsaPos][1]);
	    stmt_bind_value(AddArsa, 4, DB::TYPE_FLOAT, ArsaBilgi[i][arsaPos][2]);
	    stmt_bind_value(AddArsa, 5, DB::TYPE_INTEGER, tip);
	    stmt_bind_value(AddArsa, 6, DB::TYPE_INTEGER, fiyat);
	    stmt_bind_value(AddArsa, 7, DB::TYPE_INTEGER, 0);
	    stmt_bind_value(AddArsa, 8, DB::TYPE_INTEGER, metrekare);
	    stmt_bind_value(AddArsa, 9, DB::TYPE_INTEGER, maxtohum);
		ArsaUpdate(i);
	    if (stmt_execute(AddArsa)) return i;
	    else return -1;

	}
	return -1;
}
stock Arsa_Kaydet(id)
{
	stmt_bind_value(UpdateArsa, 0, DB::TYPE_INTEGER, ArsaBilgi[id][arsaSahip]);
	stmt_bind_value(UpdateArsa, 1, DB::TYPE_FLOAT, ArsaBilgi[id][arsaPos][0]);
	stmt_bind_value(UpdateArsa, 2, DB::TYPE_FLOAT, ArsaBilgi[id][arsaPos][1]);
	stmt_bind_value(UpdateArsa, 3, DB::TYPE_FLOAT, ArsaBilgi[id][arsaPos][2]);
	stmt_bind_value(UpdateArsa, 4, DB::TYPE_INTEGER, ArsaBilgi[id][arsaTip]);
	stmt_bind_value(UpdateArsa, 5, DB::TYPE_INTEGER, ArsaBilgi[id][arsaFiyat]);
	stmt_bind_value(UpdateArsa, 6, DB::TYPE_INTEGER, ArsaBilgi[id][KiraSure]);
	stmt_bind_value(UpdateArsa, 7, DB::TYPE_INTEGER, ArsaBilgi[id][Metrekare]);
	stmt_bind_value(UpdateArsa, 8, DB::TYPE_INTEGER, ArsaBilgi[id][arsaMaxTohum]);
	stmt_bind_value(UpdateArsa, 9, DB::TYPE_INTEGER, id);
	stmt_execute(UpdateArsa);
	return 1;
}
stock ArsaUpdate(id)
{
	if (!IsValidDynamic3DTextLabel(ArsaBilgi[id][arsaLabel]))
	{
	    ArsaBilgi[id][arsaLabel] = CreateDynamic3DTextLabel("Arsa", -1, ArsaBilgi[id][arsaPos][0], ArsaBilgi[id][arsaPos][1], ArsaBilgi[id][arsaPos][2], ArsaBilgi[id][Metrekare], INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
	}
	if (!IsValidDynamicPickup(ArsaBilgi[id][arsaPickup]))
	{
	    ArsaBilgi[id][arsaPickup] = CreateDynamicPickup(1239, 23, ArsaBilgi[id][arsaPos][0], ArsaBilgi[id][arsaPos][1], ArsaBilgi[id][arsaPos][2]);
	}
	new str[185];
	if (ArsaBilgi[id][arsaSahip] == -1)
	{
	    if (ArsaBilgi[id][arsaTip] == 1)
	    {
	        format(str, sizeof(str), "{00aeff}[Satilik Arsa (%d metrekare)]\n\n{E74C3C}Sahip: {FFFFFF}Yok\n{E74C3C}Fiyat: {FFFFFF}%s\n{E74C3C}Tohum Kapasitesi: {FFFFFF}%d\n{E74C3C}(/satinal)", ArsaBilgi[id][Metrekare], FormatNumber(ArsaBilgi[id][arsaFiyat]), ArsaBilgi[id][arsaMaxTohum]);
	    }
	    else
	    {
	        format(str, sizeof(str), "{00aeff}[Kiralik Arsa (%d metrekare)]\n\n{E74C3C}Kiralayan: {FFFFFF}Yok\n{E74C3C}Saatlik Ücret: {FFFFFF}%s\n{E74C3C}Tohum Kapasitesi: {FFFFFF}%d\n{E74C3C}(/arsakirala)", ArsaBilgi[id][Metrekare], FormatNumber(ArsaBilgi[id][arsaFiyat]), ArsaBilgi[id][arsaMaxTohum]);
	    }
	}
	else
	{
	    if (ArsaBilgi[id][arsaTip] == 1)
	    {
	        format(str, sizeof(str), "{00aeff}[Arsa (%d metrekare)]\n\n{E74C3C}Sahip: {FFFFFF}%s\n{E74C3C}Tohum Kapasitesi: {FFFFFF}%d", ArsaBilgi[id][Metrekare], SQLName(ArsaBilgi[id][arsaSahip], 0), ArsaBilgi[id][arsaMaxTohum]);
	    }
	    else
	    {
	        new secs = ArsaBilgi[id][KiraSure] - gettime();
	    	new kalansaat = floatround(secs / 3600);
	        format(str, sizeof(str), "{00aeff}[Kiralik Arsa (%d metrekare)]\n\n{E74C3C}Kiralayan: {FFFFFF}%s\n{E74C3C}Kalan: {FFFFFF}%d saat\n{E74C3C}Tohum Kapasitesi: {FFFFFF}%d", ArsaBilgi[id][Metrekare], SQLName(ArsaBilgi[id][arsaSahip], 0), kalansaat, ArsaBilgi[id][arsaMaxTohum]);
	    }
	}
	UpdateDynamic3DTextLabelText(ArsaBilgi[id][arsaLabel], -1, str);
	return 1;
}
Dialog:Kupon(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (isnull(inputtext)) return Dialog_Show(playerid, Kupon, DIALOG_STYLE_INPUT, "Kupon Kodu", "{FFFFFF}Lütfen kupon kodunu asagiya yazin:", "Devam", "Kapat");
	    new query[128];
		mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `kuponlar` WHERE `kod` = '%e'", inputtext);
		new Cache:Radless = mysql_query(g_SQL, query);
		if (cache_num_rows())
		{
			new para;
			cache_get_value_name_int(0, "para", para);

			ParaVer(playerid, para);
			mysql_format(g_SQL, query, sizeof(query), "DELETE FROM `kuponlar` WHERE `kod` = '%e'", inputtext);
			mysql_tquery(g_SQL, query);
			MesajGonder(playerid, "Kupon kodunu kullanarak %s kazandiniz.", FormatNumber(para));
		}
		else
		{
			HataMesajGonder(playerid, "Geçersiz kupon kodu girdiniz.");
		}
		cache_delete(Radless);
	}
	return 1;
}
Dialog:ckonay(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    ResetPlayer(playerid);
    	ResetWeapons(playerid);
    	ClearAnimations(playerid);
		PlayerTextDrawShow(playerid, HapisTD[playerid]);
		SetPlayerPos(playerid, 197.6346, 175.3765, 1003.0234);
    	SetPlayerInterior(playerid, 3);

    	SetPlayerVirtualWorld(playerid, (playerid + 100));
    	SetPlayerFacingAngle(playerid, 0.0);

    	SetCameraBehindPlayer(playerid);
    	PlayerData[playerid][pCK] = 1;
    	PlayerData[playerid][pHapisSure] = 9999999 * 60;
    	format(PlayerData[playerid][pHapisSebep], 50, "CK");
    	format(PlayerData[playerid][pHapiseAtan], 24, "Sistem");
    	PlayerData[playerid][pHapis] = 0;
    	MesajGonder(playerid, "Karakteriniz CK edildi.");
    	Oyuncu_Kaydet(playerid);
	}
	return 1;
}

forward RotateFerrisWheel();
public RotateFerrisWheel()
{
	FerrisWheelAngle += 36;

	if (FerrisWheelAngle >= 360)
		FerrisWheelAngle = 0;

	if (FerrisWheelAlternate)
		FerrisWheelAlternate = 0;
	else
		FerrisWheelAlternate = 1;

	new Float:FerrisWheelModZPos = 0.0;

	if (FerrisWheelAlternate)
		FerrisWheelModZPos = 0.05;

	MoveObject(FerrisWheelObjects[10], 389.7734, -2028.4688, 22.0+FerrisWheelModZPos, FERRIS_WHEEL_SPEED, 0, FerrisWheelAngle, 90);
	return 1;
}

Dialog:Soyun(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
	            if (PlayerData[playerid][pCinsiyet] == 1) SetPlayerSkin(playerid, 18);
	            else SetPlayerSkin(playerid, 138);
	        }
	        case 1:
	        {
	            if (PlayerData[playerid][pCinsiyet] == 1) SetPlayerSkin(playerid, 45);
	            else SetPlayerSkin(playerid, 139);
	        }
	        case 2:
	        {
	            if (PlayerData[playerid][pCinsiyet] == 1) SetPlayerSkin(playerid, 97);
	            else SetPlayerSkin(playerid, 140);
	        }
			case 3:
			{
			    if (PlayerData[playerid][pCinsiyet] == 1) SetPlayerSkin(playerid, 154);
			}
	    }
	    PlayerData[playerid][pSoyun] = true;
	    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s kiyafetlerini soyunur.", ReturnName(playerid, 0));
	}
	return 1;
}
Dialog:SistemSoru(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_yardim(playerid);
	if (response)
	{
	    if (isnull(inputtext)) return Dialog_Show(playerid, SistemSoru, DIALOG_STYLE_INPUT, "Sisteme Sor", "{FFFFFF}Lütfen sorunuz hakkinda bir anahtar kelime giriniz: \n\n{ff0000}NOT: {FFFFFF}Anahtar kelimesi 3 ile 20 karakter arasinda olmalidir.", "Devam", "Kapat");
	    if (strlen(inputtext) < 3 || strlen(inputtext) > 20) return Dialog_Show(playerid, SistemSoru, DIALOG_STYLE_INPUT, "Sisteme Sor", "{FFFFFF}Lütfen sorunuz hakkinda bir anahtar kelime giriniz: \n\n{ff0000}NOT: {FFFFFF}Anahtar kelimesi 3 ile 20 karakter arasinda olmalidir.", "Devam", "Kapat");
	    SoruListele(playerid,inputtext);
	}
	return 1;
}
stock SoruListele(playerid,anahtarkelime[])
{
	new str[2500],sayi;
	for (new i; i<MAX_SORU; i++)
	{
		if (SoruData[i][soruExists])
		{
			if (strfind(SoruData[i][Soru], anahtarkelime, true) != -1)
			{
				format(str,sizeof(str), "%s%s\n",str,SoruData[i][Soru]);
				SoruListeleme[playerid][sayi] = i;
				sayi++;
				if (sayi >= 45) break;
			}
		}
	}
	if (!sayi)
	{
	    HataMesajGonder(playerid, "Yazdiginiz anahtar kelimeye ait hiç soru bulunamadi.");
	    return Dialog_Show(playerid, SistemSoru, DIALOG_STYLE_INPUT, "Sisteme Sor", "{FFFFFF}Lütfen sorunuz hakkinda bir anahtar kelime giriniz: \n\n{ff0000}NOT: {FFFFFF}Anahtar kelimesi 3 ile 20 karakter arasinda olmalidir.", "Devam", "Kapat");
	}
	format(AnahtarKelime[playerid],20,anahtarkelime);
	Dialog_Show(playerid,Sorular,DIALOG_STYLE_LIST, "Sorular",str, "Görüntüle", "Geri");
	return 1;
}
Dialog:Sorular(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_yardim(playerid), format(AnahtarKelime[playerid],20, "");
	if (response)
	{
	    new soruid = SoruListeleme[playerid][listitem];
     	if (SoruData[soruid][soruExists])
      	{
      	    SoruData[soruid][OkunmaSayisi]++;
       		new str[300];
         	format(str,sizeof(str), "%s\n\n{00FFBF}Ekleyen: %s | Tarih: %s | Okunma Sayisi: %d",SoruData[soruid][SoruCevap],SoruData[soruid][Ekleyen],SoruData[soruid][EklenmeTarihi],SoruData[soruid][OkunmaSayisi]);
          	Dialog_Show(playerid,SoruGoster,DIALOG_STYLE_MSGBOX, "Soru",str, "Kapat", "Geri");
            new query[124];
            format(query,sizeof(query), "UPDATE `sorular` SET `OkunmaSayisi` = '%d' WHERE `sid` = '%d'",SoruData[soruid][OkunmaSayisi],SoruData[soruid][soruID]);
            mysql_tquery(g_SQL,query);
       	}
	}
	return 1;
}
Dialog:SoruGoster(playerid, response, listitem, inputtext[])
{
	if (!response) return SoruListele(playerid,AnahtarKelime[playerid]);
	format(AnahtarKelime[playerid],20, "");
	return 1;
}
stock SikcaSorulanSorular(playerid)
{
    new query[124],Cache:VeriCek;
    mysql_format(g_SQL, query, sizeof(query), "SELECT `Soru`,`sid` FROM `sorular` ORDER BY `OkunmaSayisi` DESC LIMIT 10");
    VeriCek = mysql_query(g_SQL, query);
    new rows = cache_num_rows();
    if (rows)
    {
        new list[1024],count = 1, sid, Question[50];
        for (new i = 0; i < rows; ++i)
        {
            cache_get_value_name(i, "Soru", Question, 50);
            cache_get_value_name_int(i, "sid", sid);
            SoruListeleme[playerid][count-1] = SoruIDBul(sid);
            format(list,sizeof(list), "%s{FF0000}%d){FFFFFF} %s\n", list, count, Question);
            count++;
        }
        Dialog_Show(playerid,top10soru,DIALOG_STYLE_LIST, "Sikça Sorulan 10 Soru",list, "Görüntüle", "{FF0000}Kapat");
    }
    cache_delete(VeriCek);
    return 1;
}
Dialog:top10soru(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_yardim(playerid);
	if (response)
 	{
  		new soruuid = SoruListeleme[playerid][listitem];
    	if (SoruData[soruuid][soruExists])
     	{
     	    SoruData[soruuid][OkunmaSayisi]++;
      		new str[300];
        	format(str,sizeof(str), "%s\n\n{00FFBF}Ekleyen: %s | Tarih: %s | Okunma Sayisi: %d",SoruData[soruuid][SoruCevap],SoruData[soruuid][Ekleyen],SoruData[soruuid][EklenmeTarihi],SoruData[soruuid][OkunmaSayisi]);
         	Dialog_Show(playerid,top10soru2,DIALOG_STYLE_MSGBOX, "Soru",str, "Kapat", "Geri");
           	new query[124];
            format(query,sizeof(query), "UPDATE `sorular` SET `OkunmaSayisi` = '%d' WHERE `sid` = '%d'",SoruData[soruuid][OkunmaSayisi],SoruData[soruuid][soruID]);
            mysql_query(g_SQL,query, false);
      	}
  	}
	return 1;
}
Dialog:top10soru2(playerid, response, listitem, inputtext[])
{
	if (!response) return SikcaSorulanSorular(playerid);
	return 1;
}
stock SoruIDBul(questionid)
{
    for (new i; i<MAX_SORU; i++)
    {
        if (SoruData[i][soruExists] && SoruData[i][soruID] == questionid)
        {
            return i;
        }
    }
    return -1;
}

Dialog:Yardim(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new string[2056], baslik[50];
		format(baslik, sizeof(baslik), "{ff9933}%s", inputtext);

		for (new i = 0; i != MAX_YARDIM_KOMUTLARI; i ++)
		{
	 		if (Komutlar[i][komutVarmi] && Komutlar[i][komutKatagori] == listitem && Komutlar[i][komutOlusum] == -1)
			{
				new komutstr[512];
				format(komutstr, sizeof(komutstr), "{FFFFFF}%s:%s\n", Komutlar[i][komutAd], Komutlar[i][komutTanim]);
				strcat(string, komutstr);
			}
		}
		Dialog_Show(playerid, YardimGeriTusu, DIALOG_STYLE_MSGBOX, baslik, string, "Tamam", "{FF6347}<< Geri");
	}
	return 1;
}
Dialog:YardimGeriTusu(playerid, response, listitem, inputtext[])
{
	if (!response) cmd_yardim(playerid);
	return 1;
}
Dialog:ModifiyeGarajlari(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
	        	cmd_cpsifirla(playerid);
	            SetPVarInt(playerid, "AraciniBuluyor", 1);
	            SetPlayerCheckpoint(playerid, 1041.0259,-1029.3878,32.1016, 5.0);
	            MesajGonder(playerid, "Modifiye garaji haritada isaretlendi.");
	        }
	        case 1:
	        {
	        	cmd_cpsifirla(playerid);
	            SetPVarInt(playerid, "AraciniBuluyor", 1);
	            SetPlayerCheckpoint(playerid, 2644.9888,-2034.6790,13.5540, 5.0);
	            MesajGonder(playerid, "Modifiye garaji haritada isaretlendi.");
	        }
	        case 2:
	        {
	        	cmd_cpsifirla(playerid);
	            SetPVarInt(playerid, "AraciniBuluyor", 1);
	            SetPlayerCheckpoint(playerid, -2712.9658,216.7289,4.2473, 5.0);
	            MesajGonder(playerid, "Modifiye garaji haritada isaretlendi.");
	        }
	    }
	}
	return 1;
}


IsCLowrider(carid)
{
    new Cars[] = { 536, 575, 567};
    for (new i = 0; i < sizeof(Cars); i++)
    {
        if (GetVehicleModel(carid) == Cars[i]) return 1;
    }
    return 0;
}

IsTruckerCar(carid)
{
    new Cars[] = { 482, 414, 413};
    for (new i = 0; i < sizeof(Cars); i++)
    {
        if (GetVehicleModel(carid) == Cars[i]) return 1;
    }
    return 0;
}

PlayAnim(playerid, animlib[], animname[], Float:fDelta, loop, lockx, locky, freeze, time, forcesync)
{
    if (GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
    PlayerData[playerid][pLoopAnim] = true;
    ApplyAnimation(playerid, animlib, animname, fDelta, loop, lockx, locky, freeze, time, forcesync);
    return 1;
}


PlayAnimEx(playerid, animlib[], animname[], Float:fDelta, loop, lockx, locky, freeze, time, forcesync)
{
    if (GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
    PlayerData[playerid][pLoopAnim] = true;
    ApplyAnimation(playerid, animlib, animname, fDelta, loop, lockx, locky, freeze, time, forcesync);
    return 1;
}

Dialog:TaksiMenu(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
	    new id = Car_GetID(vehicleid);
	    if (id == -1) return 1;
	    switch (listitem)
	    {
	        case 0, 2: cmd_taksi(playerid);
	        case 1:
	        {
	            if (PlayerData[playerid][pTaxiDuty] == false)
	            {
	                PlayerData[playerid][pTaxiDuty] = true;
	                AracInfo[id][Taksimetre] = 30;
	                AracInfo[id][OturumKazanci] = 0;
	                foreach (new i:Player) if (PlayerData[i][pAyarlar][2] == 0)
	                {
	                    SendClientMessageEx(i, 0x42f445FF, "LS TAXI: %s plakali taksi isbasi yapti, '/ara 333' kullanarak taksi çagirabilirsin.", AracInfo[id][aracPlaka]);
	                }
	            }
	            else
	            {
	                PlayerTextDrawHide(playerid, TaxiTD[playerid][0]);
	                PlayerTextDrawHide(playerid, TaxiTD[playerid][1]);
	                foreach (new i: Player)
	                {
	                    if (IsPlayerInsideTaxi(i) && PlayerData[i][pTaxiPlayer] == playerid)
	                    {
							LeaveTaxi(i, playerid);

	                    }
	                }
	                PlayerData[playerid][pTaxiDuty] = false;
	                AracInfo[id][Taksimetre] = 30;
	                AracInfo[id][OturumKazanci] = 0;
	            }
	            cmd_taksi(playerid);
	        }
	        case 3:
	        {
	            AracInfo[id][OturumKazanci] = 0;
	            cmd_taksi(playerid);
	        }
	        case 4:
	        {
	            Dialog_Show(playerid, TaksimetreUcret, DIALOG_STYLE_INPUT, "Taksimetre Ücreti", "{FFFFFF}Lütfen yeni bir taksimetre ücretini girin:\n\n{f44542}NOT: {FFFFFF}En az $10, en fazla $300 girebilirsiniz.", "Degistir", "Geri");
	        }
	        case 5:
	        {
	            if (IsValidDynamicObject(AracInfo[id][TaksiObje]))
	            {
	                DestroyDynamicObject(AracInfo[id][TaksiObje]);
	                cmd_taksi(playerid);
	            }
	            else
	            {
					Dialog_Show(playerid, TaksiObje, DIALOG_STYLE_PREVMODEL, "Taksi Objeleri", "19308\n19309\n19310\n19311", "Sec", "Geri");
	            }
	        }
	        case 6:
	        {
	            if (PlayerData[playerid][pTaxiDuty] == false) return HataMesajGonder(playerid, "Taksimetre Kapalý oldugu için taksi taleplerine bakamazsiniz.");
	            new str[1000], count;
	            strcat(str, "#\tVatandas\tYer\n");
	            new Float:pos[3];
	            foreach (new i:Player) if (PlayerData[i][pTaxiCalled] == 1)
	            {
	                GetPlayerPosEx(i, pos[0], pos[1], pos[2]);
	                format(str, sizeof(str), "%s{FFFFFF}%d\t{FFFFFF}%s\t{FFFFFF}%s\n", str, i, ReturnName(i, 0), GetLocation(pos[0], pos[1], pos[2]));
	                count++;
	            }
	            if (count == 0) return HataMesajGonder(playerid, "Aktif taksi çagrisi bulunmuyor.");
	            Dialog_Show(playerid, TaksiTalepleri, DIALOG_STYLE_TABLIST_HEADERS, "Taksi Çagrilari", str, "Kabul et", "Kapat");
	        }
	    }
	    if (listitem == 0 || listitem == 2) return cmd_taksi(playerid);

	}
	return 1;
}
Dialog:TaksiTalepleri(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = strval(inputtext);
	    if (PlayerData[playerid][pTaksiKabul] != -1) return HataMesajGonder(playerid, "Zaten birisinin taksi çagrisini kabul etmissin. (/cpsifirla)");
	    if (PlayerData[id][pTaxiCalled] == 0) return HataMesajGonder(playerid, "Bu oyuncunun çagrisi baska bir taksi soförü tarafindan kabul edildi.");
	    if (PlayerData[id][pTaxiCalled] == 1 && OyundaDegil(id))
	    {
	    	cmd_cpsifirla(playerid);

	        PlayerData[id][pTaxiCalled] = 0;
	        PlayerData[playerid][pTaksiKabul] = id;
	        MesajGonder(id, "%s adli taksici çagrinizi kabul etti, sabit kalmaya çalisin birazdan burada olur.", ReturnName(playerid, 0));
	        MesajGonder(playerid, "%s adli kisinin taksi çagrisini kabul ettiniz, kisinin yeri haritada isaretlendi.", ReturnName(id, 0));
	        new Float:pos[3];
	        GetPlayerPosEx(id, pos[0], pos[1], pos[2]);
	        SetPlayerCheckpoint(playerid, pos[0], pos[1], pos[2], 5.0);
	    }
	}
	return 1;
}
Dialog:TaksiObje(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_taksi(playerid);
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
	    new id = Car_GetID(vehicleid);
	    if (id == -1) return 1;
		new Float:pos[3];
		GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		AracInfo[id][TaksiObje] = CreateDynamicObject(19308+listitem, pos[0], pos[1], pos[2], 0.0, 0.0, 0.0);

		SetPVarInt(playerid, "TaksiObje", 1);
		EditDynamicObject(playerid, AracInfo[id][TaksiObje]);
	}
	return 1;
}
Dialog:TaksimetreUcret(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_taksi(playerid);
	if (response)
	{
	    new id = Car_GetID(GetPlayerVehicleID(playerid));
	    if (id == -1) return 1;
	    if (isnull(inputtext)) return Dialog_Show(playerid, TaksimetreUcret, DIALOG_STYLE_INPUT, "Taksimetre Ücreti", "{FFFFFF}Lütfen yeni bir taksimetre ücretini girin:\n\n{f44542}NOT: {FFFFFF}En az $10, en fazla $300 girebilirsiniz.", "Degistir", "Geri");
	    if (!IsNumeric(inputtext)) return Dialog_Show(playerid, TaksimetreUcret, DIALOG_STYLE_INPUT, "Taksimetre Ücreti", "{FFFFFF}Lütfen yeni bir taksimetre ücretini girin:\n\n{f44542}NOT: {FFFFFF}En az $10, en fazla $300 girebilirsiniz.", "Degistir", "Geri");
	    if (strval(inputtext) < 10 || strval(inputtext) > 300) return Dialog_Show(playerid, TaksimetreUcret, DIALOG_STYLE_INPUT, "Taksimetre Ücreti", "{FFFFFF}Lütfen yeni bir taksimetre ücretini girin:\n\n{f44542}NOT: {FFFFFF}En az $10, en fazla $300 girebilirsiniz.", "Degistir", "Geri");
	    AracInfo[id][Taksimetre] = strval(inputtext);
	    cmd_taksi(playerid);
	}
	return 1;
}
Dialog:TaksiPlakasi(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    {
	        new vehicleid = GetPlayerVehicleID(playerid);
    		new id = Car_GetID(vehicleid);
    		if (!IsEngineVehicle(vehicleid) || IsVehicleBike(vehicleid) || id == -1 || GetVehicleMaxSeats(vehicleid) < 4 || AracInfo[id][aracTip] != 4 || GetVehicleModel(vehicleid) == 420) return HataMesajGonder(playerid, "Bu araca taksi plakasi alinamaz.");
    		if (PlayerData[playerid][pCash] < 32000) return HataMesajGonder(playerid, "Yeterli paraniz yok. ($32,000)");
    		AracInfo[id][TaksiPlaka] = 1;
    		Arac_Kaydet(id);
    		MesajGonder(playerid, "{2ECC71}$32,000 {FFFFFF}ödeyerek araciniza taksi plakasi taktirdiniz. (/taksi)");
	    }
	}
	return 1;
}
MacBitir(id)
{
 	new str[135];
 	if (Paintball[id][odaOyunTuru] == 1 && Paintball[id][odaPuan][0] > Paintball[id][odaPuan][1])
 	{
	    format(str, sizeof(str), "{33EE33}PB: Maçi %s adli takim kazandi.", Paintball[id][odaTakim1Ad]);
 	}
 	else if (Paintball[id][odaOyunTuru] == 1 && Paintball[id][odaPuan][1] > Paintball[id][odaPuan][0])
 	{
 	    format(str, sizeof(str), "{33EE33}PB: Maçi %s adli takim kazandi.", Paintball[id][odaTakim2Ad]);
 	}
 	else if (Paintball[id][odaOyunTuru] == 1 && Paintball[id][odaPuan][0] == Paintball[id][odaPuan][1])
 	{
 	    format(str, sizeof(str), "{33EE33}PB: Maç berabere bitti.");
 	}
 	else if (Paintball[id][odaOyunTuru] == 2 && GetLiderOyuncu(id) != -1)
 	{
 	    format(str, sizeof(str), "{33EE33}PB: %s adli kisi %d öldürme, %d ölme ile maçi kazandi!",ReturnName(GetLiderOyuncu(id), 0), pbOldurme[GetLiderOyuncu(id)], pbOlme[GetLiderOyuncu(id)]);
 	}
 	SendPBMessage(id, -1, str);
    foreach (new p:Player)
    {
        if (pbOda[p] == id)
        {
			OdadanAt(p, 3);
        }
    }
    Paintball[id][odaExists] = false;
  	format(Paintball[id][odaIsim], 30, "");
   	format(Paintball[id][odaSifre], 30, "");
    Paintball[id][odaSahip] = -1;
    format(Paintball[id][odaTakim1Ad], 20, "");
    format(Paintball[id][odaTakim2Ad], 20, "");
    Paintball[id][odaZirh] = 0;
    Paintball[id][odaSure] = 0;
    Paintball[id][odaOyunTuru] = 1;
    Paintball[id][odaArena] = 1;
    Paintball[id][odaPuan][0] = 0;
    Paintball[id][odaPuan][1] = 0;
    Paintball[id][odaSayac] = 0;
    return 1;
}
OdadanAt(playerid, sebep)
{
    if (IsPlayerDying(playerid))
   	{
		SetPVarInt(playerid, "OdadanAt", 1);
		return 1;
   	}
	new str[100];
 	if (sebep == 0) format(str, sizeof(str), "{33EE33}PB: %s adli kisi odadan ayrildi.", ReturnName(playerid, 0));
  	if (sebep == 1) format(str, sizeof(str), "{33EE33}PB: %s adli kisi odadan atildi.", ReturnName(playerid, 0));
   	if (sebep <= 1)  SendPBMessage(pbOda[playerid], -1, str);
   	MesajGonder(playerid, "Maç boyunca %d kisi öldürdünüz ve %d kere öldürüldünüz.", pbOldurme[playerid], pbOlme[playerid]);
   	SetPlayerPos(playerid, 1170.9122,-1489.6418,22.7551);
   	SetPlayerFacingAngle(playerid, 87.5724);
   	SetPlayerInterior(playerid, 0);
   	SetPlayerVirtualWorld(playerid, 0);
   	ObjelerYukleniyor(playerid);
   	SetPlayerHealth(playerid, PlayerData[playerid][pHealth]);
   	SetPlayerArmour(playerid, PlayerData[playerid][pArmour]);
   	SetPlayerTeam(playerid, NO_TEAM);
   	ResetPlayerWeapons(playerid);
   	SetWeapons(playerid);
   	pbOda[playerid] = -1;
    pbTakim[playerid] = 0;
    pbOldurme[playerid] = 0;
    pbOlme[playerid] = 0;
    for (new i; i<9; i++)
    {
    	PlayerTextDrawHide(playerid, PaintballTD[playerid][i]);
	}
    return 1;
}
GetLiderOyuncu(oda)
{
	new PlayerID = -1, oldurme, olme;
	foreach (new i:Player)
	{
	    if (IsPlayerConnected(i) && pbOda[i] == oda)
	    {
	        if (pbOldurme[i] > oldurme || (pbOldurme[i] == oldurme && pbOlme[i] < olme))
	        {
				PlayerID = i;
				oldurme = pbOldurme[i];
				olme = pbOlme[i];
	        }
	    }
	}
	return PlayerID;
}
SendPBMessage(id, color, yazi[])
{
	foreach (new i:Player)
	{
	    if (pbOda[i] == id)
	    {
	        SendClientMessage(i, color, yazi);
	    }
	}
	return 1;
}
Takim1Sayi(pbid)
{
	new sayi = 0;
	foreach (new i:Player)
	{
	    if (IsPlayerConnected(i) && pbOda[i] == pbid && pbTakim[i] == 1)
	    {
	        sayi++;
		}
	}
	return sayi;
}
Takim2Sayi(pbid)
{
	new sayi = 0;
	foreach (new i:Player)
	{
	    if (IsPlayerConnected(i) && pbOda[i] == pbid && pbTakim[i] == 2)
	    {
	        sayi++;
		}
	}
	return sayi;
}
KatilimciDialog(playerid, id)
{
	new str[300], string[100];
    strcat(str, "ID\tIsim\n");
	foreach (new i:Player)
	{
	    if (IsPlayerConnected(i) && pbOda[i] == id)
	    {
	        format(string, sizeof(string), "{F21D1D}%d\t{F21D1D}%s\n", i, ReturnName(i, 0));
	        strcat(str, string);
	    }
	}
	format(string, sizeof(string), "{1DF21D}Katilimci Sayisi: %d", KatilimciSayisi(id));
	ShowPlayerDialog(playerid, ODA_AYARLARI_KATILIMCI, DIALOG_STYLE_TABLIST_HEADERS,string,str, "Seç", "Geri");
	return 1;
}
OdaAyarlari(playerid, id)
{
	if (!IsPlayerConnected(playerid) || !Paintball[id][odaExists]) return 0;
	new str[500], string[100], arena[20];
	strcat(str, "{FFFFFF}islem\t{FFFFFF}Durum\n");

	format(string, sizeof(string), "{AFAFAF}> Oda Adi:\t{F21D1D}%s\n", Paintball[id][odaIsim]);
	strcat(str, string);
	format(string, sizeof(string), "{AFAFAF}> Oda sifre:\t{F21D1D}%s\n", Paintball[id][odaSifre]);
	strcat(str, string);
	if (Paintball[id][odaOyunTuru] == 1)
	{
		format(string, sizeof(string), "{AFAFAF}» Takim 1 Ad:\t{F21D1D}%s\n", Paintball[id][odaTakim1Ad]);
		strcat(str, string);
		format(string, sizeof(string), "{AFAFAF}» Takim 2 Ad:\t{F21D1D}%s\n", Paintball[id][odaTakim2Ad]);
		strcat(str, string);
		format(string, sizeof(string), "{AFAFAF}» Takim Dengeleme:\t{F21D1D}%s\n", (Paintball[id][TakimDengeleme] == true) ? ("{00FF6E}Açýk") : ("{FF0000}Kapalý"));
		strcat(str, string);
	}
	if (Paintball[id][odaDurum] == ODA_BEKLEME)
	{
	    format(string, sizeof(string), "{AFAFAF}» Oyun Türü:\t{F21D1D}%s\n", (Paintball[id][odaOyunTuru] == 1) ? ("TDM") : ("DM"));
	    strcat(str, string);
	}
	if (Paintball[id][odaDurum] == ODA_BEKLEME)
	{
	    switch (Paintball[id][odaArena])
	    {
	        case 1: arena = "Warehouse 1";
	        case 2: arena = "Warehouse 2";
	        case 3: arena = "RC Battlefield";
	        case 4: arena = "LV Police HQ";
	        case 5: arena = "LV Warehouse";
	        case 6: arena = "Crack Factory";
	        case 7: arena = "Jefferson Motel";
	        default: arena = "Bilinmiyor";
		}
	    format(string, sizeof(string), "{AFAFAF}» Maç Süresi:\t{F21D1D}%d dk.\n", Paintball[id][odaSure]);
		strcat(str, string);
		format(string, sizeof(string), "{AFAFAF}» Arena:\t{F21D1D}%s\n", arena);
		strcat(str, string);
	}
	format(string, sizeof(string), "{AFAFAF}» Baslangiç Zirhi:\t{F21D1D}%d\n", Paintball[id][odaZirh]);
	strcat(str, string);
	format(string, sizeof(string), "{AFAFAF}» Silah Ayarlari\n");
	strcat(str, string);
	format(string, sizeof(string), "{AFAFAF}» Katilimci Ayarlari\t{F21D1D}%d katilimci\n\n", KatilimciSayisi(id));
	strcat(str, string);
	if (Paintball[id][odaDurum] == ODA_BASLADI) strcat(str, "{F21D1D}» Maçi Bitir\n");
	else if (Paintball[id][odaDurum] == ODA_BEKLEME) strcat(str, "{1DF21D}» Maçi Baslat\n");
	if (Paintball[id][odaDurum] == ODA_BEKLEME) strcat(str, "{F21D1D}» Odayi Sil");
	SetPVarInt(playerid, "OdaAyarID", id);
	ShowPlayerDialog(playerid, ODA_AYARLARI, DIALOG_STYLE_TABLIST_HEADERS, "{1DF21D}Oda Ayarlari", str, "Seç", "Kapat");
	return 1;
}
KatilimciSayisi(odaid)
{
	new sayi = 0;
	foreach (new i:Player)
	{
	    if (IsPlayerConnected(i) && pbOda[i] == odaid)
	    {
	        sayi++;
		}
	}
	return sayi;
}
OdasiVarmi(playerid)
{
    for (new i=0; i != MAX_ODA; i++) if (Paintball[i][odaExists])
    {
        if (Paintball[i][odaSahip] == playerid) return i;
	}
	return -1;
}
TDYukle(playerid)
{
    PaintballTD[playerid][0] = CreatePlayerTextDraw(playerid, 553.125000, 103.666687, "mdl-2005:rpbhud");
	PlayerTextDrawLetterSize(playerid, PaintballTD[playerid][0], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PaintballTD[playerid][0], 88.000000, 190.000000);
	PlayerTextDrawAlignment(playerid, PaintballTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, PaintballTD[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, PaintballTD[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, PaintballTD[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PaintballTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, PaintballTD[playerid][0], 4);
	PlayerTextDrawSetProportional(playerid, PaintballTD[playerid][0], 0);
	PlayerTextDrawSetShadow(playerid, PaintballTD[playerid][0], 0);

	PaintballTD[playerid][1] = CreatePlayerTextDraw(playerid, 572.100097, 267.300018, "Takimadi1");
	PlayerTextDrawLetterSize(playerid, PaintballTD[playerid][1], 0.319999, 1.355000);
	PlayerTextDrawAlignment(playerid, PaintballTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, PaintballTD[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, PaintballTD[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, PaintballTD[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PaintballTD[playerid][1], 255);
	PlayerTextDrawFont(playerid, PaintballTD[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, PaintballTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, PaintballTD[playerid][1], 0);

	PaintballTD[playerid][2] = CreatePlayerTextDraw(playerid, 572.100097, 280.200805, "Takimadi2");
	PlayerTextDrawLetterSize(playerid, PaintballTD[playerid][2], 0.319999, 1.355000);
	PlayerTextDrawAlignment(playerid, PaintballTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, PaintballTD[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, PaintballTD[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, PaintballTD[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PaintballTD[playerid][2], 255);
	PlayerTextDrawFont(playerid, PaintballTD[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, PaintballTD[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, PaintballTD[playerid][2], 0);

	/*PaintballTD[playerid][3] = CreatePlayerTextDraw(playerid, 587.979614, 176.000030, "10");
	PlayerTextDrawLetterSize(playerid, PaintballTD[playerid][3], 0.300000, 1.200000);
	PlayerTextDrawAlignment(playerid, PaintballTD[playerid][3], 1);
	PlayerTextDrawColor(playerid, PaintballTD[playerid][3], -1);
	PlayerTextDrawSetShadow(playerid, PaintballTD[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, PaintballTD[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, PaintballTD[playerid][3], 255);
	PlayerTextDrawFont(playerid, PaintballTD[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, PaintballTD[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, PaintballTD[playerid][3], 0);

	PaintballTD[playerid][4] = CreatePlayerTextDraw(playerid, 591.727722, 205.750015, "9");
	PlayerTextDrawLetterSize(playerid, PaintballTD[playerid][4], 0.300000, 1.200000);
	PlayerTextDrawAlignment(playerid, PaintballTD[playerid][4], 1);
	PlayerTextDrawColor(playerid, PaintballTD[playerid][4], -1);
	PlayerTextDrawSetShadow(playerid, PaintballTD[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, PaintballTD[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, PaintballTD[playerid][4], 255);
	PlayerTextDrawFont(playerid, PaintballTD[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, PaintballTD[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, PaintballTD[playerid][4], 0);*/

	PaintballTD[playerid][5] = CreatePlayerTextDraw(playerid, 563.350097, 179.083786, "lider_oyuncu");
	PlayerTextDrawLetterSize(playerid, PaintballTD[playerid][5], 0.319999, 1.355000);
	PlayerTextDrawAlignment(playerid, PaintballTD[playerid][5], 1);
	PlayerTextDrawColor(playerid, PaintballTD[playerid][5], -1);
	PlayerTextDrawSetShadow(playerid, PaintballTD[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, PaintballTD[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, PaintballTD[playerid][5], 255);
	PlayerTextDrawFont(playerid, PaintballTD[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, PaintballTD[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, PaintballTD[playerid][5], 0);

	PaintballTD[playerid][6] = CreatePlayerTextDraw(playerid, 578.975097, 213.500442, "04:20");
	PlayerTextDrawLetterSize(playerid, PaintballTD[playerid][6], 0.319999, 1.355000);
	PlayerTextDrawAlignment(playerid, PaintballTD[playerid][6], 1);
	PlayerTextDrawColor(playerid, PaintballTD[playerid][6], -1);
	PlayerTextDrawSetShadow(playerid, PaintballTD[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, PaintballTD[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, PaintballTD[playerid][6], 255);
	PlayerTextDrawFont(playerid, PaintballTD[playerid][6], 1);
	PlayerTextDrawSetProportional(playerid, PaintballTD[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, PaintballTD[playerid][6], 0);

	PaintballTD[playerid][7] = CreatePlayerTextDraw(playerid, 617.100097, 236.250457, "8");
	PlayerTextDrawLetterSize(playerid, PaintballTD[playerid][7], 0.319999, 1.355000);
	PlayerTextDrawAlignment(playerid, PaintballTD[playerid][7], 1);
	PlayerTextDrawColor(playerid, PaintballTD[playerid][7], -1);
	PlayerTextDrawSetShadow(playerid, PaintballTD[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, PaintballTD[playerid][7], 0);
	PlayerTextDrawBackgroundColor(playerid, PaintballTD[playerid][7], 255);
	PlayerTextDrawFont(playerid, PaintballTD[playerid][7], 1);
	PlayerTextDrawSetProportional(playerid, PaintballTD[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid, PaintballTD[playerid][7], 0);

	PaintballTD[playerid][8] = CreatePlayerTextDraw(playerid, 616.675048, 252.451446, "7");
	PlayerTextDrawLetterSize(playerid, PaintballTD[playerid][8], 0.319999, 1.355000);
	PlayerTextDrawAlignment(playerid, PaintballTD[playerid][8], 1);
	PlayerTextDrawColor(playerid, PaintballTD[playerid][8], -1);
	PlayerTextDrawSetShadow(playerid, PaintballTD[playerid][8], 0);
	PlayerTextDrawSetOutline(playerid, PaintballTD[playerid][8], 0);
	PlayerTextDrawBackgroundColor(playerid, PaintballTD[playerid][8], 255);
	PlayerTextDrawFont(playerid, PaintballTD[playerid][8], 1);
	PlayerTextDrawSetProportional(playerid, PaintballTD[playerid][8], 1);
	PlayerTextDrawSetShadow(playerid, PaintballTD[playerid][8], 0);
	return 1;
}
Dialog:Paintball(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (listitem == 0)
	    {
	        if (OdasiVarmi(playerid) != -1) return HataMesajGonder(playerid, "Paintball odaniz varken baska odaya katilamazsiniz.");
			pbOdalari(playerid);
	    }
	    if (listitem == 1)
	    {
	        if (OdasiVarmi(playerid) != -1) return HataMesajGonder(playerid, "Zaten odaniz var, (/pboda) ile oda ayarlarina erisebilirsiniz.");
			if (PlayerData[playerid][pCash] < ODA_PARA) return HataMesajGonder(playerid, "Oda kurmak için yeterli paraniz yok.");
			for (new i=0; i != MAX_ODA; i++) if (!Paintball[i][odaExists])
			{
			    Paintball[i][odaExists] = true;
			    format(Paintball[i][odaIsim], 30, "Adsiz Oda");
			    format(Paintball[i][odaSifre], 30, "");
			    Paintball[i][odaSahip] = playerid;
			    format(Paintball[i][odaTakim1Ad], 20, "Takim 1");
			    format(Paintball[i][odaTakim2Ad], 20, "Takim 2");
			    Paintball[i][odaSilahlar][0] = 24;
			    Paintball[i][odaSilahlar][1] = 25;
			    Paintball[i][odaSilahlar][2] = 29;
			    Paintball[i][odaSilahlar][3] = 31;
			    Paintball[i][odaZirh] = 100;
			    Paintball[i][odaSure] = 5;
			    Paintball[i][odaSayac] = Paintball[i][odaSure]*60;
			    Paintball[i][odaOyunTuru] = 1;
			    Paintball[i][odaArena] = 1;
			    Paintball[i][odaPuan][0] = 0;
			    Paintball[i][odaPuan][1] = 0;
			    Paintball[i][TakimDengeleme] = true;
			    Paintball[i][odaDurum] = ODA_BEKLEME;
			    pbOda[playerid] = i;
			    break;
			}
			new str[100];
			if (pbOda[playerid] == -1) format(str, sizeof(str), "{FF0000}» {FFFFFF}Sunucuda en fazla %d Paintball odasi olusturulabilir.", MAX_ODA);
			else format(str, sizeof(str), "{00FF11}» {FFFFFF}Odaniz basariyla olusturuldu (ID: %d), (/pboda) ile odanizi düzenleyebilirsiniz.", pbOda[playerid]), ParaVer(playerid, -ODA_PARA);
			SendClientMessage(playerid, -1, str);
	    }
	}
	return 1;
}
stock pbOdalari(playerid)
{
    new str[500], string[100], sayi = 0;
	strcat(str, "{FF0000}ID\t{FF0000}Ad\t{FF0000}Oyun Türü\t{FF0000}Maç Süresi\n");
	for (new i=0; i != MAX_ODA; i++) if (Paintball[i][odaExists])
	{
	    format(string, sizeof(string), "{58D67A}%d\t{58D67A}%s\t{58D67A}%s\t{58D67A}%d dk\n", i, Paintball[i][odaIsim], (Paintball[i][odaOyunTuru] == 1) ? ("TDM") : ("DM"), Paintball[i][odaSure]);
	    strcat(str, string);
	    sayi++;
	}
	if (sayi == 0) return HataMesajGonder(playerid, "Hiç oda yok.");
	format(string, sizeof(string), "{1DF21D}Odalar: %d", sayi);
	ShowPlayerDialog(playerid, DIALOG_KATIL, DIALOG_STYLE_TABLIST_HEADERS, string, str, "Katil", "Iptal");
	return 1;
}

stock GiseKontrolu(playerid)
{
	new str[128];

	format(str, sizeof(str), "{FFFFFF}Giseler: \t%s\n", (AcilDurumMu() == 1) ? ("{f72e2e}Kapalý") : ("{7bf72d}Açýk"));

	Dialog_Show(playerid, Giseler, DIALOG_STYLE_TABLIST, "Giseler", str, "Seç", "Kapat");
	return 1;
}

Dialog:Giseler(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
	            if (!AcilDurumMu())
	            {
		            AcilDurum = 1;

		            SendBirlikMessageEx(BIRLIK_LSPD, COLOR_DEPARTMENT, "* DEPARTMAN: Memur %s tarafindan bütün giseler kilitlendi.", ReturnName(playerid, 0));
		            SendBirlikMessageEx(BIRLIK_FBI, COLOR_DEPARTMENT, "* DEPARTMAN: Memur %s tarafindan bütün giseler kilitlendi.", ReturnName(playerid, 0));
	            }
	            else
	            {
	                AcilDurum = 0;

		            SendBirlikMessageEx(BIRLIK_LSPD, COLOR_DEPARTMENT, "* DEPARTMAN: Memur %s tarafindan bütün giseler açýldý.", ReturnName(playerid, 0));
		            SendBirlikMessageEx(BIRLIK_FBI, COLOR_DEPARTMENT, "* DEPARTMAN: Memur %s tarafindan bütün giseler açýldý.", ReturnName(playerid, 0));
	            }
	        }
	    }
	    GiseKontrolu(playerid);
	}
	return 1;
}

stock AcilDurumMu()
{
	if (AcilDurum == 1)
	    return true;

	return false;
}

Toll_CloseToll(TollID)
{
    if (TollID == RichmanToll)
    {
        SetDynamicObjectRot(L_a_TollObject[0], 0.000000, -90.000000, 23.81982421875);
        SetDynamicObjectRot(L_a_TollObject[1], 0.000000, -90.000000, 214.37744140625);
    }
    else if (TollID == FlintToll)
    {
        SetDynamicObjectRot(L_a_TollObject[2], 0.000000, -90.000000, 270.67565917969);
        SetDynamicObjectRot(L_a_TollObject[3], 0.000000, -90.000000, 87.337799072266);
    }
    else if (TollID == LVToll)
    {
        SetDynamicObjectRot(L_a_TollObject[4], 0.000000, -90.000000, 348.10229492188);
        SetDynamicObjectRot(L_a_TollObject[5], 0.000000, -90.000000, 169.43664550781);
    }
    else if (TollID == BlueberryTollR)
    {
        SetDynamicObjectRot(L_a_TollObject[6], 0.00000, -90.00000, 35.00000);
        SetDynamicObjectRot(L_a_TollObject[7], 0.00000, -90.00000, 215.92000);
    }
    else if (TollID == BlueberryTollL)
    {
        SetDynamicObjectRot(L_a_TollObject[8], 0.00000, -90.00000, -14.94000);
        SetDynamicObjectRot(L_a_TollObject[9], 0.00000, -90.00000, -195.00000);
    }
    return 1;
}

/*Toll_OpenToll(TollID)
{
    if (TollID == RichmanToll)
    {
        aTolls[RichmanToll][E_tOpenTime] = 3;

        SetDynamicObjectRot(L_a_TollObject[0], 0.000000, 0.000000, 23.81982421875);
        SetDynamicObjectRot(L_a_TollObject[1], 0.000000, 0.000000, 214.37744140625);
    }
    else if (TollID == FlintToll)
    {
        aTolls[FlintToll][E_tOpenTime] = 3;
        SetDynamicObjectRot(L_a_TollObject[2], 0.000000, 0.000000, 270.67565917969);
        SetDynamicObjectRot(L_a_TollObject[3], 0.000000, 0.000000, 87.337799072266);
    }
    else if (TollID == LVToll)
    {
        aTolls[LVToll][E_tOpenTime] = 3;
        SetDynamicObjectRot(L_a_TollObject[4], 0.000000, 0.000000, 348.10229492188);
        SetDynamicObjectRot(L_a_TollObject[5], 0.000000, 0.000000, 169.43664550781);
    }
    else if (TollID == BlueberryTollR)
    {
        aTolls[BlueberryTollR][E_tOpenTime] = 3;
        SetDynamicObjectRot(L_a_TollObject[6], 0.000000, 0.000000, 35.00000);
        SetDynamicObjectRot(L_a_TollObject[7], 0.000000, 0.000000, 215.92000);
    }
    else if (TollID == BlueberryTollL)
    {
        aTolls[BlueberryTollL][E_tOpenTime] = 3;
        SetDynamicObjectRot(L_a_TollObject[8], 0.000000, 0.000000, -14.94000);
        SetDynamicObjectRot(L_a_TollObject[9], 0.000000, 0.000000, -195.00000);
    }
}*/

/*Toll_TimePassedCivil(TollID, playerid) // People have to wait <TollDelayCivilian> seconds between every /opentoll on the same toll
{
    if (aTolls[TollID][E_tOpenTime] > 0)
    {
        HataMesajGonder(playerid, "Bu gise zaten açik.");
        return 0;
    }
    return 1;
}*/

Dialog:Standlar(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new Float:pos[4], str[100];
     	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
     	GetPlayerFacingAngle(playerid, pos[3]);
      	pos[0] += (2 * floatsin(-pos[3], degrees));
   		pos[1] += (2 * floatcos(-pos[3], degrees));
	    switch (listitem)
	    {
	        case 0:
	        {
	            PlayerData[playerid][pStand] = true;
	            PlayerData[playerid][pStandObject] = CreateDynamicObject(1341, pos[0], pos[1], pos[2], 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
				format(str, sizeof(str), "{a4f237}Stand\n{FFFFFF}Sahip: %s", ReturnName(playerid, 0));
				PlayerData[playerid][pStandText] = CreateDynamic3DTextLabel(str, -1, pos[0], pos[1], pos[2]+1.5, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
				MesajGonder(playerid, "Stand koydunuz, (/stand) komutunu kullanarak kaldirabilirsiniz.");
	        }
	        case 1:
	        {
	            PlayerData[playerid][pStand] = true;
	            PlayerData[playerid][pStandObject] = CreateDynamicObject(1342, pos[0], pos[1], pos[2], 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
				format(str, sizeof(str), "{a4f237}Stand\n{FFFFFF}Yerlestiren: %s", ReturnName(playerid, 0));
				PlayerData[playerid][pStandText] = CreateDynamic3DTextLabel(str, -1, pos[0], pos[1], pos[2]+1.5, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
				MesajGonder(playerid, "Stand koydunuz, (/stand) komutunu kullanarak kaldirabilirsiniz.");
	        }
	        case 2:
	        {
	            PlayerData[playerid][pStand] = true;
	            PlayerData[playerid][pStandObject] = CreateDynamicObject(1340, pos[0], pos[1], pos[2], 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
				format(str, sizeof(str), "{a4f237}Stand\n{FFFFFF}Yerlestiren: %s", ReturnName(playerid, 0));
				PlayerData[playerid][pStandText] = CreateDynamic3DTextLabel(str, -1, pos[0], pos[1], pos[2]+1.5, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
				MesajGonder(playerid, "Stand koydunuz, (/stand) komutunu kullanarak kaldirabilirsiniz.");
	        }
	    }
	}
	return 1;
}
Dialog:Mulklerim(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
	            cmd_araclarim(playerid);
	        }
	        case 1:
	        {
	            EvListele(playerid, playerid);
	        }
	        case 2:
	        {
	            IsyeriListele(playerid, playerid);
	        }
	        case 3:
	        {
	            GateListele(playerid, playerid);
	        }
	        case 4:
	        {
	            cmd_petlerim(playerid);
	        }
	        case 5:
	        {
	            GarajListele(playerid, playerid);
	        }
	    }
	}
	return 1;
}
stock GarajListele(playerid, id)
{
	new str[750], count;
	strcat(str, "ID\tTip\tPark Durumu\tAraç Limiti\n");
	for (new i; i<MAX_GARAGE; i++) if (GarageData[i][gExists] && GarageData[i][gSahip] == PlayerData[id][pID])
	{
	    count++;
	    format(str, sizeof(str), "%s{FFFFFF}%d\t{FFFFFF}%s\t%s\t{FFFFFF}%d\n", str, i, GarageData[i][gTip], (GarageData[id][gParkDurum]) ? ("{83e50b}Açýk") : ("{ff0000}Kapalý"), GarageData[id][gAracLimit]);
	}
	if (!count) return HataMesajGonder(playerid, "Hiç garaj yok.");
	Dialog_Show(playerid, Garajlarim, DIALOG_STYLE_TABLIST_HEADERS, "Garajlar", str, "Geri", "");
	return 1;
}
stock GateListele(playerid, id)
{
	new str[500], count;
	strcat(str, "ID\tAdres\n");
	for (new i; i<MAX_GATES; i++) if (GateData[i][gateExists] && GateData[i][gateOwner] == PlayerData[id][pID])
	{
	    count++;
	    format(str, sizeof(str), "%s%d\t%s, %s\n", str, i, GetLocation(GateData[i][gatePos][0], GateData[i][gatePos][1], GateData[i][gatePos][2]), GetCityName(GateData[i][gatePos][0], GateData[i][gatePos][1], GateData[i][gatePos][2]));
	}
	if (!count) return HataMesajGonder(playerid, "Hiç gate yok.");
	Dialog_Show(playerid, Evlerim, DIALOG_STYLE_TABLIST_HEADERS, "Gateleriniz", str, "Geri", "");
	return 1;
}
stock IsyeriListele(playerid, id)
{
	new str[500], count, tip[20];
	strcat(str, "ID\tAd\tAdres\tTip\n");
	for (new i; i<MAX_ISYERI; i++) if (Isyeri[i][isyeriExists] && Isyeri[i][isyeriSahip] == PlayerData[id][pID])
	{
	    count++;
	    switch (Isyeri[i][isyeriTip])
		{
		    case 1: tip = "Market";
		    case 2: tip = "Kiyafet Maðazasý";
		    case 3: tip = "Fast Food";
		    case 4: tip = "Araç Galerisi";
		    case 5: tip = "Elektronik";
		    case 6: tip = "Bar/Pub";
		    case 7: tip = "Kumarhane";
		}
	    format(str, sizeof(str), "%s%d\t%s\t%s, %s\t%s", str, i, Isyeri[i][isyeriName], GetLocation(Isyeri[i][isyeriPos][0], Isyeri[i][isyeriPos][1], Isyeri[i][isyeriPos][2]), GetCityName(Isyeri[i][isyeriPos][0], Isyeri[i][isyeriPos][1], Isyeri[i][isyeriPos][2]), tip);
	}
	if (!count) return HataMesajGonder(playerid, "Hiç iþyeri yok.");
	Dialog_Show(playerid, Evlerim, DIALOG_STYLE_TABLIST_HEADERS, "Ýþyerleriniz", str, "Geri", "");
	return 1;
}
stock EvListele(playerid, id)
{
	new str[1000], count;
	strcat(str, "ID\tAd\tAdres\n");
	for (new i; i<MAX_EV; i++) if (HouseInfo[i][evExists] && HouseInfo[i][evSahip] == PlayerData[id][pID])
	{
	    count++;
	    format(str, sizeof(str), "%s%d\t%s\t%s, %s\n", str, i, HouseInfo[i][evIsim], GetLocation(HouseInfo[i][evPos][0], HouseInfo[i][evPos][1], HouseInfo[i][evPos][2]), GetCityName(HouseInfo[i][evPos][0], HouseInfo[i][evPos][1], HouseInfo[i][evPos][2]));
	}
	if (!count) return HataMesajGonder(playerid, "Hiç ev yok.");
	Dialog_Show(playerid, Evlerim, DIALOG_STYLE_TABLIST_HEADERS, "Evleriniz", str, "Geri", "");
	return 1;
}
Dialog:Evlerim(playerid, response, listitem, inputtext[])
{
	if (response) return cmd_mulklerim(playerid);
	return 1;
}
CMD:kodekle(playerid, params[])
{
    if (!OyundaDegil(playerid)) return 1;
    if (PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
	new kod[20], para;
	if (sscanf(params, "is[20]", para, kod)) return KullanimMesaji(playerid, "/kodekle [Para] [Kod]");
	new query[128];
	mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `kuponlar` WHERE `kod` = '%e'", kod);
	new Cache:Radless = mysql_query(g_SQL, query);
	if (cache_num_rows())
	{
		HataMesajGonder(playerid, "Bu kupon kodu zaten bulunuyor.");
	}
	else
	{
		mysql_format(g_SQL, query, sizeof(query), "INSERT INTO `kuponlar` (`kod`, `para`) VALUES ('%e', '%d')", kod, para);
		mysql_tquery(g_SQL, query);
		MesajGonder(playerid, "Kupon kodu olusturuldu.");
	}
	cache_delete(Radless);
	return 1;
}
CMD:kodsil(playerid, params[])
{
    if (!OyundaDegil(playerid)) return 1;
    if (PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
	new kod[20];
	if (sscanf(params, "s[20]", kod)) return KullanimMesaji(playerid, "/kodsil [Kod]");
	new query[128];
	mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `kuponlar` WHERE `kod` = '%e'", kod);
	new Cache:Radless = mysql_query(g_SQL, query);
	if (cache_num_rows())
	{
		mysql_format(g_SQL, query, sizeof(query), "DELETE FROM `kuponlar` WHERE `kod` = '%e'", kod);
		mysql_tquery(g_SQL, query);
		MesajGonder(playerid, "Hediye kuponu silindi.");
	}else
	{
		HataMesajGonder(playerid, "Böyle bir kod yok.");
	}
	cache_delete(Radless);
	return 1;
}
CMD:makeadmin(playerid,params[])
{
	new id,level;
	if (!OyundaDegil(playerid)) return 1;
    if (!IsPlayerAdmin(playerid) && PlayerData[playerid][pAdmin] < 5) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
    if (sscanf(params, "ui",id,level)) return KullanimMesaji(playerid, "/makeadmin [ID/Isim] [Level]");
    if (!OyundaDegil(id)) return HataMesajGonder(playerid, "Oyuncu giris yapmamis.");
    if (level < 0 || level > 5) return HataMesajGonder(playerid, "Level 0'dan küçük, 5'den fazla olamaz.");
    MesajGonder(id, "%s adlý yetkili tarafýndan %d seviye yetkili olarak ayarlandýnýz.",PlayerData[playerid][pAdminName],level);
    MesajGonder(playerid, "%s adlý oyuncu %d seviye yetkili olarak ayarlandý.",ReturnName(id),level);
    if (level == 0)
    {
        if (PlayerData[id][pAdminDuty] == 1)
        {
            cmd_aduty(id);
        }
	}
    PlayerData[id][pAdmin] = level;
    PlayerData[id][pHelper] = 0;
    Log_Write("logs/admin-log.log", "[%s] %s Adli Admin %s Adli oyuncuyu %d seviye yetkili yapti.",ReturnDate(),ReturnName(playerid),ReturnName(id),level);
	return 1;
}

CMD:osetadmin(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 5)
	    return HataMesajGonder(playerid, "Bu komutu kullanamazsýnýz.");

	new name[MAX_PLAYER_NAME], level;

	if(sscanf(params, "s[24]d", name, level))
	    return KullanimMesaji(playerid, "/osetadmin [Karakter Adý] [Seviye]");

	new query[512];

	if (level > PlayerData[playerid][pAdmin]) return HataMesajGonder(playerid, "Kendinizden yüksek yetki veremezsiniz.");

	if (level < 0 || level > 5)
	    return HataMesajGonder(playerid, "Maksimum 5 seviye adminlik verilebilir.");


	MesajGonder(playerid, "%s adlý hesabý %d level admin yaptýn.", name, level);

	format(query,sizeof(query),"UPDATE `oyuncular` SET `AdminLevel` = %d WHERE `Isim` = '%s'", level, name);
	mysql_query(g_SQL, query, false, "", "");
	return 1;
}

CMD:ogyap(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 4)
		return HataMesajGonder(playerid, "Yeterli yetkiniz yok.");

	new oyuncuid;

	if(sscanf(params, "u", oyuncuid))
		return KullanimMesaji(playerid, "/ogyap [karakter id/isim]");

	switch(PlayerData[oyuncuid][pOyunGorevlisi])
	{
		case false:
		{
			MesajGonder(oyuncuid, "%s, adli yetkili tarafindan oyun görevlisi yapildiniz.", ReturnName(playerid));
			MesajGonder(playerid, "%s, kisisini oyun görevlisi yaptiniz.", ReturnName(oyuncuid));

			PlayerData[oyuncuid][pOyunGorevlisi] = 1;
		}

		default:
		{
			MesajGonder(oyuncuid, "%s, adli yetkili tarafindan oyun görevlisi yetkiniz alindi.", ReturnName(playerid));
			MesajGonder(playerid, "%s, kisisinin oyun görevlisi yetkisini aldiniz.", ReturnName(oyuncuid));

			PlayerData[oyuncuid][pOyunGorevlisi] = 0;
		}
	}

	return 1;
}

CMD:fgyap(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 4)
		return HataMesajGonder(playerid, "Yeterli yetkiniz yok.");

	new oyuncuid;

	if(sscanf(params, "u", oyuncuid))
		return KullanimMesaji(playerid, "/fgyap [karakter id/isim]");

	switch(PlayerData[oyuncuid][pForumGorevlisi])
	{
		case false:
		{
   			MesajGonder(oyuncuid, "%s, adli yetkili tarafindan forum görevlisi yapildiniz.", ReturnName(playerid));
			MesajGonder(playerid, "%s, kisisini forum görevlisi yaptiniz.", ReturnName(oyuncuid));

			PlayerData[oyuncuid][pForumGorevlisi] = 1;
		}

		default:
		{
   			MesajGonder(oyuncuid, "%s, adli yetkili tarafindan forum görevlisi yetkiniz alindi.", ReturnName(playerid));
			MesajGonder(playerid, "%s, kisisinin forum görevlisi yetkisini aldiniz.", ReturnName(oyuncuid));

			PlayerData[oyuncuid][pForumGorevlisi] = 0;
		}
	}

	return 1;
}

CMD:setyoutuber(playerid, params[])
{
	new id;
    if (!OyundaDegil(playerid)) return 1;
    if (PlayerData[playerid][pAdmin] < 2) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
    if (sscanf(params, "u",id)) return KullanimMesaji(playerid, "/setyoutuber [ID/Isim]");
    if (!OyundaDegil(id)) return HataMesajGonder(playerid, "Oyuncu giris yapmamis.");
    if (PlayerData[id][pYoutuber] == 0)
    {
        PlayerData[id][pYoutuber] = 1;
        MesajGonder(playerid, "%s adli kisiye Youtuber & Streamer yetkisi verdiniz.", Player_GetName(id));
        SunucuMesaji(id, "%s adli yetkili size Youtuber & Streamer yetkisi verdi. (/ytag)", PlayerData[playerid][pAdminName]);
    }
    else
    {
        PlayerData[id][pYoutuber] = 0;
        PlayerData[id][pYoutuberTag] = false;
        MesajGonder(playerid, "%s adli kisinin Youtuber & Streamer yetkisini sildiniz.", Player_GetName(id));
        SunucuMesaji(id, "%s adli yetkili tarafindan Youtuber & Streamer yetkiniz silindi.", PlayerData[playerid][pAdminName]);
	}
	return 1;
}
CMD:setprobation(playerid, params[])
{
	new id;
    if (!OyundaDegil(playerid)) return 1;
    if (PlayerData[playerid][pAdmin] < 2) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
    if (sscanf(params, "u",id)) return KullanimMesaji(playerid, "/setprobation [ID/Isim]");
    if (!OyundaDegil(id)) return HataMesajGonder(playerid, "Oyuncu giris yapmamis.");
    if (PlayerData[id][pProbation] == 0)
    {
        PlayerData[id][pProbation] = 1;
        MesajGonder(playerid, "%s adli kisiyi probationa soktunuz.", Player_GetName(id));
        SunucuMesaji(id, "%s adli yetkili sizi probationa soktu.", PlayerData[playerid][pAdminName]);
    }
    else
    {
        PlayerData[id][pProbation] = 0;
        MesajGonder(playerid, "%s adli kisiyi probationdan çýkarttý.", Player_GetName(id));
        SunucuMesaji(id, "%s adli yetkili tarafindan probationdan çýkartýldýnýz.", PlayerData[playerid][pAdminName]);
	}
	return 1;
}
CMD:setsupporter(playerid,params[])
{
	new id,level;
	if (!OyundaDegil(playerid)) return 1;
    if (PlayerData[playerid][pAdmin] < 2) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
    if (sscanf(params, "ui",id,level)) return KullanimMesaji(playerid, "/setsupporter [ID/Isim] [Level]");
    if (!OyundaDegil(id)) return HataMesajGonder(playerid, "Oyuncu giriþ yapmamis.");
    if (level < 0 || level > 5) return HataMesajGonder(playerid, "Level 0'dan küçük, 5'den fazla olamaz.");
    MesajGonder(id, "%s adlý yetkili tarafýndan %d seviye supporter olarak ayarlandýnýz.",PlayerData[playerid][pAdminName],level);
    MesajGonder(playerid, "%s adlý oyuncu %d seviye supporter olarak ayarlandý.",ReturnName(id),level);
    if (level == 0)
    {
        if (PlayerData[id][pHelperDuty] == 1)
        {
            cmd_supporters(id);
        }
	}
    PlayerData[id][pHelper] = level;
    PlayerData[id][pAdmin] = 0;
    Log_Write("logs/admin-log.log", "[%s] %s Adli Admin %s Adli oyuncuyu %d seviye supporter yapti.",ReturnDate(),ReturnName(playerid),ReturnName(id),level);
	return 1;
}
CMD:binaekle(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 3)
        return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

    if (isnull(params) || strlen(params) > 32)
        return KullanimMesaji(playerid, "/binaekle [ad]");

    new id = Entrance_Create(playerid, params);

    if (id == -1)
        return HataMesajGonder(playerid, "Sunucu bina sinirina ulasmistir.");

    MesajGonder(playerid, "Basariyla bina olusturdun, ID: %d.", id);
    return 1;
}
CMD:arsaolustur(playerid, params[])
{
	new tip, metrekare, fiyat, maxtohum;
    if (PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
    if (sscanf(params, "iiii", tip, metrekare, fiyat, maxtohum)) return KullanimMesaji(playerid, "/arsaolustur [Tip 1 - Satilik 2 - Kiralik] [Metrekare] [Fiyat] [Max Tohum]");
    if (tip < 1 || tip > 2) return HataMesajGonder(playerid, "Geçersiz tip girdiniz, 1 veya 2 olmalidir.");
    if (metrekare < 10 || metrekare > 100) return HataMesajGonder(playerid, "Metrekare 10 ile 100 arasinda olmalidir.");

    new id = Arsa_Olustur(playerid, tip, metrekare, fiyat, maxtohum);
    if (id == -1) return HataMesajGonder(playerid, "Sunucuda daha fazla arsa olusturulamaz.");
    MesajGonder(playerid, "Arsa olusturuldu, ID: %d.", id);
	return 1;
}
CMD:arsasil(playerid, params[])
{
    if (!OyundaDegil(playerid)) return 1;
    if (PlayerData[playerid][pAdmin] < 3) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
    new id;
    if (sscanf(params, "i", id)) return KullanimMesaji(playerid, "/arsasil [ID]");
    if ((id < 0 || id >= MAX_ARSA) || !ArsaBilgi[id][arsaExists]) return HataMesajGonder(playerid, "Geçersiz ID.");
    Arsa_Sil(id);
    MesajGonder(playerid, "Arsa silindi");
	return 1;
}
CMD:arsaduzenle(playerid, params[])
{
    if (!OyundaDegil(playerid)) return 1;
    if (PlayerData[playerid][pAdmin] < 3) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
    static
        id,
        type[24],
        string[128];

    if (sscanf(params, "ds[24]S()[128]", id, type, string))
    {
        KullanimMesaji(playerid, "/arsaduzenle [ID] [Ayar]");
        return SendClientMessage(playerid, COLOR_YELLOW, "[AYARLAR]: {FFFFFF}tip, pozisyon, fiyat, maxtohum, metrekare");
    }
    if ((id < 0 || id >= MAX_ARSA) || !ArsaBilgi[id][arsaExists]) return HataMesajGonder(playerid, "Geçersiz ID girdiniz.");
    if (!strcmp(type, "tip", true))
    {
        if (isnull(string)) return KullanimMesaji(playerid, "/arsaduzenle [ID] [tip] [1 - Satilik 2 - Kiralik]");
        if (strval(string) < 1 || strval(string) > 2) return HataMesajGonder(playerid, "Geçersiz tip.");
        ArsaBilgi[id][arsaTip] = strval(string);
        Arsa_Kaydet(id);
        ArsaUpdate(id);
        return 1;
    }
    if (!strcmp(type, "pozisyon", true))
    {
        GetPlayerPos(playerid, ArsaBilgi[id][arsaPos][0], ArsaBilgi[id][arsaPos][1], ArsaBilgi[id][arsaPos][2]);
        Arsa_Kaydet(id);
        ArsaUpdate(id);
        return 1;
    }
    if (!strcmp(type, "fiyat", true))
    {
        if (isnull(string)) return KullanimMesaji(playerid, "/arsaduzenle [ID] [fiyat] [Fiyat]");
        ArsaBilgi[id][arsaFiyat] = strval(string);
        Arsa_Kaydet(id);
        ArsaUpdate(id);
        return 1;
    }
    if (!strcmp(type, "maxtohum", true))
    {
        if (isnull(string)) return KullanimMesaji(playerid, "/arsaduzenle [ID] [maxtohum] [Tohum Kapasitesi]");
        ArsaBilgi[id][arsaMaxTohum] = strval(string);
        Arsa_Kaydet(id);
        ArsaUpdate(id);
        return 1;
    }
    if (!strcmp(type, "metrekare", true))
    {
        if (isnull(string)) return KullanimMesaji(playerid, "/arsaduzenle [ID] [metrekare] [Metrekare]");
        ArsaBilgi[id][Metrekare] = strval(string);
        Arsa_Kaydet(id);
        ArsaUpdate(id);
        return 1;
    }
	return 1;
}
CMD:npcekle(playerid)
{
    if (PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
    for (new i; i<MAXIMUM_NPC; i++) if (NPCBilgi[i][npcExists] == false)
    {
        NPCBilgi[i][npcExists] = true;
        NPCBilgi[i][npcID] = i;

        format(NPCBilgi[i][npcAd], 24, "Yok");

        NPCBilgi[i][npcSkin] = 1;

		GetPlayerPos(playerid, NPCBilgi[i][npcPos][0], NPCBilgi[i][npcPos][1], NPCBilgi[i][npcPos][2]);
        GetPlayerFacingAngle(playerid, NPCBilgi[i][npcPos][3]);

		NPCBilgi[i][npcVw] = GetPlayerVirtualWorld(playerid);

		NPCSecenekler[i][0] = "Yok";
		NPCSecenekler[i][1] = "Yok";
        NPCSecenekler[i][2] = "Yok";
        NPCSecenekler[i][3] = "Yok";
        NPCSecenekler[i][4] = "Yok";

		NPCSecenekCevaplar[i][0] = "Yok";
        NPCSecenekCevaplar[i][1] = "Yok";
        NPCSecenekCevaplar[i][2] = "Yok";
        NPCSecenekCevaplar[i][3] = "Yok";
        NPCSecenekCevaplar[i][4] = "Yok";

		new query[256];

		mysql_format(g_SQL, query, sizeof query, "INSERT INTO `npcler` (`npcID`) VALUES ('%d')", i);
		mysql_query (g_SQL, query);

        MesajGonder(playerid, "NPC Eklendi, (/npcduzenle) komutu ile düzenleyebilirsiniz. (ID: %d)", i);

        NPC_Refresh(i);
		NPC_Save(i);
		return 1;
    }
    HataMesajGonder(playerid, "Sunucu maksimum NPC limitine ulasmistir.");
	return 1;
}
CMD:npcduzenle(playerid, params[])
{
    static
        id,
        type[24],
        string[128];

    if (PlayerData[playerid][pAdmin] < 3) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
    if (sscanf(params, "ds[24]S()[128]", id, type, string))
    {
        KullanimMesaji(playerid, "/npcduzenle [ID] [Ayar]");
        return SendClientMessage(playerid, COLOR_YELLOW, "[AYARLAR]: {FFFFFF}ad, pozisyon, skin, secenekler");
    }
    if ((id < 0 || id >= MAXIMUM_NPC) || !NPCBilgi[id][npcExists]) return HataMesajGonder(playerid, "Geçersiz ID girdiniz.");
    if (!strcmp(type, "ad", true))
    {
        new name[32];

        if (sscanf(string, "s[32]", name))
            return KullanimMesaji(playerid, "/npcduzenle [id] [ad] [yeni ad]");

        format(NPCBilgi[id][npcAd], 24, name);

        NPC_Refresh(id);
        NPC_Save(id);
    }
    if (!strcmp(type, "pozisyon", true))
    {
        GetPlayerPos(playerid, NPCBilgi[id][npcPos][0], NPCBilgi[id][npcPos][1], NPCBilgi[id][npcPos][2]);
        GetPlayerFacingAngle(playerid, NPCBilgi[id][npcPos][3]);
        NPCBilgi[id][npcVw] = GetPlayerVirtualWorld(playerid);

        NPC_Refresh(id);
        NPC_Save(id);
    }
    if (!strcmp(type, "skin", true))
    {
        new skin;
        if (sscanf(string, "d", skin)) return KullanimMesaji(playerid, "/npcduzenle [id] [skin] [Skin ID]");
        if (skin < 1 || skin > 311) return HataMesajGonder(playerid, "Geçersiz Skin ID.");
        NPCBilgi[id][npcSkin] = skin;
        NPC_Refresh(id);
        NPC_Save(id);
    }
    if (!strcmp(type, "secenekler", true))
    {
        NPC_Secenekler(playerid, id);
    }
	return 1;
}
CMD:npcsil(playerid, params[])
{
	new id;
    if (PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
    if (sscanf(params, "i", id)) return KullanimMesaji(playerid, "/npcsil [ID]");
    if ((id < 0 || id >= MAXIMUM_NPC) || NPCBilgi[id][npcExists] == false) return HataMesajGonder(playerid, "Geçersiz ID.");
    DestroyDynamic3DTextLabel(NPCBilgi[id][npcLabel]);
    DestroyDynamicActor(NPCBilgi[id][npcActor]);
    new query[124];
    format(query, sizeof(query), "DELETE FROM `npcler` WHERE `npcID` = '%d'", NPCBilgi[id][npcID]);
    mysql_query(g_SQL, query, false);
    MesajGonder(playerid, "NPC Silindi, ID: %d", id);
	return 1;
}
CMD:gotopos(playerid,params[])
{
	new intid,Float:pos[3];
	if (!OyundaDegil(playerid)) return 1;
	if (PlayerData[playerid][pAdmin] < 1 && !PlayerData[playerid][pOyunGorevlisi]) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok");
	if (PlayerData[playerid][pBaygin] == 1) return HataMesajGonder(playerid, "Bunu su an yapamazsiniz.");
	if (sscanf(params, "ifff",intid,pos[0],pos[1],pos[2])) return KullanimMesaji(playerid, "/gotopos [INT ID] [X] [Y] [Z]");
	SetPlayerInterior(playerid,intid);
	SetPlayerPos(playerid,pos[0],pos[1],pos[2]);
	return 1;
}
CMD:x(playerid, params[])
{
    new Float:posx, Float:posy, Float:posz, Float:npos;
    if (PlayerData[playerid][pAdmin] >= 1)
    {
        if (sscanf(params, "f", npos)) return KullanimMesaji(playerid, "/x [Kordinat]");
        GetPlayerPos(playerid, posx, posy, posz);
        SetPlayerPos(playerid, posx+npos, posy, posz);
        return 1;
    }
    else return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
}
CMD:y(playerid, params[])
{
    new Float:posx, Float:posy, Float:posz, Float:npos;
    if (PlayerData[playerid][pAdmin] >= 1)
    {
        if (sscanf(params, "f", npos)) return KullanimMesaji(playerid, "/y [Kordinat]");
        GetPlayerPos(playerid, posx, posy, posz);
        SetPlayerPos(playerid, posx, posy+npos, posz);
        return 1;
    }
    else return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
}
CMD:z(playerid, params[])
{
    new Float:posx, Float:posy, Float:posz, Float:npos;
    if (PlayerData[playerid][pAdmin] >= 1)
    {
        if (sscanf(params, "f", npos)) return KullanimMesaji(playerid, "/z [Kordinat]");
        GetPlayerPos(playerid, posx, posy, posz);
        SetPlayerPos(playerid, posx, posy, posz+npos);
        return 1;
    }
    else return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
}
CMD:binaduzenle(playerid, params[])
{
    static
        id,
        type[24],
        string[128];

    if (PlayerData[playerid][pAdmin] < 4)
        return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

    if (sscanf(params, "ds[24]S()[128]", id, type, string))
    {
        KullanimMesaji(playerid, "/binaduzenle [id] [Parametre]");
        SendClientMessage(playerid, COLOR_YELLOW, "[TERIMLER]:{FFFFFF} pozisyon, interior, sifre, isim, kilit, mapicon, icon, vw, garajbaglanti, vip");
        return 1;
    }
    if ((id < 0 || id >= MAX_ENTRANCES) || !EntranceData[id][entranceExists])
        return HataMesajGonder(playerid, "Geçersiz ID girdiniz.");

	if (!strcmp(type, "icon", true))
	{
	    new icon;

	    if (sscanf(string, "d", icon))
	        return KullanimMesaji(playerid, "/binaduzenle [id] [icon]");

	    EntranceData[id][entrancepIcon] = icon;

        Entrance_Refresh(id);
		Entrance_Save(id);
	}
	if (!strcmp(type, "vw", true))
	{
	    new vw;
	    if (sscanf(string, "d", vw))
            return KullanimMesaji(playerid, "/binaduzenle [id] [vw] [Vw] (-1 yazarsaniz otomatik virtual world ayarlanir)");

        EntranceData[id][entranceInteriorVw] = vw;
        Entrance_Save(id);
	}
	if (!strcmp(type, "garajbaglanti", true))
	{
	    new garaj;
	    if (sscanf(string, "d", garaj))
            return KullanimMesaji(playerid, "/binaduzenle [id] [garajbaglanti] [Garaj ID] (-1 yazarsaniz hiçbir garaj ile baglantisi olmaz)");
        if ((garaj < 0 || garaj >= MAX_GARAGE) || !GarageData[garaj][gExists])
	    return HataMesajGonder(playerid, "Hatali garaj ID girdiniz.");

        EntranceData[id][entranceBaglanti] = garaj;
        Entrance_Save(id);
	}
    if (!strcmp(type, "pozisyon", true))
    {
        GetPlayerPos(playerid, EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2]);
        GetPlayerFacingAngle(playerid, EntranceData[id][entrancePos][3]);

        EntranceData[id][entranceExterior] = GetPlayerInterior(playerid);
        EntranceData[id][entranceExteriorVW] = GetPlayerVirtualWorld(playerid);

        Entrance_Refresh(id);
        Entrance_Save(id);

        AdminMessage(COLOR_LIGHTRED, "*** %s adli yetkili %d ID'li binanin pozisyonunu degistirdi.", PlayerData[playerid][pAdminName], id);
    }
    else if (!strcmp(type, "interior", true))
    {
        GetPlayerPos(playerid, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]);
        GetPlayerFacingAngle(playerid, EntranceData[id][entranceInt][3]);

        EntranceData[id][entranceInterior] = GetPlayerInterior(playerid);
        Entrance_Save(id);
        AdminMessage(COLOR_LIGHTRED, "*** %s adli yetkili %d ID'li binanin interiorunu degistirdi.", PlayerData[playerid][pAdminName], id);
    }
    else if (!strcmp(type, "mapicon", true))
    {
        new icon;

        if (sscanf(string, "d", icon))
            return KullanimMesaji(playerid, "/binaduzenle [id] [mapicon] [map icon]");

        if (icon < 0 || icon > 63)
            return HataMesajGonder(playerid, "Geçersiz Map Icon ID.");

        EntranceData[id][entranceIcon] = icon;

        Entrance_Refresh(id);
        Entrance_Save(id);

        AdminMessage(COLOR_LIGHTRED, "*** %s adli yetkili %d ID'li binanin mapiconunu %d olarak ayarladi.", PlayerData[playerid][pAdminName], id, icon);
    }
    else if (!strcmp(type, "vip", true))
    {
        new i;

        if (sscanf(string, "d", i))
            return KullanimMesaji(playerid, "/binaduzenle [id] [vip] [0 özel degil 1 özel]");

        EntranceData[id][eVip] = i;

        Entrance_Refresh(id);
        Entrance_Save(id);

        AdminMessage(COLOR_LIGHTRED, "*** %s adli yetkili %d ID'li binanin mapiconunu %d olarak ayarladi.", PlayerData[playerid][pAdminName], id, i);
    }
    else if (!strcmp(type, "sifre", true))
    {
        new password[32];

        if (sscanf(string, "s[32]", password))
            return KullanimMesaji(playerid, "/binaduzenle [id] [sifre] [sifre] (Kapatmak için 'yok' yazin)");

        if (!strcmp(password, "yok", true)) {
            EntranceData[id][entrancePass][0] = 0;
        }
        else {
            format(EntranceData[id][entrancePass], 32, password);
        }
        Entrance_Save(id);
        AdminMessage(COLOR_LIGHTRED, "*** %s adli yetkili %d ID'li binanin sifresini degistirdi.", PlayerData[playerid][pAdminName], id);
    }
    else if (!strcmp(type, "kilit", true))
    {
		if (EntranceData[id][entranceLocked] == 1)
		{
		    EntranceData[id][entranceLocked] = 0;
		    AdminMessage(COLOR_LIGHTRED, "*** %s adli yetkili tarafindan %d ID'li binanin kilidi açýldý.", PlayerData[playerid][pAdminName], id);
		}
		else
		{
		    EntranceData[id][entranceLocked] = 1;
		    AdminMessage(COLOR_LIGHTRED, "*** %s adli yetkili tarafindan %d ID'li bina kilitlendi.", PlayerData[playerid][pAdminName], id);
		}
        Entrance_Save(id);
    }
    else if (!strcmp(type, "isim", true))
    {
        new name[32];

        if (sscanf(string, "s[32]", name))
            return KullanimMesaji(playerid, "/binaduzenle [id] [isim] [yeni isim]");

        format(EntranceData[id][entranceName], 32, name);

        Entrance_Refresh(id);
        Entrance_Save(id);

        AdminMessage(COLOR_LIGHTRED, "*** %s adli yetkili %d ID'li binanin ismini %s olarak ayarladi.", PlayerData[playerid][pAdminName], id, name);
    }
    return 1;
}
CMD:binasil(playerid, params[])
{
    static
        id = 0;

    if (PlayerData[playerid][pAdmin] < 4)
        return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

    if (sscanf(params, "d", id))
        return KullanimMesaji(playerid, "/binasil [bina id]");

    if ((id < 0 || id >= MAX_ENTRANCES) || !EntranceData[id][entranceExists])
        return HataMesajGonder(playerid, "Geçersiz ID girdiniz.");

    Entrance_Delete(id);
    MesajGonder(playerid, "Bina silindi, ID: %d", id);
    return 1;
}

CMD:achat(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] < 1) return HataMesajGonder(playerid,"Bu komutu kullanmak için yetkiniz yok");

    if (isnull(params))
        return KullanimMesaji(playerid, "/a [Mesaj]");

    foreach(new i:Player) if(PlayerData[i][pAdmin] >= 1 && PlayerData[i][pAyarlar][6] == 0)
    {
        if(strlen(params) > 64)
        {
            SendClientMessageEx(i, -1, "{e61700}[ADMIN] %s %s(%d): {e61700}%.64s", GetAdminRank(playerid), PlayerData[playerid][pAdminName], playerid, params);
            SendClientMessageEx(i, -1, "{e61700}...%s", params[64]);
        }
        else
        {
            SendClientMessageEx(i, -1, "{e61700}[ADMIN] %s %s(%d): %s ", GetAdminRank(playerid), PlayerData[playerid][pAdminName], playerid, params);
        }
    }
     Log_Write("logs/admin-log.log","[ADMIN CHAT] %s: %s",ReturnName(playerid, 0), trcar(params));
    return 1;
}

CMD:setstaffname(playerid,params[])
{
	new id,name[24];
	if (PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok");
	if (sscanf(params, "us[24]",id,name)) return KullanimMesaji(playerid, "/setstaffname [ID/Isim] [Isim]");
	if (!OyundaDegil(id)) return HataMesajGonder(playerid, "Oyuncu giriþ yapmamýþ.");
	if (strlen(name) < 3 || strlen(name) > 24) return HataMesajGonder(playerid, "Ýsim 3 ile 24 karakter arasýnda olmalýdýr.");
	if (TurkceKarakter(name)) return HataMesajGonder(playerid, "Ýsim özel karakterler ve türkçe karakterler içeremez.");
	format(PlayerData[id][pAdminName],24,name);

	MesajGonder(playerid, "%s adlý oyuncunun yetkili adý \"%s\" olarak ayarlandý.",ReturnName(id), name);
	SendClientMessageEx(id, -1, "{5AE600}Bilgi: {FFFFFF}Artýk iþbaþýnda adýn %s olarak gözükecek, þimdi iþbaþý yapabilirsin.", name);

	Log_Write("logs/admin-log.log", "[%s] %s Adli Admin %s Adli oyuncunun admin adini %s yapti.",ReturnDate(),ReturnName(playerid),ReturnName(id),name);
	return 1;
}

CMD:aduty(playerid)
{
    if (PlayerData[playerid][pAdmin] < 1 && !PlayerData[playerid][pOyunGorevlisi] && !PlayerData[playerid][pForumGorevlisi]) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
    if (!PlayerData[playerid][pAdminDuty])
    {
        PlayerTextDrawShow(playerid, adminduty[playerid]);
        PlayerData[playerid][pAdminDuty] = 1;
        MesajGonder(playerid,"Ýþbaþý yaptýnýz.");
    }
    else
    {
        PlayerTextDrawHide(playerid, adminduty[playerid]);
        PlayerData[playerid][pAdminDuty] = 0;
        SetPlayerHealth(playerid, 100);
        MesajGonder(playerid,"Ýþbaþýndan çýktýnýz.");
	}
	return 1;
}

CMD:apark(playerid, params[])
{
	new id, garajid;
    if (PlayerData[playerid][pAdmin] < 1) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
    if (sscanf(params, "ii", id, garajid)) return KullanimMesaji(playerid, "/apark [Araç ID] [Garaj ID] (garajda degilse -1 yaz)");
	if (!IsValidVehicle(id)) return HataMesajGonder(playerid, "Geçersiz Araç ID.");
	new vehicleid = Car_GetID(id);
	if (vehicleid == -1) return HataMesajGonder(playerid, "Geçersiz Araç ID.");
 	GetVehiclePos(AracInfo[vehicleid][aracVehicle], AracInfo[vehicleid][aracPos][0],AracInfo[vehicleid][aracPos][1], AracInfo[vehicleid][aracPos][2]);
	GetVehicleZAngle(AracInfo[vehicleid][aracVehicle], AracInfo[vehicleid][aracPos][3]);
 	AracInfo[vehicleid][aracGaraj] = garajid;
	AracInfo[vehicleid][aracInterior] = CarInterior[id];
	AracInfo[vehicleid][aracWorld] = GetVehicleVirtualWorld(id);
 	Arac_Kaydet(vehicleid);

	Arac_Spawn(vehicleid);

	MesajGonder(playerid, "Araç park edildi.");
	return 1;
}
CMD:savepos(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 2 && !PlayerData[playerid][pOyunGorevlisi] && !PlayerData[playerid][pForumGorevlisi]) return HataMesajGonder(playerid, "Yetkin yok!");
	GetPlayerPos(playerid, tx, ty, tz);
	SunucuMesaji(playerid, "Bulunduðunuz kordinat kaydedildi.(/loadpos)");
	new rank[24];
    if (PlayerData[playerid][pHelper] > 0) format(rank, sizeof(rank), "(Lv.%d) Supporter", PlayerData[playerid][pHelper]);
    else format(rank, sizeof(rank), "%s", GetAdminRank(playerid));
    AdminHelperMessage(COLOR_LIGHTRED, "AdmCmd: %s %s pozisyonu kaydetti.", rank, PlayerData[playerid][pAdminName], playerid);
	return 1;
}
CMD:loadpos(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 2 && !PlayerData[playerid][pOyunGorevlisi] && !PlayerData[playerid][pForumGorevlisi]) return HataMesajGonder(playerid, "Yetkin yok!");
	SetPlayerPos(playerid, tx, ty, tz);
	SunucuMesaji(playerid, "Kaydedilen konum yüklendi.");
	new rank[24];
    if (PlayerData[playerid][pHelper] > 0) format(rank, sizeof(rank), "(Lv.%d) Supporter", PlayerData[playerid][pHelper]);
    else format(rank, sizeof(rank), "%s", GetAdminRank(playerid));
    AdminHelperMessage(COLOR_LIGHTRED, "AdmCmd: %s %s son kaydettiði pozisyonu yükledi.", rank, PlayerData[playerid][pAdminName], playerid);
	return 1;
}
CMD:sduty(playerid)
{
    if (PlayerData[playerid][pHelper] < 1) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
    if (!PlayerData[playerid][pHelperDuty])
    {
        PlayerTextDrawShow(playerid, helperduty[playerid]);
        PlayerData[playerid][pHelperDuty] = 1;
        MesajGonder(playerid,"Ýþbaþý yaptýnýz.");
    }
    else
    {
        PlayerTextDrawHide(playerid, helperduty[playerid]);
        PlayerData[playerid][pHelperDuty] = 0;
        MesajGonder(playerid,"Ýþbaþýndan çýktýnýz.");
	}
	return 1;
}
CMD:saracekle(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] < 4)
        return 0;

    new model, fiyat;

    if(sscanf(params, "dd", model, fiyat))
        return KullanimMesaji(playerid, "/saracekle [araç modeli] [fiyat]");

    if(fiyat < 0)
        return HataMesajGonder(playerid, "Geçersiz fiyat girdiniz.");

    new query[57 + 11 + 11 + 1];

    mysql_format(g_SQL, query, sizeof(query), "INSERT INTO satilikaraclar SET model = '%d', fiyat = '%d'", model, fiyat);
    mysql_query(g_SQL, query);

    SunucuMesaji(playerid, "%d numarali araci $%d olarak galeriye eklediniz.", model, fiyat);

    return 1;
}

CMD:aracolustur(playerid,params[])
{
	new model,color1,color2,tip,id = -1, idx;
	if (PlayerData[playerid][pAdmin] < 3) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok");
	if (sscanf(params, "iiiii",model,color1,color2,tip,idx))
	{
	    KullanimMesaji(playerid, "/aracolustur [Model ID] [Renk 1] [Renk 2] [Tip] [Faction ID/Kira Ucret/Fiyat]");
	    SendClientMessage(playerid,-1, "{00FF15}[TIP]: {FFFFFF}1: Birlik Araci 2: Meslek Araci 3: Kiralik 4: Normal Araç 5: VIP Araci 6: Ehliyet");
	    return 1;
 	}
 	if (!IsValidVehicleModel(model)) return HataMesajGonder(playerid, "Hatali Model ID");
 	if (tip < 1 || tip > 6) return HataMesajGonder(playerid, "Tip 1 ile 6 arasinda olmalidir.");

    static
    	Float:x,
		Float:y,
		Float:z,
		Float:angle;

    GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, angle);

	id = Arac_Olustur(-1,model,GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid), Garage_Inside(playerid), x,y,z,angle,color1,color2,tip,idx);

	if (id == -1)
		return HataMesajGonder(playerid, "Sunucu maksimum araç sayýsýna ulaþmýþtýr.");

	AracInfo[id][aracDisplay] = true;

	SetVehicleVirtualWorld(AracInfo[id][aracVehicle], GetPlayerVirtualWorld(playerid));
	SetPlayerPos(playerid, x, y, z+2);

	MesajGonder(playerid, "Araç oluþturuldu, ID: %d.", AracInfo[id][aracVehicle]);
	return 1;
}

CMD:aracsil(playerid,params[])
{
	new id = 0;
	if (PlayerData[playerid][pAdmin] < 3) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok");
	if (sscanf(params, "d", id))
 	{
	 	if (IsPlayerInAnyVehicle(playerid))
		 	id = GetPlayerVehicleID(playerid);

		else return KullanimMesaji(playerid, "/aracsil [Araç ID]");
	}
	if (!IsValidVehicle(id) || Car_GetID(id) == -1) return HataMesajGonder(playerid, "Hatalý Araç ID.");
	Arac_Sil(Car_GetID(id));
	MesajGonder(playerid, "Araç silindi, ID: %d.", id);
	return 1;
}
CMD:gateolustur(playerid)
{
	static id = -1;
	if (PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok");
	new
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;
	  GetPlayerPos(playerid,x,y,z);
	  GetPlayerFacingAngle(playerid,angle);
	id = Gate_Create(x,y,z,angle,GetPlayerInterior(playerid),GetPlayerVirtualWorld(playerid));
	if (id == -1) return HataMesajGonder(playerid, "Sunucu maksimum gate limitine ulasti.");
	MesajGonder(playerid, "Gate olusturuldu, ID: %d",id);
	return 1;
}

CMD:gateduzenle(playerid, params[])
{
	static
	    id,
	    type[24],
	    string[128];

	if (PlayerData[playerid][pAdmin] < 4)
	    return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok");

	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	KullanimMesaji(playerid, "/gateduzenle [ID] [isim]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[ISIM]:{FFFFFF} bolge, hiz, radius, zaman, model, pos, hareket, sifre, linkid, faction, sahip, world, vip");
		return 1;
	}

	if ((id < 0 || id >= MAX_GATES) || !GateData[id][gateExists])
	    return HataMesajGonder(playerid, "Hatali Gate ID girdiniz.");

	if (!strcmp(type, "vip", true))
	{
		static vipSeviyesi;

		if (sscanf(string, "d", vipSeviyesi))
		    return KullanimMesaji(playerid, "/gateduzenle [ID] [vip] [VIP Seviyesi]");

		if (vipSeviyesi < 0 || vipSeviyesi > 3)
		    return HataMesajGonder(playerid, "VIP Seviyesi minimum 0, maksimum 3 olmalidir.");

        GateData[id][gateVip] = vipSeviyesi;

		Gate_Save(id);
	    return 1;
	}

    if (!strcmp(type, "bolge", true))
	{
		static
		    Float:x,
		    Float:y,
		    Float:z,
		    Float:angle;

		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, angle);

		x += 3.0 * floatsin(-angle, degrees);
		y += 3.0 * floatcos(-angle, degrees);

		GateData[id][gatePos][0] = x;
		GateData[id][gatePos][1] = y;
		GateData[id][gatePos][2] = z;
		GateData[id][gatePos][3] = 0.0;
		GateData[id][gatePos][4] = 0.0;
		GateData[id][gatePos][5] = angle;

		SetDynamicObjectPos(GateData[id][gateObject], x, y, z);
		SetDynamicObjectRot(GateData[id][gateObject], 0.0, 0.0, angle);

		GateData[id][gateOpened] = false;

		Gate_Save(id);
		return 1;
	}
	else if (!strcmp(type, "hiz", true))
	{
	    static
	        Float:speed;

		if (sscanf(string, "f", speed))
		    return KullanimMesaji(playerid, "/gateduzenle [ID] [hiz] [Hiz]");

		if (speed < 0.0 || speed > 20.0)
		    return HataMesajGonder(playerid, "Hiz 0 ile 20 arasinda olmalidir.");

        GateData[id][gateSpeed] = speed;

		Gate_Save(id);
		return 1;
	}
 	else if (!strcmp(type, "sahip", true))
	{
	    static
	        sahip = -1;

		if (sscanf(string, "d", sahip))
		    return KullanimMesaji(playerid, "/gateduzenle [ID] [sahip] [sql id] (-1 kapatir)");


        GateData[id][gateOwner] = sahip;
		Gate_Save(id);
        AdminMessage(COLOR_RED, "*** %s adlý yetkili tarafýndan %d ID'li gatenin sahibi SQL id %d olarak ayarlandý.", PlayerData[playerid][pAdminName], id, sahip);
		return 1;
	}
	else if (!strcmp(type, "radius", true))
	{
	    static
	        Float:radius;

		if (sscanf(string, "f", radius))
		    return KullanimMesaji(playerid, "/gateduzenle [ID] [radius] [Radius]");

		if (radius < 0.0 || radius > 20.0)
		    return HataMesajGonder(playerid, "Radius 0 ile 20 arasýnda olmalýdýr.");

        GateData[id][gateRadius] = radius;

		Gate_Save(id);
		return 1;
	}
	else if (!strcmp(type, "zaman", true))
	{
	    static
	        time;

		if (sscanf(string, "d", time))
		    return KullanimMesaji(playerid, "/gateduzenle [ID] [zaman] [Zaman] (0 kapatir)");

		if (time < 0 || time > 60000)
		    return HataMesajGonder(playerid, "0 ile 60,000 ms arasinda olmalidir.");

        GateData[id][gateTime] = time;

		Gate_Save(id);
		return 1;
	}
	else if (!strcmp(type, "model", true))
	{
	    static
	        model;

		if (sscanf(string, "d", model))
		    return KullanimMesaji(playerid, "/gateduzenle [ID] [model] [gate model]");

		if (!IsValidObjectModel(model))
		    return HataMesajGonder(playerid, "Hatali Obje ID.");

        GateData[id][gateModel] = model;

		DestroyDynamicObject(GateData[id][gateObject]);
		GateData[id][gateObject] = CreateDynamicObject(GateData[id][gateModel], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5], GateData[id][gateWorld], GateData[id][gateInterior]);

		Gate_Save(id);
		return 1;
	}
    else if (!strcmp(type, "pos", true))
	{
	   	EditDynamicObject(playerid, GateData[id][gateObject]);

		PlayerData[playerid][pEditGate] = id;
        PlayerData[playerid][pEditType] = 1;
		SunucuMesaji(playerid, "%d ID'li gatenin pozisyonunu degistiriyorsunuz.", id);
		return 1;
	}
	else if (!strcmp(type, "hareket", true))
	{
	   	EditDynamicObject(playerid, GateData[id][gateObject]);

		PlayerData[playerid][pEditGate] = id;
		PlayerData[playerid][pEditType] = 2;

		SunucuMesaji(playerid, "%d ID'li gatenin açilis pozisyonunu degistiriyorsunuz.", id);
		return 1;
	}
	else if (!strcmp(type, "linkid", true))
	{
	    static
	        linkid = -1;

		if (sscanf(string, "d", linkid))
		    return KullanimMesaji(playerid, "/gateduzenle [id] [linkid] [gate link] (-1 kapatir)");

        if ((linkid < -1 || linkid >= MAX_GATES) || (linkid != -1 && !GateData[linkid][gateExists]))
	    	return HataMesajGonder(playerid, "Hatali gate id.");

        GateData[id][gateLinkID] = (linkid == -1) ? (-1) : (GateData[linkid][gateID]);
		Gate_Save(id);

		return 1;
	}
	else if (!strcmp(type, "faction", true))
	{
	    static
	        factionid = -1;

		if (sscanf(string, "d", factionid))
		    return KullanimMesaji(playerid, "/gateduzenle [ID] [faction] [gate faction] (-1 kapatir)");


        GateData[id][gateFaction] = factionid;
		Gate_Save(id);

		return 1;
	}
	else if (!strcmp(type, "sifre", true))
	{
	    static
	        pass[32];

		if (sscanf(string, "s[32]", pass))
		    return KullanimMesaji(playerid, "/gateduzenle [ID] [sifre] [gate sifre] ( 'yok' gate'yi sifresiz yapar)");

		if (!strcmp(pass, "yok", true))
			GateData[id][gatePass][0] = 0;

		else format(GateData[id][gatePass], 32, pass);

		Gate_Save(id);
		return 1;
	}
	else if (!strcmp(type, "world", true))
	{
	    GateData[id][gateWorld] = GetPlayerVirtualWorld(playerid);
	    DestroyDynamicObject(GateData[id][gateObject]);
		GateData[id][gateObject] = CreateDynamicObject(GateData[id][gateModel], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5], GateData[id][gateWorld], GateData[id][gateInterior]);
	    Gate_Save(id);
	}
	return 1;
}
CMD:gatesil(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 4)
	    return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok");

	if (sscanf(params, "d", id))
	    return KullanimMesaji(playerid, "/gatesil [Gate ID]");

	if ((id < 0 || id >= MAX_GATES) || !GateData[id][gateExists])
	    return HataMesajGonder(playerid, "Hatali gate ID girdiniz.");

	Gate_Sil(id);
	MesajGonder(playerid, "Gate silindi, ID: %d.", id);
	return 1;
}
CMD:garajolustur(playerid, params[])
{
	new tip[20], interiorid;
	if (PlayerData[playerid][pAdmin] < 5)
	    return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

	if (sscanf(params, "is[20]", interiorid, tip)) return KullanimMesaji(playerid, "/garajolustur [Interior ID] [Tip]");
	if (!(0 <= interiorid <= sizeof(GarageInteriors)-1)) return HataMesajGonder(playerid, "Geçersiz Interior ID girdiniz.");
	new Float:pos[3];
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	new id = Garaj_Olustur(tip, interiorid, pos[0], pos[1], pos[2], GetPlayerVirtualWorld(playerid));
	if (id == -1) return HataMesajGonder(playerid, "Sunucu maksimum garaj limitine ulasti.");
	MesajGonder(playerid, "Garaj olusturuldu, (/garajduzenle) komutu ile garaji düzenleyebilirsiniz. (ID: %d)", id);
	return 1;
}
CMD:garajsil(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 5)
	    return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
	new id;
	if (sscanf(params, "i", id)) return KullanimMesaji(playerid, "/garajsil [ID]");
	if ((id < 0 || id >= MAX_GARAGE) || !GarageData[id][gExists])
	    return HataMesajGonder(playerid, "Hatali garaj ID girdiniz.");

	Garaj_Sil(id);
	MesajGonder(playerid, "Garaj silindi, ID: %d.", id);
	return 1;
}
CMD:garajduzenle(playerid, params[])
{
	static
		id,
		type[24],
		string[128];

    if (PlayerData[playerid][pAdmin] < 5)
	    return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok");

	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	KullanimMesaji(playerid, "/garajduzenle [ID] [isim]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[ISIM]:{FFFFFF} kilit, sifre, birlik, sahip, pos, interior, tip, araclimit");
		return 1;
	}
	if ((id < 0 || id >= MAX_GARAGE) || !GarageData[id][gExists])
	    return HataMesajGonder(playerid, "Hatali Garaj ID girdiniz.");

	if (!strcmp(type, "kilit", true))
	{
	    if (GarageData[id][gKilit] == 1)
	    {
	        GarageData[id][gKilit] = 0;
	        //MesajGonder(playerid, "Garajin kilidi açýldý.");
	        AdminMessage(COLOR_RED, "*** %s adli yetkili tarafindan Garaj ID %d kilidi açýldý.", PlayerData[playerid][pAdminName], id);
	    }
	    else
	    {
	        GarageData[id][gKilit] = 1;
	        //MesajGonder(playerid, "Garaj kilitlendi.");
	        AdminMessage(COLOR_RED, "*** %s adli yetkili tarafindan Garaj ID %d kilitlendi.", PlayerData[playerid][pAdminName], id);
	    }
	    Garaj_Kaydet(id);
	    Garaj_Yenile(id);
	}
 	else if (!strcmp(type, "sifre", true))
	{
	    static
	        pass[32];

		if (sscanf(string, "s[32]", pass))
		    return KullanimMesaji(playerid, "/garajduzenle [ID] [sifre] [garaj sifre] ( 'yok' yazarsaniz sifresiz yapar)");

		format(GarageData[id][gSifre], 30, pass);

        AdminMessage(COLOR_RED, "*** %s adli yetkili tarafindan Garaj ID %d sifresi degistirildi.", PlayerData[playerid][pAdminName], id);
		Garaj_Kaydet(id);
		return 1;
	}
	else if (!strcmp(type, "birlik", true))
	{
	    static
	        factionid = -1;

		if (sscanf(string, "d", factionid))
		    return KullanimMesaji(playerid, "/garajduzenle [ID] [birlik] [birlik id] (-1 kapatir)");

        AdminMessage(COLOR_RED, "*** %s adli yetkili tarafindan %d ID'li garajin birligi %d ID'li birlik olarak ayarlandi.", PlayerData[playerid][pAdminName], id, factionid);
        GarageData[id][gBirlik] = factionid;
        Garaj_Yenile(id);
		Garaj_Kaydet(id);

		return 1;
	}
	else if (!strcmp(type, "sahip", true))
	{
	    static
	        sahip = -1;

		if (sscanf(string, "d", sahip))
		    return KullanimMesaji(playerid, "/garajduzenle [ID] [sahip] [sql id] (-1 kapatir)");


        GarageData[id][gSahip] = sahip;
        Garaj_Yenile(id);
		Garaj_Kaydet(id);
        AdminMessage(COLOR_RED, "*** %s adli yetkili tarafindan %d ID'li garajin sahibi SQL id %d olarak ayarlandi.", PlayerData[playerid][pAdminName], id, sahip);
		return 1;
	}
	else if (!strcmp(type, "pos", true))
	{
	    static
		    Float:px,
		    Float:py,
		    Float:pz;

		GetPlayerPos(playerid, px, py, pz);

		GarageData[id][gPos][0] = px;
		GarageData[id][gPos][1] = py;
		GarageData[id][gPos][2] = pz;
		GarageData[id][gVw] = GetPlayerVirtualWorld(playerid);

		Garaj_Yenile(id);
		Garaj_Kaydet(id);
	 	AdminMessage(COLOR_RED, "*** %s adli yetkili tarafindan %d ID'li garajin pozisyonu degistirildi.", PlayerData[playerid][pAdminName], id);
	}
	else if (!strcmp(type, "interior", true))
	{
	    static
	        interior;

		if (sscanf(string, "d", interior))
		    return KullanimMesaji(playerid, "/garajduzenle [ID] [interior] [Interior ID]");


        GarageData[id][gInterior] = interior;
		Garaj_Kaydet(id);
        AdminMessage(COLOR_RED, "*** %s adli yetkili tarafindan %d ID'li garajin interioru %d olarak degistirildi.", PlayerData[playerid][pAdminName], id, interior);
		return 1;
	}
	else if (!strcmp(type, "tip", true))
	{
	    static
	        tip[20];

		if (sscanf(string, "s[20]", tip))
		    return KullanimMesaji(playerid, "/garajduzenle [ID] [Tip] [Tip]");


        format(GarageData[id][gTip], 20, tip);
        Garaj_Yenile(id);
		Garaj_Kaydet(id);
        AdminMessage(COLOR_RED, " %s adli yetkili tarafindan %d ID'li garajin tipi %s olarak degistirildi.", PlayerData[playerid][pAdminName], id, tip);
		return 1;
	}
	else if (!strcmp(type, "araclimit", true))
	{
	    static
	        limit;

		if (sscanf(string, "d", limit))
		    return KullanimMesaji(playerid, "/garajduzenle [ID] [araclimit] [Limit]");


        GarageData[id][gAracLimit] = limit;
        Garaj_Yenile(id);
		Garaj_Kaydet(id);
        AdminMessage(COLOR_RED, " %s adli yetkili tarafindan %d ID'li garajin araç limiti %d olarak degistirildi.", PlayerData[playerid][pAdminName], id, limit);
		return 1;
	}
	return 1;
}

CMD:evolustur(playerid,params[])
{
	new fiyat, intid, mobilyasayisi;
	if (PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok");
	if (sscanf(params, "iii",fiyat,intid, mobilyasayisi)) return KullanimMesaji(playerid, "/evolustur [Fiyat] [Interior ID] [Maks. Mobilya]");
	if (!(0 <= intid <= sizeof(HouseInteriors)-1)) return HataMesajGonder(playerid, "Yazdiginiz ID'de bir interior bulunmamaktadir.");
	new id = -1;
	new Float:pos[3];
	GetPlayerPos(playerid,pos[0],pos[1],pos[2]);
	id = Ev_Olustur(pos[0],pos[1],pos[2],fiyat, intid, mobilyasayisi);
	if (id == -1) return HataMesajGonder(playerid, "Sunucu maksimum ev limitine ulasti.");
	MesajGonder(playerid, "Ev olusturuldu, ID: %d",id);
	return 1;
}

CMD:evsil(playerid,params[])
{
	new id = 0;
	if (PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok");
	if (sscanf(params, "d", id)) return KullanimMesaji(playerid, "/evsil [Ev ID]");
	if ((id < 0 || id >= MAX_EV) || !HouseInfo[id][evExists]) return HataMesajGonder(playerid, "Bu ID'de bir ev bulunmuyor.");
	Ev_Sil(playerid, id);
	MesajGonder(playerid, "Ev silindi, ID: %d",id);
	return 1;
}

CMD:birlikolustur(playerid,params[])
{
	new
	    id = -1,
		type,
		name[32],
		str[50];

	if (PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok");
if (sscanf(params, "ds[32]S()", type, name, str))
    {
        KullanimMesaji(playerid, "/birlikolustur [Tip] [Isim]");
         SendClientMessage(playerid, COLOR_YELLOW, "[TIP]:{FFFFFF}1: Çete 2: Mafya 3: Yayin Ajansi 4: Legal 5: LSPD 6: LSMD 7: FBI 8: GOV 9: LSSD");
           return 1;
    }
    if (type < 1 || type > 9) return HataMesajGonder(playerid, "Tip 1 ile 9 arasinda olmalidir.");
	id = Birlik_Olustur(name, type);

	if (id == -1) return HataMesajGonder(playerid, "Sunucu maksimum birlik sayisina ulasmistir.");
	SunucuMesaji(playerid, "Birlik olusturuldu, ID: %d",id);
	return 1;
}

CMD:birliksil(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok");

	if (sscanf(params, "d", id)) return KullanimMesaji(playerid, "/birliksil [Birlik ID]");

	if ((id < 0 || id >= MAX_BIRLIK) || !Birlikler[id][birlikExists])
	    return HataMesajGonder(playerid, "Geçersiz ID.");

	Birlik_Sil(id);
	MesajGonder(playerid, "Birlik ID %d silindi.", id);
	return 1;
}
CMD:birlikduzenle(playerid,params[])
{
    new id, type[24],string[128];
    if (PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok");
    if (sscanf(params, "ds[24]S()[128]", id, type, string))
    {
        KullanimMesaji(playerid, "/birlikduzenle [ID] [Seçenek]");
       	SendClientMessage(playerid, COLOR_YELLOW, "[SEÇENEK]: {FFFFFF}isim, renk, tip, rutbe, maxrutbe, sistemselonay, silahonay, uyusturucuonay, graffitionay, hoodonay");
        return 1;
    }
    if ((id < 0 || id >= MAX_BIRLIK) || !Birlikler[id][birlikExists]) return HataMesajGonder(playerid, "Hatali Birlik ID.");
    if (!strcmp(type, "isim", true))
    {
        new isim[32];
        if (sscanf(string, "s[32]", isim)) return KullanimMesaji(playerid, "/birlikduzenle [ID] [isim] [Yeni Isim]");
        format(Birlikler[id][birlikAd], 32, isim);
        Birlik_Kaydet(id);
        AdminMessage(COLOR_RED, " %s adli yetkili tarafindan %d ID'li birligin ismi %s olarak degistirildi.",ReturnName(playerid,0),id,isim);
        Log_Write("logs/birliklog.txt", "%s tarafindan %d ID'li birligin ismi %s olarak degistirildi",ReturnName(playerid,0),id,isim);
    }
    else if (!strcmp(type, "renk", true))
	{
	    new color;

	    if (sscanf(string, "h", color))
	        return KullanimMesaji(playerid, "/birlikduzenle [ID] [renk] [Hex Renk]");

	    Birlikler[id][birlikColor] = color;
	    Birlik_Update(id);

	    Birlik_Kaydet(id);
		AdminMessage(COLOR_RED, " %s tarafindan %d ID'li birligin {%06x}rengi {AA3333}degistirildi.", ReturnName(playerid, 0), id, color >>> 8);
	}
	else if (!strcmp(type, "tip", true))
	{
	    new typeint;
	    if (sscanf(string, "d", typeint))
	    {
	        KullanimMesaji(playerid, "/birlikduzenle [ID] [tip] [Tip]");
	        SendClientMessage(playerid, COLOR_YELLOW, "[TIP]:{FFFFFF}1: Çete 2: Mafya 3: Yayin Ajansi 4: Legal 5: LSPD 6: LSSD 7: LSMD 8: FBI 9: GOV");
	        return 1;
	    }
	    if (typeint < 1 || typeint > 8) return HataMesajGonder(playerid, "Tip 1 ile 8 arasinda olmalidir.");

	    Birlikler[id][birlikTip] = typeint;
	    Birlik_Kaydet(id);
	    AdminMessage(COLOR_RED, " %s adli yetkili %d ID'li birligin tipini degistirdi.",ReturnName(playerid, 0), id);
	}
	else if (!strcmp(type, "rutbe", true))
	{
	    Birlik_RutbeleriGoster(playerid, id);
	}
	else if (!strcmp(type, "maxrutbe", true))
	{
	    new ranks;

	    if (sscanf(string, "d", ranks))
	        return KullanimMesaji(playerid, "/birlikduzenle [ID] [maxrutbe] [max rutbe]");

		if (ranks < 1 || ranks > 15)
		    return HataMesajGonder(playerid, "Rütbe 1'den küçük, 15'den büyük olamaz.");

	    Birlikler[id][birlikRutbeler] = ranks;

	    Birlik_Kaydet(id);
	}
	else if (!strcmp(type, "sistemselonay", true))
	{
	    if (Birlikler[id][birlikOnaylar][0])
	    {
	        Birlikler[id][birlikOnaylar][0] = 0;
			SunucuMesaji(playerid, "%s (ID: %d) adli birligin sistemsel onayini sildiniz.", Birlikler[id][birlikAd], id);
			AdminMessage(COLOR_RED, " %s, %s (ID: %d) birliginin sistemsel onayini sildi.",PlayerData[playerid][pAdminName], Birlikler[id][birlikAd], id);
	    }
		else
		{
		    Birlikler[id][birlikOnaylar][0] = 1;
		    SunucuMesaji(playerid, "%s (ID: %d) adli birlige sistemsel onay verdiniz.", Birlikler[id][birlikAd], id);
		    AdminMessage(COLOR_RED, " %s, %s (ID: %d) birligine sistemsel onay verdi.",PlayerData[playerid][pAdminName], Birlikler[id][birlikAd], id);
		}

	    Birlik_Kaydet(id);
	}
	else if (!strcmp(type, "silahonay", true))
	{
	    if (Birlikler[id][birlikOnaylar][1])
	    {
	        Birlikler[id][birlikOnaylar][1] = 0;
			SunucuMesaji(playerid, "%s (ID: %d) adli birligin silah onayini sildiniz.", Birlikler[id][birlikAd], id);
			AdminMessage(COLOR_RED, " %s, %s (ID: %d) birliginin silah onayini sildi.",PlayerData[playerid][pAdminName], Birlikler[id][birlikAd], id);
	    }
		else
		{
		    Birlikler[id][birlikOnaylar][1] = 1;
		    SunucuMesaji(playerid, "%s (ID: %d) adli birlige silah onayi verdiniz.", Birlikler[id][birlikAd], id);
		    AdminMessage(COLOR_RED, " %s, %s (ID: %d) birligine silah onayi verdi.",PlayerData[playerid][pAdminName], Birlikler[id][birlikAd], id);
		}

	    Birlik_Kaydet(id);
	}
	else if (!strcmp(type, "uyusturucuonay", true))
	{
	    if (Birlikler[id][birlikOnaylar][2])
	    {
	        Birlikler[id][birlikOnaylar][2] = 0;
			SunucuMesaji(playerid, "%s (ID: %d) adli birligin uyusturucu onayini sildiniz.", Birlikler[id][birlikAd], id);
			AdminMessage(COLOR_RED, " %s, %s (ID: %d) birliginin uyusturucu onayini sildi.",PlayerData[playerid][pAdminName], Birlikler[id][birlikAd], id);
	    }
		else
		{
		    Birlikler[id][birlikOnaylar][2] = 1;
		    SunucuMesaji(playerid, "%s (ID: %d) adli birlige uyusturucu onayi verdiniz.", Birlikler[id][birlikAd], id);
		    AdminMessage(COLOR_RED, " %s, %s (ID: %d) birligine uyusturucu onayi verdi.",PlayerData[playerid][pAdminName], Birlikler[id][birlikAd], id);
		}

	    Birlik_Kaydet(id);
	}
	else if (!strcmp(type, "graffitionay", true))
	{
	    if (Birlikler[id][birlikOnaylar][3])
	    {
	        Birlikler[id][birlikOnaylar][3] = 0;
			SunucuMesaji(playerid, "%s (ID: %d) adli birligin graffiti onayini sildiniz.", Birlikler[id][birlikAd], id);
			AdminMessage(COLOR_RED, " %s, %s (ID: %d) birliginin graffiti onayini sildi.",PlayerData[playerid][pAdminName], Birlikler[id][birlikAd], id);
	    }
		else
		{
		    Birlikler[id][birlikOnaylar][3] = 1;
		    SunucuMesaji(playerid, "%s (ID: %d) adli birlige graffiti onayi verdiniz.", Birlikler[id][birlikAd], id);
		    AdminMessage(COLOR_RED, " %s, %s (ID: %d) birligine graffiti onayi verdi.",PlayerData[playerid][pAdminName], Birlikler[id][birlikAd], id);
		}

	    Birlik_Kaydet(id);
	}
	else if (!strcmp(type, "hoodonay", true))
	{
	    if (Birlikler[id][birlikOnaylar][4])
	    {
	        Birlikler[id][birlikOnaylar][4] = 0;
			SunucuMesaji(playerid, "%s (ID: %d) adli birligin Hood onayini sildiniz.", Birlikler[id][birlikAd], id);
			AdminMessage(COLOR_RED, " %s, %s (ID: %d) birliginin Hood onayini sildi.",PlayerData[playerid][pAdminName], Birlikler[id][birlikAd], id);
	    }
		else
		{
		    Birlikler[id][birlikOnaylar][4] = 1;
		    SunucuMesaji(playerid, "%s (ID: %d) adli birlige Hood onayi verdiniz.", Birlikler[id][birlikAd], id);
		    AdminMessage(COLOR_RED, " %s, %s (ID: %d) birligine Hood onayi verdi.",PlayerData[playerid][pAdminName], Birlikler[id][birlikAd], id);
		}

	    Birlik_Kaydet(id);
	}
	return 1;
}
CMD:setleader(playerid,params[])
{
	new pid,id;
	if (PlayerData[playerid][pAdmin] < 2) return HataMesajGonder(playerid, "Bu komutu kullanamazsin.");
	if (sscanf(params, "ui",pid,id)) return KullanimMesaji(playerid, "/setleader [ID/Isim] [Birlik ID] (-1 yazarsan liderlikten atilir)");
	if (!OyundaDegil(pid)) return HataMesajGonder(playerid, "Oyuncu oyunda degil!");
	if ((id < -1 || id >= MAX_BIRLIK) || (id != -1 && !Birlikler[id][birlikExists])) return HataMesajGonder(playerid, "Hatali Birlik ID.");
	if (id == -1)
	{
	    BirliktenAt(pid);
	    SunucuMesaji(playerid, "%s adli oyuncuyu birlik liderliginden attiniz.", ReturnName(pid, 0));
    	SunucuMesaji(pid, "%s adli yetkili sizi birlik liderliginden atti.", ReturnName(playerid, 0));
    	Oyuncu_Kaydet(id);
	}
	else
	{
	    BirliktenAt(pid);
	    PlayerData[pid][pFaction] = id;
	    PlayerData[pid][pFactionRutbe] = Birlikler[id][birlikRutbeler];
	    PlayerData[pid][pFactionDivizyon] = 0;
	    SunucuMesaji(playerid, "%s adli oyuncuyu \"%s\" adli birligin lideri yaptiniz.", ReturnName(pid, 0),Birlikler[id][birlikAd]);
	    SunucuMesaji(pid, "%s adli yetkili seni \"%s\" adli birligin lideri yapti.", ReturnName(playerid, 0),Birlikler[id][birlikAd]);
	    Oyuncu_Kaydet(pid);
	}
	return 1;
}

CMD:isyeriolustur(playerid,params[])
{
	new tip,fiyat;
	if (PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok");
	if (sscanf(params, "dd", tip, fiyat))
	{
		KullanimMesaji(playerid, "/isyeriolustur [Tip] [Fiyat]");
		SendClientMessage(playerid,-1, "{00FF15}[TIP]: {FFFFFF} 1: Market 2: Kiyafet Magazasi 3: Fast Food 4: Galeri 5: Elektronik 6: Bar/Pub 7: Kumarhane 8: Diger");
		return 1;
	}
	if (tip < 1 || tip > 8) return HataMesajGonder(playerid, "Geçersiz isyeri tipi. 1 ile 8 arasinda olmalidir.");

	new id;
	id = Isyeri_Olustur(playerid, tip, fiyat);

	if (id == -1)
		return HataMesajGonder(playerid, "Sunucu isyeri sinirina ulasti.");

	SunucuMesaji(playerid, "isyeri olusturuldu, ID: %d",id);
	return 1;
}

CMD:benzinlerifulle(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] >= 4) {

    for(new i=0;i<MAX_ARAC;i++) {
        AracInfo[i][aracBenzin] = 100;
    }

    new string[128];

    format(string, sizeof(string), "AdmCmd: %s %s, tüm araçlarin benzinini doldurdu.", GetAdminRank(playerid), PlayerData[playerid][pAdminName]);
    SendClientMessageToAllEx(COLOR_LIGHTRED,string);
    }
    else
	{
		HataMesajGonder(playerid,"Yeterli yetkiniz yok.");

	}
    return 1;
}
CMD:isyerisil(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 3)
	    return HataMesajGonder(playerid, "Bu komutu kullanamazsin !");

	if (sscanf(params, "d", id))
	    return KullanimMesaji(playerid, "/isyerisil [isyeri ID]");

	if ((id < 0 || id >= MAX_ISYERI) || !Isyeri[id][isyeriExists])
	    return HataMesajGonder(playerid, "Geçersiz isyeri ID'si.");

	Isyeri_Sil(id);
	SunucuMesaji(playerid, "isyeri silindi, ID: %d.", id);
	return 1;
}
CMD:isyeriduzenle(playerid,params[])
{
	static id, type[24], string[128];
	if (PlayerData[playerid][pAdmin] < 3) return HataMesajGonder(playerid, "Bu komutu kullanamazsin !");
	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	KullanimMesaji(playerid, "/isyeriduzenle [ID] [Ad]");
	    SendClientMessage(playerid, COLOR_YELLOW, "{00FF15}[ADLAR]: {FFFFFF} pozisyon, interior, fiyat, stok, tip, spawn, devlet");
		return 1;
	}
	if ((id < 0 || id >= MAX_ISYERI) || !Isyeri[id][isyeriExists])
	    return HataMesajGonder(playerid, "Geçersiz isyeri ID'si.");

	if (!strcmp(type, "pozisyon", true))
	{
	    GetPlayerPos(playerid, Isyeri[id][isyeriPos][0], Isyeri[id][isyeriPos][1], Isyeri[id][isyeriPos][2]);
		GetPlayerFacingAngle(playerid, Isyeri[id][isyeriPos][3]);

		Isyeri_Yenile(id);
		Isyeri_Kaydet(id);
	}
	else if (!strcmp(type, "interior", true))
	{
	    GetPlayerPos(playerid, Isyeri[id][isyeriInt][0], Isyeri[id][isyeriInt][1], Isyeri[id][isyeriInt][2]);
		GetPlayerFacingAngle(playerid, Isyeri[id][isyeriInt][3]);

		Isyeri[id][isyeriInterior] = GetPlayerInterior(playerid);

        foreach (new i : Player)
		{
			if (PlayerData[i][pIsyeri] == Isyeri[id][isyeriID])
			{
				SetPlayerPos(i, Isyeri[id][isyeriInt][0], Isyeri[id][isyeriInt][1], Isyeri[id][isyeriInt][2]);
				SetPlayerFacingAngle(i, Isyeri[id][isyeriInt][3]);

				SetPlayerInterior(i, Isyeri[id][isyeriInterior]);
				SetCameraBehindPlayer(i);
			}
		}
		Isyeri_Kaydet(id);
		SunucuMesaji(playerid, "%d ID'li isyerinin interioru su an bulundugunuz interior (ID: %d) olarak degistirildi.",id,GetPlayerInterior(playerid));
	}
	else if (!strcmp(type, "fiyat", true))
	{
	    new price;

	    if (sscanf(string, "d", price))
	        return KullanimMesaji(playerid, "/isyeriduzenle [ID] [Fiyat] [Yeni Fiyat]");

	    Isyeri[id][isyeriFiyat] = price;
	    Isyeri[id][isyeriKendiFiyati] = price;

	    Isyeri_Yenile(id);
	    Isyeri_Kaydet(id);

		SunucuMesaji(playerid, "%d ID'li isyerinin fiyati {2ECC71}%s {FFFFFF}olarak degistirildi.",id,FormatNumber(price));
	}
	else if (!strcmp(type, "stok", true))
	{
	    new urunid,amount;

	    if (sscanf(string, "dd",urunid,amount))
	        return KullanimMesaji(playerid, "/isyeriduzenle [ID] [stok] [Ürün ID] [Ürün Sayisi]");

	    Isyeri[id][isyeriUrunSayisi][urunid] = amount;

	    Isyeri_Yenile(id);
	    Isyeri_Kaydet(id);
	}
	else if (!strcmp(type, "tip", true))
	{
	    new typeint;

	    if (sscanf(string, "d", typeint))
	    {
	        KullanimMesaji(playerid, "/isyeriduzenle [ID] [Tip]");
			SendClientMessage(playerid,-1, "{00FF15}[TIP]: {FFFFFF} 1: Market 2: Kiyafet Magazasi 3: Fast Food 4: Galeri 5: Elektronik 6: Bar/Pub 7: Kumarhane");
			return 1;
	    }
	    if (typeint < 1 || typeint > 9)
			return HataMesajGonder(playerid, "Belirtilen tip 1 ve 7 arasinda olmalidir.");

		Isyeri[id][isyeriTip] = typeint;

		switch (typeint)
 		{
 			case 1: // Market
  			{
		     		    Isyeri[id][isyeriInt][0] = -27.3074;
	                	Isyeri[id][isyeriInt][1] = -30.8741;
	                	Isyeri[id][isyeriInt][2] = 1003.5573;
	                	Isyeri[id][isyeriInt][3] = 0.0000;
						Isyeri[id][isyeriInterior] = 4;
    		}
    		case 2: // Kiyafet Magazasi
    		{
		     		    Isyeri[id][isyeriInt][0] = 161.4801;
	                	Isyeri[id][isyeriInt][1] = -96.5368;
	                	Isyeri[id][isyeriInt][2] = 1001.8047;
	                	Isyeri[id][isyeriInt][3] = 0.0000;
						Isyeri[id][isyeriInterior] = 18;
    		}
    		case 3: // Fast Food
    		{
		     		    Isyeri[id][isyeriInt][0] = 363.3402; //
	                	Isyeri[id][isyeriInt][1] = -74.6679;
	                	Isyeri[id][isyeriInt][2] = 1001.5078;
	                	Isyeri[id][isyeriInt][3] = 315.0000;
						Isyeri[id][isyeriInterior] = 10;
    		}
    		case 4: // Galeri
    		{
		     		    Isyeri[id][isyeriInt][0] = 1494.5612;
		            	Isyeri[id][isyeriInt][1] = 1304.2061;
		            	Isyeri[id][isyeriInt][2] = 1093.2891;
		            	Isyeri[id][isyeriInt][3] = 0.0000;
						Isyeri[id][isyeriInterior] = 3;
    		}
    		case 5: // Elektronik
    		{
		     		    Isyeri[id][isyeriInt][0] = 2310.3713;
	   					Isyeri[id][isyeriInt][1] = 997.7480;
				   		Isyeri[id][isyeriInt][2] = -53.9590;
	      				Isyeri[id][isyeriInt][3] = 271.6157;
						Isyeri[id][isyeriInterior] = 0;
    		}
    		case 6: // Bar/Pub
    		{
		     		    Isyeri[id][isyeriInt][0] = 2015.23;
		   				Isyeri[id][isyeriInt][1] = 1345.85;
					   	Isyeri[id][isyeriInt][2] = 107.48;
		      			Isyeri[id][isyeriInt][3] = 90.0000;
						Isyeri[id][isyeriInterior] = 1;
    		}
    		case 7:
    		{
			     		Isyeri[id][isyeriInt][0] = 1481.9872;
	  					Isyeri[id][isyeriInt][1] = 783.1984;
				   		Isyeri[id][isyeriInt][2] = -61.2514;
	     				Isyeri[id][isyeriInt][3] = 83.5277;
    	}	}
	}
	else if (!strcmp(type, "spawn", true))
	{
	    if (Isyeri[id][isyeriTip] != 4)
	        return HataMesajGonder(playerid, "Bu isyeri tipi araç galerisi degil!");

	    if (GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	        return HataMesajGonder(playerid, "Araç spawn noktasi sadece disarida olabilir.");

	    GetPlayerPos(playerid, Isyeri[id][isyeriSpawn][0], Isyeri[id][isyeriSpawn][1], Isyeri[id][isyeriSpawn][2]);
		GetPlayerFacingAngle(playerid, Isyeri[id][isyeriSpawn][3]);

		Isyeri_Kaydet(id);
		SunucuMesaji(playerid, "%d ID'li isyerinin araç spawn noktasi ayarlandi.",id);
	}
	else if (!strcmp(type, "devlet", true))
	{
	    if (Isyeri[id][isyeriSahip] == -99)
	    {
	        Isyeri[id][isyeriSahip] = -1;
	        Isyeri_Yenile(id);
	        Isyeri_Kaydet(id);
	        SunucuMesaji(playerid, "isyeri artik devletin degil.");
	    }
	    else
		{
		    Isyeri[id][isyeriSahip] = -99;
		    Isyeri_Yenile(id);
	        Isyeri_Kaydet(id);
	        SunucuMesaji(playerid, "isyeri artik devletin.");
		}
	}
	return 1;
}

CMD:objeolustur(playerid, params[])
{
	new id, modelid;

	if (PlayerData[playerid][pAdmin] < 5)
	    return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

	if (sscanf(params, "d", modelid))
		return MesajGonder(playerid, "/objeolustur [Model ID]");

	id = Obje_Olustur(playerid, modelid);

	if (id == -1)
		return HataMesajGonder(playerid, "Obje olusturulurken bir hata olustu, lütfen gelistirici ile iletisime geçiniz.");

	if (id != -1)
		SunucuMesaji(playerid, "Lütfen objenin pozisyonunu ayarlayiniz.");

	return 1;
}

Obje_Olustur(playerid, modelid)
{
	new id = -1, Float:x, Float:y, Float:z, Float:ang;

	id = Iter_Free(Objeler);

	if (id != -1)
	{
		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, ang);

		x += (2.5 * floatsin(ang, degrees));
		y += (2.5 * floatcos(ang, degrees));

		Obje[id][objeID] = id;
		Obje[id][objeModelID] = modelid;
		Obje[id][objeData] = CreateDynamicObject(modelid, x, y, z, 0.0, 0.0, ang, -1, -1, -1, STREAMER_OBJECT_SD, STREAMER_OBJECT_DD, -1, 0);

		SetPVarInt(playerid, "DuzenlenenObjeID", id);

		EditDynamicObject(playerid, Obje[id][objeData]);

		Iter_Add(Objeler, id);
		mysql_tquery(g_SQL, "INSERT INTO `objeler` (`objeModel`) VALUES(0)", "ObjeYaratildi", "d", id);
	}

	return id;
}
forward ObjeYaratildi(objeid);
public ObjeYaratildi(objeid)
{
	if(objeid == -1 || !Obje[objeid][objeKullanimda])
	    return 0;

	Obje[objeid][objeID] = cache_insert_id();
	Obje_Kaydet(objeid);
	return 1;
}

CMD:objekaldir(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 5)
	    return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

	SetPVarInt(playerid, "ObjeKaldirma", 1);
	SelectObject(playerid);

	MesajGonder(playerid, "Lütfen kaldirmak istediginiz objeyi seçiniz.");
	return 1;
}

stock YetkinizYok(playerid) return HataMesajGonder(playerid, "Bu komutu kullanma yetkiniz yok!");
stock ParaYok(playerid) return HataMesajGonder(playerid, "Yeterli paraniz yok.");

CMD:giseolustur(playerid, params[])
{
	new id = -1;

	if (PlayerData[playerid][pAdmin] < 5)
	    return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

	id = Gise_Olustur(playerid);

	if (id != -1)
	    SunucuMesaji(playerid, "ID: %d Gise olusturuldu.", id);

	if (id == -1)
	    SunucuMesaji(playerid, "Gise olusturulurken hata olustu, gelistiriciye ulasin.");


	return 1;
}

CMD:gisesil(playerid, params[])
{
	new id, query[512];

	if (PlayerData[playerid][pAdmin] < 5)
	    return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

	if (sscanf(params, "d", id))
	    return KullanimMesaji(playerid, "/gisesil [Gise ID]");

	if (!Gise[id][gs_Exists])
		return HataMesajGonder(playerid, "Gise mevcut degil.");

	Gise[id][gs_ID] = -1;
	Gise[id][gs_Exists] = false;

	DestroyDynamicObject(Gise[id][gs_GateObje]);
	DestroyDynamicObject(Gise[id][gs_Obje]);

	DestroyDynamic3DTextLabel(Gise[id][gs_id]);
	DestroyDynamic3DTextLabel(Gise[id][gs_inf]);

	Gise[id][gs_GateBar][0] = 0.0;
	Gise[id][gs_GateBar][1] = 0.0;
	Gise[id][gs_GateBar][2] = 0.0;
	Gise[id][gs_GateBar][3] = 0.0;
	Gise[id][gs_GateBar][4] = 0.0;
	Gise[id][gs_GateBar][5] = 0.0;

	Gise[id][gs_Kapali][0] = 0.0;
	Gise[id][gs_Kapali][1] = 0.0;
	Gise[id][gs_Kapali][2] = 0.0;
	Gise[id][gs_Kapali][3] = 0.0;
	Gise[id][gs_Kapali][4] = 0.0;
	Gise[id][gs_Kapali][5] = 0.0;

	Gise[id][gs_Acik][0] = 0.0;
	Gise[id][gs_Acik][1] = 0.0;
	Gise[id][gs_Acik][2] = 0.0;
	Gise[id][gs_Acik][3] = 0.0;
	Gise[id][gs_Acik][4] = 0.0;
	Gise[id][gs_Acik][5] = 0.0;

	mysql_format(g_SQL, query, sizeof query, "DELETE FROM `giseler` WHERE `ID` = '%d'", id);
	mysql_query (g_SQL, query);

	SunucuMesaji(playerid, "ID: %d gise basariyla silindi.", id);
	return 1;
}

Gise_Olustur(playerid)
{
	for (new i = 0; i < MAX_GISE; i++)
	{
	    if (!Gise[i][gs_Exists])
	    {
	        new Float:oPos[4];

	        GetPlayerPos(playerid, oPos[0], oPos[1], oPos[2]);
	        GetPlayerFacingAngle(playerid, oPos[3]);

	        Gise[i][gs_ID] = i;
	        Gise[i][gs_Exists] = true;

	        GetXYInFrontOfPlayer(playerid, oPos[0], oPos[1], 2.5);

			Gise[i][gs_GateObje] = CreateDynamicObject(966, oPos[0], oPos[1], oPos[2] - 0.940001, 0.0000000, 0.0000000, oPos[3]);

	        Gise[i][gs_GateBar][0] = oPos[0];
	        Gise[i][gs_GateBar][1] = oPos[1];
	        Gise[i][gs_GateBar][2] = oPos[2];
	        Gise[i][gs_GateBar][3] = 0.0;
	        Gise[i][gs_GateBar][4] = 0.0;
            Gise[i][gs_GateBar][5] = 0.0;

            SetPVarInt(playerid, "GiseGate", Gise[i][gs_ID]);

	        Gise[i][gs_Durum] = GISE_KAPALI;

	        SunucuMesaji(playerid, "Þimdi gise gatesinin pozisyonunu ayarlayin.");
	        EditDynamicObject(playerid, Gise[i][gs_GateObje]);
	        return i;
	    }
	}
	return -1;
}

Gise_Kaydet(id)
{
	new query[1024];

	mysql_format(g_SQL, query, sizeof query, "INSERT INTO `giseler` (`ID`, `GatePos`, `KapaliPos`, `AcikPos`) VALUES ('%d', '%f|%f|%f|%f|%f|%f', '%f|%f|%f|%f|%f|%f', '%f|%f|%f|%f|%f|%f')",
	Gise[id][gs_ID],

	Gise[id][gs_GateBar][0],
	Gise[id][gs_GateBar][1],
	Gise[id][gs_GateBar][2],
	Gise[id][gs_GateBar][3],
	Gise[id][gs_GateBar][4],
	Gise[id][gs_GateBar][5],

	Gise[id][gs_Kapali][0],
	Gise[id][gs_Kapali][1],
	Gise[id][gs_Kapali][2],
	Gise[id][gs_Kapali][3],
	Gise[id][gs_Kapali][4],
	Gise[id][gs_Kapali][5],

	Gise[id][gs_Acik][0],
	Gise[id][gs_Acik][1],
	Gise[id][gs_Acik][2],
	Gise[id][gs_Acik][3],
	Gise[id][gs_Acik][4],
	Gise[id][gs_Acik][5]
	);
	mysql_query (g_SQL, query);
	return true;
}

stock GetXYInFrontOfPlayer(playerid, &Float:x, &Float:y, Float:distance)
{
	new Float:a;
	GetPlayerPos(playerid, x, y, a);
	GetPlayerFacingAngle(playerid, a);
	if (GetPlayerVehicleID(playerid))
	{
	    GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
	}
	x += (distance * floatsin(-a, degrees));
	y += (distance * floatcos(-a, degrees));
}

CMD:createarrest(playerid, params[])
{
	static
	    id = -1,
		Float:x,
		Float:y,
		Float:z;

	GetPlayerPos(playerid, x, y, z);

    if (PlayerData[playerid][pAdmin] < 5)
	    return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

	id = Arrest_Create(x, y, z, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));

	if (id == -1)
	    return HataMesajGonder(playerid, "Sunucu maksimum hapis noktasina ulasti.");

	MesajGonder(playerid, "Hapis noktasi olusturuldu, ID: %d.", id);
	return 1;
}

CMD:destroyarrest(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 5)
	    return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

	if (sscanf(params, "d", id))
	    return KullanimMesaji(playerid, "/destroyarrest [ID]");

	if ((id < 0 || id >= MAX_ARREST_POINTS) || !ArrestData[id][arrestExists])
	    return HataMesajGonder(playerid, "Hatali ID girdiniz.");

	Arrest_Delete(id);
	MesajGonder(playerid, "Hapis noktasi silindi, ID: %d.", id);
	return 1;
}
CMD:createcctv(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komuta yetkin yok!"); //ADMIN LEVEL HERE
    new
        name[30];
    if (sscanf(params, "s[30]", name)) return KullanimMesaji(playerid, "/createcctv [Ad]");
    new id = CreateCCTV(playerid, name);
    if (id == -1) return HataMesajGonder(playerid, "Daha fazla CCTV yaratamazsin!");
    MesajGonder(playerid, "CCTV olusturuldu, (/editcctv) komutu ile düzenleyebilirsiniz. (ID: %d)", id);
    return 1;
}
CMD:rangecctv(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komuta yetkin yok!"); //ADMIN LEVEL HERE
	foreach (new i : CCTVIter)
	if (IsPlayerInRangeOfPoint(playerid, 10.0, CCTVInfo[i][cctv_X], CCTVInfo[i][cctv_Y], CCTVInfo[i][cctv_Z]))
	{
		SendClientMessageEx(playerid, -1, "ID: %d - Ad: %s", i, CCTVInfo[i][cctv_Name]);
	}
	return 1;
}


CMD:deletecctv(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komuta yetkin yok!"); //ADMIN LEVEL HERE
    new id;
    if (sscanf(params, "d", id)) return KullanimMesaji(playerid, "/deletecctv [ID]");
    DeleteCCTV(playerid, id);
    return 1;
}

CMD:editcctv(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komuta yetkin yok!"); //ADMIN LEVEL HERE
    new id;
    if (sscanf(params, "d", id)) return KullanimMesaji(playerid, "/editcctv [ID]");
    EditCCTV(playerid, id);
    return 1;
}
CMD:movecctv(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komuta yetkin yok!"); //ADMIN LEVEL HERE
    new id;
    if (sscanf(params, "d", id)) return KullanimMesaji(playerid, "/movecctv [ID]");
    MoveCCTV(playerid, id);
    return 1;
}
CMD:renamecctv(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komuta yetkin yok!"); //ADMIN LEVEL HERE
    new
        name[30], id;
    if (sscanf(params, "ds[30]", id, name)) return KullanimMesaji(playerid, "/renamecctv [ID] [isim]");
    ChangeCCTVName(playerid, id, name);
    return 1;
}

CMD:setbitcoin(playerid, params[])
{
	new tip, deger;
    if (!OyundaDegil(playerid)) return 1;
    if (PlayerData[playerid][pAdmin] < 2) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
    if (sscanf(params, "ii", tip, deger)) return KullanimMesaji(playerid, "/setbitcoin [1 - Alma 2 - Satma] [Deger]");
    if (tip <=0 || tip >= 3) return HataMesajGonder(playerid, "1 - Alma 2- Satma");
    switch (tip)
    {
        case 1:
        {
            SetServerBilgi("BitcoinAlma", deger);
            MesajGonder(playerid, "Bitcoin alma fiyati %s olarak degistirildi.", FormatNumber(deger));
        }
        case 2:
		{
		    SetServerBilgi("BitcoinSatma", deger);
		    MesajGonder(playerid, "Bitcoin satma fiyati %s olarak degistirildi.", FormatNumber(deger));
		}
    }
	return 1;
}
CMD:lokasyonekle(playerid, params[])
{
	new name[30];
	if (!OyundaDegil(playerid)) return 1;
    if (PlayerData[playerid][pAdmin] < 5) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
    if (sscanf(params, "s[30]", name)) return KullanimMesaji(playerid, "/lokasyonekle [Ad]");
    if (strlen(name) > 30) return HataMesajGonder(playerid, "Lokasyon Adi 30 karakteri geçemez.");
    new Float:pos[3];
    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
    new id = Lokasyon_Ekle(name, pos[0], pos[1], pos[2]);
    if (id == -1) return HataMesajGonder(playerid, "Sunucu maksimum lokasyon limitine ulasti.");
    else MesajGonder(playerid, "Lokasyon eklendi, ID: %d", id);
	return 1;
}
CMD:lokasyonsil(playerid, params[])
{
	new id;
    if (!OyundaDegil(playerid)) return 1;
    if (PlayerData[playerid][pAdmin] < 5) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
    if (sscanf(params, "i", id)) return KullanimMesaji(playerid, "/lokasyonsil [ID]");
    if ((id < 0 || id >= MAX_LOKASYON) || !Lokasyon[id][Exists]) return HataMesajGonder(playerid, "Hatali ID.");
    Lokasyon_Sil(id);
    MesajGonder(playerid, "Lokasyon silindi.");
	return 1;
}
CMD:destroyboombox(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 1)
	    return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

	foreach (new i : Player) if (BoomboxData[i][boomboxPlaced] && IsPlayerInRangeOfPoint(playerid, 3.0, BoomboxData[i][boomboxPos][0], BoomboxData[i][boomboxPos][1], BoomboxData[i][boomboxPos][2])) {
		Boombox_Destroy(i);

		MesajGonder(playerid, "%s adli kisinin müzik kutusunu kaldirdin.", ReturnName(i, 0));
		return SunucuMesaji(i, "%s adli yetkili tarafindan müzik kutunuz kaldirildi.", ReturnName(playerid, 0));
	}
	HataMesajGonder(playerid, "Herhangi bir müzik kutusuna yakin degilsiniz!");
	return 1;
}
/* CMD:whitelist(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 2) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
	new durum[24], isim[128], userid;
	new query[256];
    if (sscanf(params, "s[24]S()[128]d", durum, isim, userid))
	    return KullanimMesaji(playerid, "/whitelist [ekle/sil] [Ad_Soyad] [Sqlid]");
	if (!strcmp(durum, "ekle", true))
	{
		format(query, sizeof(query), "INSERT INTO `whitelist` (`Sqlid`, `karakterismi`, `ekleyenyetkili`) VALUES('%d', '%s', '%s')", userid, isim, PlayerData[playerid][pAdminName]);
		mysql_tquery(g_SQL, query);
 		SunucuMesaji(playerid, "%s adlý kullanýcý beyaz listeye eklendi.", isim);
	}
	else if (!strcmp(durum, "sil", true))
	{

   		format(query,sizeof(query), "SELECT * FROM `whitelist` WHERE `karakterismi` = '%s'",isim);
     	new Cache:ketcapmayonez = mysql_query(g_SQL,query);
      	new rows;
       	cache_get_row_count(rows);
       	if (rows)
        {
			format(query,sizeof(query), "DELETE FROM `whitelist` WHERE `karakterismi` = '%s'",isim);
		 	mysql_query(g_SQL,query);
            SunucuMesaji(playerid, "%s adlý kullanýcý beyaz listeden kaldýrýldý.", isim);
		}
		else
		    HataMesajGonder(playerid, "Bu kiþi zaten beyaz listede deðil.");
		cache_delete(ketcapmayonez);

	}
	else
	    return KullanimMesaji(playerid, "/whitelist [ekle/sil] [Ad_Soyad]");
	return 1;
}

CMD:whitelistdurum(playerid)
{
    if (PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
    if (PlayerData[playerid][whitelist] == 0)
    {
		//if(PlayerData[playerid][whitelist] == 1) return HataMesajGonder(playerid, "Whitelist þu anda aktif zaten.");
        MesajGonder(playerid, "Sunucu için whitelist modu aktif edildi.");
        AdminMessage(COLOR_LIGHTRED, "AdmCmd: %s adlý yetkili sunucu whitelist durumunu aktif etti.", PlayerData[playerid][pAdminName]);
        PlayerData[playerid][whitelist] = 1;
    }
    else
    {
        //if(PlayerData[playerid][whitelist] == 0) return HataMesajGonder(playerid, "Whitelist þu anda devredýþý zaten.");
        MesajGonder(playerid, "Sunucu için whitelist modu deaktif edildi.");
        AdminMessage(COLOR_LIGHTRED, "AdmCmd: %s adlý yetkili sunucu whitelist durumunu deaktif etti.", PlayerData[playerid][pAdminName]);
        PlayerData[playerid][whitelist] = 0;
    }
    return 1;
} */

CMD:2xpayday(playerid)
{
	if (PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
	if (GetServerBilgi("2xpayday") == 0)
	{
	    SetServerBilgi("2xpayday", 1);
	    MesajGonder(playerid, "2x Payday aktif edildi.");
	}
	else
	{
	    SetServerBilgi("2xpayday", 0);
	    MesajGonder(playerid, "2x Payday deaktif edildi.");
	}
	return 1;
}

CMD:2xbalikeventi(playerid)
{
	if (PlayerData[playerid][pAdmin] < 2) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
	if (GetServerBilgi("2xBalik") == 0)
	{
	    SetServerBilgi("2xBalik", 1);
	    MesajGonder(playerid, "2x Balik eventi aktif edildi.");

	    SendClientMessageToAllEx(COLOR_YELLOW, "2x Balik eventi aktif edildi.");
	}
	else
	{
	    SetServerBilgi("2xBalik", 0);
	    MesajGonder(playerid, "2x Balik eventi deaktif edildi.");

	    SendClientMessageToAllEx(COLOR_YELLOW, "2x Balik eventi deaktif edildi.");
	}
	return 1;
}

CMD:aipcoz(playerid, params[])
{
	new id;
    if (PlayerData[playerid][pAdmin] < 1) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
    if (sscanf(params, "u", id)) return KullanimMesaji(playerid, "/aipcoz [ID/Isim]");
    if (!OyundaDegil(id)) return HataMesajGonder(playerid, "Oyuncu oyunda degil.");
    if (GetPVarInt(id, "IpBaglandi") == 0) return HataMesajGonder(playerid, "Bu oyuncu bagli degil.");
    SetPVarInt(id, "IpBaglandi", 0);
    TogglePlayerControllable(id, true);
    SetPlayerSpecialAction(id, SPECIAL_ACTION_NONE);
    MesajGonder(id, "%s adli yetkili tarafindan ipleriniz çözüldü.", PlayerData[playerid][pAdminName]);
    MesajGonder(playerid, "%s adli kisinin iplerini çözdünüz.", ReturnName(id, 0));
	return 1;
}

CMD:akelepcecoz(playerid, params[])
{
    new userid;
    if (PlayerData[playerid][pAdmin] < 1) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
    if (sscanf(params, "u", userid)) return KullanimMesaji(playerid, "/akelepcecoz [ID/Isim]");
    if (!OyundaDegil(userid)) return HataMesajGonder(playerid, "Oyuncu oyunda degil.");
    if (PlayerData[userid][pKelepce] == 0) return HataMesajGonder(playerid, "Bu oyuncu kelepçeli degil.");
    PlayerData[userid][pKelepce] = 0;
    PlayerData[userid][pDragged] = 0;
	PlayerData[userid][pDraggedBy] = INVALID_PLAYER_ID;
	KillTimer(PlayerData[userid][pDragTimer]);
    SetPlayerCuffed(userid, false);
    TogglePlayerControllable(userid,true);
    MesajGonder(userid, "%s adli yetkili tarafindan kelepçeniz çikarildi.", PlayerData[playerid][pAdminName]);
    MesajGonder(playerid, "%s adli kisinin kelepçelerini çikardiniz.", ReturnName(userid, 0));
	return 1;
}

CMD:createdealer(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

	new skin;

	if (sscanf(params, "i", skin)) return KullanimMesaji(playerid, "/createdealer [skin id]");
	if (!(0 <= skin <= 311)) return HataMesajGonder(playerid, "Geçersiz Skin ID.");

	new id = Iter_Free(Dealers), query[512];
	if (id == -1)
		return HataMesajGonder(playerid, "Daha fazla uyusturucu saticisi olusturulamaz.");

	GetPlayerPos(playerid, DealerData[id][dealerX], DealerData[id][dealerY], DealerData[id][dealerZ]);
	GetPlayerFacingAngle(playerid, DealerData[id][dealerA]);

    DealerData[id][dealerID] = id;
	DealerData[id][dealerDrugs] = 0;
    DealerData[id][dealerSkin] = skin;
    DealerData[id][dealerVw] = GetPlayerVirtualWorld(playerid);
	DealerData[id][dealerActorID] = CreateActor(skin, DealerData[id][dealerX], DealerData[id][dealerY], DealerData[id][dealerZ], DealerData[id][dealerA]);
	SetActorInvulnerable(DealerData[id][dealerActorID], 1);
	SetActorVirtualWorld(DealerData[id][dealerActorID], GetPlayerVirtualWorld(playerid));

	new label[128];

	format(label, sizeof(label), "Uyusturucu Saticisi (%d)\n\n{F1C40F}ALT {FFFFFF}tusuna basarak etkilesime geçebilirsiniz.", id);

	DealerData[id][dealerLabel] = CreateDynamic3DTextLabel(label, 0xF1C40FFF, DealerData[id][dealerX], DealerData[id][dealerY], DealerData[id][dealerZ] + 0.25, 5.0, .testlos = 1);

	Iter_Add(Dealers, id);

	mysql_format(g_SQL, query, sizeof query, "INSERT INTO `uyusturucusaticilari` (`ID`, `Skin`, `Uyusturucu`, `Pos`, `VirtualWorld`) VALUES ('%d', '%d', '0', '%f|%f|%f|%f', '%d')", id, skin, DealerData[id][dealerX], DealerData[id][dealerY], DealerData[id][dealerZ], DealerData[id][dealerA], DealerData[id][dealerVw]);
	mysql_query (g_SQL, query);

	MesajGonder(playerid, "Uyusturucu saticisi olusturuldu, ID: %d.", id);
	SetPlayerPos(playerid, DealerData[id][dealerX] + (1.5 * floatsin(-DealerData[id][dealerA], degrees)), DealerData[id][dealerY] + (1.5 * floatcos(-DealerData[id][dealerA], degrees)), DealerData[id][dealerZ]);
	return 1;
}

UyusturucuSaticisi_Guncelle(usID)
{
	new query[512];

	mysql_format(g_SQL, query, sizeof query, "UPDATE `uyusturucusaticilari` SET `Skin` = '%d' WHERE `ID` = '%d'", DealerData[usID][dealerSkin], DealerData[usID][dealerID]);
	mysql_query (g_SQL, query);

	mysql_format(g_SQL, query, sizeof query, "UPDATE `uyusturucusaticilari` SET `Uyusturucu` = '%d' WHERE `ID` = '%d'", DealerData[usID][dealerDrugs], DealerData[usID][dealerID]);
	mysql_query (g_SQL, query);

	mysql_format(g_SQL, query, sizeof query, "UPDATE `uyusturucusaticilari` SET `Pos` = '%f|%f|%f|%F' WHERE `ID` = '%d'", DealerData[usID][dealerX], DealerData[usID][dealerY], DealerData[usID][dealerZ], DealerData[usID][dealerA], DealerData[usID][dealerID]);
	mysql_query (g_SQL, query);

	mysql_format(g_SQL, query, sizeof query, "UPDATE `uyusturucusaticilari` SET `VirtualWorld` = '%d' WHERE `ID` = '%d'", DealerData[usID][dealerVw], DealerData[usID][dealerID]);
	mysql_query (g_SQL, query);

	return 1;
}

CMD:setdealerskin(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 3) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
	if (isnull(params)) return KullanimMesaji(playerid, "/setdealerskin [dealer id] [skin id]");
	new id, skin;
	if (sscanf(params, "ii", id, skin)) return KullanimMesaji(playerid, "/setdealerskin [dealer id] [skin id]");
	if (!Iter_Contains(Dealers, id)) return HataMesajGonder(playerid, "Geçersiz ID.");
	if (!(0 <= skin <= 311)) return HataMesajGonder(playerid, "Geçersiz Skin ID.");

	DealerData[id][dealerSkin] = skin;
	DestroyActor(DealerData[id][dealerActorID]);
	DealerData[id][dealerActorID] = CreateActor(skin, DealerData[id][dealerX], DealerData[id][dealerY], DealerData[id][dealerZ], DealerData[id][dealerA]);
	SetActorInvulnerable(DealerData[id][dealerActorID], 1);
    SetActorVirtualWorld(DealerData[id][dealerActorID], DealerData[id][dealerVw]);

    UyusturucuSaticisi_Guncelle(id);

    MesajGonder(playerid, "Uyusturucu saticisinin skini degistirildi.");
	return 1;
}

CMD:setdealerpos(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 3) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
	new id;
	if (sscanf(params, "i", id)) return KullanimMesaji(playerid, "/setdealerpos [dealer id]");
	if (!Iter_Contains(Dealers, id)) return HataMesajGonder(playerid, "Geçersiz ID.");
	GetPlayerPos(playerid, DealerData[id][dealerX], DealerData[id][dealerY], DealerData[id][dealerZ]);
	GetPlayerFacingAngle(playerid, DealerData[id][dealerA]);

	DestroyActor(DealerData[id][dealerActorID]);
	DealerData[id][dealerActorID] = CreateActor(DealerData[id][dealerSkin], DealerData[id][dealerX], DealerData[id][dealerY], DealerData[id][dealerZ], DealerData[id][dealerA]);
	SetActorInvulnerable(DealerData[id][dealerActorID], 1);
	DealerData[id][dealerVw] = GetPlayerVirtualWorld(playerid);
	SetActorVirtualWorld(DealerData[id][dealerActorID], DealerData[id][dealerVw]);
    Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, DealerData[id][dealerLabel], E_STREAMER_X, DealerData[id][dealerX]);
	Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, DealerData[id][dealerLabel], E_STREAMER_Y, DealerData[id][dealerY]);
	Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, DealerData[id][dealerLabel], E_STREAMER_Z, DealerData[id][dealerZ] + 0.25);

	UyusturucuSaticisi_Guncelle(id);

	MesajGonder(playerid, "Uyusturucu saticisinin pozisyonu degistirildi.");
 	SetPlayerPos(playerid, DealerData[id][dealerX] + (1.5 * floatsin(-DealerData[id][dealerA], degrees)), DealerData[id][dealerY] + (1.5 * floatcos(-DealerData[id][dealerA], degrees)), DealerData[id][dealerZ]);
	return 1;
}

CMD:removedealer(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 3) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
	new id, query[256];

	if (sscanf(params, "i", id)) return HataMesajGonder(playerid, "/removedealer [dealer id]");
	if (!Iter_Contains(Dealers, id)) return HataMesajGonder(playerid, "Geçersiz ID.");

	DestroyActor(DealerData[id][dealerActorID]);
	DestroyDynamic3DTextLabel(DealerData[id][dealerLabel]);

	DealerData[id][dealerID] = -1;
	DealerData[id][dealerActorID] = -1;
	DealerData[id][dealerLabel] = Text3D: -1;
	Iter_Remove(Dealers, id);

	mysql_format(g_SQL, query, sizeof query, "DELETE FROM `uyusturucusaticilari` WHERE `ID` = '%d'", id);
	mysql_query (g_SQL, query);

    MesajGonder(playerid, "Uyusturucu saticisi kaldirildi.");
	return 1;
}

CMD:revive(playerid, params[])
{
	new id;
    if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 2 && !PlayerData[playerid][pOyunGorevlisi] && !PlayerData[playerid][pForumGorevlisi]) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
    if (sscanf(params, "u", id)) return KullanimMesaji(playerid, "/revive [ID/Isim]");
    if (!OyundaDegil(id)) return HataMesajGonder(playerid, "Oyuncu oyunda degil.");
    if (PlayerData[id][pBaygin] == 0) return HataMesajGonder(playerid, "Oyuncu yarali degil.");
    if (IsPlayerDying(playerid)) return HataMesajGonder(playerid, "Biraz bekleyin.");
    ResetPlayerDamages(id);

    PlayerData[id][pBaygin] = 0;
    PlayerData[id][pBayginSure] = 0;

    PlayerData[id][pTopallama] = false;
    PlayerData[id][pTopallamaSayac] = 0;

    CanAyarla(id, 100);
    TogglePlayerControllable(id, true);
    ClearAnimations(id);
    MesajGonder(playerid, "%s adlý kiþi canlandýrýldý.", ReturnName(id, 0));
    MesajGonder(id, "%s adlý yetkili tarafýndan canlandýrýldýnýz.", PlayerData[playerid][pAdminName]);
    new rank[20];
	if (PlayerData[playerid][pHelper] > 0) format(rank, sizeof(rank), "(Lv. %d) Supporter", PlayerData[playerid][pHelper]);
	else format(rank, sizeof(rank), "%s", GetAdminRank(playerid));

	AdminHelperMessage(COLOR_LIGHTRED, "AdmCmd: %s %s, %s (%d) adlý oyuncuyu canlandýrdý.", rank, PlayerData[playerid][pAdminName], Player_GetName(id), id);
	return 1;
}

CMD:reviveall(playerid)
{
    if (PlayerData[playerid][pAdmin] < 2)
        return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

    foreach (new i : Player) {
        if (PlayerData[i][pBaygin] == 1)
        {
            SetCameraBehindPlayer(i);
            PlayerData[i][pBaygin] = 0;
			PlayerData[i][pBayginSure] = 0;
            ClearAnimations(i);
            TogglePlayerControllable(i, true);
            CanAyarla(i, 100);
            MesajGonder(i, "%s adli yetkili tarafindan canlandirildiniz.",PlayerData[playerid][pAdminName]);
        }
    }
    AdminMessage(COLOR_LIGHTRED, "(%s) - (( %s adlý yetkili tarafýndan bütün oyuncular canlandýrýldý. ))",ReturnDate(), PlayerData[playerid][pAdminName]);
    return 1;
}
CMD:abankasahip(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
    new id, owner;
    if (sscanf(params, "ii", id, owner)) return KullanimMesaji(playerid, "/abankasahip [Hesap ID] [Yeni Sahip SQL ID]");
    new query[128];
    mysql_format(g_SQL, query, sizeof(query), "UPDATE bank_accounts SET Owner='%d' WHERE ID=%d", owner, id);
    mysql_tquery(g_SQL, query, "OnBankAccountAdminEdit", "i", playerid);
	return 1;
}

CMD:abankasifre(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
    new id, password[16];
    if (sscanf(params, "is[16]", id, password)) return KullanimMesaji(playerid, "/abankasifre [Hesap ID] [sifre]");
    new query[128];
    mysql_format(g_SQL, query, sizeof(query), "UPDATE bank_accounts SET Password=md5('%e') WHERE ID=%d", password, id);
    mysql_tquery(g_SQL, query, "OnBankAccountAdminEdit", "i", playerid);
	return 1;
}

CMD:adengedegistir(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
    new id, balance;
    if (sscanf(params, "ii", id, balance)) return KullanimMesaji(playerid, "/adengedegistir [Hesap ID] [Para]");
    if (balance > ACCOUNT_LIMIT) return SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}Balance you specified exceeds account money limit.");
    new query[128];
    mysql_format(g_SQL, query, sizeof(query), "UPDATE bank_accounts SET Balance=%d WHERE ID=%d", balance, id);
    mysql_tquery(g_SQL, query, "OnBankAccountAdminEdit", "i", playerid);
	return 1;
}

CMD:abankaclearlogs(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
    new id, type;
    if (sscanf(params, "iI(0)", id, type))
	{
	    SendClientMessage(playerid, 0xE88732FF, "KULLANIM: {FFFFFF}/abankaclearlogs [Hesap ID] [Log Tipi]");
	    SendClientMessage(playerid, 0xE88732FF, "TIP: {FFFFFF}0- Bütün | 1- Girisler | 2- Yatirilan | 3- Çekilen | 4- Transfer | 5- sifre Degistirmeler");
		return 1;
	}

	new query[128];
	if (type > 0) {
	    mysql_format(g_SQL, query, sizeof(query), "DELETE FROM bank_logs WHERE AccountID=%d && Type=%d", id, type);
	}else{
	    mysql_format(g_SQL, query, sizeof(query), "DELETE FROM bank_logs WHERE AccountID=%d", id);
	}

    mysql_tquery(g_SQL, query, "OnBankAccountAdminEdit", "i", playerid);
	return 1;
}

CMD:abankahesapsil(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
    new id;
    if (sscanf(params, "i", id)) return SendClientMessage(playerid, 0xE88732FF, "KULLANIM: {FFFFFF}/abankahesapsil [Hesap ID]");
    foreach (new i : Player)
    {
        if (CurrentAccountID[i] == id) CurrentAccountID[i] = -1;
    }

    new query[128];
    mysql_format(g_SQL, query, sizeof(query), "UPDATE bank_accounts SET Disabled=1 WHERE ID=%d", id);
    mysql_tquery(g_SQL, query, "OnBankAccountAdminEdit", "i", playerid);
	return 1;
}

CMD:abankahesapkurtar(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
    new id;
    if (sscanf(params, "i", id)) return SendClientMessage(playerid, 0xE88732FF, "KULLANIM: {FFFFFF}/abankahesapkurtar [hesap id]");
    new query[128];
    mysql_format(g_SQL, query, sizeof(query), "UPDATE bank_accounts SET Disabled=0 WHERE ID=%d", id);
    mysql_tquery(g_SQL, query, "OnBankAccountAdminEdit", "i", playerid);
	return 1;
}

// Admin Commands for Bankers

CMD:createbanker(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
	new id = Iter_Free(Bankers);
	if (id == -1) return HataMesajGonder(playerid, "Daha fazla olusturulamaz.");
	new skin;
	if (sscanf(params, "i", skin)) return KullanimMesaji(playerid, "/createbanker [Skin ID]");
	if (!(0 <= skin <= 311)) return HataMesajGonder(playerid, "Geçersiz Skin ID.");
	BankerData[id][Skin] = skin;
	GetPlayerPos(playerid, BankerData[id][bankerX], BankerData[id][bankerY], BankerData[id][bankerZ]);
	GetPlayerFacingAngle(playerid, BankerData[id][bankerA]);
	SetPlayerPos(playerid, BankerData[id][bankerX] + (1.0 * floatsin(-BankerData[id][bankerA], degrees)), BankerData[id][bankerY] + (1.0 * floatcos(-BankerData[id][bankerA], degrees)), BankerData[id][bankerZ]);

	BankerData[id][bankerActorID] = CreateActor(skin, BankerData[id][bankerX], BankerData[id][bankerY], BankerData[id][bankerZ], BankerData[id][bankerA]);
	if (IsValidActor(BankerData[id][bankerActorID])) SetActorInvulnerable(BankerData[id][bankerActorID], true);
	SetActorVirtualWorld(BankerData[id][bankerActorID], GetPlayerVirtualWorld(playerid));
	BankerData[id][bankerActorID] = GetPlayerVirtualWorld(playerid);

	#if defined BANKER_USE_MAPICON
	BankerData[id][bankerIconID] = CreateDynamicMapIcon(BankerData[id][bankerX], BankerData[id][bankerY], BankerData[id][bankerZ], 58, 0, .streamdistance = BANKER_ICON_RANGE);
	#endif

	new label_string[80];
	format(label_string, sizeof(label_string), "Bankaci (%d)\n\n{F1C40F}ALT {FFFFFF}tusuna basarak etkilesime geçebilirsiniz.", id);
	BankerData[id][bankerLabel] = CreateDynamic3DTextLabel(label_string, 0x1ABC9CFF, BankerData[id][bankerX], BankerData[id][bankerY], BankerData[id][bankerZ] + 0.25, 5.0, .testlos = 1);

	new query[225];
	mysql_format(g_SQL, query, sizeof(query), "INSERT INTO bankers (`ID`, `Skin`, `PosX`, `PosY`, `PosZ`, `PosA`, `Virtual`) VALUES ('%d', '%d', '%f', '%f', '%f', '%f', '%d')", id, skin, BankerData[id][bankerX], BankerData[id][bankerY], BankerData[id][bankerZ], BankerData[id][bankerA], GetPlayerVirtualWorld(playerid));
	mysql_tquery(g_SQL, query);

	Iter_Add(Bankers, id);
	return 1;
}

CMD:setbankerpos(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
	new id;
	if (sscanf(params, "i", id)) return KullanimMesaji(playerid, "/setbankerpos [ID]");
	if (!Iter_Contains(Bankers, id)) return HataMesajGonder(playerid, "Geçersiz ID.");
	GetPlayerPos(playerid, BankerData[id][bankerX], BankerData[id][bankerY], BankerData[id][bankerZ]);
	GetPlayerFacingAngle(playerid, BankerData[id][bankerA]);

	DestroyActor(BankerData[id][bankerActorID]);
	BankerData[id][bankerActorID] = CreateActor(BankerData[id][Skin], BankerData[id][bankerX], BankerData[id][bankerY], BankerData[id][bankerZ], BankerData[id][bankerA]);
	if (IsValidActor(BankerData[id][bankerActorID])) SetActorInvulnerable(BankerData[id][bankerActorID], true);
    SetActorVirtualWorld(BankerData[id][bankerActorID], GetPlayerVirtualWorld(playerid));
	BankerData[id][bankerActorID] = GetPlayerVirtualWorld(playerid);
	#if defined BANKER_USE_MAPICON
	Streamer_SetFloatData(STREAMER_TYPE_MAP_ICON, BankerData[id][bankerIconID], E_STREAMER_X, BankerData[id][bankerX]);
	Streamer_SetFloatData(STREAMER_TYPE_MAP_ICON, BankerData[id][bankerIconID], E_STREAMER_Y, BankerData[id][bankerY]);
	Streamer_SetFloatData(STREAMER_TYPE_MAP_ICON, BankerData[id][bankerIconID], E_STREAMER_Z, BankerData[id][bankerZ]);
	#endif

	Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, BankerData[id][bankerLabel], E_STREAMER_X, BankerData[id][bankerX]);
	Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, BankerData[id][bankerLabel], E_STREAMER_Y, BankerData[id][bankerY]);
	Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, BankerData[id][bankerLabel], E_STREAMER_Z, BankerData[id][bankerZ]);

	SetPlayerPos(playerid, BankerData[id][bankerX] + (1.0 * floatsin(-BankerData[id][bankerA], degrees)), BankerData[id][bankerY] + (1.0 * floatcos(-BankerData[id][bankerA], degrees)), BankerData[id][bankerZ]);

	new query[144];
	mysql_format(g_SQL, query, sizeof(query), "UPDATE bankers SET PosX='%f', PosY='%f', PosZ='%f', PosA='%f', `Virtual` = '%d' WHERE ID=%d", BankerData[id][bankerX], BankerData[id][bankerY], BankerData[id][bankerZ], BankerData[id][bankerA], GetPlayerVirtualWorld(playerid),id);
	mysql_tquery(g_SQL, query);
	return 1;
}

CMD:setbankerskin(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
	new id, skin;
	if (sscanf(params, "ii", id, skin)) return KullanimMesaji(playerid, "/setbankerskin [ID] [Skin ID]");
	if (!Iter_Contains(Bankers, id)) return HataMesajGonder(playerid, "Geçersiz ID.");
	if (!(0 <= skin <= 311)) return HataMesajGonder(playerid, "Geçersiz Skin ID.");
	BankerData[id][Skin] = skin;

	if (IsValidActor(BankerData[id][bankerActorID])) DestroyActor(BankerData[id][bankerActorID]);
	BankerData[id][bankerActorID] = CreateActor(BankerData[id][Skin], BankerData[id][bankerX], BankerData[id][bankerY], BankerData[id][bankerZ], BankerData[id][bankerA]);
	if (IsValidActor(BankerData[id][bankerActorID])) SetActorInvulnerable(BankerData[id][bankerActorID], true);

	new query[48];
	mysql_format(g_SQL, query, sizeof(query), "UPDATE bankers SET Skin=%d WHERE ID=%d", BankerData[id][Skin], id);
	mysql_tquery(g_SQL, query);
	return 1;
}

CMD:removebanker(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
	new id;
	if (sscanf(params, "i", id)) return KullanimMesaji(playerid, "/removebanker [ID]");
	if (!Iter_Contains(Bankers, id)) return HataMesajGonder(playerid, "Geçersiz ID.");
	if (IsValidActor(BankerData[id][bankerActorID])) DestroyActor(BankerData[id][bankerActorID]);
	BankerData[id][bankerActorID] = -1;

	#if defined BANKER_USE_MAPICON
	if (IsValidDynamicMapIcon(BankerData[id][bankerIconID])) DestroyDynamicMapIcon(BankerData[id][bankerIconID]);
    BankerData[id][bankerIconID] = -1;
    #endif

    if (IsValidDynamic3DTextLabel(BankerData[id][bankerLabel])) DestroyDynamic3DTextLabel(BankerData[id][bankerLabel]);
    BankerData[id][bankerLabel] = Text3D: -1;

	Iter_Remove(Bankers, id);

	new query[48];
	mysql_format(g_SQL, query, sizeof(query), "DELETE FROM bankers WHERE ID=%d", id);
	mysql_tquery(g_SQL, query);
	return 1;
}

/*============================================================================*/


/*============================================================================*/

// Admin Commands for ATMs

CMD:createatm(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 5) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
	new id = Iter_Free(ATMs);
	if (id == -1) return SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}Can't create any more ATMs.");
	ATMData[id][atmRX] = ATMData[id][atmRY] = 0.0;

	GetPlayerPos(playerid, ATMData[id][atmX], ATMData[id][atmY], ATMData[id][atmZ]);
	GetPlayerFacingAngle(playerid, ATMData[id][atmRZ]);

	ATMData[id][atmX] += (2.0 * floatsin(-ATMData[id][atmRZ], degrees));
    ATMData[id][atmY] += (2.0 * floatcos(-ATMData[id][atmRZ], degrees));
    ATMData[id][atmZ] -= 0.3;

	ATMData[id][atmObjID] = CreateDynamicObject(19324, ATMData[id][atmX], ATMData[id][atmY], ATMData[id][atmZ], ATMData[id][atmRX], ATMData[id][atmRY], ATMData[id][atmRZ]);

    if (IsValidDynamicObject(ATMData[id][atmObjID]))
    {
        #if defined ROBBABLE_ATMS
        new dataArray[E_ATMDATA];
        format(dataArray[IDString], 8, "atm_sys");
        dataArray[refID] = id;
        Streamer_SetArrayData(STREAMER_TYPE_OBJECT, ATMData[id][atmObjID], E_STREAMER_EXTRA_ID, dataArray);
		#endif

        EditingATMID[playerid] = id;
        EditDynamicObject(playerid, ATMData[id][atmObjID]);
    }

	#if defined ATM_USE_MAPICON
	ATMData[id][atmIconID] = CreateDynamicMapIcon(ATMData[id][atmX], ATMData[id][atmY], ATMData[id][atmZ], 52, 0, .streamdistance = ATM_ICON_RANGE);
	#endif

	new label_string[64];
	format(label_string, sizeof(label_string), "ATM (%d)\n\n{FFFFFF}Etkilesim {F1C40F}[ALT]", id);
	ATMData[id][atmLabel] = CreateDynamic3DTextLabel(label_string, 0x1ABC9CFF, ATMData[id][atmX], ATMData[id][atmY], ATMData[id][atmZ] + 0.85, 5.0, .testlos = 1);

	new query[144];
	mysql_format(g_SQL, query, sizeof(query), "INSERT INTO bank_atms SET ID=%d, PosX='%f', PosY='%f', PosZ='%f', RotX='%f', RotY='%f', RotZ='%f'", id, ATMData[id][atmX], ATMData[id][atmY], ATMData[id][atmZ], ATMData[id][atmRX], ATMData[id][atmRY], ATMData[id][atmRZ]);
	mysql_tquery(g_SQL, query);

	Iter_Add(ATMs, id);
	return 1;
}

CMD:editatm(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 5) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
	new id;
	if (sscanf(params, "i", id)) return KullanimMesaji(playerid, "/editatm [ATM ID]");
	if (!Iter_Contains(ATMs, id)) return HataMesajGonder(playerid, "Geçersiz ID.");
	if (!IsPlayerInRangeOfPoint(playerid, 30.0, ATMData[id][atmX], ATMData[id][atmY], ATMData[id][atmZ])) return HataMesajGonder(playerid, "Editlemek istediginiz ATM'ye yakin degilsiniz.");
	if (EditingATMID[playerid] != -1) return HataMesajGonder(playerid, "Zaten ATM editliyorsun.");
	EditingATMID[playerid] = id;
	EditDynamicObject(playerid, ATMData[id][atmObjID]);
	return 1;
}

CMD:removeatm(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 5) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
	new id;
	if (sscanf(params, "i", id)) return KullanimMesaji(playerid, "/removeatm [ID]");
	if (!Iter_Contains(ATMs, id)) return HataMesajGonder(playerid, "Geçersiz ATM id.");
	if (IsValidDynamicObject(ATMData[id][atmObjID])) DestroyDynamicObject(ATMData[id][atmObjID]);
	ATMData[id][atmObjID] = -1;

	#if defined ATM_USE_MAPICON
	if (IsValidDynamicMapIcon(ATMData[id][atmIconID])) DestroyDynamicMapIcon(ATMData[id][atmIconID]);
    ATMData[id][atmIconID] = -1;
    #endif

    if (IsValidDynamic3DTextLabel(ATMData[id][atmLabel])) DestroyDynamic3DTextLabel(ATMData[id][atmLabel]);
    ATMData[id][atmLabel] = Text3D: -1;

	#if defined ROBBABLE_ATMS
    if (ATMData[id][atmTimer] != -1) KillTimer(ATMData[id][atmTimer]);
    ATMData[id][atmTimer] = -1;

    if (IsValidDynamicPickup(ATMData[id][atmPickup])) DestroyDynamicPickup(ATMData[id][atmPickup]);
    ATMData[id][atmPickup] = -1;

    ATMData[id][atmHealth] = ATM_HEALTH;
	ATMData[id][atmRegen] = 0;
	#endif

	Iter_Remove(ATMs, id);

	new query[48];
	mysql_format(g_SQL, query, sizeof(query), "DELETE FROM bank_atms WHERE ID=%d", id);
	mysql_tquery(g_SQL, query);
	return 1;
}
CMD:setfuel(playerid, params[])
{
	new vid, Float:fuel;
	if (PlayerData[playerid][pAdmin] < 2) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
	if (sscanf(params, "if", vid, fuel)) return KullanimMesaji(playerid, "/setfuel [Araç ID] [Yakit]");
	if (!IsValidVehicle(vid)) return HataMesajGonder(playerid, "Böyle bir araç yok.");
	if (fuel > 100.0 || fuel < 0.1) return HataMesajGonder(playerid, "En fazla 100, en az 0 yakit verebilirsiniz.");
	new arac = Car_GetID(vid);
	if (arac == -1) return HataMesajGonder(playerid, "Bu aracin yakitini ayarlayamazsiniz.");
	AracInfo[arac][aracBenzin] = fuel;
	MesajGonder(playerid, "%d ID'li aracin yakiti %.1f olarak degistirildi.", vid, fuel);
	return 1;
}
CMD:gotoobject(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 2) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
	if (isnull(params)) return KullanimMesaji(playerid, "/gotoobject [ID]");
	new id = strval(params[0]);
	if (!(0 <= id <= MAX_COP_OBJECTS - 1)) return HataMesajGonder(playerid, "Geçersiz ID girdiniz.");
	if (!CopObjectData[id][ObjCreated]) return HataMesajGonder(playerid, "Böyle bir obje yok.");
	SetPlayerPos(playerid, CopObjectData[id][ObjX], CopObjectData[id][ObjY], CopObjectData[id][ObjZ] + 1.75);
	SetPlayerInterior(playerid, CopObjectData[id][ObjInterior]);
	SetPlayerVirtualWorld(playerid, CopObjectData[id][ObjVirtualWorld]);
	MesajGonder(playerid, "%d ID'li objeye isinlandiniz.", id);
	return 1;
}

/* CMD:bakiyever(playerid, params[])
{
	new id, bakiye;
	if (PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
	if (sscanf(params, "ui", id, bakiye)) return KullanimMesaji(playerid, "/bakiyever [ID/Isim] [Miktar]");
	if (bakiye == 0) return 1;
	if (!OyundaDegil(id)) return HataMesajGonder(playerid, "Oyuncu oyunda degil.");

	PlayerData[id][pBakiye] += bakiye;
	if (bakiye < 0)
	{
	    SunucuMesaji(playerid, "%s adli kisiden %d TL bakiyesini aldin.", ReturnName(id, 0), bakiye);
    	SunucuMesaji(id, "%s adli yetkili bakiyenizden %d TL sildi.", PlayerData[playerid][pAdminName], bakiye);
	}
	else
	{
	    MesajGonder(playerid, "%s adli kisiye %d TL bakiye verdiniz.", ReturnName(id, 0), bakiye);
    	MesajGonder(id, "%s adli yetkili size %d TL bakiye verdi.", PlayerData[playerid][pAdminName], bakiye);
	}
	return 1;
} */

CMD:siparisler(playerid)
{
    if (!OyundaDegil(playerid)) return 1;
	if (PlayerData[playerid][pAdmin] < 3) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
	SetPVarInt(playerid, "Siparis", 0);
	SiparisListele(playerid);
	return 1;
}

CMD:setdonator(playerid, params[])
{
	new id, level, gun;
	if (!OyundaDegil(playerid)) return 1;
	if (PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
	if (sscanf(params, "uii", id, level, gun)) return KullanimMesaji(playerid, "/setvip [ID/Isim] [Level] [Gün]");
	if (!OyundaDegil(id)) return HataMesajGonder(playerid, "Oyuncu oyunda degil.");
	if (level < 0 || level > 1) return HataMesajGonder(playerid, "Geçersiz level girdiniz.");
	if (gun < 0) return 1;
	if (level == 0)
	{
		PlayerData[id][pVip] = 0;
		PlayerData[id][pVipSure] = 0;
		PlayerData[id][pVipRenk] = 0;
		PlayerData[id][pDovusStili] = 4;
  		SetPlayerFightingStyle(id, FIGHT_STYLE_NORMAL);
		Oyuncu_Kaydet(id);
		SunucuMesaji(id, "%s adli yetkili tarafindan V.I.P paketiniz silindi.", PlayerData[playerid][pAdminName]);
		SunucuMesaji(playerid, "%s adli kisinin V.I.P paketini sildiniz.", ReturnName(id, 0));
	}
	else
	{
	    PlayerData[id][pVip] = level;
	    PlayerData[id][pVipSure] = gettime()+gun*86400;
	    SunucuMesaji(id, "%s adli yetkili size %s paketini %d günlük verdi. (Bitis tarihi: %s)", PlayerData[playerid][pAdminName], GetVIPName(level), gun, convertDatex(PlayerData[id][pVipSure]));
	    SunucuMesaji(playerid, "%s adli kisiye %s paketini %d günlük verdiniz. (Bitis tarihi: %s)", ReturnName(id, 0), GetVIPName(level), gun, convertDatex(PlayerData[id][pVipSure]));
		PlayerData[id][pSilahHakki] = SilahAveraj(playerid);
		PlayerData[id][pSilahSuresi] = 0;

		Oyuncu_Kaydet(id);
	}
	Log_Write("logs/admin.log", "%s adli admin %s adli kisiye %d gunluk level %d vip verdi.",PlayerData[playerid][pAdminName], ReturnName(id, 0), gun, level);
	return 1;
}

CMD:masked(playerid)
{
    if (PlayerData[playerid][pAdmin] < 1 && !PlayerData[playerid][pOyunGorevlisi])
        return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

    static
        name[24];

    SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");

    foreach (new i : Player) if (PlayerData[i][pMaske] == true) {
        GetPlayerName(i, name, sizeof(name));

        SendClientMessageEx(playerid, COLOR_WHITE, "* %s (#%d)", name, PlayerData[i][pMaskeID]);
    }
    SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
    return 1;
}
CMD:maskeidbul(playerid, params[])
{
	new maskid;
	if (PlayerData[playerid][pAdmin] < 1) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
	if (sscanf(params, "i", maskid)) return KullanimMesaji(playerid, "/maskeidbul [Maske ID]");
	new name[24], sayi;
	foreach (new i:Player) if (PlayerData[i][pMaskeID] == maskid)
	{
	    GetPlayerName(i, name, sizeof(name));
	    sayi++;
	    SendClientMessageEx(playerid, COLOR_WHITE, "* %s (ID: %d)", name, i);
	}
	if (sayi == 0) return HataMesajGonder(playerid, "Bulunamadi.");
	return 1;
}
CMD:ozelmodelver(playerid, params[])
{
	new sqlid, skinid;
    if (PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
    if (sscanf(params, "ii", sqlid, skinid)) return KullanimMesaji(playerid, "/ozelmodelver [SQL ID] [Skin ID]");
    new query[124];
    format(query, sizeof(query), "SELECT null FROM `ozelmodel` WHERE `sqlid` = '%d' AND `skinid` = '%d'", sqlid, skinid);
    mysql_tquery(g_SQL, query, "OzelModelVer", "iii", playerid, sqlid, skinid);
	return 1;
}
CMD:ozelmodelsil(playerid, params[])
{
    new sqlid, skinid;
    if (PlayerData[playerid][pAdmin] < 3) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
    if (sscanf(params, "ii", sqlid, skinid)) return KullanimMesaji(playerid, "/ozelmodelsil [SQL ID] [Skin ID]");
    new query[124];
    format(query, sizeof(query), "SELECT null FROM `ozelmodel` WHERE `sqlid` = '%d' AND `skinid` = '%d'", sqlid, skinid);
    mysql_tquery(g_SQL, query, "OzelModelSil", "iii", playerid, sqlid, skinid);
	return 1;
}

CMD:hoodolustur(playerid, params[])
{
	new birlikid;
    if (PlayerData[playerid][pAdmin] < 3) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
    if (sscanf(params, "i", birlikid)) return KullanimMesaji(playerid, "/hoodolustur [Birlik ID]");
    new id = Hood_Olustur(playerid, birlikid);
    if (id == -1) return HataMesajGonder(playerid, "Hood olusturulamadi.");
    MesajGonder(playerid, "Hood olusturuldu, ID: %d", id);
	return 1;
}

CMD:hoodsil(playerid, params[])
{
	new id;
    if (PlayerData[playerid][pAdmin] < 3) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
    if (sscanf(params, "i", id)) return KullanimMesaji(playerid, "/hoodsil [ID]");
    if ((id < 0 || id >= MAX_HOOD) || Hood[id][hExists] == false) return HataMesajGonder(playerid, "Geçersiz ID girdiniz.");
    Hood_Sil(id);
    MesajGonder(playerid, "Hood silindi.");
	return 1;
}

CMD:graffitisil(playerid, params[])
{
	new id;
	if (PlayerData[playerid][pAdmin] < 3) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
	if (sscanf(params, "i", id)) return KullanimMesaji(playerid, "/graffitisil [ID] (-1 yazarsaniz yakininizdaki graffiti silinir)");
	if (id == -1)
	{
	    new yakinid = GetClosestGraffiti(playerid);
	    if (yakinid == -1) return HataMesajGonder(playerid, "Yakininizda graffiti yok.");
	    Graffiti_Delete(yakinid);
	    MesajGonder(playerid, "Graffiti silindi, ID: %d.", yakinid);
	}
	else
	{
	    if ((id < 0 || id >= MAX_GRAFFITI_POINTS) || !GraffitiData[id][graffitiExists]) return HataMesajGonder(playerid, "Geçersiz ID girdiniz.");
	    Graffiti_Delete(id);
	    MesajGonder(playerid, "Graffiti silindi, ID: %d.", id);
	}
	return 1;
}
CMD:ss(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 3)
        return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

    if (isnull(params))
        return KullanimMesaji(playerid, "/ss [IC]");

    if (strlen(params) > 64)
    {
        foreach (new i : Player) if (OyundaDegil(i)) {
            SendClientMessageEx(i, 0xAAC4E5FF, "(( [Sokaktan Sesler]: %.64s", params);
            SendClientMessageEx(i, 0xAAC4E5FF, "...%s ))", params[64]);
        }
    }
    else
    {
        foreach (new i : Player) if (OyundaDegil(i)) {
            SendClientMessageEx(i, 0xAAC4E5FF, "(( [Sokaktan Sesler]: %s ))", params);
        }
    }

    return 1;
}

CMD:oyundisi(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 4)
        return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

    if (isnull(params))
        return KullanimMesaji(playerid, "(/o)oc [Sunucu OOC Yazi]");
    if (strlen(params) > 64)
    {
        foreach (new i : Player)
		{
            SendClientMessageEx(i, 0xBC8A5AAA, "{bc8a5a}(( [Oyun Dýþý] %s: %.64s ))", PlayerData[playerid][pAdminName], params);
            SendClientMessageEx(i, 0xBC8A5AAA, "{bc8a5a}...%s ))", params[64]);
        }
    }
    else
    {
        foreach (new i : Player)
        {
            SendClientMessageEx(i, 0xBC8A5AAA, "{bc8a5a}(( [Oyun Dýþý] %s: %.64s ))",PlayerData[playerid][pAdminName], params);
        }
    }
    return 1;
}
CMD:songiris(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 1) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

    if (isnull(params) || strlen(params) > 24)
        return KullanimMesaji(playerid, "/songiris [Kullanici Adi]");

    static
        query[128];

    format(query, sizeof(query), "SELECT `SonGiris`, `LastIP` FROM `oyuncular` WHERE `Isim` = '%s'", SQL_ReturnEscaped(params));
    mysql_tquery(g_SQL, query, "OnLoginDate", "ds", playerid, params);

    return 1;
}
CMD:slap(playerid, params[])
{
    static
        userid;

    if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 4)
        return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

    if (sscanf(params, "u", userid))
        return KullanimMesaji(playerid, "/slap [ID/Isim]");

    if (!OyundaDegil(userid))
        return HataMesajGonder(playerid, "Belirttiðiniz kullanýcý sunucuda deðil.");

    static
        Float:px,
        Float:py,
        Float:pz;

    GetPlayerPos(userid, px, py, pz);
    SetPlayerPos(userid, px, py, pz + 5);

    PlayerPlaySound(userid, 1130, 0.0, 0.0, 0.0);
    AdminMessage(COLOR_LIGHTRED, "AdmCmd: %s adlý yetkili tarafýndan %s(%d) isimli oyuncu tokatlandý.", PlayerData[playerid][pAdminName], ReturnName(userid, 0), userid);
    return 1;
}
CMD:kick(playerid, params[])
{
    static
        userid,
        reason[128];
        //query[512];

    if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 4 && !PlayerData[playerid][pForumGorevlisi] && !PlayerData[playerid][pOyunGorevlisi])
        return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

    if (sscanf(params, "us[128]", userid, reason))
        return KullanimMesaji(playerid, "/kick [ID/Isim] [Sebep]");

    if (!IsPlayerConnected(userid))
        return HataMesajGonder(playerid, "Belirttiginiz oyuncu oyunda degil !");

    if (PlayerData[userid][pAdmin] > PlayerData[playerid][pAdmin])
        return HataMesajGonder(playerid, "Belirtilen oyuncu sizden yüksek yetkiye sahiptir.");

	new query[300];
    if (PlayerData[userid][pLevel] >= 1)
    {
        format(query, sizeof(query), "INSERT INTO `oocsicil` (`ID`, `Tarih`, `Sebep`, `Uygulayan`, `Tur`) VALUES('%d', '%s', '%s', '%s', '1')",  PlayerData[userid][pID], ReturnDate(), reason, PlayerData[playerid][pAdminName]);
        mysql_tquery(g_SQL, query);
    }
    foreach (new i:Player) if (PlayerData[i][pAyarlar][3] == 0 || i == userid)
    {
    	SendClientMessageEx(i, COLOR_LIGHTRED, "AdmCmd: (%s) - %s, %s tarafindan %s sebebiyle sunucudan atýldý.", ReturnDate(), ReturnName(userid, 0),  PlayerData[playerid][pAdminName], reason);
    }
    Log_Write("logs/kick_log.txt", "[%s] %s tarafýndan %s sunucudan atýldý. Sebep: %s.", ReturnDate(), PlayerData[playerid][pAdminName], ReturnName(userid, 0), reason);
    Kick(userid);
    return 1;
}
CMD:skick(playerid, params[])
{
    static
        userid,
        reason[128];
        //query[512];

    if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pAdmins] < 0 && PlayerData[playerid][pHelper] < 4 && !PlayerData[playerid][pForumGorevlisi] && !PlayerData[playerid][pOyunGorevlisi])
        return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

    if (sscanf(params, "us[128]", userid, reason))
        return KullanimMesaji(playerid, "/kick [ID/Isim] [Sebep]");

    if (!IsPlayerConnected(userid))
        return HataMesajGonder(playerid, "Belirttiginiz oyuncu oyunda degil !");

    if (PlayerData[userid][pAdmin] > PlayerData[playerid][pAdmin])
        return HataMesajGonder(playerid, "Belirtilen oyuncu sizden yüksek yetkiye sahiptir.");

	new query[300];
    if (PlayerData[userid][pLevel] >= 1)
    {
        format(query, sizeof(query), "INSERT INTO `oocsicil` (`ID`, `Tarih`, `Sebep`, `Uygulayan`, `Tur`) VALUES('%d', '%s', '%s', '%s', '1')",  PlayerData[userid][pID], ReturnDate(), reason, PlayerData[playerid][pAdminName]);
        mysql_tquery(g_SQL, query);
    }
    SunucuMesaji(userid, "Sunucudan sessiz kicklendiniz.");
    Kick(userid);
    return 1;
}
CMD:kickall(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 3)
        return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

    SendClientMessageToAllEx(COLOR_LIGHTRED, "AdmCmd: (%s) %s %s, herkesi sunucudan atti.", ReturnDate(), GetAdminRank(playerid), PlayerData[playerid][pAdminName]);
    foreach (new i : Player)
    {
        if (!IsPlayerNPC(i) && i != playerid)
		{
		    Kick(i);
		}
    }
    return 1;
}
CMD:dondur(playerid, params[])
{
    static
        userid;

    if (PlayerData[playerid][pAdmin] < 1)
        return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

    if (sscanf(params, "u", userid))
        return KullanimMesaji(playerid, "/dondur [id/isim]");

    if (!OyundaDegil(userid))
        return HataMesajGonder(playerid, "Belirttiginiz oyuncu oyunda degil !");

    TogglePlayerControllable(userid, 0);
    MesajGonder(playerid, "%s adli oyuncuyu dondurdunuz.", ReturnName(userid, 0));
    SunucuMesaji(userid, "%s adli yetkili tarafindan donduruldunuz.", PlayerData[playerid][pAdminName]);
    return 1;
}

CMD:coz(playerid, params[])
{
    static
        userid;

    if (PlayerData[playerid][pAdmin] < 1)
        return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

    if (sscanf(params, "u", userid))
        return KullanimMesaji(playerid, "/coz [id/isim]");

    if (!IsPlayerConnected(userid))
        return HataMesajGonder(playerid, "Belirttiginiz oyuncu oyunda degil !");

    TogglePlayerControllable(userid, 1);
    MesajGonder(playerid, "%s adli oyuncunun hareket edememe engelini kaldirdiniz.", ReturnName(userid, 0));
    return 1;
}
CMD:level1(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 1) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
    new string[1024];
    foreach (new i : Player)
    {
        if (PlayerData[i][pLevel] == 1 && OyundaDegil(i))
        {
            new bilgiler[256];
            format(bilgiler, sizeof(bilgiler), "%s - [ID: %d ]\n", ReturnName(i), i);
            strcat(string, bilgiler);
        }
    }
    Dialog_Show(playerid, Level1ler, DIALOG_STYLE_LIST, "Acemi Oyuncular", string, "Tamam", "");
    return 1;
}

CMD:spawnla(playerid, params[])
{
    static
        userid;

	new rank[20];
	if(PlayerData[playerid][pHelper] > 0) format(rank, sizeof(rank), "(Lv. %d) Supporter", PlayerData[playerid][pHelper]);
   	else format(rank, sizeof(rank), "%s", GetAdminRank(playerid));

    if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 1 && !PlayerData[playerid][pOyunGorevlisi] && !PlayerData[playerid][pForumGorevlisi])
        return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

    if (sscanf(params, "u", userid))
        return KullanimMesaji(playerid, "/spawnla [id/isim]");

    if (!OyundaDegil(userid) || IsPlayerNPC(userid))
        return HataMesajGonder(playerid, "Belirttiginiz oyuncu oyunda deðil !");


    if (GetPlayerState(userid) == 2)
    {
        new tmpcar = GetPlayerVehicleID(playerid);
        SetVehiclePos(tmpcar, 1529.6,-1691.2,13.3);
        LinkVehicleToInteriorEx(tmpcar, 0);
        SetPlayerVirtualWorld(userid, 0);
    }
    else
    {
        SetPlayerPos(userid, 1764.9613,-1341.6626,15.7578,356.8369);
        SetPlayerVirtualWorld(userid, 0);
    }
    SetPlayerInterior(userid, 0);

	AdminHelperMessage(COLOR_LIGHTRED, "AdmCmd: %s %s, %s(%d) adlý oyuncuyu spawnlandý.", rank, PlayerData[playerid][pAdminName], ReturnName(userid, 0), userid);
	MesajGonder(playerid, "%s adlý oyuncu spawnlandý.", ReturnName(userid, 0));
    SunucuMesaji(userid, "%s adlý yetkili tarafýndan spawn edildiniz.", PlayerData[playerid][pAdminName]);


    PlayerData[userid][pHouse] = -1;
    PlayerData[userid][pIsyeri] = -1;
    PlayerData[userid][pGarage] = -1;
    PlayerData[userid][pCadir] = -1;
    return 1;
}

CMD:setskin(playerid, params[])
{
    static
        userid,
        skinid;

    if (PlayerData[playerid][pAdmin] < 2)
        return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

    if (sscanf(params, "ud", userid, skinid))
        return KullanimMesaji(playerid, "/setskin [id/isim] [skin id]");

    if (!OyundaDegil(userid))
        return HataMesajGonder(playerid, "Belirttiginiz oyuncu oyunda degil !");

    SetPlayerSkin(userid, skinid);
    PlayerData[userid][pSkin] = skinid;

    MesajGonder(playerid, "%s adli oyuncunun kiyafetini ID %d olarak degistirdiniz.", ReturnName(userid, 0), skinid);
    SunucuMesaji(userid, "%s adli yetkili skininizi ID %d olarak degistirdi.", PlayerData[playerid][pAdminName], skinid);

    return 1;
}
CMD:goto(playerid, params[])
{
	static
	    id,
	    type[24],
		string[64];

	if (PlayerData[playerid][pAdmin] < 1)
	    return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

	if (sscanf(params, "u", id))
 	{
	 	KullanimMesaji(playerid, "/goto [oyuncu veya isim]");
		SendClientMessage(playerid, COLOR_YELLOW, "[PARAMETRELER]:{FFFFFF} ls, mulk, isyeri, bina, gate, interior, garaj, lv, sf");
		return 1;
	}

    if (id == INVALID_PLAYER_ID)
	{
	    if (sscanf(params, "s[24]S()[64]", type, string))
		{
		    KullanimMesaji(playerid, "/goto [oyuncu veya isim]");
			SendClientMessage(playerid, COLOR_YELLOW, "[PARAMETRELER]:{FFFFFF} ls, ev, isyeri, bina, gate, interior, garaj, lv, sf");
			return 1;
	    }
	    if (!strcmp(type, "ls", true))
		{
	        SetPlayerPos(playerid, 1529.6,-1691.2,13.3);
	        SetPlayerInterior(playerid, 0);
	        SetPlayerVirtualWorld(playerid, 0);

			PlayerData[playerid][pHouse] = -1;
	        PlayerData[playerid][pIsyeri] = -1;
	        PlayerData[playerid][pGarage] = -1;
			PlayerData[playerid][pCadir] = -1;
	        return SunucuMesaji(playerid, "Los Angeles'a gönderildin.");
		}
		else if (!strcmp(type, "mulk", true))
		{
		    if (sscanf(string, "d", id))
		        return KullanimMesaji(playerid, "/goto [ev] [ev ID]");

			if ((id < 0 || id >= MAX_EV) || !HouseInfo[id][evExists])
			    return HataMesajGonder(playerid, "Geçersiz ev ID'si.");

		    SetPlayerPos(playerid, HouseInfo[id][evPos][0], HouseInfo[id][evPos][1], HouseInfo[id][evPos][2]);
		    SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);
		    PlayerData[playerid][pHouse] = -1;
	        PlayerData[playerid][pIsyeri] = -1;
	        PlayerData[playerid][pGarage] = -1;
            PlayerData[playerid][pCadir] = -1;
		    SunucuMesaji(playerid, "%d Ýd'li mülke gittin.", id);
		    return 1;
		}
		else if (!strcmp(type, "isyeri", true))
		{
		    if (sscanf(string, "d", id))
		        return KullanimMesaji(playerid, "/goto [isyeri] [isyeri ID]");

			if ((id < 0 || id >= MAX_ISYERI) || !Isyeri[id][isyeriExists])
			    return HataMesajGonder(playerid, "Geçersiz isyeri ID'si.");

		    SetPlayerPos(playerid, Isyeri[id][isyeriPos][0], Isyeri[id][isyeriPos][1], Isyeri[id][isyeriPos][2]);
		    SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);
		    PlayerData[playerid][pHouse] = -1;
	        PlayerData[playerid][pIsyeri] = -1;
	        PlayerData[playerid][pGarage] = -1;
            PlayerData[playerid][pCadir] = -1;
            //AdminHelperMessage(COLOR_LIGHTRED, "AdmCmd: %s %s, %d idli isyerine isinlandi." rank, PlayerData[playerid][pAdminName], id);
		    SunucuMesaji(playerid, "%d Ýd'li iþyerine gittin.", id);
		    return 1;
		}
		else if (!strcmp(type, "bina", true))
		{
		    if (sscanf(string, "d", id))
		        return KullanimMesaji(playerid, "/goto [bina] [bina ID]");

			if ((id < 0 || id >= MAX_ENTRANCES) || !EntranceData[id][entranceExists])
			    return HataMesajGonder(playerid, "Geçersiz bir bina ID belirttiniz.");

		    SetPlayerPos(playerid, EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2]);
		    SetPlayerInterior(playerid, EntranceData[id][entranceExterior]);

			SetPlayerVirtualWorld(playerid, EntranceData[id][entranceExteriorVW]);
			PlayerData[playerid][pHouse] = -1;
	        PlayerData[playerid][pIsyeri] = -1;
	        PlayerData[playerid][pGarage] = -1;
            PlayerData[playerid][pCadir] = -1;
		    SunucuMesaji(playerid, "%d Ýd'li binaya ýþýnlandý.", id);
		    return 1;
		}
		else if (!strcmp(type, "gate", true))
		{
		    if (sscanf(string, "d", id))
		        return KullanimMesaji(playerid, "/goto [gate] [gate ID]");

			if ((id < 0 || id >= MAX_GATES) || !GateData[id][gateExists])
			    return HataMesajGonder(playerid, "Geçersiz bir kapý kimliði belirttiniz.");

		    SetPlayerPos(playerid, GateData[id][gatePos][0] - (2.5 * floatsin(-GateData[id][gatePos][3], degrees)), GateData[id][gatePos][1] - (2.5 * floatcos(-GateData[id][gatePos][3], degrees)), GateData[id][gatePos][2]);
		    SetPlayerInterior(playerid, GateData[id][gateInterior]);

			SetPlayerVirtualWorld(playerid, GateData[id][gateWorld]);
			PlayerData[playerid][pHouse] = -1;
	        PlayerData[playerid][pIsyeri] = -1;
	        PlayerData[playerid][pGarage] = -1;
	        PlayerData[playerid][pCadir] = -1;
		    SunucuMesaji(playerid, "ID: %d numaralý gate'e gönderildin.", id);
		    return 1;
		}
		else if (!strcmp(type, "interior", true))
		{
		    static
		        str[1536];

			str[0] = '\0';

			for (new i = 0; i < sizeof(g_arrInteriorData); i ++) {
			    strcat(str, g_arrInteriorData[i][e_InteriorName]);
			    strcat(str, "\n");
		    }
		    Dialog_Show(playerid, TeleportInterior, DIALOG_STYLE_LIST, "Isinlan: Interior Listesi", str, "Seç", "Kapat");
		    return 1;
		}
		else if (!strcmp(type, "garaj", true))
		{
		    if (sscanf(string, "d", id))
		        return KullanimMesaji(playerid, "/goto [garaj] [garaj ID]");

			if ((id < 0 || id >= MAX_GARAGE) || GarageData[id][gExists] == false)
			    return HataMesajGonder(playerid, "Geçersiz ID girdiniz.");

			SetPlayerPos(playerid, GarageData[id][gPos][0], GarageData[id][gPos][1], GarageData[id][gPos][2]);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			PlayerData[playerid][pHouse] = -1;
	        PlayerData[playerid][pIsyeri] = -1;
	        PlayerData[playerid][pGarage] = -1;
			PlayerData[playerid][pCadir] = -1;
			return 1;
  		}
		if (!strcmp(type, "lv", true)) {
	        SetPlayerPos(playerid, 1699.2,1435.1,10.7);
	        SetPlayerInterior(playerid, 0);
	        SetPlayerVirtualWorld(playerid, 0);
	        PlayerData[playerid][pHouse] = -1;
	        PlayerData[playerid][pIsyeri] = -1;
	        PlayerData[playerid][pGarage] = -1;
			PlayerData[playerid][pCadir] = -1;
	        return SunucuMesaji(playerid, "Las Venturas'a gönderildin.");
		}
		if (!strcmp(type, "sf", true)) {
	        SetPlayerPos(playerid, -1417.0,-295.8,14.1);
	        SetPlayerInterior(playerid, 0);
	        SetPlayerVirtualWorld(playerid, 0);
	        PlayerData[playerid][pHouse] = -1;
	        PlayerData[playerid][pIsyeri] = -1;
	        PlayerData[playerid][pGarage] = -1;
			PlayerData[playerid][pCadir] = -1;
	        return SunucuMesaji(playerid, "Varsayýlan S.F noktasýna gönderildin.");
		}
	    else return HataMesajGonder(playerid, "Belirttiðiniz oyuncu oyunda deðil.");
	}
	if (!OyundaDegil(id))
		return HataMesajGonder(playerid, "Bu kiþi giriþ yapmamýþ.");

	if(PlayerData[id][pAdmin] > PlayerData[playerid][pAdmin])
		return HataMesajGonder(playerid, "Kendinizden yüksek seviye yetkililere karsi bu komutu kullanamazsiniz.");

	SendPlayerToPlayer(playerid, id);
	MesajGonder(playerid, "%s (%d) adlý kiþinin yanýna ýþýnlandýn.", ReturnName(id, 0), id);

	return 1;
}
CMD:gethere(playerid, params[])
{
    static
        userid;

    if (PlayerData[playerid][pAdmin] < 1)
        return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

    if (sscanf(params, "u", userid))
        return KullanimMesaji(playerid, "/gethere [id/isim]");

    if (!OyundaDegil(userid) || IsPlayerNPC(userid))
        return HataMesajGonder(playerid, "Belirttiginiz oyuncu oyunda degil !");

	if(PlayerData[userid][pAdmin] > PlayerData[playerid][pAdmin])
		return HataMesajGonder(playerid, "Kendinizden yüksek seviye yetkililere karþý bu komutu kullanamazsýnýz.");
    new rank[24];
    if (PlayerData[playerid][pHelper] > 0) format(rank, sizeof(rank), "(Lv. %d) Supporter", PlayerData[playerid][pHelper]);
    else format(rank, sizeof(rank), "%s", GetAdminRank(playerid));
    SendPlayerToPlayer(userid, playerid);
    AdminHelperMessage(COLOR_LIGHTRED, "AdmCmd: %s %s, %s(%d) adlý kiþiyi yanýna çekti.", rank, PlayerData[playerid][pAdminName], ReturnName(userid, 0), userid);
    MesajGonder(playerid, "%s adlý oyuncuyu yanýna çektin.", ReturnName(userid, 0));
    SunucuMesaji(userid, "%s adli yetkili seni yanýna çekti.", PlayerData[playerid][pAdminName]);
    return 1;
}

CMD:get(playerid, params[])
{
    static
        userid;

    if (PlayerData[playerid][pHelper] < 2 && !PlayerData[playerid][pForumGorevlisi] && !PlayerData[playerid][pOyunGorevlisi])
        return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

    if (sscanf(params, "u", userid))
        return KullanimMesaji(playerid, "/gethere [id/isim]");

    if (!OyundaDegil(userid) || IsPlayerNPC(userid))
        return HataMesajGonder(playerid, "Belirttiginiz oyuncu oyunda degil!");

    if (PlayerData[userid][pAdmin] > 0)
    	return HataMesajGonder(playerid, "Adminleri yanýnýza çekemezsiniz.");

    new rank[20];
	if (PlayerData[playerid][pHelper] > 0) format(rank, sizeof(rank), "(Lv. %d) Supporter", PlayerData[playerid][pHelper]);
	else format(rank, sizeof(rank), "%s", GetAdminRank(playerid));
    SendPlayerToPlayer(userid, playerid);
    AdminHelperMessage(COLOR_LIGHTRED, "AdmCmd: %s %s, %s(%d) adlý kiþiyi yanýna çekti.", rank, PlayerData[playerid][pAdminName], ReturnName(userid, 0), userid);
    MesajGonder(playerid, "%s(ID: %d) adlý oyuncuyu yanýna çektin.", ReturnName(userid, 0), userid);
    SunucuMesaji(userid, "%s adlý yetkili seni yanýna çekti.", PlayerData[playerid][pAdminName]);
    return 1;
}

CMD:go(playerid, params[])
{
	static
	    userid;

	if (PlayerData[playerid][pHelper] < 2 && !PlayerData[playerid][pForumGorevlisi] && !PlayerData[playerid][pOyunGorevlisi])
	    return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

 	if (sscanf(params, "u", userid))
	    return KullanimMesaji(playerid, "/go [playerid]");

    if (!OyundaDegil(userid) || IsPlayerNPC(userid))
        return HataMesajGonder(playerid, "Belirttiginiz oyuncu oyunda degil !");

    if (PlayerData[userid][pAdmin] > PlayerData[playerid][pAdmin])
	    return HataMesajGonder(playerid, "Belirtilen oyuncu sizden yüksek yetkiye sahiptir.");

    new rank[20];
    if (PlayerData[playerid][pHelper] > 0) format(rank, sizeof(rank), "(Lv. %d) Supporter", PlayerData[playerid][pHelper]);
	else format(rank, sizeof(rank), "%s", GetAdminRank(playerid));
	SendPlayerToPlayer(playerid, userid);
	AdminHelperMessage(COLOR_LIGHTRED, "AdmCmd: %s %s, %s(%d) adlý kiþinin yanýna ýþýnlandý.", rank, PlayerData[playerid][pAdminName], ReturnName(userid, 0), userid);
	return 1;
}
CMD:setinterior(playerid, params[])
{
    static
        userid,
        interior;

    if (PlayerData[playerid][pAdmin] < 1)
        return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

    if (sscanf(params, "ud", userid, interior))
        return KullanimMesaji(playerid, "/setinterior [id/isim] [interior]");

    if (!OyundaDegil(userid) || IsPlayerNPC(userid))
        return HataMesajGonder(playerid, "Belirttiðiniz oyuncu oyunda deðil !");

    SetPlayerInterior(userid, interior);

    MesajGonder(playerid, "%s adli oyuncunun interiorunu (%d) olarak degistirdin.", ReturnName(userid, 0), interior);
    return 1;
}
CMD:vwduzelt(playerid, params[])
{
	if(GetPlayerInterior(playerid) == 0 && GetPlayerVirtualWorld(playerid) > 0 && Entrance_Inside(playerid) == -1 && Business_Inside(playerid) == -1 && House_Inside(playerid) == -1)
	{
	    SetPlayerVirtualWorld(playerid, 0);
	    MesajGonder(playerid, "Virtual world sorununuz düzeltildi.");
	}
	else HataMesajGonder(playerid, "Virtual worldunuzda sorun yok ya da interiordasiniz.");
    return 1;
}
CMD:setvw(playerid, params[])
{
    static
        userid,
        world;

    if (PlayerData[playerid][pAdmin] < 1)
        return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

    if (sscanf(params, "ud", userid, world))
        return KullanimMesaji(playerid, "/setvw [id/isim] [world]");

    if (!OyundaDegil(userid) || IsPlayerNPC(userid))
        return HataMesajGonder(playerid, "Belirttiginiz oyuncu oyunda degil !");

    SetPlayerVirtualWorld(userid, world);

    MesajGonder(playerid, "%s adli oyuncunun virtual worldunu (%d) olarak degistirdin.", ReturnName(userid, 0), world);
    return 1;
}
CMD:sendto(playerid, params[])
{
    static
        userid,
        targetid;

    if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 3)
        return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

    if (sscanf(params, "uu", userid, targetid) )
        return KullanimMesaji(playerid, "/sendto [id/isim] [id/isim]");

    if (!OyundaDegil(userid) || targetid == INVALID_PLAYER_ID || IsPlayerNPC(userid))
        return HataMesajGonder(playerid, "Belirtilen kullanici(lar) bagli degildir.");

    SendPlayerToPlayer(userid, targetid);

    MesajGonder(playerid, "%s adlý oyuncu %s isimli oyuncunun yanýna gönderildi.", ReturnName(userid, 0), ReturnName(targetid));
    SunucuMesaji(userid, "%s adlý yetkili tarafýndan %s isimli oyuncunun yanýna gönderildin.", PlayerData[playerid][pAdminName], ReturnName(targetid));
    return 1;
}
CMD:ip(playerid, params[])
{
    static
        userid;

    if (PlayerData[playerid][pAdmin] < 2)
        return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

    if (sscanf(params, "u", userid))
        return KullanimMesaji(playerid, "/ip [id/isim]");

    if (!IsPlayerConnected(userid))
        return HataMesajGonder(playerid, "Belirttiginiz oyuncu oyunda degil !");

	new pip[15];
	GetPlayerIp(userid, pip, sizeof(pip));
    MesajGonder(playerid, "%s adli oyuncunun IP adresi: %s", ReturnName(userid, 0), pip);
    return 1;
}
CMD:sethp(playerid, params[])
{
    static
        userid,
        Float:amount;

    if (PlayerData[playerid][pAdmin] < 1)
        return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

    if (sscanf(params, "uf", userid, amount))
        return KullanimMesaji(playerid, "/sethp [id/isim] [deger]");

    if (!OyundaDegil(userid))
        return HataMesajGonder(playerid, "Belirttiginiz oyuncu oyunda degil !");

    CanAyarla(userid, amount);
    MesajGonder(playerid, "%s adli oyuncunun canini %.2f olarak degistirdin.", ReturnName(userid, 0), amount);
    return 1;
}

CMD:setarmor(playerid, params[])
{
    static
        userid,
        Float:amount;

    if (PlayerData[playerid][pAdmin] < 2)
        return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

    if (sscanf(params, "uf", userid, amount))
        return KullanimMesaji(playerid, "/armor [id/isim] [amount]");

    if (!OyundaDegil(userid))
        return HataMesajGonder(playerid, "Belirttiginiz oyuncu oyunda degil !");

    ZirhAyarla(userid, amount);
    MesajGonder(playerid, "%s adli oyuncunun zirhini %.2f olarak degistirdin.", ReturnName(userid, 0), amount);
    return 1;
}
CMD:resetweps(playerid, params[])
{
    static
        userid;

    if (PlayerData[playerid][pAdmin] < 3)
        return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

    if (sscanf(params, "u", userid))
        return KullanimMesaji(playerid, "/resetweps [id/isim]");

    if (!OyundaDegil(userid))
        return HataMesajGonder(playerid, "Belirttiginiz oyuncu oyunda degil !");

    ResetWeapons(userid);
    MesajGonder(playerid, "%s adli oyuncunun silahlarini sifirladiniz.", ReturnName(userid, 0));
	SunucuMesaji(userid, "%s adli yetkili tarafindan silahlariniz sifirlandi.", PlayerData[playerid][pAdminName]);
    return 1;
}

CMD:atamir(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid);

    if (PlayerData[playerid][pAdmin] < 1)
        return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

	else
    {
        if (sscanf(params, "d", vehicleid))
            return KullanimMesaji(playerid, "/atamir [araç ID]");

        else if (!IsValidVehicle(vehicleid))
            return HataMesajGonder(playerid, "Geçersiz bir araç ID'sý belirttiniz.");

        RepairVehicle(vehicleid);
        SunucuMesaji(playerid, "Araç ID: %d tamir edildi.  ", vehicleid);
    }
    new rank[20];
    if (PlayerData[playerid][pHelper] > 0) format(rank, sizeof(rank), "(Lv. %d) Supporter", PlayerData[playerid][pHelper]);
    else format(rank, sizeof(rank), "%s", GetAdminRank(playerid));
    AdminHelperMessage(COLOR_LIGHTRED, "AdmCmd: %s %s isimli yetkili tarafýndan %s (%d) model araç tamir edildi.", rank, PlayerData[playerid][pAdminName], ReturnVehicleModelName(GetVehicleModel(vehicleid)), vehicleid);
    return 1;
}

CMD:getcar(playerid, params[])
{
    new vehicleid;

    if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 2 && !PlayerData[playerid][pOyunGorevlisi] && !PlayerData[playerid][pForumGorevlisi])
        return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

    if (sscanf(params, "d", vehicleid))
        return KullanimMesaji(playerid, "/getcar [Araç ID]");

    if (vehicleid < 1 || vehicleid > MAX_VEHICLES || !IsValidVehicle(vehicleid))
        return HataMesajGonder(playerid, "Geçersiz bir araç ID'sý belirttiniz.");

    static
        Float:px,
        Float:py,
        Float:pz;

    GetPlayerPos(playerid, px, py, pz);
    SetVehiclePos(vehicleid, px + 2, py - 2, pz);

    SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
    LinkVehicleToInteriorEx(vehicleid, GetPlayerInterior(playerid));
    new rank[20];
	if (PlayerData[playerid][pHelper] > 0) format(rank, sizeof(rank), "(Lv. %d) Supporter", PlayerData[playerid][pHelper]);
	else format(rank, sizeof(rank), "%s", GetAdminRank(playerid));
    AdminHelperMessage(COLOR_LIGHTRED, "AdmCmd: %s %s, %s (%d) model aracý yanýna çekti.", rank, PlayerData[playerid][pAdminName], ReturnVehicleModelName(GetVehicleModel(vehicleid)), vehicleid);
    return 1;
}

CMD:carto(playerid, params[])
{
    new vehicleid, userid;

    if (PlayerData[playerid][pAdmin] < 1)
        return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

    if (sscanf(params, "du", vehicleid, userid))
        return KullanimMesaji(playerid, "/carto [araç] [userid]");

    if (vehicleid < 1 || vehicleid > MAX_VEHICLES || !IsValidVehicle(vehicleid))
        return HataMesajGonder(playerid, "Geçersiz bir araç ID'sý belirttiniz.");

    static
        Float:px,
        Float:py,
        Float:pz;

    GetPlayerPos(userid, px, py, pz);
    SetVehiclePos(vehicleid, px + 2, py - 2, pz);

    SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(userid));
    LinkVehicleToInteriorEx(vehicleid, GetPlayerInterior(userid));
	new rank[24];
	if (PlayerData[playerid][pHelper] > 0) format(rank, sizeof(rank), "(Lv. %d) Supporter", PlayerData[playerid][pHelper]);
	else format(rank, sizeof(rank), "%s", GetAdminRank(playerid));
    AdminHelperMessage(COLOR_LIGHTRED, "AdmCmd: %s %s, %s (%d) model aracý %s adlý oyuncunun yanýna ýþýnladý.", rank, PlayerData[playerid][pAdminName], ReturnVehicleModelName(GetVehicleModel(vehicleid)), vehicleid, ReturnName(userid, 0));
    return 1;
}

CMD:entercar(playerid, params[])
{
    new vehicleid, seatid;

    if (PlayerData[playerid][pAdmin] < 1)
        return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

    if (sscanf(params, "d", vehicleid))
        return KullanimMesaji(playerid, "/entercar [araç id]");

    if (vehicleid < 1 || vehicleid > MAX_VEHICLES || !IsValidVehicle(vehicleid))
        return HataMesajGonder(playerid, "Geçersiz bir araç ID'sý belirttiniz.");

    seatid = GetAvailableSeat(vehicleid, 0);

    if (seatid == -1)
        return HataMesajGonder(playerid, "Araçta boþ koltuk yok.");

    PutPlayerInVehicle(playerid, vehicleid, seatid);
    new rank[24];
    if (PlayerData[playerid][pHelper] > 0) format(rank, sizeof(rank), "(Lv.%d) Supporter", PlayerData[playerid][pHelper]);
    else format(rank, sizeof(rank), "%s", GetAdminRank(playerid));
    AdminHelperMessage(COLOR_LIGHTRED, "ADM: %s %s, %s (%d) model aracýn içine ýþýnlandý.", rank, PlayerData[playerid][pAdminName], ReturnVehicleModelName(GetVehicleModel(vehicleid)), vehicleid);
    return 1;
}

CMD:gotocar(playerid, params[])
{
    new vehicleid;

    if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 2 && !PlayerData[playerid][pOyunGorevlisi] && !PlayerData[playerid][pForumGorevlisi])
        return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

    if (sscanf(params, "d", vehicleid))
        return KullanimMesaji(playerid, "/gotocar [araç id]");

    if (vehicleid < 1 || vehicleid > MAX_VEHICLES || !IsValidVehicle(vehicleid))
        return HataMesajGonder(playerid, "Geçersiz bir araç ID'sý belirttiniz.");

    static
        Float:px,
        Float:py,
        Float:pz;

    GetVehiclePos(vehicleid, px, py, pz);
    SetPlayerPos(playerid, px, py - 2, pz + 2);
    new rank[20];
	if (PlayerData[playerid][pHelper] > 0) format(rank, sizeof(rank), "(Lv. %d) Supporter", PlayerData[playerid][pHelper]);
	else format(rank, sizeof(rank), "%s", GetAdminRank(playerid));
	AdminHelperMessage(COLOR_LIGHTRED, "ADM: %s %s, %s (%d) model aracýn yanýna ýþýnlandý.", rank, PlayerData[playerid][pAdminName], ReturnVehicleModelName(GetVehicleModel(vehicleid)), vehicleid);
    return 1;
}
CMD:akirasifirla(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 4)
        return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

     for (new i = 0; i != MAX_ARAC; i ++) if(AracInfo[i][aracKira] == 1)
     {
        AracInfo[i][aracKiralayan] = -1;
        AracInfo[i][aracKiraZaman] = 1;
        AracInfo[i][aracKilit] = false;
        new real = Car_GetID(i);
        Arac_Spawn(real);
        Arac_Kaydet(i);
    }
    AdminMessage(COLOR_LIGHTRED, "AdmCmd: %s %s adli admin tüm kiralik araçlari sifirladi.", GetAdminRank(playerid), PlayerData[playerid][pAdminName]);
    return 1;
}
CMD:respawncar(playerid, params[])
{
    new vehicleid;

    if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 2 && !PlayerData[playerid][pOyunGorevlisi] && !PlayerData[playerid][pForumGorevlisi])
        return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

    if (sscanf(params, "d", vehicleid))
        return KullanimMesaji(playerid, "/respawncar [Araç ID]");

    if (vehicleid < 1 || vehicleid > MAX_VEHICLES || !IsValidVehicle(vehicleid))
        return HataMesajGonder(playerid, "Geçersiz bir araç ID'si belirttiniz.");

	Arac_Spawn(Car_GetID(vehicleid));

 	new rank[20];
	if (PlayerData[playerid][pHelper] > 0) format(rank, sizeof(rank), "(Lv. %d) Helper", PlayerData[playerid][pHelper]);
	else format(rank, sizeof(rank), "%s", GetAdminRank(playerid));
	AdminHelperMessage(COLOR_LIGHTRED, "AdmCmd: %s %s tarafýndan, %s (%d) model araç spawnlandý.", rank, PlayerData[playerid][pAdminName], ReturnVehicleModelName(GetVehicleModel(vehicleid)), vehicleid);
    SunucuMesaji(playerid, "%d Ýd'li araç spawn edildi.", vehicleid);
	return 1;
}

CMD:respawncars(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 1)
        return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

	new sure = 0;

	if (sscanf(params, "d", sure))
	    return KullanimMesaji(playerid, "/respawncars [Süre]");

	if (sure < 1)
	    return HataMesajGonder(playerid, "Süreyi en az 1 girebilirsin.");

	foreach (new i : Player)
	{
	    SendClientMessageEx(i, COLOR_LIGHTRED, "[!] %s isimli yetkili %d saniye sonra kullanilmayan tüm araçlari respawnlayacak!", PlayerData[playerid][pAdminName], sure);
	}

	SetTimerEx("AraclariSpawnla", sure*1000, false, "d", playerid);
    return 1;
}

forward AraclariSpawnla(playerid);
public AraclariSpawnla(playerid)
{
	new count, model;

    for (new i = 0; i < MAX_ARAC; i++)
	{
        if (AracInfo[i][aracExists] && GetVehicleDriver(AracInfo[i][aracVehicle]) == INVALID_PLAYER_ID && GetVehicleModel(AracInfo[i][aracVehicle]) != 435 && GetVehicleModel(AracInfo[i][aracVehicle]) != 450 && GetVehicleModel(AracInfo[i][aracVehicle]) != 591)
        {
        	model = GetVehicleModel(AracInfo[i][aracVehicle]);

        	if(model == 606 || model == 607 || model == 610 || model == 584 || model == 611 || model == 608 || model == 435 || model == 450 || model == 591)
        		continue;

            Arac_Spawn(i);
            count++;
        }
    }

    if (!count)
        return HataMesajGonder(playerid, "Hiç araç yok.");

	foreach (new i : Player)
	{
	    SendClientMessageEx(i, 0x00FF00FF, "{FFFFFF}Sunucudaki kullanýlmayan tüm araçlar re-spawnlandý.");
	}

    MesajGonder(playerid, "%d adet araç re-spawn edildi.", count);
	return 1;
}

CMD:maspawn(playerid)
{
    if (PlayerData[playerid][pAdmin] < 1)
        return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

    new count;

	for (new i = 0; i < MAX_ARAC; i++)
    {
		if (AracInfo[i][aracExists] && AracInfo[i][aracTip] == 2 && GetVehicleDriver(AracInfo[i][aracVehicle]) != -1)
		{
			Arac_Spawn(i);
	        count++;
		}
	}

    if (!count)
		return HataMesajGonder(playerid, "Hiç meslek araci yok.");

	MesajGonder(playerid, "Toplam %d meslek araci respawn edildi.", count);
	return 1;
}

CMD:asilahver(playerid, params[])
	return cmd_givegun(playerid, params);
CMD:givegun(playerid, params[])
{
    static
        userid,
        weaponid,
        ammo;

    if (PlayerData[playerid][pAdmin] < 5)
        return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

    if (sscanf(params, "udI(500)", userid, weaponid, ammo))
    	KullanimMesaji(playerid, "/givegun [id] [silahid] [mermi]");
        SendClientMessage(playerid, 0xFF6347FF, "[KULLANILABÝLÝR SÝLAHLAR]");
        SendClientMessage(playerid, COLOR_GREY, "Muþta(1), Golf Sopasý(2), Jop(3), Býçak(4), Beyzbol Sopasý(5), Kürek(6), Bilardo Sopasý(7), Katana(8), Testere(9)");
        SendClientMessage(playerid, COLOR_GREY, "Çiçek(14), Baston(15), Smoke(17), Moltov(18), Colt-45(22), SD Pistol(23), Desert Eagle(24)");
        SendClientMessage(playerid, COLOR_GREY, "Shotgun(25), UZI(28), MP5(29), AK-47(30), M4(31), TEC-9(32), Rifle(33), Sniper(34)");
        SendClientMessage(playerid, COLOR_GREY, "Spray(41), Yangýn Tüpü(42), Camera(43), Paraþüt(46)");

    if (!OyundaDegil(userid))
        return HataMesajGonder(playerid, "Belirttiginiz oyuncu oyunda degil.");

    if (weaponid <= 0 || weaponid > 46 || (weaponid >= 19 && weaponid <= 21))
        return HataMesajGonder(playerid, "Geçersiz silah ID'si.");

    GiveWeaponToPlayer(userid, weaponid, ammo);
    MesajGonder(playerid, "%s adli oyuncuya %s (%d mermi) model silah verdin.", ReturnName(userid, 0), ReturnWeaponName(weaponid), ammo);
    SunucuMesaji(userid, "%s adli yetkili sana %s (Mermi: %d) model silah verdi.", PlayerData[playerid][pAdminName], ReturnWeaponName(weaponid), ammo);
    Log_Write("logs/silahverdi.txt", "[%s] %s adli admin %s adli oyuncuya silah verdi.", ReturnDate(), Player_GetName(playerid), Player_GetName(userid));
    AdminMessage(COLOR_LIGHTRED, "AdmCmd: %s adli yetkili %s adli kisiye silah verdi.", ReturnName(playerid, 0), Player_GetName(userid));
    return 1;
}

CMD:ccall(playerid, params[])
{
    new test[128];
    if (PlayerData[playerid][pAdmin] < 4)
        return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
    for(new i=0;i<50;i++)
    SendClientMessageToAll(-1, " ");
    format(test, sizeof(test), "[!] %s adlý yetkili chati temizledi.", PlayerData[playerid][pAdminName]);
    SendClientMessageToAll(-1, test);
    return 1;
}

CMD:asetfaction(playerid, params[])
{
    static
        userid,
        id;

    if (PlayerData[playerid][pAdmin] < 3)
        return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

    if (sscanf(params, "ud", userid, id))
        return KullanimMesaji(playerid, "/asetfaction [id/isim] [faction id] (-1 atar)");

    if (!OyundaDegil(userid))
        return HataMesajGonder(playerid, "Belirttiginiz oyuncu oyunda degil !");

    if ((id < -1 || id >= MAX_BIRLIK) || (id != -1 && !Birlikler[id][birlikExists]))
        return HataMesajGonder(playerid, "Geçersiz birlik id.");

    if (id == -1)
    {
        BirliktenAt(userid);

        SunucuMesaji(playerid, "%s adlý kiþi birlikten çýkarýldý.", ReturnName(userid, 0));
        SunucuMesaji(userid, "%s adlý yetkili tarafýndan birlikten çýkarýldýnýz.", PlayerData[playerid][pAdminName]);
        Oyuncu_Kaydet(userid);
    }
    else
    {
        BirliktenAt(userid);
        PlayerData[userid][pFaction] = id;
	    PlayerData[userid][pFactionRutbe] = 1;
	    PlayerData[userid][pFactionDivizyon] = 0;

		Oyuncu_Kaydet(userid);
        MesajGonder(playerid, "%s adlý kiþiyi \"%s\" adlý birliðe aldýnýz.", ReturnName(userid, 0), Birlikler[id][birlikAd]);
        SunucuMesaji(userid, "%s adlý yetkili sizi \"%s\" adlý birliðe aldý.", PlayerData[playerid][pAdminName], Birlikler[id][birlikAd]);
    }
    return 1;
}

CMD:asetrank(playerid, params[])
{
    static
        userid,
        rank,
        factionid;

    if (PlayerData[playerid][pAdmin] < 3)
        return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

    if (sscanf(params, "ud", userid, rank))
        return KullanimMesaji(playerid, "/asetrank [id/isim] [rutbe id]");

    if (!OyundaDegil(userid))
        return HataMesajGonder(playerid, "Belirttiginiz oyuncu oyunda degil !");

    if ((factionid = PlayerData[userid][pFaction]) == -1)
        return HataMesajGonder(playerid, "Bu oyuncu herhangi bir birligin üyesi degil.");

    if (rank < 1 || rank > Birlikler[factionid][birlikRutbeler])
        return HataMesajGonder(playerid, "Geçersiz rütbe. Rütbe 1 ile %d arasýnda olmalýdýr.", Birlikler[factionid][birlikRutbeler]);

    PlayerData[userid][pFactionRutbe] = rank;

    MesajGonder(playerid, "%s adlý kiþinin rütbesi %d olarak deðiþtirildi.", ReturnName(userid, 0), rank);
    SunucuMesaji(userid, "%s adlý yetkili tarafýndan birlikteki rütbeniz %d olarak ayarlandý.", PlayerData[playerid][pAdminName], rank);

    return 1;
}
CMD:spec(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pOyunGorevlisi] < 1) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
    new id;
    if (sscanf(params, "u", id)) return KullanimMesaji(playerid, "/izle [ID/Isim]");
    if (!OyundaDegil(id)) return HataMesajGonder(playerid, "Ýzlemek istediðin kiþi oyunda deðil.");
    if (id == playerid) return HataMesajGonder(playerid, "Kendini izleyemezsin.");
    PlayerData[playerid][pSpecID] = id;
    if (GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
    {
        GetPlayerPos(playerid, specPos[playerid][0], specPos[playerid][1], specPos[playerid][2]);
        SetPVarInt(playerid, "specVw", GetPlayerVirtualWorld(playerid));
        SetPVarInt(playerid, "specInterior", GetPlayerInterior(playerid));
    }
    SetPlayerInterior(playerid, GetPlayerInterior(id));
    SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(id));
    TogglePlayerSpectating(playerid, true);
    if (IsPlayerInAnyVehicle(id))
    {
        PlayerSpectateVehicle(playerid, GetPlayerVehicleID(id));
    }
    else
    {
        PlayerSpectatePlayer(playerid, id);
    }
    new rank[24];
    if (PlayerData[playerid][pHelper] > 0) format(rank, sizeof(rank), "(Lv.%d) Supporter", PlayerData[playerid][pHelper]);
    else format(rank, sizeof(rank), "%s", GetAdminRank(playerid));
    MesajGonder(playerid, "%s adlý kiþiyi izliyorsun, /specoff ile çýkabilirsin.", ReturnName(id, 0));
    AdminHelperMessage(COLOR_LIGHTRED, "ADM: %s %s adlý yetkili, %s isimli oyuncuyu izlemeye aldý.", rank, PlayerData[playerid][pAdminName], ReturnName(id, 0));
	return 1;
}
CMD:specoff(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pOyunGorevlisi] < 1)
        return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

    IzlemeBitir(playerid);
    return 1;
}

CMD:jail(playerid, params[])
{
	static userid, sure, sebep[50];

	if (playerid != INVALID_PLAYER_ID)
	{
		if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 5 && !PlayerData[playerid][pForumGorevlisi] && !PlayerData[playerid][pOyunGorevlisi]) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
	}

	if (sscanf(params, "uds[50]", userid, sure, sebep)) return KullanimMesaji(playerid, "/jail [id/isim] [dakika] [sebep]");
	if (!OyundaDegil(userid)) return HataMesajGonder(playerid, "Oyuncu oyunda degil.");
	if (sure < 1) return HataMesajGonder(playerid, "En az 1 dakika girmelisiniz.");
	if (PlayerData[userid][pHapisSure] > 0 && PlayerData[userid][pCK] == 1) return HataMesajGonder(playerid, "Bu karakter CK edilmis.");
	if(sure > 1000 && PlayerData[playerid][pForumGorevlisi] && !PlayerData[playerid][pOyunGorevlisi] && PlayerData[playerid][pAdmin] < 1) return HataMesajGonder(playerid, "Forum görevlileri en fazla 1000dk. hapise gönderebilir.");
    ResetPlayer(userid);
    ResetWeapons(userid);
    ClearAnimations(userid);
	PlayerTextDrawShow(userid, HapisTD[userid]);
	SetPlayerPos(userid, 197.6346, 175.3765, 1003.0234);
    SetPlayerInterior(userid, 3);

    SetPlayerVirtualWorld(userid, (userid + 100));
    SetPlayerFacingAngle(userid, 0.0);

    SetCameraBehindPlayer(userid);
    PlayerData[userid][pHapisSure] = sure * 60;
    format(PlayerData[userid][pHapisSebep], 50, sebep);

	if (playerid != INVALID_PLAYER_ID)
		format(PlayerData[userid][pHapiseAtan], 24, PlayerData[playerid][pAdminName]);

	if (playerid == INVALID_PLAYER_ID)
        format(PlayerData[userid][pHapiseAtan], 24, "Sistem");

	PlayerData[userid][pHapis] = 0;

    new query[500];

	if (playerid != INVALID_PLAYER_ID)
    	mysql_format(g_SQL, query, sizeof(query), "INSERT INTO `oocsicil` (`ID`, `Tarih`, `Sebep`, `Uygulayan`, `Tur`) VALUES('%d', '%s', '%s', '%s', '3')",  PlayerData[userid][pID], ReturnDate(), sebep, PlayerData[playerid][pAdminName]);

    if (playerid == INVALID_PLAYER_ID)
    	mysql_format(g_SQL, query, sizeof(query), "INSERT INTO `oocsicil` (`ID`, `Tarih`, `Sebep`, `Uygulayan`, `Tur`) VALUES('%d', '%s', '%s', '%s', '3')",  PlayerData[userid][pID], ReturnDate(), sebep, "Sistem");

	mysql_query (g_SQL, query);

	if (playerid != INVALID_PLAYER_ID)
		SunucuMesaji(userid, "%s adli yetkili seni %d dakika hapse atti. (%s).", PlayerData[playerid][pAdminName], sure, sebep);

    if (playerid == INVALID_PLAYER_ID)
		SunucuMesaji(userid, "Sistem tarafindan %d dakika hapse gönderildin. (%s).", sure, sebep);

	foreach (new i:Player) if (PlayerData[i][pAyarlar][3] == 0 || i == userid)
	{
	    if (playerid != INVALID_PLAYER_ID)
    		SendClientMessageEx(i, COLOR_LIGHTRED, "AdmCmd: (%s) %s, %s tarafýndan %s sebebiyle %d dakika cezalandýrýldý.", ReturnDate(), ReturnName(userid, 0), PlayerData[playerid][pAdminName], sebep, sure);

		if (playerid == INVALID_PLAYER_ID)
            SendClientMessageEx(i, COLOR_LIGHTRED, "AdmCmd: (%s) %s, Sistem tarafýndan %s sebebiyle %d dakika cezalandýrýldý.", ReturnDate(), ReturnName(userid, 0), sebep, sure);
	}

    Log_Write("logs/jail_log.txt", "[%s] %s adli yetkili %s adli oyuncuyu %d dakika cezalandirdi,  sebep: %s.", ReturnDate(), PlayerData[playerid][pAdminName], ReturnName(userid, 0), sure, sebep);
	return 1;
}

CMD:unjail(playerid, params[])
{
    static
        userid;

    if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 5 && !PlayerData[playerid][pForumGorevlisi] && !PlayerData[playerid][pOyunGorevlisi])
        return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

    if (sscanf(params, "u", userid))
        return KullanimMesaji(playerid, "/unjail [id/isim]");

    if (!OyundaDegil(userid))
        return HataMesajGonder(playerid, "Belirttiginiz oyuncu oyunda degil !");

    if (!PlayerData[userid][pHapisSure])
        return HataMesajGonder(playerid, "Belirttiginiz oyuncu hapiste degil.");
    if (PlayerData[userid][pCK] == 1) return HataMesajGonder(playerid, "Bu karakter CK edilmis, hapisten çikarilamaz.");

    PlayerData[userid][pHapisSure] = 1;

    MesajGonder(playerid, "%s adli oyuncuyu hapisten çikarttiniz.", ReturnName(userid, 0));
    SunucuMesaji(userid, "%s adli yetkili sizi hapisten çikartti.", PlayerData[playerid][pAdminName]);

    Log_Write("logs/jail_log.txt", "[%s] %s adli yetkili %s adli oyuncuyu hapisten cikartti.", ReturnDate(), PlayerData[playerid][pAdminName], ReturnName(userid, 0));
    return 1;
}
CMD:ojail(playerid, params[])
{
	new ad[24], sure, sebep[50];
    if (PlayerData[playerid][pAdmin] < 1 && !PlayerData[playerid][pForumGorevlisi] && !PlayerData[playerid][pOyunGorevlisi])
        return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
    if (sscanf(params, "s[24]is[50]", ad, sure, sebep)) return KullanimMesaji(playerid, "/ojail [Karakter Adi] [Dakika] [Sebep]");
    if (sure < 1) return HataMesajGonder(playerid, "En az 1 dakika girmelisiniz.");
 	if(sure > 1000 && PlayerData[playerid][pForumGorevlisi] && !PlayerData[playerid][pOyunGorevlisi] && PlayerData[playerid][pAdmin] < 1) return HataMesajGonder(playerid, "Forum görevlileri en fazla 1000dk. hapise gönderebilir.");
    if (GetPlayerID(ad) != -1) return HataMesajGonder(playerid, "Bu oyuncu oyunda, /jail komutunu kullanin.");
    new query[124];
    format(query, sizeof(query), "SELECT * FROM `oyuncular` WHERE `Isim` = '%s'", ad);
    mysql_tquery(g_SQL, query, "OnJailAccount", "isis", playerid, ad, sure, sebep);
	return 1;
}
CMD:jailed(playerid)
{
    if (PlayerData[playerid][pAdmin] < 1) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
    new string[600];
 foreach (new i : Player)
    {
        if (PlayerData[i][pHapisSure] > 1)
        {
            new bilgiler[256];
            format(bilgiler, sizeof(bilgiler), "%s - [ID: %d ] - [Hapis Süresi: %d saniye.]\n", ReturnName(i), i, PlayerData[i][pHapisSure]);
            strcat(string, bilgiler);
        }
    }
    Dialog_Show(playerid, Hapistekiler, DIALOG_STYLE_LIST, "Hapistekiler", string, "Tamam", "");
    return 1;
}

CMD:givemoney(playerid, params[])
{
    static
        userid,
        amount;

    if (PlayerData[playerid][pAdmin] < 5)
        return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

    if (sscanf(params, "ud", userid, amount))
        return KullanimMesaji(playerid, "/givemoney [id/isim] [miktar]");

    if (!OyundaDegil(userid))
        return HataMesajGonder(playerid, "Belirttiginiz oyuncu oyunda degil !");

    ParaVer(userid, amount);
	MesajGonder(playerid, "%s adli kisiye %s miktar para verdiniz.", ReturnName(userid, 0), FormatNumber(amount));
	SunucuMesaji(userid, "%s adli yetkili size %s miktar para verdi.",PlayerData[playerid][pAdminName], FormatNumber(amount));
    AdminMessage(COLOR_LIGHTRED, "AdmCmd: %s, %s adli kisiye %s miktarda para verdi.", PlayerData[playerid][pAdminName], ReturnName(userid, 0), FormatNumber(amount));
    Log_Write("logs/admin.log", "[%s] %s adli yetkili %s adli kisiye %s miktar para verdi.", ReturnDate(), PlayerData[playerid][pAdminName], ReturnName(userid, 0), FormatNumber(amount));

    return 1;
}
CMD:setcash(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 5) return HataMesajGonder(playerid, "Yeterli yetkiniz yok.");

    static
        userid,
        amount;

    if (sscanf(params, "ud", userid, amount))
        return KullanimMesaji(playerid, "/setcash [id/isim] [miktar]");

    if (!OyundaDegil(userid))
        return HataMesajGonder(playerid, "Belirttiginiz oyuncu oyunda degil !");

	ParaDuzenle(userid, amount);
	SunucuMesaji(playerid, "%s adli kisinin parasini %d olarak ayarladiniz.", ReturnName(userid, 0), amount);
	AdminMessage(COLOR_LIGHTRED, "AdmCmd: %s %s, %s adli kisinin parasini %d olarak ayarladi.", GetAdminRank(playerid), PlayerData[playerid][pAdminName], ReturnName(userid, 0), amount);
	return 1;
}
stock ParaDuzenle(playerid, amount)
{
	PlayerData[playerid][pCash] = 0;
	return ParaVer(playerid, amount);
}

CMD:givecashall(playerid, params[])
{
	new miktar;
    if (PlayerData[playerid][pAdmin] < 5) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
    if (sscanf(params, "i", miktar)) return KullanimMesaji(playerid, "/givecashall [Miktar]");
    foreach (new i:Player) if (OyundaDegil(i))
    {
        ParaVer(i, miktar);
    }
    SendClientMessageToAllEx(COLOR_LIGHTRED, "AdmCmd: %s sunucudaki 1 saatten fazla vakit geçirmis herkese bonus ikramiyede bulundu.", PlayerData[playerid][pAdminName]);
	return 1;
}

CMD:kills(playerid, params[])
{
	new id;
    if (PlayerData[playerid][pAdmin] < 1) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
    if (sscanf(params, "u", id)) return KullanimMesaji(playerid, "/kills [ID/Isim]");
    if (!OyundaDegil(id)) return HataMesajGonder(playerid, "Oyuncu oyunda degil.");
    MesajGonder(playerid, "Öldürme: %d, Ölme: %d", PlayerData[id][pOldurme], PlayerData[id][pOlme]);
	return 1;
}

CMD:talepsayisi(playerid, params[])
{
    new id;
    if (PlayerData[playerid][pAdmin] < 3) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
    if (sscanf(params, "u", id)) return KullanimMesaji(playerid, "/TalepSayi [ID/Isim]");
    if (!OyundaDegil(id)) return HataMesajGonder(playerid, "Oyuncu oyunda deðil.");
    MesajGonder(playerid, "%s isimli görevlinin talep bakma sayýsý: %d", ReturnName(id), PlayerData[id][pTalepSayi]);
	return 1;
}

CMD:raporkontrol(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 3) return YetkinizYok(playerid);
    if (!OyundaDegil(playerid)) return 1;
    if (isnull(params)) return KullanimMesaji(playerid, "/raporkontrol <admin/supporter>");

	if (!strcmp(params, "admin", true))
	{
	    new count = 0, str[1000];
	    foreach (new i:Player) if (PlayerData[i][pAdmin] >= 1)
	    {
	        count++;
	        format(str, sizeof(str), "%s{ffffff}Admin: %s, %s (id: %d) - Duty: %s - Talep Sayýsý: %d\n", str, GetAdminRank(i), PlayerData[i][pAdminName], i, (PlayerData[i][pAdminDuty] == 1) ? ("{00cc66}Müsait{ffffff}") : ("{ef0202}Meþgul{ffffff}"), PlayerData[i][pTalepSayi]);

	    }
	    if (count == 0) return HataMesajGonder(playerid, "Aktif admin yok.");
	    Dialog_Show(playerid, AdminTalKontrol, DIALOG_STYLE_MSGBOX, "Yetkili Talep Sayýlarý", str, "Kapat", "");
	}
	if (!strcmp(params, "supporter", true))
	{
	    new count = 0, str[1000];
	    foreach (new i:Player) if (PlayerData[i][pHelper] >= 1)
	    {
	        count++;
	        format(str, sizeof(str), "%s{ffffff}Supporter: Seviye: %d, %s (id: %d) - Duty: %s - Talep Sayýsý: %d\n", str, PlayerData[i][pHelper], PlayerData[i][pAdminName], i, (PlayerData[i][pHelperDuty] == 1) ? ("{00cc66}Müsait{ffffff}") : ("{ef0202}Meþgul{ffffff}"), PlayerData[i][pTalepSayi]);

	    }
	    if (count == 0) return HataMesajGonder(playerid, "Aktif supporter yok.");
	    Dialog_Show(playerid, HelperTalKontrol, DIALOG_STYLE_MSGBOX, "Supporter Talep Sayýlarý", str, "Kapat", "");
	}
	return 1;
}

CMD:giveexp(playerid, params[])
{
	new id, miktar;
    if (PlayerData[playerid][pAdmin] < 5) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
    if (sscanf(params, "ui", id, miktar)) return KullanimMesaji(playerid, "/giveexp [ID/Isim] [Miktar]");
    if (!OyundaDegil(id)) return HataMesajGonder(playerid, "Oyuncu oyunda degil.");
	PlayerData[id][pEXP] += miktar;
	MesajGonder(id, "%s adli yetkili size %d EXP verdi.", PlayerData[playerid][pAdminName], miktar);
	MesajGonder(playerid, "%s adli oyuncuya %d EXP verdiniz.", ReturnName(id, 0), miktar);
	AdminMessage(COLOR_LIGHTRED, "AdmCmd: %s, %s adli kisiye %d kadar exp verdi.", PlayerData[playerid][pAdminName], Player_GetName(id), miktar);
	if (PlayerData[id][pEXP] >= PlayerData[id][pLevel]*5)
	{
 		new kalanexp = 0;
   		if (PlayerData[id][pEXP] > PlayerData[id][pLevel]*5) kalanexp = PlayerData[id][pEXP] - PlayerData[id][pLevel]*5;
		PlayerData[id][pEXP] = kalanexp;
		PlayerData[id][pLevel]++;
		SetPlayerScore(id, PlayerData[id][pLevel]);
		MesajGonder(id, "Seviye atladiniz!");
		if(PlayerData[id][pLevel] == 5){
			format(PlayerData[id][pBasari5Tarih],25,ReturnDate());
			PlayerData[id][pBasari5] = 1;
		}
		if(PlayerData[id][pLevel] == 10){
			format(PlayerData[id][pBasari10Tarih],25,ReturnDate());
			PlayerData[id][pBasari10] = 1;
		}
	}
	return 1;
}
CMD:giveexpall(playerid, params[])
{
	new miktar;
    if (PlayerData[playerid][pAdmin] < 5) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
    if (sscanf(params, "i", miktar)) return KullanimMesaji(playerid, "/giveexpall [Miktar]");
    foreach (new i:Player) if (OyundaDegil(i))
    {
        PlayerData[i][pEXP] += miktar;
		if (PlayerData[i][pEXP] >= PlayerData[i][pLevel]*5)
		{
			new kalanexp = 0;
   			if (PlayerData[i][pEXP] > PlayerData[i][pLevel]*5) kalanexp = PlayerData[i][pEXP] - PlayerData[i][pLevel]*5;
			PlayerData[i][pEXP] = kalanexp;
			PlayerData[i][pLevel]++;
			SetPlayerScore(i, PlayerData[i][pLevel]);
			MesajGonder(i, "Seviye atladiniz.");
			if(PlayerData[i][pLevel] == 5){
			format(PlayerData[i][pBasari5Tarih],25,ReturnDate());
			PlayerData[i][pBasari5] = 1;
			}
			if(PlayerData[i][pLevel] == 10){
				format(PlayerData[i][pBasari10Tarih],25,ReturnDate());
				PlayerData[i][pBasari10] = 1;
			}
		}
    }
    SendClientMessageToAllEx(COLOR_LIGHTRED, "AdmCmd: %s %s sunucuda 1 saat geçirmis herkese %d miktar exp dagitti.", GetAdminRank(playerid), PlayerData[playerid][pAdminName], miktar);
	return 1;
}
CMD:ban(playerid, params[])
{
	new id, gun, sebep[50];
    if (PlayerData[playerid][pAdmin] < 1) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
    if (sscanf(params, "uis[50]", id, gun, sebep)) return KullanimMesaji(playerid, "/ban [ID/Isim] [Gün (0 yazarsaniz sinirsiz yasaklanir)] [Sebep]");
    if (!OyundaDegil(id)) return HataMesajGonder(playerid, "Oyuncu giris yapmamis.");
    if (id == playerid) return HataMesajGonder(playerid, "Kendinizi yasaklayamazsiniz.");
    if (PlayerData[id][pAdmin] > PlayerData[playerid][pAdmin]) return HataMesajGonder(playerid, "Belirtilen oyuncu sizden yüksek yetkiye sahiptir.");

    new pip[20];
    GetPlayerIp(id, pip, sizeof(pip));
    new sure[10];
    if (gun == 0) sure = "Sinirsiz";
    else format(sure, sizeof(sure), "%d gün", gun);
    Dialog_Show(id, Banli, DIALOG_STYLE_MSGBOX, "Yasaklandýnýz!", "Hesabýnýz bu sunucudan yasaklanmýþtýr. Detaylar;\n\nKarakter Adý: %s\nSebep: %s\nYasaklayan: %s\nSüre: %s\nF8 tuþuna basýn ve bir ekran görüntüsü alýn, bu ekran görüntüsü ile forumumuzdan yasaklanmanýza itiraz edebilirsiniz.", "Kapat", "", Player_GetName(id), sebep, PlayerData[playerid][pAdminName], sure);
    new query[350];
    format(query, sizeof(query), "INSERT INTO `oocsicil` (`ID`, `Tarih`, `Sebep`, `Uygulayan`, `Tur`) VALUES('%d', '%s', '%s', '%s', '2')",  PlayerData[id][pID], ReturnDate(), sebep, PlayerData[playerid][pAdminName]);
    mysql_tquery(g_SQL, query);
    foreach (new i:Player) if (PlayerData[i][pAyarlar][3] == 0 || i == id)
    {
    	if (gun == 0) SendClientMessageEx(i, COLOR_LIGHTRED, "(%s) - %s, %s tarafýndan %s sebebiyle sunucudan sýnýrsýz yasaklandý.", ReturnDate(), ReturnName(id, 0),  PlayerData[playerid][pAdminName], sebep);
    	else SendClientMessageEx(i, COLOR_LIGHTRED, "(%s) - %s, %s tarafýndan %s sebebiyle sunucudan %d gün yasaklandý.", ReturnDate(), ReturnName(id, 0),  PlayerData[playerid][pAdminName], sebep, gun);
    }
    Log_Write("logs/ban_log.txt", "[%s] %s, %s tarafýndan %d gün yasaklandý. Sebep: %s.", ReturnDate(), ReturnName(id, 0), PlayerData[playerid][pAdminName], gun, sebep);
    new suree;
    if (gun < 1) suree = 0;
    else suree = gettime()+gun*86400;
    AddBan(pip, Player_GetName(id), "", PlayerData[playerid][pAdminName], suree, sebep);
    Kick(id);
	return 1;
}

CMD:banip(playerid, params[])
{
	new ip[30], gun, sebep[50];
    if (PlayerData[playerid][pAdmin] < 1) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
    if (sscanf(params, "s[30]is[50]", ip, gun, sebep)) return KullanimMesaji(playerid, "/banip [IP] [Gün (0 yazarsaniz sinirsiz yasaklanir)][Sebep]");
    AddBan(ip, "Yok", "", PlayerData[playerid][pAdminName], (gun < 1) ? (0) : (gettime()+gun*86400), sebep);
    new sure[10];
    if (gun < 1) sure = "Sinirsiz";
    else format(sure, sizeof(sure), "%d gün", gun);
    AdminMessage(COLOR_LIGHTRED, "AdmCmd: %s adli admin %d ipsini %d gün banladi.", PlayerData[playerid][pAdminName], ip, sure);
	return 1;
}
CMD:oban(playerid, params[])
{
	new ad[24], gun, sebep[50];
    if (PlayerData[playerid][pAdmin] < 1) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
    if (sscanf(params, "s[24]is[50]", ad, gun, sebep)) return KullanimMesaji(playerid, "/oban [Karakter Adi] [Gün (0 yazarsaniz sinirsiz yasaklanir)] [Sebep]");
    if (GetPlayerID(ad) != -1) return HataMesajGonder(playerid, "Bu oyuncu oyunda, /ban komutunu kullanin.");
    new query[124];
    format(query, sizeof(query), "SELECT * FROM `oyuncular` WHERE `Isim` = '%s'", ad);
    mysql_tquery(g_SQL, query, "OnBanAccount", "isis", playerid, ad, gun, sebep);
	return 1;
}
/*CMD:ocban(playerid, params[])
{
	new ad[24], sebep[50];
    if (PlayerData[playerid][pAdmin] < 3) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
    if (sscanf(params, "s[24]s[50]", ad, sebep)) return KullanimMesaji(playerid, "/ocban [Karakter Adi] [Sebep]");
    if (GetPlayerID(ad) != -1) return HataMesajGonder(playerid, "Bu oyuncu oyunda, /cban komutunu kullanin.");
    new query[124];
    format(query, sizeof(query), "SELECT * FROM `oyuncular` WHERE `Isim` = '%s'", ad);
    mysql_tquery(g_SQL, query, "OnCBanAccount", "iss", playerid, ad, sebep);
	return 1;
}*/
CMD:unban(playerid, params[])
{
	new ad[30];
    if (PlayerData[playerid][pAdmin] < 1) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
    if (sscanf(params, "s[30]", ad)) return KullanimMesaji(playerid, "/unban [Karakter Adi veya IP]");
    new query[124];
    format(query, sizeof(query), "SELECT null FROM `bans` WHERE `Ad` = '%s' OR `IP` = '%s'", ad, ad);
    mysql_tquery(g_SQL, query, "UnBan", "is", playerid, ad);
	return 1;
}
CMD:baninfo(playerid, params[])
{

    if (PlayerData[playerid][pAdmin] < 1) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
	if (isnull(params) || strlen(params) > 30) return KullanimMesaji(playerid, "/baninfo [Karakter Adi veya IP]");
	new query[124];
 	format(query, sizeof(query), "SELECT * FROM `bans` WHERE `Ad` = '%s' OR `IP` = '%s'", SQL_ReturnEscaped(params), SQL_ReturnEscaped(params));
  	mysql_tquery(g_SQL, query, "BanInfo", "ds", playerid, params);
    return 1;
}

CMD:h(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 1 && !PlayerData[playerid][pForumGorevlisi] && !PlayerData[playerid][pOyunGorevlisi]) return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok !");
    if(isnull(params)) return KullanimMesaji(playerid, "/h [Mesaj]");
    foreach(new i:Player) if((PlayerData[i][pAdmin] >= 1 || PlayerData[i][pHelper] >= 1) || PlayerData[i][pForumGorevlisi] >0 || PlayerData[i][pOyunGorevlisi] >0 && PlayerData[i][pAyarlar][7] == 0)
    {
        if(strlen(params) > 64)
        {
            if(PlayerData[playerid][pHelper] > 0) SendClientMessageEx(i, COLOR_LIGHTRED, "[SUPPORT] (Lv. %d) Supporter %s(%d): %.64s", PlayerData[playerid][pHelper], PlayerData[playerid][pAdminName], playerid, params);
            else SendClientMessageEx(i, COLOR_LIGHTRED, "[SUPPORT] %s %s(%d): %.64s", GetAdminRank(playerid), PlayerData[playerid][pAdminName], playerid, params);
            SendClientMessageEx(i, COLOR_LIGHTRED, "%s", params[64]);
        }
        else
        {
            if(PlayerData[playerid][pHelper] > 0) SendClientMessageEx(i, COLOR_LIGHTRED, "[SUPPORT] (Lv. %d) Supporter %s(%d): %s", PlayerData[playerid][pHelper], PlayerData[playerid][pAdminName], playerid, params);
            else SendClientMessageEx(i, COLOR_LIGHTRED, "[SUPPORT] %s %s(%d): %s", GetAdminRank(playerid), PlayerData[playerid][pAdminName], playerid, params);
        }
    }
    return 1;
}

CMD:g(playerid, params[])
{
	 new bb[200], ss[200];
	 if(PlayerData[playerid][pAdmin] < 1 && !PlayerData[playerid][pForumGorevlisi] && !PlayerData[playerid][pOyunGorevlisi]) return HataMesajGonder(playerid, "Bu komutu kullanabilmek için yeterli yetkiniz yok.");
	 if(sscanf(params, "s[200]", ss)) return KullanimMesaji(playerid, "/g [Mesaj]");
	 if(GetPVarInt(playerid, "DrFloodKorumasi") > GetTickCount())
	 {
		 HataMesajGonder(playerid, "Flood yapmayýn.");
		 SetPVarInt(playerid, "DrFloodKorumasi", GetTickCount() + 600);
		 return 1;
	 }
	 if(PlayerData[playerid][pAdmin] >= 1) {format(bb, sizeof(bb), "{66ffff}[Admin] %s(%d): %s", ReturnName(playerid), playerid, ss);}
	 if(PlayerData[playerid][pOyunGorevlisi] >= 1) {format(bb, sizeof(bb), "{66ffff}[Oyun Görevlisi] %s(%d): %s", ReturnName(playerid), playerid, ss);}
	 if(PlayerData[playerid][pForumGorevlisi]>= 1) {format(bb, sizeof(bb), "{66ffff}[Forum Görevlisi] %s(%d): %s", ReturnName(playerid), playerid, ss);}
	 SetPVarInt(playerid, "DrFloodKorumasi", GetTickCount() + 600);
	 foreach(new i: Player)
	 {
		 if(PlayerData[i][pAdmin] >= 1) {SendClientMessage(i, -1, bb);}
		 if(PlayerData[i][pOyunGorevlisi] >= 1) {SendClientMessage(i, -1, bb);}
		 if(PlayerData[i][pOyunGorevlisi] >= 1) {SendClientMessage(i, -1, bb);}
	 }
	 return 1;
}

CMD:soruekle(playerid)
{
    if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 2) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
    if (SoruSayisi() >= MAX_SORU) return HataMesajGonder(playerid, "Daha fazla soru ekleyemezsiniz.");
    Dialog_Show(playerid,SoruEkle,DIALOG_STYLE_INPUT, "Soru Ekle", "Lütfen ekleyeceginiz sorunun sorusunu giriniz:\n\n{FF0000}NOT: en fazla 50 karakterden olusabilir.", "Devam", "Kapat");
    return 1;
}
CMD:sorusil(playerid,params[])
{
    if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 2) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
    new sid;
    if (sscanf(params, "i",sid))
    {
        KullanimMesaji(playerid, "/sorusil [Soru ID]");
        return HataMesajGonder(playerid, "Soru ID'si bulmak için /soruidbul komutunu kullanin.");
    }
    if ((sid < 0 || sid >= MAX_SORU) || !SoruData[sid][soruExists]) return HataMesajGonder(playerid, "Soru ID'si bulunamadi.");
    Soru_Sil(sid);
    MesajGonder(playerid, "Soru silindi.");
    return 1;
}
CMD:soruidbul(playerid,params[])
{
    new soruu[50];
    if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 2) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
    if (sscanf(params, "s[50]",soruu)) return KullanimMesaji(playerid, "/soruidbul [Soru]");
    if (strlen(soruu) < 3 || strlen(soruu) > 50) return HataMesajGonder(playerid, "Soru 3 ile 50 karakter arasinda olmalidir.");
    new str[50],sayi;
    for (new i; i<MAX_SORU; i++)
    {
        if (SoruData[i][soruExists])
        {
            if (strfind(SoruData[i][Soru], soruu, true) != -1)
            {
                format(str,sizeof(str), "ID: %d | SQL ID: %d",i,SoruData[i][soruID]);
                SendClientMessage(playerid,0x00FFBFFF,str);
                sayi++;
            }
        }
    }
    if (!sayi) return HataMesajGonder(playerid, "Yazdiginiz anahtar kelimeye ait hiçbir soru bulunamadi.");
    return 1;
}

CMD:tal(playerid)
{
	if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 1 && PlayerData[playerid][pForumGorevlisi] < 1 && PlayerData[playerid][pOyunGorevlisi] < 1) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
	TalepListele(playerid);
	return 1;
}

CMD:setplayer(playerid, params[])
{
    static
	    userid,
	    type[18],
	    amount[32];

	if (PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
	if (sscanf(params, "us[18]S()[32]", userid, type, amount))
	{
	    KullanimMesaji(playerid, "/setplayer [ID/Isim] [Adlar]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[ADLAR]:{FFFFFF} yas, cinsiyet, dogumyeri, ten, ehliyet, aranma, bitcoin, level, oynamasaati");
		SendClientMessage(playerid, COLOR_YELLOW, "[ADLAR]:{FFFFFF} bagimlilik, tasimacilikseviye, tasimaciliksefer, dovusstili, maskehakki, materyal");
		return 1;
	}
	if (!OyundaDegil(userid))
	    return HataMesajGonder(playerid, "Belirttiðiniz oyuncu oyunda deðil.");

	if (!strcmp(type, "yas", true))
	{
	    if (isnull(amount) || strval(amount) < 18 || strval(amount) > 80) return KullanimMesaji(playerid, "/setplayer [ID/Isim] [Yas] [Yas]");
	    PlayerData[userid][pYas] = strval(amount);
	    MesajGonder(playerid, "%s adlý kiþinin yaþýný %d olarak ayarladýn.", ReturnName(userid, 0), strval(amount));
	}
	else if (!strcmp(type, "cinsiyet", true))
	{
	    if (PlayerData[userid][pCinsiyet] == 1)
	    {
	        PlayerData[userid][pCinsiyet] = 2;
	        MesajGonder(playerid, "%s adlý kiþinin cinsiyetini Kadýn olarak deðiþtirdiniz.", ReturnName(userid, 0));
	    }
	    else
	    {
	        PlayerData[userid][pCinsiyet] = 1;
	        MesajGonder(playerid, "%s adlý kiþinin cinsiyetini Erkek olarak deðiþtirdiniz.", ReturnName(userid, 0));
	    }
	}
	else if (!strcmp(type, "dogumyeri", true))
	{
	    if (isnull(amount)) return HataMesajGonder(playerid, "Doðum yerini girmediniz.");
	    format(PlayerData[userid][pDogum], 30, amount);
	    MesajGonder(playerid, "%s adlý kiþinin doðum yerini '%s' olarak deðiþtirdiniz.", ReturnName(userid, 0), amount);
	}
	else if (!strcmp(type, "ten", true))
	{
	    if (PlayerData[userid][pTen] == 1)
	    {
	        PlayerData[userid][pTen] = 2;
	        MesajGonder(playerid, "%s adlý kiþinin ten rengini Siyah olarak deðiþtirdiniz.", ReturnName(userid, 0));
	    }
	    else
	    {
	        PlayerData[userid][pTen] = 1;
	        MesajGonder(playerid, "%s adlý kiþinin ten rengini Beyaz olarak deðiþtirdiniz.", ReturnName(userid, 0));
	    }
	}
	else if (!strcmp(type, "ehliyet", true))
	{
	    if (PlayerData[userid][pEhliyet] == 1)
	    {
	        PlayerData[userid][pEhliyet] = 0;
	        MesajGonder(playerid, "%s adlý kiþinin ehliyetini sildiniz.", ReturnName(userid, 0));
	    }
	    else
	    {
	        PlayerData[userid][pEhliyet] = 1;
	        MesajGonder(playerid, "%s adlý kiþiye ehliyet verdiniz.", ReturnName(userid, 0));
	    }
	}
	else if (!strcmp(type, "aranma", true))
	{
		if (isnull(amount) || strval(amount) < 0 || strval(amount) > 6) return KullanimMesaji(playerid, "/setplayer [ID/Isim] [Aranma] [Aranma Seviyesi 0-6]");
		PlayerData[userid][pAranma] = strval(amount);
		SetPlayerWantedLevel(userid, PlayerData[userid][pAranma]);
		MesajGonder(playerid, "%s adlý kiþinin aranma seviyesini %d olarak ayarladýnýz.", ReturnName(userid, 0), strval(amount));
	}
	else if (!strcmp(type, "bitcoin", true))
	{
		if (isnull(amount) || strval(amount) < 0 || strval(amount) > 1000) return KullanimMesaji(playerid, "/setplayer [ID/Isim] [Bitcoin] [Miktar]");
		PlayerData[userid][pBitcoin] = strval(amount);
		MesajGonder(playerid, "%s adlý kiþinin bitcoin miktarý %d olarak ayarlandý.", ReturnName(userid, 0), strval(amount));
	}
	else if (!strcmp(type, "level", true))
	{
		if (isnull(amount)) return KullanimMesaji(playerid, "/setplayer [ID/Isim] [Level] [Level]");
		PlayerData[userid][pLevel] = strval(amount);
		SetPlayerScore(userid, PlayerData[userid][pLevel]);
		MesajGonder(playerid, "%s adlý kiþinin leveli %d olarak ayarlandý.", ReturnName(userid, 0), strval(amount));
	}
	else if (!strcmp(type, "oynamasaati", true))
	{
		if (isnull(amount)) return KullanimMesaji(playerid, "/setplayer [ID/Isim] [oynamasaati] [Saat]");
		PlayerData[userid][pOynamaSaati] = strval(amount);
		MesajGonder(playerid, "%s adlý kiþinin oynama saati %d olarak ayarlandý.", ReturnName(userid, 0), strval(amount));
	}
	else if (!strcmp(type, "bagimlilik", true))
	{
		if (PlayerData[userid][pBagimlilik] == 0)
		{
		    PlayerData[userid][pBagimlilik] = 1;
		    PlayerData[userid][pBagimlilikSayac][1] = 0;
		    PlayerData[userid][pBagimlilikSayac][0] = 0;
		    MesajGonder(playerid, "%s adlý kiþiyi uyuþturucu baðýmlýsý yaptýnýz.", ReturnName(userid, 0));
		}
		else
		{
		    PlayerData[userid][pBagimlilik] = 0;
		    PlayerData[userid][pBagimlilikSayac][1] = 0;
		    PlayerData[userid][pBagimlilikSayac][0] = 0;
		    MesajGonder(playerid, "%s adlý kiþi artik uyuþturucu baðýmlýsý deðil.", ReturnName(userid, 0));
		}
	}
	else if (!strcmp(type, "tasimacilikseviye", true))
	{
        if (isnull(amount)) return KullanimMesaji(playerid, "/setplayer [ID/Isim] [tasimacilikseviye] [Seviye 0-5]");
        if (strval(amount) < 0 || strval(amount) > 5) return HataMesajGonder(playerid, "Tasimacilik seviyesi 0-5 arasinda olmalidir.");
		PlayerData[userid][pTasimacilikSeviye] = strval(amount);
		MesajGonder(playerid, "%s adlý kiþinin taþýmacýlýk seviyesi %d olarak ayarlandý.", ReturnName(userid, 0), strval(amount));
	}
	else if (!strcmp(type, "tasimaciliksefer", true))
	{
        if (isnull(amount)) return KullanimMesaji(playerid, "/setplayer [ID/Isim] [tasimaciliksefer] [Sefer]");
		PlayerData[userid][pTasimacilikSefer] = strval(amount);
		MesajGonder(playerid, "%s adlý kiþinin taþýmacýlýk seferi %d olarak ayarlandý.", ReturnName(userid, 0), strval(amount));
	}
	else if (!strcmp(type, "dovusstili", true))
	{
        if (isnull(amount)) return KullanimMesaji(playerid, "/setplayer [ID/Isim] [dovusstili] [Stil]");
		PlayerData[userid][pDovusStili] = strval(amount);
		MesajGonder(playerid, "%s adlý kiþinin dövüþ stili %s olarak ayarlandý.", ReturnName(userid, 0), GetFightStyleName(strval(amount)));
	}
	else if (!strcmp(type, "maskehakki", true))
	{
		if (PlayerData[userid][pMaskeHakki] == 0)
		{
		    PlayerData[userid][pMaskeHakki] = 1;
		    MesajGonder(playerid, "%s adlý kiþiye maske hakký verildi.", ReturnName(userid, 0));
		}
		else
		{
		    PlayerData[userid][pMaskeHakki] = 0;
		    MesajGonder(playerid, "%s adlý kiþinin maske hakký alýndý.", ReturnName(userid, 0));
		}
	}
	else if (!strcmp(type, "materyal", true))
	{
		if (isnull(amount)) return KullanimMesaji(playerid, "/setplayer [ID/Isim] [materyal] [Miktar]");
		PlayerData[userid][pMateryal] = strval(amount);
		MesajGonder(playerid, "%s adlý kiþinin materyal miktarý %d olarak ayarlandý.", ReturnName(userid, 0), strval(amount));
	//	AdminMessage(COLOR_LIGHTRED, "AdmCmd: %s %s, %s (%d) adli kisinin materyalini %d olarak degistirdi." GetAdminRank(playerid), PlayerData[playerid][pAdminName], ReturnName(userid, 0));
	}
	return 1;
}

CMD:aesyaver(playerid, params[])
{
	static userid;
	if (PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
	if (sscanf(params, "u", userid)) return KullanimMesaji(playerid, "/aesyaver [ID/Isim]");
	if (!OyundaDegil(userid)) return HataMesajGonder(playerid, "Oyuncu oyunda degil.");
	SetPVarInt(playerid, "oyuncuID", userid);
	Dialog_Show(playerid, AEsyaVer, DIALOG_STYLE_LIST, "Esya Ver", "Zar\nSigara\nip\nGöz Bagi\nMaske\nBenzin Kutusu\nBarbeku\nKöfte\nTavuk Eti\nDana Eti\nTamir Kiti\nPortatif Çadir\nKamp Atesi\nsarjör", "Ver", "Kapat");
	return 1;
}

CMD:sicilkontrol(playerid, params[])
{
    static
        userid;

    if (PlayerData[playerid][pAdmin] < 1)
        return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

    if (sscanf(params, "u", userid))
        return KullanimMesaji(playerid, "/sicilkontrol [id/isim]");

    if (!OyundaDegil(userid))
        return HataMesajGonder(playerid, "Belirttiginiz oyuncu oyunda degil !");

    SicilKontrol(playerid, userid);
    return 1;
}

CMD:listguns(playerid, params[])
{
    new userid;

    if (PlayerData[playerid][pAdmin] < 1)
        return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

    if (sscanf(params, "u", userid))
        return KullanimMesaji(playerid, "/listguns [id/isim]");

    if (!OyundaDegil(userid))
        return HataMesajGonder(playerid, "Oyuncu giris yapmamis.");

    SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
    SendClientMessageEx(playerid, COLOR_LIGHTRED, "%s'in Silahlari:", ReturnName(userid, 0));
	new a;
    for (new i; i<13; i++) if (PlayerData[userid][pSilahlar][i] > 0)
	{
	    GetPlayerWeaponData(userid, i, a, PlayerData[userid][pMermiler][i]);
	    SendClientMessageEx(playerid, COLOR_WHITE, "* %s (%d mermi)", ReturnWeaponName(PlayerData[userid][pSilahlar][i]), PlayerData[userid][pMermiler][i]);
	}
    SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
    return 1;
}
CMD:flipcar(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid);

    if (PlayerData[playerid][pAdmin] < 1)
        return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

    if (vehicleid > 0 && isnull(params))
    {
        FlipVehicle(vehicleid);
        MesajGonder(playerid, "Bulundugunuz araç düzeltildi.");
    }
    else
    {
        if (sscanf(params, "d", vehicleid))
            return KullanimMesaji(playerid, "/flipcar [araç ID]");

        else if (!IsValidVehicle(vehicleid))
            return HataMesajGonder(playerid, "Geçersiz bir araç ID'si belirttiniz.");

        FlipVehicle(vehicleid);
        MesajGonder(playerid, "Araç ID %d düzeltildi.", vehicleid);
    }
    return 1;
}
CMD:tracenumber(playerid, params[])
{
    new number;

    if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 3)
        return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

    if (sscanf(params, "d", number))
        return KullanimMesaji(playerid, "/tracenumber [numara]");

    if (number == 0)
        return HataMesajGonder(playerid, "Geçersiz numara girdiniz.");

    if (GetNumberOwner(number) != INVALID_PLAYER_ID)
        return SunucuMesaji(playerid, "%d numaranin sahibi %s adli kisidir.", number, ReturnName(GetNumberOwner(number), 0));

    HataMesajGonder(playerid, "Bu numaraya sahip oyuncu çevrimiçi degil veya bu numaraya sahip kimse yok.");
    return 1;
}

CMD:arenk(playerid, params[])
{
    static
        color1,
        color2,
        carid;

    if (PlayerData[playerid][pAdmin] < 3)
        return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

    if (sscanf(params, "iii", carid, color1, color2)) return KullanimMesaji(playerid, "/arenk [Araç ID] [Renk 1] [Renk 2]");
    if (!IsValidVehicle(carid)) return HataMesajGonder(playerid, "Geçersiz araç id.");

    if (color1 < 0 || color1 > 255)
        return HataMesajGonder(playerid, "Renk 1, 0 ile 255 arasinda olmalidir.");

    if (color2 < 0 || color2 > 255)
        return HataMesajGonder(playerid, "Renk 2, 0 ile 255 arasinda olmalidir.");

	new id = Car_GetID(carid);
	if (id == -1) ChangeVehicleColor(carid, color1, color2);
	else
	{
	    AracInfo[id][aracRenkler][0] = color1;
	    AracInfo[id][aracRenkler][1] = color2;
	    ChangeVehicleColor(carid, color1, color2);
	    Arac_Kaydet(id);
	}

    MesajGonder(playerid, "Aracin rengi degistirildi.");
    return 1;
}

CMD:apaintjob(playerid, params[])
{
    static
        paintjobid, carid;

    if (PlayerData[playerid][pAdmin] < 3)
        return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

    if (sscanf(params, "ii", carid, paintjobid)) return KullanimMesaji(playerid, "/arenk [Araç ID] [Paintjob ID] (-1 kapatir)");
    if (!IsValidVehicle(carid)) return HataMesajGonder(playerid, "Geçersiz araç id.");

    if (paintjobid < -1 || paintjobid > 5)
        return HataMesajGonder(playerid, "Geçersiz Paintjob ID. (0-5)");

    if (paintjobid == -1)
        paintjobid = 6;

    new id = Car_GetID(carid);
    if (id == -1) ChangeVehiclePaintjob(carid, paintjobid);
    else
    {
        AracInfo[id][aracPaintjob] = paintjobid;
        ChangeVehiclePaintjob(carid, paintjobid);
        Arac_Kaydet(id);
    }
    MesajGonder(playerid, "Paintjob degistirildi.", paintjobid);
    return 1;
}
CMD:jetpack(playerid, params[])
{

    if (PlayerData[playerid][pAdmin] < 1)
        return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

	PlayerData[playerid][pJetpack] = 1;
 	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK);
    return 1;
}

CMD:setweather(playerid, params[])
{
    new weatherid;

    if (PlayerData[playerid][pAdmin] < 4)
        return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

    if (sscanf(params, "d", weatherid))
        return KullanimMesaji(playerid, "/setweather [weather ID]");

    SetWeather(weatherid);
    MesajGonder(playerid, "Hava durumu %d olarak degistirildi.", weatherid);
    AdminMessage(COLOR_LIGHTRED, "AdmCmd: %s adli yetkili hava durumunu degistirdi. (ID: %d)", PlayerData[playerid][pAdminName], weatherid);
    return 1;
}

CMD:sunucupanel(playerid)
{
	if (PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
	if (sunucuKilitli) Dialog_Show(playerid, ServerPanel, DIALOG_STYLE_LIST, "Sunucu Paneli ", "Kilit Aç\nHostname Degistir\nSorgu Çalistir\nBakim Modu\nBasvuru Durumu (%s)", "Seç", "Kapat", (GetServerBilgi("basvurudurum") == 1) ? ("{84f542}Açýk") : ("{ff1414}Kapalý"));
	else Dialog_Show(playerid, ServerPanel, DIALOG_STYLE_LIST, "Server Panel", "Kilitle\nHostname Degistir\nSorgu Çalistir\nBakim Modu\nBasvuru Durumu (%s)", "Seç", "Kapat", (GetServerBilgi("basvurudurum") == 1) ? ("{84f542}Açýk") : ("{ff1414}Kapalý"));
	return 1;
}

CMD:evduzenle(playerid, params[])
{
    static id, type[24], string[128];
	if (PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komutu kullanamazsin !");
	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	KullanimMesaji(playerid, "/evduzenle [ID] [Ad]");
	    SendClientMessage(playerid, COLOR_YELLOW, "{00FF15}[ADLAR]: {FFFFFF} sahip, sistemselfiyat, pozisyon, interior, kilit, maksmobilya, mobilyatemizle, kasatemizle");
		return 1;
	}
	if ((id < 0 || id >= MAX_EV) || !HouseInfo[id][evExists])
	    return HataMesajGonder(playerid, "Geçersiz ev ID'si.");

    if (!strcmp(type, "sahip", true))
    {
        new sahipid;

	    if (sscanf(string, "d", sahipid))
	        return KullanimMesaji(playerid, "/evduzenle [ID] [sahip] [Sahip SQL ID] (-1 yazarsaniz sahipsiz olur)");

		HouseInfo[id][evSahip] = sahipid;
		Ev_Yenile(id);
		Ev_Kaydet(id);
    }
    if (!strcmp(type, "sistemselfiyat", true))
    {
        new fiyat;

	    if (sscanf(string, "d", fiyat))
	        return KullanimMesaji(playerid, "/evduzenle [ID] [sistemselfiyat] [Fiyat]");

		HouseInfo[id][evKendiFiyati] = fiyat;
		if (!HouseInfo[id][evSatilik]) HouseInfo[id][evFiyat] = fiyat;
		Ev_Yenile(id);
		Ev_Kaydet(id);
    }
    if (!strcmp(type, "pozisyon", true))
    {
        GetPlayerPos(playerid, HouseInfo[id][evPos][0], HouseInfo[id][evPos][1], HouseInfo[id][evPos][2]);
		Ev_Yenile(id);
		Ev_Kaydet(id);
    }
    if (!strcmp(type, "interior", true)) // Degisti
    {
        new interior;

	    if (sscanf(string, "d", interior))
	        return KullanimMesaji(playerid, "/evduzenle [ID] [interior] [Interior ID]");

	    if (!(0 <= interior <= sizeof(HouseInteriors)-1)) return HataMesajGonder(playerid, "Yazdiginiz ID'de bir interior bulunmamaktadir.");

	    HouseInfo[id][evInterior] = interior;
	    foreach (new i:Player)
	    {
	        if (PlayerData[i][pHouse] == HouseInfo[id][evID])
	        {
	            SetPlayerInterior(playerid, HouseInteriors[ HouseInfo[id][evInterior] ][intID]);
  				SetPlayerPos(playerid, HouseInteriors[HouseInfo[id][evInterior] ][intX], HouseInteriors[ HouseInfo[id][evInterior] ][intY], HouseInteriors[ HouseInfo[id][evInterior] ][intZ]);
          		ObjelerYukleniyor(i);
	        }
	    }
	    Ev_Kaydet(id);
	    House_RemoveFurniture(id);
    }
    if (!strcmp(type, "kilit", true))
    {
        if (HouseInfo[id][evKilit] == 1) HouseInfo[id][evKilit] = 0;
        else HouseInfo[id][evKilit] = 1;
        Ev_Yenile(id);
        Ev_Kaydet(id);
    }
    if (!strcmp(type, "maksmobilya", true))
    {
        new mobilya;

	    if (sscanf(string, "d", mobilya))
	        return KullanimMesaji(playerid, "/evduzenle [ID] [maksmobilya] [Mobilya Limiti]");

		HouseInfo[id][evMaksMobilya] = mobilya;
		Ev_Kaydet(id);
		MesajGonder(playerid, "Maksimum mobilya limiti %d olarak degistirildi.", mobilya);
    }
    if (!strcmp(type, "mobilyatemizle", true)) // Degisti
    {
        MesajGonder(playerid, "Mobilyalar silindi.");
        House_RemoveFurniture(id);
    }
    if (!strcmp(type, "kasatemizle", true))
    {
        HouseInfo[id][evCash] = 0;
        HouseInfo[id][evUyusturucu] = 0;
        for (new i; i<10; i++)
        {
            HouseInfo[id][evSilahlar][i] = 0;
            HouseInfo[id][evMermiler][i] = 0;
        }
        Ev_Kaydet(id);
        MesajGonder(playerid, "Kasadaki para, uyusturucu ve silahlar silindi.");
    }
	return 1;
}

CMD:givenos(playerid, params[])
{
	new id;

	if (PlayerData[playerid][pAdmin] < 4)
	    return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

	if (sscanf(params, "d", id))
		return MesajGonder(playerid, "/givenos [Araç ID]");

	if (Car_GetID(id) == -1)
		return HataMesajGonder(playerid, "Geçersiz Araç ID'si girdiniz.");

	AddVehicleComponent(id, 1010);
	MesajGonder(playerid, "%d ID'li araca 10x nitro eklenmiþtir.", id);

	new rank[20];
	if (PlayerData[playerid][pHelper] > 0) format(rank, sizeof(rank), "(Lv. %d) Supporter", PlayerData[playerid][pHelper]);
	else format(rank, sizeof(rank), "%s", GetAdminRank(playerid));
	AdminHelperMessage(COLOR_LIGHTRED, "AdmCmd: %s %s isimli yetkili tarafýndan %s (%d) model araca x10 nitro eklendi.", rank, PlayerData[playerid][pAdminName], ReturnVehicleModelName(GetVehicleModel(id)), id);
	return 1;
}

CMD:aracduzenle(playerid, params[])
{
    static vid, type[24], string[128];
	if (PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Bu komutu kullanamazsin !");

	if (sscanf(params, "ds[24]S()[128]", vid, type, string))
	{
	    KullanimMesaji(playerid, "/aracduzenle [ID] [Ayar]");
	    SendClientMessage(playerid, COLOR_YELLOW, "{00FF15}[Ayarlar]: {FFFFFF}model, sahip, zirh, kilit, vergi, modifiyesil, taksiplaka, ceza, birlik, kira, satilik");
	    return SendClientMessage(playerid, COLOR_YELLOW, "{00FF15}[Ayarlar]: {FFFFFF}plaka, bagajtemizle, kilometre, benzin");
	}

	new id = Car_GetID(vid);
	if (id == -1)
		return HataMesajGonder(playerid, "Geçersiz Araç ID.");

	if (!strcmp(type, "benzin", true))
	{
		new Float:miktar;

		if (sscanf(string, "f", miktar))
			return KullanimMesaji(playerid, "/aracduzenle [ID] [benzin] [Miktar (0.0 - 100.0)]");

		if (miktar < 0.0 || miktar > 100.0)
			return HataMesajGonder(playerid, "Geçersiz miktar girdiniz.");

		AracInfo[id][aracBenzin] = miktar;
		Arac_Kaydet(id);

		MesajGonder(playerid, "Aracin benzin miktari ayarlandi.");
	}

	if (!strcmp(type, "model", true))
	{
	    new model;
	    if (sscanf(string, "d", model)) return KullanimMesaji(playerid, "/aracduzenle [ID] [model] [Model ID]");
	    if (!IsValidVehicleModel(model)) return HataMesajGonder(playerid, "Geçersiz Model ID girdiniz.");
	    AracInfo[id][aracModel] = model;
	    Arac_Kaydet(id);
	    Arac_Spawn(id, 1);
	    MesajGonder(playerid, "Aracin modeli degistirildi ve respawn edildi.");
	}
	else if (!strcmp(type, "sahip", true))
	{
	    new sahip;
	    if (sscanf(string, "d", sahip)) return KullanimMesaji(playerid, "/aracduzenle [ID] [sahip] [Sahip SQL ID]");
	    AracInfo[id][aracSahip] = sahip;
	    Arac_Kaydet(id);
	    MesajGonder(playerid, "Aracin sahibi SQL ID %d olarak ayarlandi.", sahip);
	}
	else if (!strcmp(type, "zirh", true))
	{
	    new zirh;
	    if (sscanf(string, "d", zirh)) return KullanimMesaji(playerid, "/aracduzenle [ID] [zirh] [Zirh]");
	    AracInfo[id][aracZirh] = zirh;
	    AracInfo[id][aracZirhVarMi] = 1;
	    Arac_Kaydet(id);
	    MesajGonder(playerid, "Aracin zirhini %d olarak ayarladiniz.", zirh);
	}
	else if (!strcmp(type, "kilit", true))
	{
	    static
	        engine,
	        lights,
	        alarm,
	        doors,
	        bonnet,
	        boot,
	        objective;

	    	GetVehicleParamsEx(AracInfo[id][aracVehicle], engine, lights, alarm, doors, bonnet, boot, objective);
			if (!AracInfo[id][aracKilit])
			{
				AracInfo[id][aracKilit] = true;
				Arac_Kaydet(id);

				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

				SetVehicleParamsEx(AracInfo[id][aracVehicle], engine, lights, alarm, 1, bonnet, boot, objective);
				MesajGonder(playerid, "Araç kilitlendi.");
			}
			else
			{
				AracInfo[id][aracKilit] = false;
				Arac_Kaydet(id);

				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
				SetVehicleParamsEx(AracInfo[id][aracVehicle], engine, lights, alarm, 0, bonnet, boot, objective);
				MesajGonder(playerid, "Aracin kilidi açýldý.");
			}
	}
	else if (!strcmp(type, "vergi", true))
	{
	    new vergi;
	    if (sscanf(string, "d", vergi)) return KullanimMesaji(playerid, "/aracduzenle [ID] [vergi] [Vergi]");
	    AracInfo[id][aracVergi] = vergi;
	    Arac_Kaydet(id);
	    MesajGonder(playerid, "Aracin vergisini %s olarak ayarladiniz.", FormatNumber(vergi));
	}
	else if (!strcmp(type, "modifiyesil", true))
	{
	    for (new i; i<14; i++) if (AracInfo[id][aracMods][i] > 0)
	    {
	        RemoveVehicleComponent(AracInfo[id][aracVehicle], AracInfo[id][aracMods][id]);
	        AracInfo[id][aracMods][id] = 0;
	    }
	    AracInfo[id][aracPaintjob] = -1;
	    ChangeVehiclePaintjob(AracInfo[id][aracVehicle], 3);
	    Arac_Kaydet(id);
	    MesajGonder(playerid, "Modifiyeler kaldirildi.");
	}
	else if (!strcmp(type, "taksiplaka", true))
	{
	    if (AracInfo[id][TaksiPlaka] == 0)
	    {
	        AracInfo[id][TaksiPlaka] = 1;
	        MesajGonder(playerid, "Araca taksi plakasi verdiniz.");
	    }
	    else
	    {
	        AracInfo[id][TaksiPlaka] = 0;
	        MesajGonder(playerid, "Aracin taksi plakasi kaldirildi.");
	    }
	    Arac_Kaydet(id);
	}
	else if (!strcmp(type, "ceza", true))
	{
	    new ceza;
	    if (sscanf(string, "d", ceza)) return KullanimMesaji(playerid, "/aracduzenle [ID] [ceza] [Ceza]");
	    AracInfo[id][aracTicket] = ceza;
	    Arac_Kaydet(id);
	    MesajGonder(playerid, "Aracin cezasini %s olarak ayarladiniz.", FormatNumber(ceza));
	}
	else if (!strcmp(type, "birlik", true))
	{
	    new birlikid;
	    if (sscanf(string, "d", birlikid)) return KullanimMesaji(playerid, "/aracduzenle [ID] [birlik] [Birlik ID (sql)]");
	    AracInfo[id][aracFaction] = birlikid;
     	AracInfo[id][aracFactionType] = Birlikler[Birlik_GetID(birlikid)][birlikTip];
     	Arac_Kaydet(id);
	}
	else if (!strcmp(type, "kira", true))
	{
	    new kirafiyat;
	    if (sscanf(string, "d", kirafiyat)) return KullanimMesaji(playerid, "/aracduzenle [ID] [kira] [Ücret]");

		MesajGonder(playerid, "Aracin kira fiyatini %d olarak ayarladiniz.", FormatNumber(kirafiyat));

		AracInfo[id][aracKira] = kirafiyat;

     	Arac_Kaydet(id);
	}
	else if (!strcmp(type, "satilik", true))
	{
	    new fiyat;
	    if (sscanf(string, "d", fiyat)) return KullanimMesaji(playerid, "/aracduzenle [ID] [satilik] [Fiyat] (0 yazarsaniz satilik olmaz)");
	    if (fiyat <= 0)
	    {
	        AracInfo[id][aracSatilik] = 0;
	        AracInfo[id][aracFiyat] = 0;
	        Arac_Kaydet(id);
	        UpdateDynamic3DTextLabelText(AracInfo[id][aracLabel], -1, " ");
	        DestroyDynamic3DTextLabel(AracInfo[id][aracLabel]);
	        MesajGonder(playerid, "Araç artik satilik degil.");
	    }
	    else
	    {
	        UpdateDynamic3DTextLabelText(AracInfo[id][aracLabel], -1, " ");
	        DestroyDynamic3DTextLabel(AracInfo[id][aracLabel]);
	        AracInfo[id][aracSatilik] = 1;
	        AracInfo[id][aracFiyat] = fiyat;
	        Arac_Kaydet(id);
	        new str[120];
		    format(str,sizeof(str), "{2ECC71}SATILIK\n{2ECC71}Fiyat: %s\n{2ECC71}%d",FormatNumber(AracInfo[id][aracFiyat]), GetSQLPhoneNumber(AracInfo[id][aracSahip]));
		    AracInfo[id][aracLabel] = CreateDynamic3DTextLabel(str,-1, 0.0, -2.5, 0.4,30.0,INVALID_PLAYER_ID,AracInfo[id][aracVehicle], 1);
	    }
	}
	else if (!strcmp(type, "plaka", true))
	{
	    new plaka[24];
	    if (sscanf(string, "s[24]", plaka)) return KullanimMesaji(playerid, "/aracduzenle [ID] [plaka] [Plaka]");
	 	format(AracInfo[id][aracPlaka], 24, plaka);
	 	SetVehicleNumberPlate(AracInfo[id][aracPlaka], plaka);
	 	MesajGonder(playerid, "Aracin plakasi degistirildi.");
	}
	else if (!strcmp(type, "bagajtemizle", true))
	{
	    for (new i; i<5; i++) if (AracInfo[id][aracSilahlar][i] > 0)
	    {
	        AracInfo[id][aracSilahlar][i] = 0;
	        AracInfo[id][aracMermiler][i] = 0;
	    }
	    AracInfo[id][aracUyusturucu] = 0;
	    MesajGonder(playerid, "Aracin bagaji temizlendi.");
	}
	else if (!strcmp(type, "kilometre", true))
	{
	    new Float:km;
	    if (sscanf(string, "f", km)) return KullanimMesaji(playerid, "/aracduzenle [ID] [kilometre] [Kilometre]");
	    AracInfo[id][aracKM] = km;
	    Arac_Kaydet(id);
	    MesajGonder(playerid, "Aracin kilometresi %f olarak degistirildi", km);
	}
	return 1;
}
CMD:god(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 1) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
	if (PlayerData[playerid][pGOD] == true)
	{
		PlayerTextDrawHide(playerid, godduty[playerid]);
	    PlayerData[playerid][pGOD] = false;
	    MesajGonder(playerid, "Godmode kapatýldý.");
	}
	else
	{
 		PlayerTextDrawShow(playerid, godduty[playerid]);
	    PlayerData[playerid][pGOD] = true;
	    MesajGonder(playerid, "Godmode açýldý.");
	}
	return 1;
}

CMD:respawnnear(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 2)
        return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

    new count;

    for (new i = 0; i < MAX_ARAC; i++)
    {
        static Float:fX, Float:fY, Float:fZ;

        if (AracInfo[i][aracExists] && IsValidVehicle(AracInfo[i][aracVehicle]) && GetVehicleDriver(AracInfo[i][aracVehicle]) == INVALID_PLAYER_ID)
        {
            GetVehiclePos(AracInfo[i][aracVehicle], fX, fY, fZ);

            if (IsPlayerInRangeOfPoint(playerid, 50.0, fX, fY, fZ))
            {
                Arac_Spawn(i);
                count++;
            }
        }
    }
    if (!count)
        return HataMesajGonder(playerid, "Respawn için yakininizda hiçbir araç bulunmamaktadir.");

    MesajGonder(playerid, "Yakininizda bulunan %d adet araç respawn edilmistir.", count);
    return 1;
}

CMD:setname(playerid, params[])
{
	static userid, newname[24];
	new id;
	if (PlayerData[playerid][pAdmin] < 3) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
	if (sscanf(params, "us[24]", userid, newname)) return KullanimMesaji(playerid, "/setname [id/isim] [yeni isim]");
	if (!OyundaDegil(userid)) return HataMesajGonder(playerid, "Bu oyuncu giris yapmamis.");
	if (!IsValidRoleplayName(newname)) return HataMesajGonder(playerid, "Geçersiz ad biçimi girdiniz.");
	if (!IsimKontrol(newname)) return HataMesajGonder(playerid, "Bu isim kullaniliyor.");
	if (SoyadKilitlimi(GetPlayerLastName(playerid, newname, 0))) return HataMesajGonder(playerid, "Bu soyad kilitlenmis.");

	MesajGonder(playerid, "%s adlý kiþinin ismi %s olarak ayarlandý.", Player_GetName(userid), newname);
	SendClientMessageEx(id, -1, "{5AE600}Bilgi: {FFFFFF}Yeni adýn %s olarak ayarlandý.", newname);
	ChangeName(userid, newname);
	return 1;
}
CMD:namechanges(playerid, params[])
{
	new id;
    if (PlayerData[playerid][pAdmin] < 2) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
    if (sscanf(params, "u", id)) return KullanimMesaji(playerid, "/namechanges [ID/Isim]");
    if (!OyundaDegil(id)) return HataMesajGonder(playerid, "Bu oyuncu giriþ yapmamýþ.");
    new query[124];
    format(query, sizeof(query), "SELECT * FROM `namechanges` WHERE `sqlid` = '%d'", PlayerData[id][pID]);
    mysql_tquery(g_SQL, query, "NameChanges", "di", playerid, id);
	return 1;
}
CMD:stats(playerid, params[])
{
	new id;
	if (PlayerData[playerid][pAdmin] < 1) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
	if (sscanf(params, "u", id)) return KullanimMesaji(playerid, "/stats [ID/Isim]");
	if (!OyundaDegil(id)) return HataMesajGonder(playerid, "Oyuncu giris yapmamis.");
	ShowStats(playerid, id);
	return 1;
}
CMD:ahelp(playerid)
{
    if (PlayerData[playerid][pAdmin] < 1 && !PlayerData[playerid][pOyunGorevlisi] && !PlayerData[playerid][pForumGorevlisi]) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

	new str[2700];

	if (PlayerData[playerid][pForumGorevlisi] >= 1) strcat(str, "[Forum Görevlisi]: /aduty, /skick, /kick, /jail, /savepos, /loadpos, /getcar, /gotocar, /respawncar, /spawnla, /go, /get, /ojail, /unjail\n");
	if (PlayerData[playerid][pOyunGorevlisi] >= 1) strcat(str, "[Oyun Görevlisi]: /aduty, /jail, /skick, /kick, /masked, /revive, /gotopos, /savepos, /loadpos, /getcar, /gotocar, /respawncar, /spawnla, /go, /get\n/spec /specoff, /ojail, /unjail\n");
	if (PlayerData[playerid][pAdmin] >= 1) strcat(str, "[Game Staff]: /gotopos, /aduty, /aipcoz, /akelepcecoz, /revive, /masked, /maskeidbul, /sokses, /songiris, /kick, /sicilkontrol, /baninfo\n");
	if (PlayerData[playerid][pAdmin] >= 1) strcat(str, "[Game Staff]: /freeze, /unfreeze, /spawnla, /goto, /gethere, /setinterior, /setvw, /sendto, /sethp, /atamir, /getcar, /soruekle, /ocban\n");
	if (PlayerData[playerid][pAdmin] >= 1) strcat(str, "[Game Staff]: /carto, /entercar, /gotocar, /respawncar, /respawncars, /meslekaracrespawn, /cc, /spec, /jail, /unjail, /soruidbul\n");
	if (PlayerData[playerid][pAdmin] >= 1) strcat(str, "[Game Staff]: /ojail, /ban, /banip, /unban, /oban, /stats, /listguns, /flipcar, /tracenumber, /cban, /cunban, /apark, /jetpack, /sorusil\n");
    if (PlayerData[playerid][pAdmin] >= 2) strcat(str, "[Senior Staff]: /reviveall, /setskin, /ip, /setarmor, /respawnnear, /sethelper, /setyoutuber, /2xbalikeventi, /namechanges, /benzinlerifulle, /graffitisil\n");
    if (PlayerData[playerid][pAdmin] >= 2) strcat(str, "[Senior Staff]: /setfuel, /gotoobject, /setbitcoin, /setleader, /setprobation\n");
    if (PlayerData[playerid][pAdmin] >= 3) strcat(str, "[High Senior Staff]: /arsaduzenle, /setleader, /siparisler, /resetweps, /asetfaction, /asetrank, /arenk, /apaintjob, /setname, /payday, /aracsil, /arsasil, /npcsil\n");
    if (PlayerData[playerid][pAdmin] >= 3) strcat(str, "[High Senior Staff]: /aracolustur, /arenk, /apaintjob, /hoodolustur, /isyerisil, /isyeriduzenle, /hoodsil, /ozelmodelsil, /kickall, /siparisler, /setdealerskin\n");
    if (PlayerData[playerid][pAdmin] >= 3) strcat(str, "[High Senior Staff]: /setdealerpos, /removedealer, /npcduzenle\n");
    if (PlayerData[playerid][pAdmin] >= 4) strcat(str, "[Lead Staff]: /setstaffname, /setvip, /ozelmodelver, /giveweapon, /aesyaver, /setweather, /evduzenle, /oyundisi, /kodekle, /kodsil, /givenos, /fgyap, /ogyap\n");
    if (PlayerData[playerid][pAdmin] >= 4) strcat(str, "[Lead Staff]: /2xpayday, /aracduzenle, /saracekle, /evolustur, /evsil, /pompagit, /pompaduzenle, /pompasil, /pompaolustur, /tamirgit, /tamirduzenle, /arsaolustur\n");
    if (PlayerData[playerid][pAdmin] >= 4) strcat(str, "[Lead Staff]: /tamirolustur, /tamirsil, /isyeriolustur, /agacolustur, /agacduzenle, /agacsil, /createdealer, /createcctv, /rangecctv, /deletecctv, /npcekle\n");
    if (PlayerData[playerid][pAdmin] >= 4) strcat(str, "[Lead Staff]: /editcctv, /movecctv, /renamecctv, /gateolustur, /gateduzenle, /gatesil, /birlikolustur, /birlikduzenle, /birliksil, /binaduzenle, /binasil, /sunucupanel\n");
    if (PlayerData[playerid][pAdmin] >= 5) strcat(str, "[Server Management]: /givecash, /givecashall, /giveexp, /giveexpall, /createatm, /lokasyonsil, /lokasyonekle, /garajolustur, /garajsil\n");
    if (PlayerData[playerid][pAdmin] >= 5) strcat(str, "[Server Management]: /editatm, /removeatm, /createarrest, /destroyarrest, /garajduzenle\n");

    Dialog_Show(playerid, 0, DIALOG_STYLE_MSGBOX, "Admin Komutlarý", str, "Kapat", "");

	return 1;
}

CMD:galeriaracekle(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] < 4)
        return HataMesajGonder(playerid, "Bu komutu kullanamazsýnýz.");

    new model, fiyat;

    if(sscanf(params, "dd", model, fiyat))
        return KullanimMesaji(playerid, "/galeriaracekle [Araç Modeli] [Fiyat]");

    if(fiyat < 0)
        return HataMesajGonder(playerid, "Geçersiz fiyat girdiniz.");

    new query[57 + 11 + 11 + 1];

    mysql_format(g_SQL, query, sizeof(query), "INSERT INTO satilikaraclar SET model = '%d', fiyat = '%d'", model, fiyat);
    mysql_query(g_SQL, query);

    MesajGonder(playerid, "%d numaralý aracý $%d olarak galeriye eklediniz.", model, fiyat);

    return 1;
}

CMD:cban(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 1)
		return HataMesajGonder(playerid, "Yeterli yetkiniz yok.");

	new karakter_adi[MAX_PLAYER_NAME], gun, sebep[64];

	if(sscanf(params, "s[24]ds[64]", karakter_adi, gun, sebep))
		return KullanimMesaji(playerid, "/cban [karakter_isim] [süre(gün, 0: sinirsiz)] [sebep]");

	if(gun < 0)
		return HataMesajGonder(playerid, "Geçersiz gün girdiniz.");

	new karakterid = GetPlayerID(karakter_adi);

	if(OyundaDegil(karakterid))
	{
		SunucuMesaji(karakterid, "%s tarafindan %d gün client banlandiniz.", ReturnName(playerid), gun);
		Kick(karakterid);
	}

	new zaman = gun * 60 * 60 * 24;

	new query[74 + 11 + MAX_PLAYER_NAME + 1];

	mysql_format(g_SQL, query, sizeof(query), "UPDATE serials SET banned = '1', banned_zaman = '%d' WHERE Username = '%e'", zaman, karakter_adi);
	mysql_tquery(g_SQL, query, "YetkiliClientBanladi", "dsds", playerid, karakter_adi, gun, sebep);

	return 1;
}

CMD:cunban(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 1)
		return HataMesajGonder(playerid, "Yeterli yetkiniz yok.");

	new karakter_adi[MAX_PLAYER_NAME];

	if(sscanf(params, "s[24]", karakter_adi))
		return KullanimMesaji(playerid, "/cunban [karakter_isim]");

	new query[109 + MAX_PLAYER_NAME + 1];

	mysql_format(g_SQL, query, sizeof(query), "UPDATE serials SET banned = '0', banned_zaman = '0' WHERE Username = '%e' AND banned > 0", karakter_adi);
	mysql_tquery(g_SQL, query, "YetkiliClientYasakKaldirdi", "ds", playerid, karakter_adi);

	return 1;
}

forward YetkiliClientYasakKaldirdi(playerid, karakter[]);
public YetkiliClientYasakKaldirdi(playerid, karakter[])
{
	new rows = cache_affected_rows();

	if(rows)
	{
		SendClientMessageToAllEx(COLOR_LIGHTRED, "AdmCmd: (%s) - %s adli oyuncunun client yasagi %s tarafindan kaldirildi.", ReturnDate(), karakter, PlayerData[playerid][pAdminName]);
	}

	else HataMesajGonder(playerid, "Geçersiz karakter adi girdiniz ya da karakter zaten client yasakli degil.");

	return 1;
}

forward YetkiliClientBanladi(playerid, karakter[], gun, sebep[]);
public YetkiliClientBanladi(playerid, karakter[], gun, sebep[])
{
	new rows = cache_affected_rows();

	if(rows)
	{
		if(gun >= 1) SendClientMessageToAllEx(COLOR_LIGHTRED, "AdmCmd: (%s) - %s adli oyuncu %s tarafindan %d gün client yasaklandi. Sebep: %s", ReturnDate(), karakter, PlayerData[playerid][pAdminName], gun, sebep);
		else SendClientMessageToAllEx(COLOR_LIGHTRED, "AdmCmd: (%s) - %s adli oyuncu %s tarafindan sinirsiz client yasaklandi. Sebep: %s", ReturnDate(), karakter, PlayerData[playerid][pAdminName], sebep);

	}

	else HataMesajGonder(playerid, "Geçersiz karakter adi girdiniz ya da karakter zaten client yasakli.");

	return 1;
}

CMD:hhelp(playerid) return cmd_helperyardim(playerid);
CMD:helperyardim(playerid)
{
	if (PlayerData[playerid][pHelper] < 1) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

	new str[1500];

	if (PlayerData[playerid][pHelper] >= 1) strcat(str, "[Lv. 1 SUPPORTER]: /h, /tal, /helperyardim, /hduty, /spawnla\n");
	if (PlayerData[playerid][pHelper] >= 2) strcat(str, "[Lv. 2 SUPPORTER]: /go, /get, /savepos, /loadpos, /revive, /getcar, /gotocar, /respawncar\n");
	if (PlayerData[playerid][pHelper] >= 3) strcat(str, "[Lv. 3 SUPPORTER]: /tracenumber, /rek, /sendto\n");
	if (PlayerData[playerid][pHelper] >= 4) strcat(str, "[Lv. 4 SUPPORTER]: /kick, /slap, /skick\n");
	if (PlayerData[playerid][pHelper] >= 5) strcat(str, "[Lv. 5 SUPPORTER]: Henüz yetkiniz yok.\n");

	Dialog_Show(playerid, 97979, DIALOG_STYLE_MSGBOX, "Supporter Komutlarý", str, "Tamam", "Kapat");
	return 1;
}

CMD:dashcamlimit(playerid, params[])
{
	new limit, vehicleid;
	vehicleid = GetPlayerVehicleID(playerid);
	if (GetFactionType(playerid) != BIRLIK_LSPD)
		return HataMesajGonder(playerid, "Devlet memuru deðilsiniz.");

    if (sscanf(params, "i", limit)) return KullanimMesaji(playerid, "/dashcamlimit [KM/H]");

	if (!IsPlayerInAnyVehicle(playerid)) return HataMesajGonder(playerid, "Bu komutu polis araçlarinda kullanabilirsin.");
	if (vehRadar[vehicleid] == false) return HataMesajGonder(playerid, "ilk önce aracin Dashcam'i Açýk olmalidir.");

    if (limit < 50 || limit > 250) return HataMesajGonder(playerid, "Limit en az 50, en fazla 250 olmalidir.");

    vehRadarLimit[vehicleid] = limit;
	MesajGonder(playerid, "Uyarilacak hiz seviyesi %d KM/H olarak ayarlandi.", limit);
	return 1;
}
CMD:setactorvw(playerid, params[])
{
	new acid, vw;
	if (PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
	if (sscanf(params, "ii", acid, vw)) return KullanimMesaji(playerid, "/setactorvw [Actor ID] [Vw]");
	if (!IsValidActor(acid)) return HataMesajGonder(playerid, "Geçersiz ID girdiniz.");
	SetActorVirtualWorld(acid, vw);
	return 1;
}
CMD:payday(playerid)
{
    if (PlayerData[playerid][pAdmin] < 3) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
    foreach (new i: Player)
    {
        if (PlayerData[i][pMaasSure] < 3600 && PlayerData[i][pHapisSure] < 2) PlayerData[i][pMaasSure] = 3599;
    }
    AdminMessage(COLOR_LIGHTRED, "AdmCmd: %s %s, payday verdi.", GetAdminRank(playerid), PlayerData[playerid][pAdminName]);
	return 1;
}
CMD:givedrug(playerid, params[])
{
	new id, miktar;
    if (PlayerData[playerid][pAdmin] < 4 && PlayerData[playerid][pAdmins] < 0) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");
    if (sscanf(params, "ui", id, miktar)) return KullanimMesaji(playerid, "/givedrug [ID/Isim] [Miktar]");
    if (!OyundaDegil(id)) return HataMesajGonder(playerid, "Oyuncu oyunda degil.");
    PlayerDrugData[id][Drugs] += miktar;
    MesajGonder(playerid, "%s adli kisiye %d miktar uyusturucu verdiniz.", ReturnName(id, 0), miktar);
	return 1;
}
// -----------------------------------------------------------------------------
// ----------------------------------- FUNCTIONS -------------------------------
stock ViewFactions(playerid)
{
	for (new i; i<MAX_BIRLIK; i++) if (Birlikler[i][birlikExists])
	{
	    Birlik_Kaydet(i);
	}

	new Cache:Radless = mysql_query(g_SQL, "SELECT * FROM `birlikler` ORDER BY `BirlikUyeSayisi` DESC LIMIT 10");
	new rows;
	cache_get_row_count(rows);
	if (rows)
	{
	    new str[1000], string[124], count, birlikname[32], tip, tipyazi[15], uyesayisi;
        strcat(str, "ID\tAd\tTip\tÜye Sayisi\n");
        for (new i; i<rows; i++)
        {
            cache_get_value_name_int(i, "bid", count);
            cache_get_value_name(i, "bisim", birlikname, 32);
            cache_get_value_name_int(i, "btip", tip);
            cache_get_value_name_int(i, "BirlikUyeSayisi", uyesayisi);
            switch (tip)
     		{
	      		case 0: tipyazi = "Belirlenmiyor";
	      		case 1: tipyazi = "Çete";
	        	case 2: tipyazi = "Mafya";
	         	case 3: tipyazi = "Yayin Ajansi";
	          	case 4: tipyazi = "Legal";
	           	default: tipyazi = "Özel Kurum";
      		}
	    	format(string, sizeof(string), "%d\t%s\t%s\t%d\n", count, birlikname, tipyazi, uyesayisi);
	    	strcat(str, string);
        }
        cache_delete(Radless);
        format(string, sizeof(string), "Birlikler (%d)", count);
        Dialog_Show(playerid, Birlikler, DIALOG_STYLE_TABLIST_HEADERS, string, str, "Kapat", "");
	}
	else
	{
		cache_delete(Radless);
		HataMesajGonder(playerid, "Hiç birlik yok.");
	}

	return 1;
}

stock SetPlayerToFacePlayer(playerid, targetid)
{
    new
        Float:x[2],
        Float:y[2],
        Float:z[2],
        Float:angle;

    GetPlayerPos(targetid, x[0], y[0], z[0]);
    GetPlayerPos(playerid, x[1], y[1], z[1]);

    angle = (180.0 - atan2(x[1] - x[0], y[1] - y[0]));
    SetPlayerFacingAngle(playerid, angle + (5.0 * -1));
}

stock ShowStats(playerid, id)
{
	if (!OyundaDegil(id)) return 1;
	new yseviye[40] = "Üye";
	new vip[20] = "Yok";
	new birlik[34] = "Yok";
	new rutbe[30] = "-";
	new partner[24] = "-";
	if (PlayerData[id][pAdmin] > 0)
	{
	    switch (PlayerData[id][pAdmin])
		{
  			case 1: yseviye = "{cc0000}Game Admin I{b9d3ee}";
	    	case 2: yseviye = "{cc0000}Game Admin II{b9d3ee}";
		    case 3: yseviye = "{cc0000}Game Admin III{b9d3ee}";
		    case 4: yseviye = "{cc0000}Lead Admin{b9d3ee}";
		    case 5: yseviye = "{cc0000}Lead Admin+{b9d3ee}";
		}
	}
	if (PlayerData[id][pHelper] > 0) format(yseviye, sizeof(yseviye), "Supporter (%d){b9d3ee}", PlayerData[id][pHelper]);
	if (PlayerData[id][pForumGorevlisi] > 0) format(yseviye, sizeof(yseviye), "{33ccff}Forum Görevlisi{b9d3ee}", PlayerData[id][pForumGorevlisi]);
	if (PlayerData[id][pOyunGorevlisi] > 0) format(yseviye, sizeof(yseviye), "{33ccff}Oyun Görevlisi{b9d3ee}", PlayerData[id][pOyunGorevlisi]);
	if (PlayerData[id][pVip] > 0) format(vip, sizeof(vip), "{%s}%s", GetVIPRenk(PlayerData[id][pVip]), GetVIPName(PlayerData[id][pVip]));
	if (PlayerData[id][pFaction] != -1 && Birlikler[PlayerData[id][pFaction]][birlikExists])
	{
	    format(birlik, sizeof(birlik), "%s (%d)", Birlikler[PlayerData[id][pFaction]][birlikAd], PlayerData[id][pFaction]);
	    format(rutbe, sizeof(rutbe), "%s", Birlik_GetRutbe(id));
	}
	if (PlayerData[id][pPartner] > 0) format(partner, sizeof(partner), "%s", SQLName(PlayerData[id][pPartner], 0));
	SendClientMessageEx(playerid, COLOR_WHITE, "{F0F2A5}__________________[www.losangelesrpg.com]__________________", ReturnName(id, 0), id);
	SendClientMessageEx(playerid, COLOR_WHITE, "SQLID: [%d] Seviye: [%d] Tecrübe: [%d/%d]", PlayerData[id][pID], PlayerData[id][pLevel], PlayerData[id][pEXP],
	PlayerData[id][pLevel]*5);
	SendClientMessageEx(playerid, COLOR_WHITE , "Yönetici Seviyesi: [%s] {FFFFFF}Donator [%s{FFFFFF}] {FFFFFF}Bakiye: [%d]", yseviye, vip, PlayerData[id][pBakiye], GetPlayerVirtualWorld(id), GetPlayerInterior(id));
	SendClientMessageEx(playerid, COLOR_WHITE, "Partner: [%s] Köken: [%s] Cinsiyet: [%s] Ten Rengi: [%s] Yaþ: [%d]",partner, PlayerData[id][pDogum], (PlayerData[id][pCinsiyet] == 1) ? ("Erkek") : ("Kadýn"), (PlayerData[id][pTen] == 1) ? ("Beyaz") : ("Siyah"),
	PlayerData[id][pYas]);

	new silah_str[48];

	if(PlayerData[id][pSilahSuresi] > gettime())
	{
		new secs = PlayerData[id][pSilahSuresi] - gettime();

		new kalan_saat = floatround(secs / 3600);

		secs = secs - kalan_saat*3600;

		new kalan_dakika = floatround(secs / 60);

		secs = secs - kalan_dakika*60;

		format(silah_str, sizeof(silah_str), "%d saat, %d dakika, %d saniye", kalan_saat, kalan_dakika, secs);
	}else{
		format(silah_str, sizeof(silah_str), "Alýnabilir");
	}

 	SendClientMessageEx(playerid, COLOR_WHITE, "Kalan Silah Hakký: [%d] Silah Averajý: [%d] Kalan Silah Alma Süresi: [%s] ", PlayerData[id][pSilahHakki], SilahAveraj(id), silah_str);
	SendClientMessageEx(playerid, COLOR_WHITE, "Cüzdandaki Para: [%s] Çekilmemiþ Maaþ: [%s] Telefon: [%d] PayDay: [%d/60] Uyuþturucu: [%d gram]", FormatNumber(PlayerData[id][pCash]), FormatNumber(PlayerData[id][pMaas]),(PlayerData[id][pTelefon] == -1) ? (0) : (PlayerData[id][pTelefon]), floatround(PlayerData[id][pMaasSure]/60), PlayerDrugData[id][Drugs]);
	return 1;
}

Dialog:ServerPanel(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pAdmin] < 4) return 0;
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
		        if (sunucuKilitli)
	         	{
	          		sunucuKilitli = false;

					SendRconCommand("password 0");
	    			AdminMessage(COLOR_LIGHTRED, "[Bilgi]: {FFFFFF}%s sunucunun kilidini kaldirdi.", PlayerData[playerid][pAdminName]);
				}
	   			else Dialog_Show(playerid, LockServer, DIALOG_STYLE_INPUT, "Kilitle", "Lütfen sunucuya koymak istediginiz sifreyi girin:", "Kilitle", "Geri");
   			}
   			case 1:
   			{
   			    Dialog_Show(playerid, SetHostname, DIALOG_STYLE_INPUT, "Hostname Degistir", "Lütfen hostname girin:", "Tamam", "<< Geri");
   			}
   			case 2:
   			{
   			    Dialog_Show(playerid, ExecuteQuery, DIALOG_STYLE_INPUT, "Sorgu Çalistir", "Lütfen çalistirmak istediginiz sorguyu girin:", "Çalistir", "Geri");
   			}
   			case 3:
   			{
   			    if (GetServerBilgi("bakimModu") == 1)
   			    {
   			        SetServerBilgi("bakimModu", 0);
   			        SendClientMessageToAllEx(COLOR_LIGHTRED, "[Bilgi]: {FFFFFF}%s adli yetkili tarafindan bakim modu kapatýldý.", PlayerData[playerid][pAdminName]);
   			    }
   			    else
   			    {
   			        Dialog_Show(playerid, BakimSifre, DIALOG_STYLE_INPUT, "Bakim Modu", "Sunucuyu bakima almak için sifre belirlemelisiniz:", "Bakima Al", "Kapat");
   			    }
   			}
   			case 4:
   			{
   			    if (GetServerBilgi("basvurudurum") == 1)
   			    {
   			        SetServerBilgi("basvurudurum", 0);
   			        MesajGonder(playerid, "Karakter basvurulari kapatýldý.");
   			    }
   			    else
   			    {
   			        SetServerBilgi("basvurudurum", 1);
   			        MesajGonder(playerid, "Karakter basvurulari açilmistir.");
   			    }
   			}
	    }
	}
	return 1;
}
Dialog:BakimSifre(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (isnull(inputtext)) return Dialog_Show(playerid, BakimSifre, DIALOG_STYLE_INPUT, "Bakým Modu", "Sunucuyu bakým moduna almak için bir þifre belirlemelisiniz:", "Bakýma Al", "Kapat");
	    SetServerBilgi("bakimModu", 1);
	    SetServerBilgiStr("bakimSifre", inputtext);
     	AdminHelperMessage(COLOR_LIGHTRED, "[Bilgi]: {FFFFFF}%s adli yetkili sunucuyu bakým moduna aldý.", PlayerData[playerid][pAdminName]);
	}
	return 1;
}
Dialog:ExecuteQuery(playerid, response, listitem, inputtext[])
{
    if (PlayerData[playerid][pAdmin] < 4)
        return 0;

    if (response)
    {
        if (isnull(inputtext))
            return Dialog_Show(playerid, ExecuteQuery, DIALOG_STYLE_INPUT, "Sorgu Çalistir", "Lütfen çalistirmak istediginiz sorguyu girin:", "Çalistir", "Geri");

        if (strfind(inputtext, "DELETE", true) != -1 || strfind(inputtext, "DROP", true) != -1)
            return Dialog_Show(playerid, ExecuteQuery, DIALOG_STYLE_INPUT, "Sorgu Çalistir", "HATA: DROP ve DELETE sorgularini çalistiramazsiniz!\nLütfen çalistirmak istediginiz sorguyu girin:", "Çalistir", "Geri");

        mysql_tquery(g_SQL, inputtext, "OnQueryExecute", "ds", playerid, inputtext);
    }
    else cmd_sunucupanel(playerid);
    return 1;
}
forward OnQueryExecute(playerid, query[]);
public OnQueryExecute(playerid, query[])
{
    new rows;

    cache_get_row_count(rows);
    if (strfind(query, "SELECT", true) != -1)
    {
        MesajGonder(playerid, "Sorgu çalistirildi, rows: %d", rows);
    }
    else
    {
        MesajGonder(playerid, "Sorgu çalistirilmistir.");
    }
    return 1;
}
Dialog:SetHostname(playerid, response, listitem, inputtext[])
{
    if (PlayerData[playerid][pAdmin] < 4)
        return 0;

    if (response)
    {
        if (isnull(inputtext))
            return Dialog_Show(playerid, SetHostname, DIALOG_STYLE_INPUT, "Hostname Degistir", "Lütfen hostname girin:", "Tamam", "<< Geri");

        static
            str[128];

        format(str, sizeof(str), "hostname %s", inputtext);

        SendRconCommand(str);
        AdminMessage(COLOR_LIGHTRED, "[Bilgi]: {FFFFFF}%s sunucu adini \"%s\" olarak degistirdi.", PlayerData[playerid][pAdminName], inputtext);
    }
    else cmd_sunucupanel(playerid);
    return 1;
}
Dialog:LockServer(playerid, response, listitem, inputtext[])
{
    if (PlayerData[playerid][pAdmin] < 4)
        return 0;

    if (response)
    {
        if (isnull(inputtext) || !strcmp(inputtext, "0"))
            return Dialog_Show(playerid, LockServer, DIALOG_STYLE_INPUT, "Kilitle", "Lütfen sunucuya koymak istediginiz sifreyi girin:", "Kilitle", "Geri");

        if (strlen(inputtext) > 32)
            return Dialog_Show(playerid, LockServer, DIALOG_STYLE_INPUT, "Kilitle", "Lütfen sunucuya koymak istediginiz sifreyi girin:", "Kilitle", "Geri");

        static
            str[48];

        format(str, sizeof(str), "password %s", inputtext);
        sunucuKilitli = true;

        SendRconCommand(str);
        AdminMessage(COLOR_LIGHTRED, "[Bilgi]: {FFFFFF}%s tarafindan sunucu kilitlendi.", PlayerData[playerid][pAdminName]);
    }
    else cmd_sunucupanel(playerid);
    return 1;
}
stock FlipVehicle(vehicleid)
{
    new
        Float:fAngle;

    GetVehicleZAngle(vehicleid, fAngle);

    SetVehicleZAngle(vehicleid, fAngle);
    SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);
    return 1;
}
stock SicilKontrol(playerid, id)
{
    new
        string[128];

    format(string, sizeof(string), "SELECT * FROM `oocsicil` WHERE `ID` = '%d'", PlayerData[id][pID]);
    mysql_tquery(g_SQL, string, "OnSicilView", "dd", playerid, id);
    return 1;
}
forward OnSicilView(playerid, id);
public OnSicilView(playerid, id)
{
	new rows;
	cache_get_row_count(rows);
	if (!rows) return HataMesajGonder(playerid, "Bu oyuncunun hiç OOC sicil kaydi yok.");
	new str[1000], uygulayan[24], tur, turstring[15], sebep[50], tarih[30];
	strcat(str, "Uygulayan\tTür\tSebep\tTarih\n");
	for (new i; i<rows; i++)
	{
	    cache_get_value_name(i, "Uygulayan", uygulayan, 24);
	    cache_get_value_name_int(i, "Tur", tur);
	    cache_get_value_name(i, "Sebep", sebep, 50);
	    cache_get_value_name(i, "Tarih", tarih, 30);
	    switch (tur)
	    {
	        case 1: turstring = "Kick";
	        case 2: turstring = "Ban";
	        case 3: turstring = "Hapis";
	        case 4: turstring = "Client Ban";
	        default: turstring = "Bilinmiyor";
	    }
	    format(str, sizeof(str), "%s%s\t%s\t%s\t%s\n", str, uygulayan, turstring, sebep, tarih);
	}
	new baslik[50];
	format(baslik, sizeof(baslik), "OOC Sicil Kayitlari (Toplam %d)", rows);
	Dialog_Show(playerid, Banli, DIALOG_STYLE_TABLIST_HEADERS, baslik, str, "Kapat", "");
	return 1;
}
Dialog:nrn(playerid, response, listitem, inputtext[]) {
    if (response)
    {
        if (isnull(inputtext)) return Dialog_Show(playerid, nrn, DIALOG_STYLE_INPUT, "isim Degistirme Talebi", "Lütfen bos birakmayin!\nLütfen yeni isim girin.\n - Ad_Soyad tarzinda olmali.\n - Yabanci ad soyad olmali.\n - Ünlü adi olmamali.", "Degistir", "Iptal");
	    if (strlen(inputtext) <= 3)
	    {
	        HataMesajGonder(playerid, "Çok kisa bir ad girdiniz.");
	        return Dialog_Show(playerid, nrn, DIALOG_STYLE_INPUT, "isim Degistirme Talebi", "Çok kisa bir ad girdiniz!\nLütfen yeni isim girin.\n - Ad_Soyad tarzinda olmali.\n - Yabanci ad soyad olmali.\n - Ünlü adi olmamali.", "Degistir", "Iptal");
	    }
	    if (!IsValidRoleplayName(inputtext))
	    {
	        HataMesajGonder(playerid, "isminiz Ad_Soyad formatinda olmalidir. (Örnek: Danny_Ruswell)");
	        return Dialog_Show(playerid, nrn, DIALOG_STYLE_INPUT, "isim Degistirme Talebi", "isminiz Ad_Soyad formatinda olmalidir.\nLütfen yeni isim girin.\n - Ad_Soyad tarzinda olmali.\n - Yabanci ad soyad olmali.\n - Ünlü adi olmamali.", "Degistir", "Iptal");
	    }
	    if (SoyadKilitlimi(GetPlayerLastName(playerid, inputtext, 0)))
	    {
	        HataMesajGonder(playerid, "Yazdiginiz soyad kilitlenmis.");
	        return Dialog_Show(playerid, nrn, DIALOG_STYLE_INPUT, "isim Degistirme Talebi", "Bu soyadi kullanamazsiniz, kilitlenmis!\nLütfen yeni isim girin.\n - Ad_Soyad tarzinda olmali.\n - Yabanci ad soyad olmali.\n - Ünlü adi olmamali.", "Degistir", "Iptal");
	    }
	    if (!IsimKontrol(inputtext))
	    {
	        HataMesajGonder(playerid, "Bu isim baskasi tarafindan kullanilmaktadir.");
	        return Dialog_Show(playerid, nrn, DIALOG_STYLE_INPUT, "isim Degistirme Talebi", "Bu isim kullaniliyor.\nLütfen yeni isim girin.\n - Ad_Soyad tarzinda olmali.\n - Yabanci ad soyad olmali.\n - Ünlü adi olmamali.", "Degistir", "Iptal");
	    }
	    format(PlayerData[playerid][pNameChange], 24, inputtext);
	    AdminMessage(COLOR_GREEN, "[Bilgi]: {FFFFFF}%s (%d) isim degistirme talep ediyor, Yeni isim: %s (\"/an\" ya da \"/dn\").", Player_GetName(playerid),playerid, inputtext);
    	MesajGonder(playerid, "isim degistirme talebiniz yetkililere iletildi, lütfen bekleyiniz.");
    }
    else Dialog_Show(playerid, nrn, DIALOG_STYLE_INPUT, "isim Degistirme Talebi", "Lütfen bos birakmayin!\nLütfen yeni isim girin.\n - Ad_Soyad tarzinda olmali.\n - Yabanci ad soyad olmali.\n - Ünlü adi olmamali.", "Degistir", "Iptal");
    return 1;
}
Dialog:AEsyaVer(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = GetPVarInt(playerid, "oyuncuID");
	    if (!OyundaDegil(id)) return HataMesajGonder(playerid, "Oyuncu çikmis.");
	    PlayerData[id][pEsyalar][listitem]++;
	    MesajGonder(playerid, "%s adli kisiye %s adli esyayi verdiniz.", ReturnName(id, 0), inputtext);
	}
	return 1;
}

stock TalepListele(playerid)
{
	new str[3000], string[3000], count, ilgilenen[32];
	strcat(str, "ID\tÝçerik\tGönderen\tIlgilenen\n");

	for (new i; i<MAX_TALEP; i++) if (Talep[i][tExists] == true && IsPlayerConnected(Talep[i][tGonderen]))
	{
	    if (Talep[i][tIlgilenen] == -1) ilgilenen = " - ";
	    else format(ilgilenen, sizeof(ilgilenen), PlayerData[Talep[i][tIlgilenen]][pAdminName]);
	    count++;
	    format(string, sizeof(string), "{FFFFFF}%d\t{FFFFFF}%.24s\t{FFFFFF}%s (%d)\t{FFFFFF}%s\n", i, Talep[i][tIcerik], Player_GetName(Talep[i][tGonderen]), Talep[i][tGonderen], ilgilenen);
	    strcat(str, string);
	}

	if (!count) return Dialog_Show(playerid, TalepYok, DIALOG_STYLE_MSGBOX, "Talepler", "{FFFFFF}Hiç bekleyen rapor talebiniz yok.", "Yenile", "Kapat");
	format(string, sizeof(string), "Talepler");
	Dialog_Show(playerid, DestekTalepleri, DIALOG_STYLE_TABLIST_HEADERS, string, str, "Seç", "Kapat");
	return 1;
}

stock TalepIlgilen(playerid, id)
{
	if (PlayerData[playerid][pAdmin] > 0 || PlayerData[playerid][pHelper] > 0 || PlayerData[playerid][pForumGorevlisi] > 0 || PlayerData[playerid][pOyunGorevlisi] > 0)
	{
	    if (Talep[id][tExists] == false || (Talep[id][tIlgilenen] != -1 && Talep[id][tIlgilenen] != playerid)) return HataMesajGonder(playerid, "Rapor talebi silinmiþ veya baþkasý ilgileniyor...");

		new str[100];

		Talep[id][tIlgilenen] = playerid;
	    SetPVarInt(playerid, "TalepID", id);

		format(str, sizeof(str), "Talep #%d: %s (ID: %d)", id, Player_GetName(Talep[id][tGonderen]), Talep[id][tGonderen]);

		new string[128], anastring[400];

		if (strlen(Talep[id][tIcerik]) > 40)
			format(anastring, sizeof(anastring), "{FFFFFF}%.40s\n \n{FFFFFF}%s\n \n{FFFFFF}» {FFFFFF}Cevapla\n{FFFFFF}» {FFFFFF}Reddet\n{FFFFFF}» Foruma Yönlendir", Talep[id][tIcerik], Talep[id][tIcerik][40]);
		else
		    format(anastring, sizeof(anastring), "{FFFFFF}%s\n \n{FFFFFF}%s\n \n{FFFFFF}» {FFFFFF}Cevapla\n{FFFFFF}» {FFFFFF}Reddet\n{FFFFFF}» Foruma Yönlendir", Talep[id][tIcerik]);

		format(string, sizeof(string), "\n{FFFFFF}» Ýncelemeye Al\n{FFFFFF}» Ýncelendi ve Reddedildi");

		if(PlayerData[playerid][pAdmin] > 0)
			strcat(anastring, string);

	    Dialog_Show(playerid, TalepIncele, DIALOG_STYLE_LIST, str, anastring, "Seç", "Geri");
	}
	return 1;
}

Dialog:TalepIncele(playerid, response, listitem, inputtext[])
{
	new id = GetPVarInt(playerid, "TalepID");
	if (!response)
	{
		Talep[id][tIlgilenen] = -1;
		DeletePVar(playerid, "TalepID");
		return TalepListele(playerid);
	}
	else
	{
	    if (Talep[id][tExists] == false || Talep[id][tIlgilenen] != playerid) return HataMesajGonder(playerid, "Bu rapor talebi silindi veya baþkasý ilgileniyor.");
	    if (strfind(inputtext, "Cevapla", true) != -1)
	    {
	        Dialog_Show(playerid, TalepCevapla, DIALOG_STYLE_INPUT, "Talep Cevapla", "%s\n \n \nLütfen bu rapor talebine vermek istediðiniz cevabý yazýn:", "Cevapla", "Geri", Talep[id][tIcerik]);
	        return 1;
	    }
	    new rank[20];
    	if (PlayerData[playerid][pHelper] > 0) format(rank, sizeof(rank), "(Lv. %d) Supporter", PlayerData[playerid][pHelper]);
    	else format(rank, sizeof(rank), "%s", GetAdminRank(playerid));
	    if (strfind(inputtext, "Reddet", true) != -1)
	    {
	        PlayerData[playerid][pTalepSayi]++;
	        SunucuMesaji(Talep[id][tGonderen], "%s %s tarafýndan rapor talebiniz silindi.", rank, PlayerData[playerid][pAdminName]);
	        AdminHelperMessage(COLOR_LIGHTRED, "AdmCmd: %s %s, %s adlý oyuncunun talebini sildi.", rank, PlayerData[playerid][pAdminName], Player_GetName(Talep[id][tGonderen]));
	        Talep[id][tExists] = false;
	    	Talep[id][tGonderen] = -1;
	    	Talep[id][tIlgilenen] = -1;
	    	format(Talep[id][tIcerik], 128, "");
	    	return 1;
	    }
	    if (strfind(inputtext, "Foruma Yönlendir", true) != -1)
	    {
	        PlayerData[playerid][pTalepSayi]++;
	        PlayerPlaySound(Talep[id][tGonderen], 1085, 0.0, 0.0, 0.0);
	        SendClientMessageEx(Talep[id][tGonderen], COLOR_YELLOW, "[CEVAP] %s %s: Merhabalar, rapor talebinizin cevabýný forum sitemizden bulabilirsiniz. (www.losangelesrpg.com)", rank, PlayerData[playerid][pAdminName]);
	        AdminHelperMessage(COLOR_LIGHTRED, "AdmCmd: %s %s, %s adlý kiþinin rapor talebini foruma yönlendirdi.", rank, PlayerData[playerid][pAdminName], Player_GetName(Talep[id][tGonderen]));
	        Talep[id][tExists] = false;
	    	Talep[id][tGonderen] = -1;
	    	Talep[id][tIlgilenen] = -1;
	    	format(Talep[id][tIcerik], 128, "");
	    	return 1;
	    }
	    if (strfind(inputtext, "Ýncelemeye Al", true) != -1)
	    {
	        if(PlayerData[playerid][pAdmin] < 1 || PlayerData[playerid][pOyunGorevlisi] > 0) return HataMesajGonder(playerid, "Bunu kullanamazsýnýz.");
	        PlayerData[playerid][pTalepSayi]++;
	        PlayerPlaySound(Talep[id][tGonderen], 1085, 0.0, 0.0, 0.0);
	        SendClientMessageEx(Talep[id][tGonderen], COLOR_YELLOW, "[CEVAP] %s %s: Merhabalar, rapor talebinizi þu anda incelemekteyim. Lütfen sabýrlý ve anlayýþlý olun.", rank, PlayerData[playerid][pAdminName]);
	        AdminHelperMessage(COLOR_LIGHTRED, "AdmCmd: %s %s, %s adlý kiþinin rapor talebini incelemeye aldý.", rank, PlayerData[playerid][pAdminName], Player_GetName(Talep[id][tGonderen]));
	        Talep[id][tExists] = false;
	    	Talep[id][tGonderen] = -1;
	    	Talep[id][tIlgilenen] = -1;
	    	format(Talep[id][tIcerik], 128, "");
	    	return 1;
	    }
	    if (strfind(inputtext, "Ýncelendi ve Reddedildi", true) != -1)
	    {
	        if(PlayerData[playerid][pAdmin] < 1 || PlayerData[playerid][pOyunGorevlisi] > 0) return HataMesajGonder(playerid, "Bunu kullanamazsýnýz.");
	        PlayerData[playerid][pTalepSayi]++;
	        PlayerPlaySound(Talep[id][tGonderen], 1085, 0.0, 0.0, 0.0);
	        SendClientMessageEx(Talep[id][tGonderen], COLOR_YELLOW, "[CEVAP] %s %s: Merhabalar, rapor talebiniz incelendi ve reddedildi.", rank, PlayerData[playerid][pAdminName]);
	        AdminHelperMessage(COLOR_LIGHTRED, "AdmCmd: %s %s, %s adlý kiþinin rapor talebini inceledi ve reddetti.", rank, PlayerData[playerid][pAdminName], Player_GetName(Talep[id][tGonderen]));
	        Talep[id][tExists] = false;
	    	Talep[id][tGonderen] = -1;
	    	Talep[id][tIlgilenen] = -1;
	    	format(Talep[id][tIcerik], 128, "");
	    	return 1;
	    }
	    TalepIlgilen(playerid, id);
	}
	return 1;
}

Dialog:TalepCevapla(playerid, response, listitem, inputtext[])
{
	new id = GetPVarInt(playerid, "TalepID");
	if (!response)
	{
		TalepIlgilen(playerid, id);
	}
	else
	{
	    if (Talep[id][tExists] == false) return HataMesajGonder(playerid, "Rapor talebi silinmiþ.");
	    if (isnull(inputtext)) return Dialog_Show(playerid, TalepCevapla, DIALOG_STYLE_INPUT, "Talep Cevapla", "%s\n\nLütfen bu rapor talebine vermek istediðiniz cevabý yazýn:", "Cevapla", "Geri", Talep[id][tIcerik]);
	    new rank[20];
	    if (PlayerData[playerid][pHelper] > 0) format(rank, sizeof(rank), "(Lv. %d) Supporter", PlayerData[playerid][pHelper]);
	    else format(rank, sizeof(rank), "%s", GetAdminRank(playerid));
	    PlayerData[playerid][pTalepSayi]++;
	    PlayerPlaySound(Talep[id][tGonderen], 1085, 0.0, 0.0, 0.0);
	    if (strlen(inputtext) > 64)
	    {
	        SendClientMessageEx(Talep[id][tGonderen], COLOR_YELLOW, "[CEVAP] %s %s: %.64s", rank, PlayerData[playerid][pAdminName], inputtext);
	        SendClientMessageEx(Talep[id][tGonderen], COLOR_YELLOW, "...%s", inputtext[64]);
	    }
	    else
	    {
	        SendClientMessageEx(Talep[id][tGonderen], COLOR_YELLOW, "[CEVAP] %s %s: %s", rank, PlayerData[playerid][pAdminName], inputtext);
	    }
	    AdminHelperMessage(COLOR_LIGHTRED, "AdmCmd: %s %s, %s(%d) adlý kiþinin rapor talebini cevapladý.", rank, PlayerData[playerid][pAdminName], Player_GetName(Talep[id][tGonderen]), Talep[id][tGonderen]);
	    Talep[id][tExists] = false;
	    Talep[id][tGonderen] = -1;
	    Talep[id][tIlgilenen] = -1;
	    format(Talep[id][tIcerik], 128, "");
	}
	return 1;
}

Dialog:TalepYok(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (PlayerData[playerid][pAdmin] > 0 || PlayerData[playerid][pHelper] > 0 || PlayerData[playerid][pForumGorevlisi] > 0 || PlayerData[playerid][pOyunGorevlisi] > 0) return TalepListele(playerid);
	}
	return 1;
}

Dialog:DestekTalepleri(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = strval(inputtext);
	    if (Talep[id][tExists] == false || !IsPlayerConnected(Talep[id][tGonderen]))
	    {
	        HataMesajGonder(playerid, "Bu rapor talebi silindi veya sonuçlandý.");
	        return TalepListele(playerid);
	    }
	    if (Talep[id][tIlgilenen] != -1 && IsPlayerConnected(Talep[id][tIlgilenen]))
	    {
	        HataMesajGonder(playerid, "Bu talep ile baþkasý ilgilenmekte.");
	        return TalepListele(playerid);
	    }
	    TalepIlgilen(playerid, id);
	}
	return 1;
}

stock Talep_GetCount(playerid)
{
	new count;
	for (new i; i<MAX_TALEP; i++) if (Talep[i][tExists] == true && Talep[i][tGonderen] == playerid)
	{
	    count++;
	}
	return count;
}
stock Talep_Add(playerid, icerik[])
{
	for (new i; i<MAX_TALEP; i++) if (Talep[i][tExists] == false)
	{
	    Talep[i][tExists] = true;
	    format(Talep[i][tIcerik], 128, icerik);
	    Talep[i][tGonderen] = playerid;
	    Talep[i][tIlgilenen] = -1;
	    return i;
	}
	return -1;
}

Dialog:Graffiti(playerid, response, listitem, inputtext[])
{
	if (!response) return PlayerData[playerid][pGraffiti] = 0;
	if (response)
	{
	    if (isnull(inputtext)) return Dialog_Show(playerid, Graffiti, DIALOG_STYLE_INPUT, "Graffiti ~ Yazi", "{FFFFFF}Lütfen graffiti yazisini girin.\n{FFFFFF}Yazi içerisinde #renk ile renklendirme yapabilirsiniz. (#kirmizi, #mavi vs.)\n{ff0000}Not: {FFFFFF}Yazi 64 karakteri geçemez.", "Devam", "Kapat");
	    if (strlen(inputtext) < 3 || strlen(inputtext) > 64)
	    {
	        HataMesajGonder(playerid, "Yazi 3 ile 64 karakter arasinda olmalidir.");
	        return Dialog_Show(playerid, Graffiti, DIALOG_STYLE_INPUT, "Graffiti ~ Yazi", "{FFFFFF}Lütfen graffiti yazisini girin.\n{FFFFFF}Yazi içerisinde #renk ile renklendirme yapabilirsiniz. (#kirmizi, #mavi vs.)\n{ff0000}Not: {FFFFFF}Yazi 64 karakteri geçemez.", "Devam", "Kapat");
	    }
	    new tmp[300];

		set(tmp, inputtext);
	    tmp = strreplace("#kirmizi", "{f9071f}", tmp);
	    tmp = strreplace("#mavi", "{0000FF}", tmp);
	    tmp = strreplace("#sari", "{FFFF00}", tmp);
	    tmp = strreplace("#yesil", "{00FF00}", tmp);
	    tmp = strreplace("#beyaz", "{FFFFFF}", tmp);
	    tmp = strreplace("#turuncu", "{FF8000}", tmp);

	    format(PlayerData[playerid][pGraffitiYazi], 64, tmp);
	    Dialog_Show(playerid, GraffitiFont, DIALOG_STYLE_INPUT, "Graffiti Fontu", "Lütfen font yazin:", "Tamam", "Iptal");
	}
	return 1;
}

Dialog:GraffitiFont(playerid, response, listitem, inputtext[])
{
	if (!response) return Dialog_Show(playerid, Graffiti, DIALOG_STYLE_INPUT, "Graffiti ~ Yazi", "{FFFFFF}Lütfen graffiti yazisini girin.\n{FFFFFF}Yazi içerisinde #renk ile renklendirme yapabilirsiniz. (#kirmizi, #mavi vs.)\n{ff0000}Not: {FFFFFF}Yazi 64 karakteri geçemez.", "Devam", "Kapat");
	if (response)
	{
	    new Float:pos[3];
	    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	    new id = Graffiti_Create(pos[0], pos[1], pos[2]);
	    if (id == -1) return HataMesajGonder(playerid, "Graffiti olusturulamadi.");
	    format(GraffitiData[id][graffitiText], 64, PlayerData[playerid][pGraffitiYazi]);
	    format(GraffitiData[id][graffitiFont], 64, inputtext);

	    Graffiti_Refresh(id);
	    Graffiti_Save(id);
	    SetPVarInt(playerid, "GraffitiEdit", id);
	    EditDynamicObject(playerid, GraffitiData[id][graffitiObject]);

	}
	return 1;
}

forward BanInfo(playerid, bilgi[]);
public BanInfo(playerid, bilgi[])
{
	new rows;
	cache_get_row_count(rows);
	if (!rows) return HataMesajGonder(playerid, "Bu karakter adi IP banli degil.");
	new ad[24], ip[30], banlanmatarihi[30], sebep[50], banlayan[24], sure;
	cache_get_value_name(0, "Ad", ad, 24);
	cache_get_value_name(0, "IP", ip, 30);
	cache_get_value_name(0, "BanlanmaTarihi", banlanmatarihi, 30);
	cache_get_value_name(0, "Sebep", sebep, 50);
	cache_get_value_name(0, "Banlayan", banlayan, 24);
	cache_get_value_name_int(0, "Sure", sure);
	Dialog_Show(playerid, Banli, DIALOG_STYLE_MSGBOX, "Ban Bilgileri", "Karakter Adi: %s\nIP: %s\nBanlanma Tarihi: %s\nSebep: %s\nBanlayan: %s\nAçilacagi Tarih: %s", "Kapat", "", ad, ip, banlanmatarihi, sebep, banlayan, (sure < 1) ? ("Yok") : (convertDatex(sure)));
	return 1;
}
forward UnBan(playerid, ad[]);
public UnBan(playerid, ad[])
{
	new rows;
	cache_get_row_count(rows);
	if (!rows) return HataMesajGonder(playerid, "Bu karakter adi IP banli degil.");
	RemoveBan(ad, ad);
	if (strfind(ad, "_", true) != -1)
	{
	    MesajGonder(playerid, "%s adli oyuncunun bani açilmistir.", ad);
	    AdminMessage(COLOR_LIGHTRED, "AdmCmd: %s bani %s adli yetkili tarafindan açýldý.", ad, PlayerData[playerid][pAdminName]);
	}
	else
	{
	     MesajGonder(playerid, "IP: %s bani açýldý.", ad);
	    AdminMessage(COLOR_LIGHTRED, "AdmCmd: %s bani %s adli yetkili tarafindan açýldý.", ad, PlayerData[playerid][pAdminName]);
	}
	return 1;
}
forward OnCBanAccount(playerid, isim[], sebep[50]);
public OnCBanAccount(playerid, isim[], sebep[50])
{
	new rows;
	cache_get_row_count(rows);
	if (rows)
	{
	    new admin, ip[30], serial[75];
	    cache_get_value_name_int(0, "AdminLevel", admin);
		cache_get_value_name(0, "LastIP", ip, 30);
		cache_get_value_name(0, "hddserial", serial, 75);
		if (admin > PlayerData[playerid][pAdmin]) return HataMesajGonder(playerid, "Bu oyuncu sizden yüksek yetkiye sahiptir.");
		AddBan(ip, isim, serial, PlayerData[playerid][pAdminName], 0, sebep);
		MesajGonder(playerid, "%s (IP: %s, Serial: %s) adli oyuncuyu %s sebebiyle client banladiniz.", isim, ip, serial, sebep);
		AdminMessage(COLOR_LIGHTRED, "AdmCmd: %s adli yetkili %s (IP: %s) adli oyuncuyu offline olarak %s sebebiyle client yasakladi.", PlayerData[playerid][pAdminName], isim, ip, sebep);
	}
	return 1;
}
forward OnPanelBanAccount(uygulayan[], isim[], sure, sebep[50]);
public OnPanelBanAccount(uygulayan[], isim[], sure, sebep[50])
{
	new rows;
	cache_get_row_count(rows);
	if (rows)
	{
	    new ip[30], sqlid;
	    cache_get_value_name_int(0, "ID", sqlid);
	    cache_get_value_name(0, "LastIP", ip, 30);
	    AddBan(ip, isim, "", uygulayan, (sure < 1) ? (0) : (gettime()+sure*86400), sebep);
	    foreach (new i:Player) if (PlayerData[i][pAyarlar][3] == 0)
    	{
    		if (sure == 0) SendClientMessageEx(i, COLOR_LIGHTRED, "(%s) - (( %s adli oyuncu %s tarafindan %s sebebiyle panelden sinirsiz yasaklandi. ))", ReturnDate(), isim,  uygulayan, sebep);
    		else SendClientMessageEx(i, COLOR_LIGHTRED, "(%s) - (( %s adli oyuncu %s tarafindan %s sebebiyle panelden %d gün yasaklandi. ))", ReturnDate(), isim,  uygulayan, sebep, sure);
    	}
    	new query[300];
	    format(query, sizeof(query), "INSERT INTO `oocsicil` (`ID`, `Tarih`, `Sebep`, `Uygulayan`, `Tur`) VALUES('%d', '%s', '%s', '%s', '2')",  sqlid, ReturnDate(), sebep, uygulayan);
    	mysql_query(g_SQL, query, false);
	}
	return 1;
}
forward OnBanAccount(playerid, isim[], sure, sebep[50]);
public OnBanAccount(playerid, isim[], sure, sebep[50])
{
	new rows;
	cache_get_row_count(rows);
	if (rows)
	{
	    new admin, ip[30], sqlid;
	    cache_get_value_name_int(0, "ID", sqlid);
	    cache_get_value_name_int(0, "AdminLevel", admin);
		cache_get_value_name(0, "LastIP", ip, 30);
	    if (admin > PlayerData[playerid][pAdmin]) return HataMesajGonder(playerid, "Bu oyuncu sizden yüksek yetkiye sahiptir.");
	    AddBan(ip, isim, "", PlayerData[playerid][pAdminName], (sure < 1) ? (0) : (gettime()+sure*86400), sebep);
	    new suree[12];
	    if (sure == 0) suree = "Sinirsiz";
	    else format(suree, sizeof(suree), "%d gün", sure);
	    MesajGonder(playerid, "%s (IP: %s) adli oyuncuyu %s sebebiyle %s banladiniz.", isim, ip, sebep, suree);

	    AdminMessage(COLOR_LIGHTRED, "AdmCmd: %s adli yetkili %s (IP: %s) adli oyuncuyu offline olarak %s sebebiyle %s yasakladi.", PlayerData[playerid][pAdminName], isim, ip, sebep, suree);
	    new query[300];
	    format(query, sizeof(query), "INSERT INTO `oocsicil` (`ID`, `Tarih`, `Sebep`, `Uygulayan`, `Tur`) VALUES('%d', '%s', '%s', '%s', '2')",  sqlid, ReturnDate(), sebep, PlayerData[playerid][pAdminName]);
    	mysql_query(g_SQL, query, false);
	}
	else HataMesajGonder(playerid, "Karakter adi bulunamadi.");
	return 1;
}
forward NameChanges(playerid, targetid);
public NameChanges(playerid, targetid)
{
	new rows;
	cache_get_row_count(rows);
	if (!rows) return HataMesajGonder(playerid, "Bu oyuncuya ait isim degisikligi bulunamadi.");
	new eskiad[24], yeniad[24], tarih[25];
	for (new i; i<rows; i++)
	{
	    cache_get_value_name(i, "EskiAd", eskiad, 24);
	    cache_get_value_name(i, "YeniAd", yeniad, 24);
	    cache_get_value_name(i, "Tarih", tarih, 25);
	    SendClientMessageEx(playerid, 0xFFFF00AA, "(%s) Eski Ad: %s - Yeni Ad: %s", tarih, eskiad, yeniad);
	}
	return 1;
}
forward BanKontrol(playerid, pip[]);
public BanKontrol(playerid, pip[])
{
	new rows;
	cache_get_row_count(rows);
	if (rows)
	{
	    new ad[24], bantarih[30], sebep[50], sure, banlayan[24], hddserial[75];
	    cache_get_value_name(0, "Ad", ad, 24);
	    cache_get_value_name(0, "BanlanmaTarihi", bantarih, 30);
	    cache_get_value_name(0, "Sebep", sebep, 50);
	    cache_get_value_name(0, "Banlayan", banlayan, 24);
	    cache_get_value_name(0, "hddserial", hddserial, 75);
	    cache_get_value_name_int(0, "Sure", sure);
	    if (sure != 0)
	    {
	        if (gettime() > sure)
	        {
	            RemoveBan(Player_GetName(playerid), pip);
	            return 1;
	        }
	        else
	        {
	            Dialog_Show(playerid, Banli, DIALOG_STYLE_MSGBOX, "Yasaklisiniz!", "Hesabiniz bu sunucudan geçici olarak yasaklandi.\n\nHesap: %s\nSebep: %s\nBanlanma Tarihi: %s\nBanlayan Admin: %s\nAçilacagi Tarih: %s\n\nF8 tusuna basin ve bir ekran görüntüsü alin, bu ekran görüntüsü ile forumumuzdan yasaklanmaniza itiraz edebilirsiniz.", "Kapat", "", ad, sebep, bantarih, banlayan, convertDatex(sure));
	            Kick(playerid);
	        }
	    }
	    if (strlen(hddserial) >= 5)
	    {
	        Dialog_Show(playerid, Banli, DIALOG_STYLE_MSGBOX, "Yasaklýsýnýz!", "Hesabiniz client olarak kalýcý yasaklandi.\n\nHesap: %s\nSerial: %s\nSebep: %s\nBanlanma Tarihi: %s\nBanlayan Admin: %s\nAçilacagi Tarih: Yok\n\nF8 tusuna basin ve bir ekran görüntüsü alin, bu ekran görüntüsü ile forumumuzdan yasaklanmaniza itiraz edebilirsiniz.", "Kapat", "", ad, hddserial, sebep, bantarih, banlayan);
	        Kick(playerid);
	    }
	    else if (!strcmp(ad, "yok", true) || !ad[0])
	    {
	      	Dialog_Show(playerid, Banli, DIALOG_STYLE_MSGBOX, "Yasaklýsýnýz!", "Bu IP sunucudan kalýcý olarak yasakli.\n\nIP: %s\nBanlanma Tarihi: %s\nBanlayan Admin: %s\nSebep: %s\n\nBu ekranin fotografini çekerek forumdan hatali yasaklanma açabilirsin.", "Kapat", "", pip, bantarih, banlayan, sebep);
       		Kick(playerid);
       	}
        else
        {
        	Dialog_Show(playerid, Banli, DIALOG_STYLE_MSGBOX, "Yasaklýsýnýz!", "Bu sunucudan kalýcý olarak yasaklandiniz.\n\nHesap: %s\nBanlanma Tarihi: %s\nBanlayan Admin: %s\nSebep: %s\n\nBu ekranin fotografini çekerek forumdan hatali yasaklanma açabilirsin.", "Kapat", "", ad, bantarih, banlayan, sebep);
         	Kick(playerid);
        }
	}
	return 1;
}
stock RemoveBan(ad[], ip[])
{
	new query[150];
	format(query, sizeof(query), "DELETE FROM `bans` WHERE `Ad` = '%s' OR `IP` = '%s'", ad, ip);
	mysql_query(g_SQL, query, false);
	if (strlen(ad) > 3)
	{
	    format(query, sizeof(query), "UPDATE `oyuncular` SET `Ban` = '0' WHERE `Isim` = '%s'", ad);
	    mysql_query(g_SQL, query, false);
	}
	return 1;
}
stock AddBan(bannedip[], bannedname[], hddserial[], bannedby[], gun, sebep[])
{
	new query[600];
	format(query, sizeof(query), "INSERT INTO `bans` (`IP`, `Ad`, `hddserial`, `Banlayan`, `Sure`, `Sebep`, `BanlanmaTarihi`) VALUES ('%s', '%s', '%s', '%s', '%d', '%s', '%s')", bannedip, bannedname, hddserial, bannedby, gun, sebep, ReturnDate());
	mysql_query(g_SQL, query, false);
	if (strlen(bannedname) > 3)
	{
	    format(query, sizeof(query), "UPDATE `oyuncular` SET `Ban` = '1' WHERE `Isim` = '%s'", bannedname);
	    mysql_query(g_SQL, query, false);
	}
	return 1;
}
forward OnJailAccount(playerid, isim[], sure, sebep[50]);
public OnJailAccount(playerid, isim[], sure, sebep[50])
{
	new rows;
	cache_get_row_count(rows);
	if (rows)
	{
	    new ck, sqlid;
	    cache_get_value_name_int(0, "ID", sqlid);
	    cache_get_value_name_int(0, "CK", ck);
	    if (ck == 1) return HataMesajGonder(playerid, "Bu karakter CK edilmis.");
	    new query[800];
	    format(query, sizeof(query), "UPDATE `oyuncular` SET `HapisSure` = '%d', `HapisSebep` = '%s', `HapiseAtan` = '%s'", sure*60, sebep, PlayerData[playerid][pAdminName]);
	    for (new i; i<13; i++)
	    {
	        format(query, sizeof(query), "%s, `Silah%d` = '0', `Mermi%d` = '0'", query, i+1, i+1);
	    }
	    format(query, sizeof(query), "%s WHERE `Isim` = '%s'", query, isim);
	    mysql_query(g_SQL, query, false);
	    format(query, sizeof(query), "INSERT INTO `oocsicil` (`ID`, `Tarih`, `Sebep`, `Uygulayan`, `Tur`) VALUES('%d', '%s', '%s', '%s', '3')",  sqlid, ReturnDate(), sebep, PlayerData[playerid][pAdminName]);
   	 	mysql_tquery(g_SQL, query);
	    MesajGonder(playerid, "%s adli kisiyi %s sebebiyle %d dakika cezalandirdiniz.", isim, sebep, sure);
	    Log_Write("logs/jail_log.txt", "[%s] %s adli yetkili %s adli oyuncuyu %s sebebiyle %d dakika offline olarak hapise atti.", ReturnDate(), PlayerData[playerid][pAdminName], isim, sebep, sure);
	}
	else HataMesajGonder(playerid, "Böyle bir oyuncu yok.");
	return 1;
}

stock ResetPlayer(playerid)
{
    if (HasTrash[playerid]) Trash_ResetPlayer(playerid);
    if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER && GetVehicleModel(GetPlayerVehicleID(playerid)) == 574)
    {
        SetVehicleToRespawn(GetPlayerVehicleID(playerid));
    }
	if (PetKontrol[playerid] != -1) cmd_pet(playerid);
	foreach (new i:Petler) if (PetBilgi[i][petSahip] == PlayerData[playerid][pID] && PetBilgi[i][petDurum] == true)
	{
	    PetBilgi[i][petSaglik] = FCNPC_GetHealth(PetBilgi[i][NPCID]);
     	FCNPC_Destroy(PetBilgi[i][NPCID]);
      	PetBilgi[i][petTakip] = -1;
       	PetBilgi[i][NPCID] = -1;
        PetBilgi[i][petDurum] = false;
        DestroyDynamic3DTextLabel(PetBilgi[i][petText]);
        Pet_Kaydet(i);
	}

    if (RegenTimer[playerid] != -1)
	{
	    KillTimer(RegenTimer[playerid]);
	    RegenTimer[playerid] = -1;
	}
	foreach (new i : Player)
	{
	    if (PlayerDrugData[i][DrugsOfferedBy] == playerid)
	    {
	        PlayerDrugData[i][DrugsOfferedBy] = INVALID_PLAYER_ID;
	        ShowPlayerDialog(i, -1, DIALOG_STYLE_MSGBOX, "Title", "Content", "Button1", "Button2");
	    }
	}
	foreach (new i:Player) if (PlayerData[i][pAdmin] >= 1 && PlayerData[i][pSpecID] == playerid)
	{
	    IzlemeBitir(i);
	    GameTextForPlayer(i, "~r~Oyundan Cikti", 1000, 4);
	}
	RemoveEffects(playerid);
	Player_SaveDrugs(playerid);
    new id = CadirID(playerid);
   	if (id != -1)
   	{
   	    foreach (new i:Player) if (PlayerData[i][pCadir] == id)
        {
            SetPlayerPos(i, CadirData[id][cadirPos][0], CadirData[id][cadirPos][1], CadirData[id][cadirPos][2]);
            SetPlayerInterior(i, 0);
            SetPlayerVirtualWorld(i, 0);
            PlayerData[i][pCadir] = -1;
        }
        Cadir_Sil(playerid);
  	}
  	PlayerData[playerid][pCadir] = -1;
    KumarReset(playerid, 1);
    KumarReset(GetPVarInt(playerid, "kumar_id"), 1);

	if (BalikTimer[playerid] != -1)
	{
	    KillTimer(BalikTimer[playerid]);
	    BalikTimer[playerid] = -1;
     	RemovePlayerAttachedObject(playerid, GetPVarInt(playerid, "OltaSlot"));
 		SetPVarInt(playerid, "OltaSlot", -1);
   		ClearAnimations(playerid);
   	}
   	if (PlayerData[playerid][pDestek] > 0)
   	{
   	    PlayerData[playerid][pDestek] = 0;
   	    DestekKapat(playerid, 1);
   	}
   	if (PlayerData[playerid][pBaygin] == 1)
   	{
   	    PlayerData[playerid][pBaygin] = 0;
    	PlayerData[playerid][pBayginSure] = 0;
    	CanAyarla(playerid, 100);
    	ClearAnimations(playerid);
   	}
   	if (PlayerData[playerid][pMangalKuruldu] == true)
   	{
   	    PlayerData[playerid][pMangalKuruldu] = false;
		DestroyDynamicObject(PlayerData[playerid][pMangalObject][0]);
		DestroyDynamicObject(PlayerData[playerid][pMangalObject][1]);
		DestroyDynamic3DTextLabel(PlayerData[playerid][MangalText]);
		PlayerData[playerid][pYemekPisiriliyor] = 0;
		PlayerData[playerid][pPisirilenYemek] = 0;

   	}
   	if (PlayerData[playerid][pKampAtesi] == true)
   	{
   	    PlayerData[playerid][pKampAtesi] = false;
        DestroyDynamicObject(PlayerData[playerid][pKampAtesiObject]);
        //MesajGonder(playerid, "Kamp Atesi kaldirildi.");
  	}
   	PlayerData[playerid][yayinKonuk] = -1;
   	if (PlayerData[playerid][pAramada] != 0)
   	{
   		if (PlayerData[playerid][pAramada] == ARAMA_ARANIYOR)
   		{
   			//SunucuMesaji(PlayerData[playerid][pCallLine], "Gelen çagri reddedildi ((Oyundan çikti))");
   			DeletePVar(playerid, "Arayan");
   			DeletePVar(PlayerData[playerid][pCallLine], "Arayan");
   			PlayerData[playerid][pAramada] = 0;
   			PlayerData[PlayerData[playerid][pCallLine]][pAramada] = 0;
   			PlayerData[PlayerData[playerid][pCallLine]][pCallLine] = 0;
   			PlayerData[playerid][pCallLine] = 0;
   		}
   		else if (PlayerData[playerid][pAramada] == ARAMA_ARIYOR)
   		{
   		    DeletePVar(playerid, "Arayan");
   			DeletePVar(PlayerData[playerid][pCallLine], "Arayan");
   			PlayerData[playerid][pAramada] = 0;
   			PlayerData[PlayerData[playerid][pCallLine]][pAramada] = 0;
   			PlayerData[PlayerData[playerid][pCallLine]][pCallLine] = 0;
   			PlayerData[playerid][pCallLine] = 0;
   		}
   		else if (PlayerData[playerid][pAramada] == ARAMA_KONUSUYOR)
   		{
   			//SunucuMesaji(PlayerData[playerid][pCallLine], "Konustugunuz kisi telefonu kapatti. (( Oyundan çikti ))");
   			DeletePVar(playerid, "Arayan");
   			DeletePVar(PlayerData[playerid][pCallLine], "Arayan");
   			PlayerData[playerid][pAramada] = 0;
   			PlayerData[PlayerData[playerid][pCallLine]][pAramada] = 0;
   			PlayerData[PlayerData[playerid][pCallLine]][pCallLine] = 0;
   			PlayerData[playerid][pCallLine] = 0;
   		}
   	}
   	if (BoomboxData[playerid][boomboxPlaced])
		Boombox_Destroy(playerid);
	SetPlayerWantedLevel(playerid, 0);
	PlayerData[playerid][pAranma] = 0;
	PlayerData[playerid][pKelepce] = 0;
    PlayerData[playerid][pDragged] = 0;
	PlayerData[playerid][pDraggedBy] = INVALID_PLAYER_ID;
	KillTimer(PlayerData[playerid][pDragTimer]);
    SetPlayerCuffed(playerid, false);
    TogglePlayerControllable(playerid,true);
    SetPVarInt(playerid, "IpBaglandi", 0);
    SetPVarInt(playerid, "GozBaglandi", 0);
    TextDrawHideForPlayer(playerid, Karanlik);
    DisablePlayerCheckpoint(playerid);
    ShowPlayerDialog(playerid, -1, DIALOG_STYLE_MSGBOX, "", "", "", "");
	Fuel_ResetPlayer(playerid);
    return 1;
}
stock IzlemeBitir(playerid)
{
	TogglePlayerSpectating(playerid, false);
	PlayerData[playerid][pSpecID] = -1;
	SetWeapons(playerid);
    SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "specVw"));
    SetPlayerInterior(playerid, GetPVarInt(playerid, "specInterior"));
    SetPlayerPos(playerid, specPos[playerid][0], specPos[playerid][1], specPos[playerid][2]);
    return 1;
}

SendPlayerToPlayer(playerid, targetid)
{
    new
        Float:px,
        Float:py,
        Float:pz;

    GetPlayerPos(targetid, px, py, pz);

    if (IsPlayerInAnyVehicle(playerid))
    {
        SetVehiclePos(GetPlayerVehicleID(playerid), px, py + 2, pz);
        LinkVehicleToInteriorEx(GetPlayerVehicleID(playerid), GetPlayerInterior(targetid));
    }
    else
        SetPlayerPos(playerid, px + 1, py, pz);

    SetPlayerInterior(playerid, GetPlayerInterior(targetid));
    SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(targetid));

    PlayerData[playerid][pHouse] = PlayerData[targetid][pHouse];
    PlayerData[playerid][pIsyeri] = PlayerData[targetid][pIsyeri];
    PlayerData[playerid][pGarage] = PlayerData[targetid][pGarage];
    PlayerData[playerid][pCadir] = PlayerData[targetid][pCadir];
    return 1;
}
Dialog:TeleportInterior(playerid, response, listitem, inputtext[])
{
    if (response)
    {
        SetPlayerInterior(playerid, g_arrInteriorData[listitem][e_InteriorID]);
        SetPlayerPos(playerid, g_arrInteriorData[listitem][e_InteriorX], g_arrInteriorData[listitem][e_InteriorY], g_arrInteriorData[listitem][e_InteriorZ]);
        SetPlayerVirtualWorld(playerid, 0);
        PlayerData[playerid][pHouse] = -1;
       	PlayerData[playerid][pIsyeri] = -1;
        PlayerData[playerid][pGarage] = -1;
        PlayerData[playerid][pCadir] = -1;
    }
    return 1;
}
forward OnLoginDate(extraid, username[]);
public OnLoginDate(extraid, username[])
{
    if (!IsPlayerConnected(extraid))
        return 0;

    new rows, date[20], lastip[15];

    cache_get_row_count(rows);

    if (rows) {
        cache_get_value_name(0, "SonGiris", date, 20);
        cache_get_value_name(0, "LastIP", lastip, 15);

        MesajGonder(extraid, "%s adli kisinin son giris tarihi: %s (IP: %s).", username, date, lastip);
    }
    else {
        HataMesajGonder(extraid, "Veritabaninda böyle bir karakter yok.");
    }
    return 1;
}
stock Hood_Sil(id)
{
    if (IsValidDynamic3DTextLabel(Hood[id][hLabel])) DestroyDynamic3DTextLabel(Hood[id][hLabel]);
	if (IsValidDynamicArea(Hood[id][hZone])) DestroyDynamicArea(Hood[id][hZone]);
	if (IsValidDynamicPickup(Hood[id][hPickup])) DestroyDynamicPickup(Hood[id][hPickup]);
	if (IsValidDynamicMapIcon(Hood[id][hMapIcon])) DestroyDynamicMapIcon(Hood[id][hMapIcon]);

	Hood[id][hExists] = false;
	Hood[id][hPos][0] = Hood[id][hPos][1] = Hood[id][hPos][2] = 0.0;
	Hood[id][hBirlik] = -1;
	new query[80];
	format(query, sizeof(query), "DELETE FROM `hood` WHERE `ID` = '%d'", Hood[id][hID]);
	mysql_query(g_SQL, query, false);
	Hood[id][hID] = 0;
	return 1;
}

stock Hood_Olustur(playerid, id)
{
	for (new i; i<MAX_HOOD; i++) if (Hood[i][hExists] == false)
	{
	    Hood[i][hExists] = true;
        Hood[i][hID] = i;

        Hood[i][hBirlik] = id;

	    GetPlayerPos(playerid, Hood[i][hPos][0],  Hood[i][hPos][1],  Hood[i][hPos][2]);

	    new query[256];
	    mysql_format(g_SQL, query, sizeof query, "INSERT INTO `hood` (`ID`, `hoodX`, `hoodY`, `hoodZ`, `Birlik`) VALUES ('%d', '%.2f', '%.2f', '%.2f', '%d')", Hood[i][hID], Hood[i][hPos][0],  Hood[i][hPos][1],  Hood[i][hPos][2], id);
	    mysql_query (g_SQL, query);

	    Hood_Yenile(i);
	    return i;
	}
	return -1;
}

Dialog:AyarlarGiris(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (isnull(inputtext)) return cmd_ayarlar(playerid);
	    new query[300];
	    format(query, sizeof(query), "SELECT null FROM `oyuncular` WHERE `Isim` = '%s' AND `Sifre` = md5('%s')", Player_GetName(playerid), inputtext);
	    new Cache:Radless = mysql_query(g_SQL, query);
	    new rows;
	    cache_get_row_count(rows);
	    if (!rows)
	    {
	        cache_delete(Radless);
	        HataMesajGonder(playerid, "Yanlýþ þifre girdiniz.");
	        return cmd_ayarlar(playerid);
	    }
	    Dialog_Show(playerid, Ayarlar, DIALOG_STYLE_LIST, "{FFFFFF}Hesap Ayarlarý", "{FFFFFF}Þifre Deðiþtir\n{FFFFFF}TOG\n{FFFFFF}Yürüyüþ Stili", "Seç", "Kapat");
	}
	return 1;
}
stock TOGMenu(playerid)
{
	new str[400];
	format(str, sizeof(str), "{FFFFFF}Birlik & Telsiz Mesajlari\t%s\n{FFFFFF}PM\t%s\n{FFFFFF}Yayin & Reklam & Taksi\t%s\n{FFFFFF}Admin Ýþlemleri\t%s\n{FFFFFF}Konuþma Stili\t%s\nKarakter isimleri\t%s\n", (PlayerData[playerid][pAyarlar][0] == 0) ? ("{7af442}Açýk") : ("{ff0000}Kapalý"), (PlayerData[playerid][pAyarlar][1] == 0) ? ("{7af442}Açýk") : ("{ff0000}Kapalý"),
    (PlayerData[playerid][pAyarlar][2] == 0) ? ("{7af442}Açýk") : ("{ff0000}Kapalý"), (PlayerData[playerid][pAyarlar][3] == 0) ? ("{7af442}Açýk") : ("{ff0000}Kapalý"), (PlayerData[playerid][pAyarlar][4] == 0) ? ("{7af442}Açýk") : ("{ff0000}Kapalý"), (PlayerData[playerid][pAyarlar][5] == 0) ? ("{7af442}Açýk") : ("{ff0000}Kapalý"));
	if (PlayerData[playerid][pAdmin] >= 1) format(str, sizeof(str), "%s{FFFFFF}Admin Chat\t%s\n{FFFFFF}Supporter Chat\t%s\n{FFFFFF}Yetkili Bilgi Mesajlari\t%s\n", str, (PlayerData[playerid][pAyarlar][6] == 0) ? ("{7af442}Açýk") : ("{ff0000}Kapalý"), (PlayerData[playerid][pAyarlar][7] == 0) ? ("{7af442}Açýk") : ("{ff0000}Kapalý"), (PlayerData[playerid][pAyarlar][8] == 0) ? ("{7af442}Açýk") : ("{ff0000}Kapalý"));
	Dialog_Show(playerid, TOG, DIALOG_STYLE_TABLIST, "TOG", str, "Deðiþtir", "Geri");
	return 1;
}
Dialog:TOG(playerid, response, listitem, inputtext[])
{
	if (!response) return Dialog_Show(playerid, Ayarlar, DIALOG_STYLE_LIST, "{FFFFFF}Hesap Ayarlarý", "{FFFFFF}Þifre Deðiþtir\n{FFFFFF}TOG\n{FFFFFF}Yürüyüs Stili", "Seç", "Kapat");
	if (response)
	{
	    if (PlayerData[playerid][pAyarlar][listitem] == 0)
	    {
	        PlayerData[playerid][pAyarlar][listitem] = 1;
	    }
	    else
	    {
	        PlayerData[playerid][pAyarlar][listitem] = 0;
	    }
	    if (PlayerData[playerid][pAyarlar][5] == 1)
	    {
	        foreach (new i:Player)
	        {
	            Streamer_RemoveArrayData(STREAMER_TYPE_3D_TEXT_LABEL, NameTag[i], E_STREAMER_PLAYER_ID, playerid);
	        }
	    }
	    else
	    {
	        foreach (new i:Player)
	        {
	            Streamer_AppendArrayData(STREAMER_TYPE_3D_TEXT_LABEL, NameTag[i], E_STREAMER_PLAYER_ID, playerid);
	        }
	    }
	    TOGMenu(playerid);
	}
	return 1;
}
Dialog:Ayarlar(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (listitem == 0)
	    {
	        Dialog_Show(playerid, SifreDegistir, DIALOG_STYLE_INPUT, "Yeni Þifre", "Lütfen yeni þifrenizi girin:", "Deðiþtir", "Geri");
	    }
		if (listitem == 1)
		{
		    TOGMenu(playerid);
		}
		if (listitem == 2)
		{
		    Dialog_Show(playerid, YuruyusStili, DIALOG_STYLE_LIST, "Yürüyüþ Stili", "Normal\nLow Walk\nGangsta\nGangsta2\nOld Walk\nOld Walk2\nNormal Walk2\nFemale Walk\nFemale Walk2\nWhore Walk\nFemale Walk3\nDrunk Walk\nBlind Walk\nNormal", "Seç", "Geri");
		}
		if (listitem == 3)
		{
		    new query[256];

		    mysql_format(g_SQL, query, sizeof query, "SELECT * FROM `oyuncular` WHERE `ID` = '%d'", PlayerData[playerid][pID]);
		    mysql_query (g_SQL, query);
		}
	}
	return 1;
}
Dialog:YuruyusStili(playerid, response, listitem, inputtext[])
{
	if (!response) return Dialog_Show(playerid, Ayarlar, DIALOG_STYLE_LIST, "{FFFFFF}Hesap Ayarlarý", "{FFFFFF}Þifre Degiþtir\n{FFFFFF}TOG\n{FFFFFF}Yürüyüþ Stili", "Seç", "Kapat");
	if (response)
	{
	    PlayerData[playerid][pAyarlar][9] = listitem+1;
	    MesajGonder(playerid, "Yürüyüs stiliniz degistirildi.");
	}
	return 1;
}
Dialog:SifreDegistir(playerid, response, listitem, inputtext[])
{
	if (!response) return Dialog_Show(playerid, Ayarlar, DIALOG_STYLE_LIST, "{FFFFFF}Hesap Ayarlarý", "{FFFFFF}Þifre Degiþtir\n{FFFFFF}TOG\n{FFFFFF}Yürüyüþ Stili", "Seç", "Kapat");
	if (response)
	{
	    if (isnull(inputtext)) return Dialog_Show(playerid, SifreDegistir, DIALOG_STYLE_INPUT, "Yeni Þifre", "Lütfen yeni þifrenizi girin:", "Deðiþtir", "Geri");
	    if (strlen(inputtext) < 6 || strlen(inputtext) > 30)
     	{
      		HataMesajGonder(playerid, "sifreniz 6 ile 30 karakter arasinda olmalidir.");
			return Dialog_Show(playerid, SifreDegistir, DIALOG_STYLE_INPUT, "Yeni sifre", "Lütfen yeni þifrenizi girin:", "Deðiþtir", "Geri");
		}
		if (TurkceKarakter(inputtext))
		{
            HataMesajGonder(playerid, "sifreniz Türkçe karakter içeremez.");
			return Dialog_Show(playerid, SifreDegistir, DIALOG_STYLE_INPUT, "Yeni sifre", "Lütfen yeni sifrenizi girin:", "Degistir", "Geri");
		}
		if (OzelKarakter(inputtext))
		{
            HataMesajGonder(playerid, "sifreniz özel karakter içeremez.");
			return Dialog_Show(playerid, SifreDegistir, DIALOG_STYLE_INPUT, "Yeni sifre", "Lütfen yeni sifrenizi girin:", "Degistir", "Geri");
		}
		new query[300];
		format(query, sizeof(query), "UPDATE `oyuncular` SET `Sifre` = md5('%s') WHERE `Isim` = '%s'", inputtext, Player_GetName(playerid));
		mysql_query(g_SQL, query, false);
		Log_Write("logs/SifreDegistir.log", "[%s] %s adlý oyuncu þifresini ''%s'' olarak deðiþtirdi", ReturnDate(), Player_GetName(playerid), inputtext);
		MesajGonder(playerid, "sifreniz degistirildi.");
	}
	return 1;
}
stock OzelModelListele(playerid)
{
	new query[124];
	format(query, sizeof(query), "SELECT * FROM `ozelmodel` WHERE `sqlid` = '%d'", PlayerData[playerid][pID]);
	new Cache:Radless = mysql_query(g_SQL, query);
	new rows;
	cache_get_row_count(rows);
	if (rows)
	{
	    new str[1000], skinid, sayi;
	    for (new i; i<rows; i++)
	    {
	        cache_get_value_name_int(i, "skinid", skinid);
	        OzelModelListeleme[playerid][sayi] = skinid;
	        sayi++;
	        format(str, sizeof(str), "%s%d\n", str, skinid);
	    }
	    cache_delete(Radless);
	    Dialog_Show(playerid, OzelModelListe, DIALOG_STYLE_PREVMODEL, "Ozel Modelleriniz", str, "Sec", "Kapat");
	}
	else
	{
	    cache_delete(Radless);
	    HataMesajGonder(playerid, "Hiç özel modeliniz yok.");
	}
	return 1;
}
Dialog:OzelModelListe(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new skin = OzelModelListeleme[playerid][listitem];
	    PlayerData[playerid][pSkin] = skin;
	    SetPlayerSkin(playerid, skin);
	}
	return 1;
}
forward OzelModelSil(playerid, sqlid, skinid);
public OzelModelSil(playerid, sqlid, skinid)
{
	new rows;
	cache_get_row_count(rows);
	if (!rows) return HataMesajGonder(playerid, "Bu oyuncunun böyle bir özel modeli yok.");
	new query[150];
	format(query, sizeof(query), "DELETE FROM `ozelmodel` WHERE `sqlid` = '%d' AND `skinid` = '%d'", sqlid, skinid);
	mysql_query(g_SQL, query, false);
	format(query, sizeof(query), "UPDATE `oyuncular` SET `Skin` = '101' WHERE `Skin` = '%d'", skinid);
	mysql_query(g_SQL, query, false);
	foreach (new i:Player) if (PlayerData[i][pSkin] == skinid)
	{
	    PlayerData[i][pSkin] = (PlayerData[i][pCinsiyet] == 1) ? (101) : (211);
	    SetPlayerSkin(i, PlayerData[i][pSkin]);
	    SunucuMesaji(i, "Kullandiginiz skin yetkili tarafindan silindigi için skininiz degistirildi.");
	}
	MesajGonder(playerid, "%s (SQL ID: %d) adli kisinin %d ID'li özel modelini sildiniz.", SQLName(sqlid), sqlid, skinid);
	Log_Write("logs/admin.log", "[%s] %s adli admin %d sql id'li oyuncunun %d id'li ozel modelini sildi.",ReturnDate(),PlayerData[playerid][pAdmin], sqlid, skinid);
	return 1;
}
forward OzelModelVer(playerid, sqlid, skinid);
public OzelModelVer(playerid, sqlid, skinid)
{
	new rows;
	cache_get_row_count(rows);
	if (rows) return HataMesajGonder(playerid, "Bu oyuncunun zaten bu modeli var.");
	new query[150];
	format(query, sizeof(query), "INSERT INTO `ozelmodel` (`sqlid`, `skinid`) VALUES ('%d', '%d')", sqlid, skinid);
	mysql_query(g_SQL, query, false);
	MesajGonder(playerid, "%s (SQL ID: %d) kisisine %d ID'li özel modeli verdiniz.", SQLName(sqlid), sqlid, skinid);
	Log_Write("logs/admin.log", "[%s] %s adli admin %d sql id'li oyuncuya %d id'li ozel modeli verdi.",ReturnDate(),PlayerData[playerid][pAdmin], sqlid, skinid);
	return 1;
}
stock VipMenu(playerid)
{
	if (PlayerData[playerid][pVip] < 1 || PlayerData[playerid][pVipSure] < gettime()) return 1;
	new str[250];
	format(str, sizeof(str), "{E74C3C}Paket Türü\t{%s}[%s]\n{E74C3C}Paket Bitiþ Tarihi\t{FFFFFF}[%s]\n{E74C3C}Paket Özellikleri\t{FFFFFF}[...]\n{E74C3C}V.I.P Rengi\t{FFFFFF}[%s{FFFFFF}]\n{E74C3C}Dövüþ Stili\t{FFFFFF}[%s]",
	GetVIPRenk(PlayerData[playerid][pVip]), GetVIPName(PlayerData[playerid][pVip]), convertDatex(PlayerData[playerid][pVipSure]),
	(PlayerData[playerid][pVipRenk] == 1) ? ("{74f442}Açýk") : ("{ef2f2f}Kapalý"), GetFightStyleName(GetPlayerFightingStyle(playerid)));
	Dialog_Show(playerid, VipMenu, DIALOG_STYLE_TABLIST, "{FFFFFF}V.I.P Menü", str, "Degistir", "Kapat");
    return 1;
}
stock VipDolap(playerid)
{
    if (PlayerData[playerid][pVip] < 1 || PlayerData[playerid][pVipSure] < gettime()) return 1;
    Dialog_Show(playerid, VipDolap, DIALOG_STYLE_LIST, "{FFFFFF}VIP Dolap", "{E74C3C}V.I.P Can\t{2ECC71}Ucretsiz\n{E74C3C}V.I.P Zirh\t{2ECC71}$2000\n{E74C3C}V.I.P Skinleri (Pasif)", "Seç", "Kapat");
    return 1;
}
Dialog:VipDolap(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (listitem == 0)
	    {
	        if (ReturnHealth(playerid) >= 100) return HataMesajGonder(playerid, "Zaten caniniz full.");

	        CanAyarla(playerid, 100.0);
	    }
	    if (listitem == 1)
	    {
	        if (ReturnArmour(playerid) >= 100) return HataMesajGonder(playerid, "Zaten zirhiniz full.");
	        if (PlayerData[playerid][pCash] < 2000) return HataMesajGonder(playerid, "Yeterli paraniz yok.");
	        ZirhAyarla(playerid, 100.0);
	        ParaVer(playerid, -2000);
	    }

	}
	return 1;
}
/*stock IsVipSkin(skinid)
{
	for (new i; i<50; i++)
	{
	    if (VIPErkekSkinler[i] == skinid || VIPBayanSkinler[i] == skinid) return 1;
	}
	return 0;
}
Dialog:VIPSkinler(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (PlayerData[playerid][pCinsiyet] == 1)
	    {
			PlayerData[playerid][pSkin] = VIPErkekSkinler[listitem];
			SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);
		}
		else
		{
		    PlayerData[playerid][pSkin] = VIPBayanSkinler[listitem];
			SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);
		}
	}
	return 1;
}*/
Dialog:VipMenu(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (listitem == 0 || listitem == 1) return cmd_vipmenu(playerid);
	    if (listitem == 2)
	    {
	        new str[3000];
	        switch (PlayerData[playerid][pVip])
	        {
	            case 1:
	            {
	                strcat(str, "{FFFFFF}V.I.P rengini aktif edebilir.\n");
	                strcat(str, "{FFFFFF}V.I.P menüsünden (/vipmenu) dövüs stilini degistirebilir. Paketi son erdiginde dövüs stili normale döner.\n");
	                strcat(str, "{FFFFFF}V.I.P dolabindan belirli ücret karsiliginda canini ve zirhini doldurabilir. (/vipdolap)\n");
	                strcat(str, "{FFFFFF}V.I.P dolabindaki kiyafetlerden yararlanabilir.\n");
	                strcat(str, "{FFFFFF}Telefonda rehbere numara kaydetme limiti 40'a yükselir.\n");
	                strcat(str, "{FFFFFF}Sahip olabilecegi araç limiti 11'e yükselir.\n");
	                strcat(str, "{FFFFFF}Sahip olabilecegi ev limiti 10'a yükselir.\n");
	                strcat(str, "{FFFFFF}Grottiden bisiklet alabilir.\n");
	                strcat(str, "{FFFFFF}Saatlik maaslarda ekstra olarak 6 EXP alir.\n");
	                strcat(str, "{FFFFFF}Saatlik maaslarda ekstra olarak $600 alir.\n");
	                strcat(str, "{FFFFFF}VIP oldugu süre boyunca mobilya hakki +200 artar.\n");
	                strcat(str, "{FFFFFF}Forum ve Discordda donator tagi verilir.\n");
	                strcat(str, "{FFFFFF}VIP oldugu süre boyunca maske hakki olmadan maske takabilir.\n");
	                strcat(str, "{FFFFFF}Grottiden VIP araçlari alabilir. (Hotring racer, hotknife, bloodring)\n");
	            }

	        }
	        Dialog_Show(playerid, PaketOzellikleri, DIALOG_STYLE_MSGBOX, "Paket Özellikleri", str, "Geri", "");
	    }
	    if (listitem == 3)
	    {
	        if (PlayerData[playerid][pVipRenk] == 0)
	        {
	            PlayerData[playerid][pVipRenk] = 1;
	            MesajGonder(playerid, "V.I.P rengi aktif edildi.");
	            VipMenu(playerid);
	        }
			else
			{
			    PlayerData[playerid][pVipRenk] = 0;
			    MesajGonder(playerid, "V.I.P rengi kapatýldý.");
			    VipMenu(playerid);
			}
		}
		if (listitem == 4)
		{
		    Dialog_Show(playerid, FightStyle, DIALOG_STYLE_LIST, "Dövüþ Stilleri", "Normal\nBoxing\nKungfu\nKneehead\nGrab Kick\nElbow", "Seç", "Geri");
		}
	}
	return 1;
}

Dialog:PaketOzellikleri(playerid, response, listitem, inputtext[])
{
	if (response) return VipMenu(playerid);
	return 1;
}
Dialog:FightStyle(playerid, response, listitem, inputtext[])
{
	if (!response) return VipMenu(playerid);
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
	            PlayerData[playerid][pDovusStili] = FIGHT_STYLE_NORMAL;
	            SetPlayerFightingStyle(playerid, FIGHT_STYLE_NORMAL);

	        }
	        case 1:
	        {
	            PlayerData[playerid][pDovusStili] = FIGHT_STYLE_BOXING;
	            SetPlayerFightingStyle(playerid, FIGHT_STYLE_BOXING);
	        }
	        case 2:
	        {
	            PlayerData[playerid][pDovusStili] = FIGHT_STYLE_KUNGFU;
	            SetPlayerFightingStyle(playerid, FIGHT_STYLE_KUNGFU);
	        }
	        case 3:
	        {
	            PlayerData[playerid][pDovusStili] = FIGHT_STYLE_KNEEHEAD;
	            SetPlayerFightingStyle(playerid, FIGHT_STYLE_KNEEHEAD);
	        }
	        case 4:
	        {
	            PlayerData[playerid][pDovusStili] = FIGHT_STYLE_GRABKICK;
	            SetPlayerFightingStyle(playerid, FIGHT_STYLE_GRABKICK);
	        }
	        case 5:
	        {
	            PlayerData[playerid][pDovusStili] = FIGHT_STYLE_ELBOW;
	            SetPlayerFightingStyle(playerid, FIGHT_STYLE_ELBOW);
	        }
	    }
	    MesajGonder(playerid, "Dövüs stiliniz degistirildi. (Aim + Enter)");
	}
	return 1;
}

stock GetVIPRenk(level)
{
	new renk[10];
	switch (level)
	{
	    case 1: renk = "ffeb0f";
	    default: renk = "FFFFFF";
	}
	return renk;
}

stock GetVIPName(level)
{
	new vipname[20] = "Bilinmiyor";
	switch (level)
	{
	    case 1: vipname = "Donator";
	    default: vipname = "Bilinmiyor";
	}
	return vipname;
}
stock SiparisListele(playerid)
{
	new query[150];
	format(query, sizeof(query), "SELECT * FROM `siparisler` ORDER BY tarih DESC LIMIT %d, 15", GetPVarInt(playerid, "Siparis")*15);
	new Cache:Radless = mysql_query(g_SQL, query);
	new rows;
	cache_get_row_count(rows);
	if (rows)
	{
	    new str[1500],siparisid, sqlid, sipariseden[24], urun[40], tarih[25];
	    strcat(str, "Siparis ID\tSiparis Eden\tÜrün\tTarih\n");
	    for (new i; i<rows; i++)
	    {
	        cache_get_value_name_int(i, "ID", siparisid);
	        cache_get_value_name_int(i, "sqlid", sqlid);
	        cache_get_value_name(i, "urun", urun, 40);
	        cache_get_value_name(i, "sipariseden", sipariseden, 24);
	        cache_get_value_name(i, "tarih", tarih, 25);
	        format(str, sizeof(str), "%s{FFFFFF}%d\t{FFFFFF}%s(%d)\t{FFFFFF}%s\t{FFFFFF}%s\n", str, siparisid, sipariseden, sqlid,  urun, tarih);
	    }
	    if (rows > 15) strcat(str, "{AFAFAF}> Ileri\n{AFAFAF}> Geri");
	    Dialog_Show(playerid, Siparisler, DIALOG_STYLE_TABLIST_HEADERS, "{f23737}Siparisler", str, "Sil", "Kapat");
	}
	else
	{
	    cache_delete(Radless);
	    if (GetPVarInt(playerid, "Siparis") == 0)
		{
		    HataMesajGonder(playerid, "Siparis yok.");
		}
		else
		{
		    SetPVarInt(playerid, "Siparis", GetPVarInt(playerid, "Siparis")-1);
		    SiparisListele(playerid);
		    HataMesajGonder(playerid, "Daha fazla siparis bulunamadi.");
		}
	}
	return 1;
}
Dialog:Siparisler(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (strfind(inputtext, "Ileri", true) != -1)
        {
            SetPVarInt(playerid, "Siparis", GetPVarInt(playerid, "Siparis")+1);
            SiparisListele(playerid);
            return 1;
        }
        if (strfind(inputtext, "Geri", true) != -1)
        {
            if (GetPVarInt(playerid, "Siparis") < 1)
            {
                SiparisListele(playerid);
                HataMesajGonder(playerid, "Zaten ilk sayfadasiniz!");
            }
            else
            {
                SetPVarInt(playerid, "Siparis", GetPVarInt(playerid, "Siparis")-1);
                SiparisListele(playerid);
            }
            return 1;
        }
	    new sid = strval(inputtext);
	    if (sid < 1) return 1;
	    new query[80];
	    format(query, sizeof(query), "DELETE FROM `siparisler` WHERE `ID` = '%d'", sid);
	    mysql_query(g_SQL, query, false);
	    MesajGonder(playerid, "Siparis silindi.");
	    SiparisListele(playerid);
	}
	return 1;
}
forward OOCMarket(playerid);
public OOCMarket(playerid)
{
	new rows;
	cache_get_row_count(rows);
 	new str[1500], string[124];
  	strcat(str, "Ürün\tFiyat\n");
   	strcat(str, "{AFAFAF}Bakiye Gönder\n");
    if (PlayerData[playerid][pAdmin] >= 4) strcat(str, "{AFAFAF}Düzenle\n");
    if (rows)
    {
        new urunadi[40], fiyat;
        for (new i; i<rows; i++)
        {
            cache_get_value_name(i, "urunadi", urunadi, 40);
            cache_get_value_name_int(i, "fiyat", fiyat);

            format(string, sizeof(string), "{FFFFFF}%s\t{FFFFFF}%d TL\n", urunadi, fiyat);
            strcat(str, string);
		}
	}
	format(string, sizeof(string), "Market (Bakiyeniz: %d)", PlayerData[playerid][pBakiye]);
	Dialog_Show(playerid, oocm, DIALOG_STYLE_TABLIST_HEADERS, string, str, "Satin Al", "Kapat");
	return 1;
}
Dialog:oocm(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (strfind(inputtext, "Bakiye Gönder", true) != -1)
	    {
	        if (PlayerData[playerid][pBakiye] <= 0)
	        {
	            HataMesajGonder(playerid, "Bakiyeniz yok.");
	            return cmd_oocmarket(playerid);
			}
			Dialog_Show(playerid, BakiyeGonderID, DIALOG_STYLE_INPUT, "Bakiye Gönder", "{ff0022}> {FFFFFF}Lütfen Bakiye göndermek istediginiz oyuncunun ID'sini girin:", "Devam", "Geri");
			return 1;
	    }
	    if (strfind(inputtext, "Düzenle", true) != -1)
	    {
	        if (PlayerData[playerid][pAdmin] < 4) return 1;
	        Dialog_Show(playerid, UrunDuzenle, DIALOG_STYLE_LIST, "Düzenle", "{FFFFFF}Ürün Ekle\n{FFFFFF}Ürün Sil\n{FFFFFF}Ürün Fiyat Düzenle\nÜrün Pasiflestir/Aktiflestir", "Seç", "Kapat");
	        return 1;
	    }
	    if (strlen(inputtext) > 0)
	    {
	        OOCMarket_UrunAl(playerid, inputtext);
		}
	}
	return 1;
}
stock OOCMarket_UrunAl(playerid, urunadi[])
{
	new fiyat, durum;
	GetUrunBilgi(urunadi, fiyat, durum);
	if (strfind(urunadi, "isim/Cinsiyet Degistirme", true) != -1)
	{
	    if (durum == 0) return HataMesajGonder(playerid, "Bu ürün yetkili tarafindan pasife alinmistir.");
		if (PlayerData[playerid][pBakiye] < fiyat) return HataMesajGonder(playerid, "Yeterli bakiyeniz yok. (%d TL)", fiyat);
		SetPVarInt(playerid, "UrunFiyat", fiyat);
		Dialog_Show(playerid, oocmisimdegistir, DIALOG_STYLE_INPUT, "isim Degistir", "{ff0022}> {FFFFFF}Lütfen yeni isminizi girin (Ad_Soyad formatinda olmalidir):\n{ff0022}Not: {FFFFFF}isminizi degistirdikten sonra IC siciliniz sifirlanir.", "Devam", "Vazgeç");
	}
	if (strfind(urunadi, "Karakter Yapilandirma Paketi", true) != -1)
	{
	    if (durum == 0) return HataMesajGonder(playerid, "Bu ürün yetkili tarafindan pasife alinmistir.");
		if (PlayerData[playerid][pBakiye] < fiyat) return HataMesajGonder(playerid, "Yeterli bakiyeniz yok. (%d TL)", fiyat);
		SetPVarInt(playerid, "UrunFiyat", fiyat);
		Dialog_Show(playerid, oocmyas, DIALOG_STYLE_INPUT, "Karakter Yapilandirma Paketi (Adim 1)", "{FFFFFF}Karakter Yapilandirma Paketi: {ffd000}Karakter Yasi\n\n{FFFFFF}Lütfen karakterinizin yasini girin:", "Devam", "Vazgeç");
	}
	if (strfind(urunadi, "Soyadi Kilitleme", true) != -1)
	{
	    if (durum == 0) return HataMesajGonder(playerid, "Bu ürün yetkili tarafindan pasife alinmistir.");
		if (PlayerData[playerid][pBakiye] < fiyat) return HataMesajGonder(playerid, "Yeterli bakiyeniz yok. (%d TL)", fiyat);
		if (SoyadKilitlimi(GetPlayerLastName(playerid, ReturnName(playerid), 1))) return HataMesajGonder(playerid, "Bu soyad zaten kilitlenmis.");
		SetPVarInt(playerid, "UrunFiyat", fiyat);
		Dialog_Show(playerid, SoyadKilitle, DIALOG_STYLE_MSGBOX, "Soyad Kilitle", "{a1ff00}%d TL {FFFFFF}ödeyerek kullandiginiz soyadi kilitlemek ister misiniz?", "Onayla", "Reddet", fiyat);
	}
	if (strfind(urunadi, "Özel Model", true) != -1)
	{
	    if (durum == 0) return HataMesajGonder(playerid, "Bu ürün yetkili tarafindan pasife alinmistir.");
		if (PlayerData[playerid][pBakiye] < fiyat) return HataMesajGonder(playerid, "Yeterli bakiyeniz yok. (%d TL)", fiyat);
		SetPVarInt(playerid, "UrunFiyat", fiyat);
		Dialog_Show(playerid, OzelModel, DIALOG_STYLE_MSGBOX, "Özel Model", "{a1ff00}%d TL {FFFFFF} ödeyerek özel model satin almak ister misiniz?", "Evet", "Hayir", fiyat);
	}
	if (strfind(urunadi, "Özel Gate", true) != -1)
	{
	    if (durum == 0) return HataMesajGonder(playerid, "Bu ürün yetkili tarafindan pasife alinmistir.");
		if (PlayerData[playerid][pBakiye] < fiyat) return HataMesajGonder(playerid, "Yeterli bakiyeniz yok. (%d TL)", fiyat);
		SetPVarInt(playerid, "UrunFiyat", fiyat);
		Dialog_Show(playerid, OzelGate, DIALOG_STYLE_MSGBOX, "Özel Gate", "{a1ff00}%d TL {FFFFFF} ödeyerek özel gate satin almak ister misiniz?", "Evet", "Hayir", fiyat);
	}
	if (strfind(urunadi, "Pet", true) != -1)
	{
	    if (durum == 0) return HataMesajGonder(playerid, "Bu ürün yetkili tarafindan pasife alinmistir.");
		if (PlayerData[playerid][pBakiye] < fiyat) return HataMesajGonder(playerid, "Yeterli bakiyeniz yok. (%d TL)", fiyat);
		SetPVarInt(playerid, "UrunFiyat", fiyat);
		Dialog_Show(playerid, oocmpet, DIALOG_STYLE_MSGBOX, "Pet", "{a1ff00}%d TL {FFFFFF} ödeyerek pet satin almak ister misiniz?", "Evet", "Hayir", fiyat);
	}
	if (strfind(urunadi, "Gold VIP", true) != -1)
	{
		if (PlayerData[playerid][pBakiye] < 40) return HataMesajGonder(playerid, "Yeterli bakiyeniz yok. (40 TL)", fiyat);
		if (PlayerData[playerid][pVip] > 0) return HataMesajGonder(playerid, "Zaten VIP paketiniz var.");
		SetPVarInt(playerid, "UrunFiyat", 40);
		Dialog_Show(playerid, GoldVip, DIALOG_STYLE_MSGBOX, "Gold VIP", "{a1ff00}40 TL {FFFFFF}ödeyerek Gold VIP adli ürünü satin almak ister misiniz?", "Onayla", "Vazgeç");
	}
	if (strfind(urunadi, "Özel Map", true) != -1)
	{
	    if (durum == 0) return HataMesajGonder(playerid, "Bu ürün yetkili tarafindan pasife alinmistir.");
		if (PlayerData[playerid][pBakiye] < fiyat) return HataMesajGonder(playerid, "Yeterli bakiyeniz yok. (%d TL)", fiyat);
		SetPVarInt(playerid, "UrunFiyat", fiyat);
		Dialog_Show(playerid, OzelMap, DIALOG_STYLE_MSGBOX, "Özel Map", "{a1ff00}%d TL {FFFFFF} ödeyerek özel map satin almak ister misiniz?", "Evet", "Hayir", fiyat);
	}
	if (strfind(urunadi, "Özel Plaka", true) != -1)
	{
	    if (durum == 0) return HataMesajGonder(playerid, "Bu ürün yetkili tarafindan pasife alinmistir.");
		if (PlayerData[playerid][pBakiye] < fiyat) return HataMesajGonder(playerid, "Yeterli bakiyeniz yok. (%d TL)", fiyat);
		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesajGonder(playerid, "Özel plaka satin almak için sürücü olmalisiniz!");
		SetPVarInt(playerid, "UrunFiyat", fiyat);
		Dialog_Show(playerid, OzelPlaka, DIALOG_STYLE_MSGBOX, "Özel Plaka", "{a1ff00}%d TL {FFFFFF} ödeyerek özel plaka satin almak ister misiniz?", "Evet", "Hayir", fiyat);
	}
	if (strfind(urunadi, "Özel Numara", true) != -1)
	{
	    if (durum == 0) return HataMesajGonder(playerid, "Bu ürün yetkili tarafindan pasife alinmistir.");
		if (PlayerData[playerid][pBakiye] < fiyat) return HataMesajGonder(playerid, "Yeterli bakiyeniz yok. (%d TL)", fiyat);
		if (PlayerData[playerid][pTelefon] == -1) return HataMesajGonder(playerid, "Bu ürünü satin almak için telefonunuz olmalidir.");
		SetPVarInt(playerid, "UrunFiyat", fiyat);
		Dialog_Show(playerid, OzelNumara, DIALOG_STYLE_INPUT, "Özel Numara", "{a1ff00}%d TL {FFFFFF}ödeyerek almak istediginiz özel numarayi girin:", "Devam", "Vazgeç", fiyat);
	}
	if (strfind(urunadi, "EXP Boost", true) != -1)
	{
	    if (durum == 0) return HataMesajGonder(playerid, "Bu ürün yetkili tarafindan pasife alinmistir.");
		if (PlayerData[playerid][pBakiye] < fiyat) return HataMesajGonder(playerid, "Yeterli bakiyeniz yok. (%d TL)", fiyat);
		if (PlayerData[playerid][pEXPBoost] > gettime()) return HataMesajGonder(playerid, "EXP Boost adli ürününüz zaten bulunuyor.");
		SetPVarInt(playerid, "UrunFiyat", fiyat);
		Dialog_Show(playerid, EXPBoost, DIALOG_STYLE_MSGBOX, "EXP Boost", "{a1ff00}%d TL {FFFFFF}ödeyerek EXP Boost adli ürünü satin almak ister misiniz\n\n{FFFFFF}Her maas aldiginizda 1 EXP daha fazla kazanacaksiniz.", "Onayla", "Vazgeç", fiyat);
	}
	if (strfind(urunadi, "Garaj", true) != -1)
	{
	    if (durum == 0) return HataMesajGonder(playerid, "Bu ürün yetkili tarafindan pasife alinmistir.");
		if (PlayerData[playerid][pBakiye] < fiyat) return HataMesajGonder(playerid, "Yeterli bakiyeniz yok. (%d TL)", fiyat);
		SetPVarInt(playerid, "UrunFiyat", fiyat);
		Dialog_Show(playerid, OzelGaraj, DIALOG_STYLE_MSGBOX, "Özel Garaj", "{a1ff00}%d TL {FFFFFF} ödeyerek özel garaj satin almak ister misiniz?", "Evet", "Hayir", fiyat);
	}
	if (strfind(urunadi, "Özel Ev interioru", true) != -1)
	{
	    if (durum == 0) return HataMesajGonder(playerid, "Bu ürün yetkili tarafindan pasife alinmistir.");
		if (PlayerData[playerid][pBakiye] < fiyat) return HataMesajGonder(playerid, "Yeterli bakiyeniz yok. (%d TL)", fiyat);
		SetPVarInt(playerid, "UrunFiyat", fiyat);
		Dialog_Show(playerid, OzelEv, DIALOG_STYLE_MSGBOX, "Özel Ev interioru", "{a1ff00}%d TL {FFFFFF} ödeyerek özel ev interioru satin almak ister misiniz?", "Evet", "Hayir", fiyat);
	}
	if (strfind(urunadi, "Balik Orani Arttirma", true) != -1)
	{
	    if (durum == 0) return HataMesajGonder(playerid, "Bu ürün yetkili tarafindan pasife alinmistir.");
		if (PlayerData[playerid][pBakiye] < fiyat) return HataMesajGonder(playerid, "Yeterli bakiyeniz yok. (%d TL)", fiyat);
		if (PlayerData[playerid][pBalikOrani] > gettime()) return HataMesajGonder(playerid, "Balik Orani Arttirma adli ürününüz zaten bulunuyor.");
		SetPVarInt(playerid, "UrunFiyat", fiyat);
		Dialog_Show(playerid, BalikOrani, DIALOG_STYLE_MSGBOX, "Balik Orani Arttirma", "{a1ff00}%d TL {FFFFFF} ödeyerek 'Balik Orani Arttirma' satin almak ister misiniz?", "Evet", "Hayir", fiyat);
	}
	if (strfind(urunadi, "Araç Kilometre Sifirlama", true) != -1)
	{
	    if (durum == 0) return HataMesajGonder(playerid, "Bu ürün yetkili tarafindan pasife alinmistir.");
		if (PlayerData[playerid][pBakiye] < fiyat) return HataMesajGonder(playerid, "Yeterli bakiyeniz yok. (%d TL)", fiyat);
		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesajGonder(playerid, "Sürücü olmalisiniz!");
		SetPVarInt(playerid, "UrunFiyat", fiyat);
		Dialog_Show(playerid, KilometreSifirla, DIALOG_STYLE_MSGBOX, "Araç Kilometre Sifirlama", "{a1ff00}%d TL {FFFFFF} ödeyerek bulundugunuz aracin kilometresini sifirlamak ister misiniz?", "Evet", "Hayir", fiyat);
	}
	if (strfind(urunadi, "Maske Kullanim Hakki", true) != -1)
	{
	    if (durum == 0) return HataMesajGonder(playerid, "Bu ürün yetkili tarafindan pasife alinmistir.");
		if (PlayerData[playerid][pBakiye] < fiyat) return HataMesajGonder(playerid, "Yeterli bakiyeniz yok. (%d TL)", fiyat);
		if (PlayerData[playerid][pMaskeHakki] == 1) return HataMesajGonder(playerid, "Zaten maske kullanim hakkiniz var.");
		SetPVarInt(playerid, "UrunFiyat", fiyat);
		Dialog_Show(playerid, MaskeHakki, DIALOG_STYLE_MSGBOX, "Maske Kullanim Hakki", "{a1ff00}%d TL {FFFFFF} ödeyerek Maske Kullanim Hakki adli ürünü satin almak istiyor musunuz?", "Evet", "Hayir", fiyat);
	}
	return 1;
}
Dialog:MaskeHakki(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (PlayerData[playerid][pBakiye] >= GetPVarInt(playerid, "UrunFiyat"))
	    {
	        PlayerData[playerid][pBakiye] -= GetPVarInt(playerid, "UrunFiyat");
	        PlayerData[playerid][pMaskeHakki] = 1;
	        Oyuncu_Kaydet(playerid);
	        MesajGonder(playerid, "%d TL ödeyerek Maske Kullanim Hakki satin aldiniz.", GetPVarInt(playerid, "UrunFiyat"));
	        Log_Write("logs/oocmarket.log", "[%s] %s adli kisi ooc marketden maske kullanim hakki adli urunu satin aldi.",ReturnDate(),ReturnName(playerid));
	        DeletePVar(playerid, "UrunFiyat");
	    }
	}
	return 1;
}
Dialog:BronzVip(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (PlayerData[playerid][pBakiye] >= GetPVarInt(playerid, "UrunFiyat"))
	    {
	        PlayerData[playerid][pVip] = 1;
	        PlayerData[playerid][pVipSure] = gettime()+30*86400;
	        PlayerData[playerid][pBakiye] -= GetPVarInt(playerid, "UrunFiyat");
	        Oyuncu_Kaydet(playerid);
	        MesajGonder(playerid, "%d TL ödeyerek Bronze VIP satin aldiniz. (/vipmenu)", GetPVarInt(playerid, "UrunFiyat"));
	        Log_Write("logs/oocmarket.log", "[%s] %s adli kisi ooc marketden bronze vip adli urunu satin aldi.",ReturnDate(),ReturnName(playerid));
	        DeletePVar(playerid, "UrunFiyat");

			PlayerData[playerid][pSilahHakki] = SilahAveraj(playerid);
			PlayerData[playerid][pSilahSuresi] = 0;
	    }
	}
	return 1;
}
Dialog:SilverVip(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (PlayerData[playerid][pBakiye] >= GetPVarInt(playerid, "UrunFiyat"))
	    {
	        PlayerData[playerid][pVip] = 2;
	        PlayerData[playerid][pVipSure] = gettime()+30*86400;
	        PlayerData[playerid][pBakiye] -= GetPVarInt(playerid, "UrunFiyat");
	        Oyuncu_Kaydet(playerid);
	        MesajGonder(playerid, "%d TL ödeyerek Silver VIP satin aldiniz. (/vipmenu)", GetPVarInt(playerid, "UrunFiyat"));
	        Log_Write("logs/oocmarket.log", "[%s] %s adli kisi ooc marketden silver vip adli urunu satin aldi.",ReturnDate(),ReturnName(playerid));
	        DeletePVar(playerid, "UrunFiyat");

			PlayerData[playerid][pSilahHakki] = SilahAveraj(playerid);
			PlayerData[playerid][pSilahSuresi] = 0;
	    }
	}
	return 1;
}

Dialog:GoldVip(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (PlayerData[playerid][pBakiye] >= GetPVarInt(playerid, "UrunFiyat"))
	    {
	        PlayerData[playerid][pVip] = 1;
	        PlayerData[playerid][pVipSure] = gettime()+30*86400;
	        PlayerData[playerid][pBakiye] -= GetPVarInt(playerid, "UrunFiyat");
	        Oyuncu_Kaydet(playerid);
	        MesajGonder(playerid, "%d TL ödeyerek Gold VIP satin aldiniz. (/vipmenu)", GetPVarInt(playerid, "UrunFiyat"));
	        Log_Write("logs/oocmarket.log", "[%s] %s adli kisi ooc marketden Gold VIP adli urunu satin aldi.",ReturnDate(),ReturnName(playerid));
	        DeletePVar(playerid, "UrunFiyat");

			PlayerData[playerid][pSilahHakki] = SilahAveraj(playerid);
			PlayerData[playerid][pSilahSuresi] = 0;
	    }
	}
	return 1;
}

Dialog:KilometreSifirla(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (PlayerData[playerid][pBakiye] >= GetPVarInt(playerid, "UrunFiyat") && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    {
	        new id = Car_GetID(GetPlayerVehicleID(playerid));
	        if (id == -1 || AracInfo[id][aracTip] != 4) return HataMesajGonder(playerid, "Bu aracin kilometresini sifirlayamazsin!");
	        AracInfo[id][aracKM] = 0.0;
	        PlayerData[playerid][pBakiye] -= GetPVarInt(playerid, "UrunFiyat");
	        Arac_Kaydet(id);
	        Oyuncu_Kaydet(id);
	        MesajGonder(playerid, "%d TL ödeyerek bulundugunuz aracin kilometresini sifirladiniz.",GetPVarInt(playerid, "UrunFiyat"));
	        Log_Write("logs/oocmarket.log", "[%s] %s adli kisi ooc marketden arac kilometre sifirlama adli urunu satin aldi.",ReturnDate(), ReturnName(playerid));
	        DeletePVar(playerid, "UrunFiyat");
	    }
	}
	return 1;
}
Dialog:BalikOrani(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (PlayerData[playerid][pBakiye] >= GetPVarInt(playerid, "UrunFiyat"))
	    {
	        PlayerData[playerid][pBalikOrani] = gettime()+30*86400;
	        PlayerData[playerid][pBakiye] -= GetPVarInt(playerid, "UrunFiyat");
	        MesajGonder(playerid, "%d TL ödeyerek Balik Orani Arttirma adli ürünü satin aldiniz.", GetPVarInt(playerid, "UrunFiyat"));
	        Oyuncu_Kaydet(playerid);
	        Log_Write("logs/oocmarket.log", "%s adli kisi ooc marketden balik orani arttirma adli urunu satin aldi.",ReturnName(playerid));
	        DeletePVar(playerid, "UrunFiyat");
	    }
	}
	return 1;
}
Dialog:OzelEv(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (PlayerData[playerid][pBakiye] >= GetPVarInt(playerid, "UrunFiyat"))
	    {
	        PlayerData[playerid][pBakiye] -= GetPVarInt(playerid, "UrunFiyat");
	        new query[250];
	        format(query, sizeof(query), "INSERT INTO `siparisler` (`sqlid`, `sipariseden`, `urun`, `tarih`) VALUES ('%d', '%s', 'Kisisel Ev Interioru', '%s')", PlayerData[playerid][pID], Player_GetName(playerid),ReturnDate());
	        mysql_query(g_SQL, query, false);
	        Oyuncu_Kaydet(playerid);
	        MesajGonder(playerid, "%d TL ödeyerek Özel Ev interioru satin aldiniz, F8 tusuna basarak SS alin ve forumumuzdan ticket açin. (www.LosAngeles.com)",GetPVarInt(playerid, "UrunFiyat"));
	        Log_Write("logs/oocmarket.log", "%s adli kisi ooc marketden Özel Ev interioru adli urunu satin aldi.",ReturnName(playerid));
	        DeletePVar(playerid, "UrunFiyat");
	    }
	}
	return 1;
}
Dialog:OzelGaraj(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (PlayerData[playerid][pBakiye] >= GetPVarInt(playerid, "UrunFiyat"))
	    {
	        PlayerData[playerid][pBakiye] -= GetPVarInt(playerid, "UrunFiyat");
	        new query[250];
	        format(query, sizeof(query), "INSERT INTO `siparisler` (`sqlid`, `sipariseden`, `urun`, `tarih`) VALUES ('%d', '%s', 'Kisisel Garaj', '%s')", PlayerData[playerid][pID], Player_GetName(playerid),ReturnDate());
	        mysql_query(g_SQL, query, false);
	        Oyuncu_Kaydet(playerid);
	        MesajGonder(playerid, "%d TL ödeyerek özel garaj satin aldiniz, F8 tusuna basarak SS alin ve forumumuzdan ticket açin. (www.LosAngeles.com)",GetPVarInt(playerid, "UrunFiyat"));
	        Log_Write("logs/oocmarket.log", "%s adli kisi ooc marketden Özel Garaj adli urunu satin aldi.",ReturnName(playerid));
	        DeletePVar(playerid, "UrunFiyat");
	    }
	}
	return 1;
}
Dialog:EXPBoost(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (PlayerData[playerid][pBakiye] >= GetPVarInt(playerid, "UrunFiyat"))
	    {
	        PlayerData[playerid][pEXPBoost] = gettime()+30*86400;
	        PlayerData[playerid][pBakiye] -= GetPVarInt(playerid, "UrunFiyat");
	        MesajGonder(playerid, "%d TL ödeyerek EXP Boost adli ürünü satin aldiniz. Her maas aldiginizda 1 EXP daha fazla kazanacaksiniz!", GetPVarInt(playerid, "UrunFiyat"));
	        Oyuncu_Kaydet(playerid);
	        Log_Write("logs/oocmarket.log", "[%s] %s adli kisi ooc marketden EXP boost adli urunu satin aldi.",ReturnDate(), ReturnName(playerid));
	        DeletePVar(playerid, "UrunFiyat");
	    }
	}
	return 1;
}

Dialog:OzelNumara(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (PlayerData[playerid][pBakiye] >= GetPVarInt(playerid, "UrunFiyat"))
	    {
			if (isnull(inputtext)) return Dialog_Show(playerid, OzelNumara, DIALOG_STYLE_INPUT, "Özel Numara", "{a1ff00}%d TL {FFFFFF}ödeyerek almak istediginiz özel numarayi girin:", "Devam", "Vazgeç", GetPVarInt(playerid, "UrunFiyat"));
			if (!IsNumeric(inputtext)) return Dialog_Show(playerid, OzelNumara, DIALOG_STYLE_INPUT, "Özel Numara", "{a1ff00}%d TL {FFFFFF}ödeyerek almak istediginiz özel numarayi girin:", "Devam", "Vazgeç", GetPVarInt(playerid, "UrunFiyat"));

			if (strval(inputtext) < 10000)
			{
			    HataMesajGonder(playerid, "Geçersiz numara girdiniz, minimum 10000 maksimum 99999 girebilirsiniz.");
			    return Dialog_Show(playerid, OzelNumara, DIALOG_STYLE_INPUT, "Özel Numara", "{a1ff00}%d TL {FFFFFF}ödeyerek almak istediginiz özel numarayi girin:", "Devam", "Vazgeç", GetPVarInt(playerid, "UrunFiyat"));
			}

			if (strval(inputtext) > 99999)
			{
			    HataMesajGonder(playerid, "Geçersiz numara girdiniz, minimum 10000 maksimum 99999 girebilirsiniz.");
			    return Dialog_Show(playerid, OzelNumara, DIALOG_STYLE_INPUT, "Özel Numara", "{a1ff00}%d TL {FFFFFF}ödeyerek almak istediginiz özel numarayi girin:", "Devam", "Vazgeç", GetPVarInt(playerid, "UrunFiyat"));
			}

			if (NumaraKontrol(strval(inputtext)))
			{
			    HataMesajGonder(playerid, "Bu numara baskasi tarafindan kullaniliyor.");
			    return Dialog_Show(playerid, OzelNumara, DIALOG_STYLE_INPUT, "Özel Numara", "{a1ff00}%d TL {FFFFFF}ödeyerek almak istediginiz özel numarayi girin:", "Devam", "Vazgeç", GetPVarInt(playerid, "UrunFiyat"));
			}

			if (strval(inputtext) == 911 || strval(inputtext) == 555 || strval(inputtext) == 333)
			{
			    HataMesajGonder(playerid, "Bu numarayi kullanamazsiniz.");
			    return Dialog_Show(playerid, OzelNumara, DIALOG_STYLE_INPUT, "Özel Numara", "{a1ff00}%d TL {FFFFFF}ödeyerek almak istediginiz özel numarayi girin:", "Devam", "Vazgeç", GetPVarInt(playerid, "UrunFiyat"));
			}

			PlayerData[playerid][pTelefon] = strval(inputtext);
			PlayerData[playerid][pBakiye] -= GetPVarInt(playerid, "UrunFiyat");
			MesajGonder(playerid, "%d TL ödeyerek telefon numaranizi %d yaptiniz.", GetPVarInt(playerid, "UrunFiyat"), strval(inputtext));
			Oyuncu_Kaydet(playerid);
			Log_Write("logs/oocmarket.log", "[%s] %s adli kisi ooc marketden Özel Numara adli urunu satin aldi.",ReturnDate(), ReturnName(playerid));
			DeletePVar(playerid, "UrunFiyat");
	    }
	}
	return 1;
}

Dialog:OzelPlaka(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (PlayerData[playerid][pBakiye] >= GetPVarInt(playerid, "UrunFiyat") && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    {
	    	Dialog_Show(playerid, OzelPlakaYaz, DIALOG_STYLE_INPUT, "Özel Plaka", "{a1ff00}%s {FFFFFF}model araciniza bir özel plaka girin:", "Devam", "Kapat", ReturnVehicleModelName(GetVehicleModel(GetPlayerVehicleID(playerid))));
	    }
	}
	return 1;
}
Dialog:OzelPlakaYaz(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (PlayerData[playerid][pBakiye] >= GetPVarInt(playerid, "UrunFiyat") && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    {
	        if (isnull(inputtext)) return Dialog_Show(playerid, OzelPlakaYaz, DIALOG_STYLE_INPUT, "Özel Plaka", "{a1ff00}%s {FFFFFF}model araciniza bir özel plaka girin:", "Devam", "Kapat", ReturnVehicleModelName(GetVehicleModel(GetPlayerVehicleID(playerid))));
	        if (strlen(inputtext) < 2 || strlen(inputtext) > 24)
	        {
	            HataMesajGonder(playerid, "Plaka minimum 2, maksimum 24 karakterden olusmalidir.");
	            return Dialog_Show(playerid, OzelPlakaYaz, DIALOG_STYLE_INPUT, "Özel Plaka", "{a1ff00}%s {FFFFFF}model araciniza bir özel plaka girin:", "Devam", "Kapat", ReturnVehicleModelName(GetVehicleModel(GetPlayerVehicleID(playerid))));
	        }
	        if (TurkceKarakter(inputtext) || OzelKarakter(inputtext))
	        {
	            HataMesajGonder(playerid, "Plaka türkçe veya özel karakter içeremez.");
	            return Dialog_Show(playerid, OzelPlakaYaz, DIALOG_STYLE_INPUT, "Özel Plaka", "{a1ff00}%s {FFFFFF}model araciniza bir özel plaka girin:", "Devam", "Kapat", ReturnVehicleModelName(GetVehicleModel(GetPlayerVehicleID(playerid))));
	        }
	        new vehicleid = GetPlayerVehicleID(playerid);
	        new id = Car_GetID(vehicleid);
	        if (id == -1 || AracInfo[id][aracTip] != 4) return HataMesajGonder(playerid, "Bu araca özel plaka takamazsin.");
	        format(AracInfo[id][aracPlaka], 24, inputtext);
	        SetVehicleNumberPlate(vehicleid, inputtext);
	        PlayerData[playerid][pBakiye] -= GetPVarInt(playerid, "UrunFiyat");
	        Oyuncu_Kaydet(playerid);
	        MesajGonder(playerid, "%d TL ödeyerek aracin plakasini '%s' yaptiniz.", GetPVarInt(playerid, "UrunFiyat"), inputtext);
	        Log_Write("logs/oocmarket.log", "%s adli kisi ooc marketden Ozel Plaka adli urunu satin aldi.",ReturnName(playerid));
	        DeletePVar(playerid, "UrunFiyat");
	    }
	}
	return 1;
}
Dialog:OzelMap(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (PlayerData[playerid][pBakiye] >= GetPVarInt(playerid, "UrunFiyat"))
	    {
	        PlayerData[playerid][pBakiye] -= GetPVarInt(playerid, "UrunFiyat");
	        new query[250];
	        format(query, sizeof(query), "INSERT INTO `siparisler` (`sqlid`, `sipariseden`, `urun`, `tarih`) VALUES ('%d', '%s', 'Kisisel Map', '%s')", PlayerData[playerid][pID], Player_GetName(playerid),ReturnDate());
	        mysql_query(g_SQL, query, false);
	        Oyuncu_Kaydet(playerid);
	        MesajGonder(playerid, "%d TL ödeyerek Özel Map satin aldiniz, F8 tusuna basarak SS alin ve forumumuzdan ticket açin. (www.LosAngeles.com)",GetPVarInt(playerid, "UrunFiyat"));
	        Log_Write("logs/oocmarket.log", "%s adli kisi ooc marketden Kisisel Map adli urunu satin aldi.",ReturnName(playerid));
	        DeletePVar(playerid, "UrunFiyat");
	    }
	}
	return 1;
}
Dialog:oocmpet(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (PlayerData[playerid][pBakiye] >= GetPVarInt(playerid, "UrunFiyat"))
	    {
	        new id = Pet_Olustur(PlayerData[playerid][pID], 1, 1);
			if (id == -1) return HataMesajGonder(playerid, "Pet satin alinamadi, gelistirici ekibiyle iletisime geçiniz.");
	        PlayerData[playerid][pBakiye] -= GetPVarInt(playerid, "UrunFiyat");
	        Oyuncu_Kaydet(playerid);
	        MesajGonder(playerid, "%d TL ödeyerek Pet satin aldiniz. (/petlerim)", GetPVarInt(playerid, "UrunFiyat"));
	        Log_Write("logs/oocmarket.log", "%s adli kisi ooc marketden Pet adli urunu satin aldi.",ReturnName(playerid));
	        DeletePVar(playerid, "UrunFiyat");
	    }
	}
	return 1;
}
Dialog:OzelGate(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (PlayerData[playerid][pBakiye] >= GetPVarInt(playerid, "UrunFiyat"))
	    {
	        PlayerData[playerid][pBakiye] -= GetPVarInt(playerid, "UrunFiyat");
	        new query[250];
	        format(query, sizeof(query), "INSERT INTO `siparisler` (`sqlid`, `sipariseden`, `urun`, `tarih`) VALUES ('%d', '%s', 'Kisisel Gate', '%s')", PlayerData[playerid][pID], Player_GetName(playerid),ReturnDate());
	        mysql_query(g_SQL, query, false);
	        Oyuncu_Kaydet(playerid);
	        MesajGonder(playerid, "%d TL ödeyerek Özel Gate satin aldiniz, F8 tusuna basarak SS alin ve forumumuzdan ticket açin. (www.LosAngeles.com)",GetPVarInt(playerid, "UrunFiyat"));
	        Log_Write("logs/oocmarket.log", "%s adli kisi ooc marketden Özel Gate adli urunu satin aldi.",ReturnName(playerid));
	        DeletePVar(playerid, "UrunFiyat");
	    }
	}
	return 1;
}
Dialog:OzelModel(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (PlayerData[playerid][pBakiye] >= GetPVarInt(playerid, "UrunFiyat"))
	    {
	        PlayerData[playerid][pBakiye] -= GetPVarInt(playerid, "UrunFiyat");
	        new query[250];
	        format(query, sizeof(query), "INSERT INTO `siparisler` (`sqlid`, `sipariseden`, `urun`, `tarih`) VALUES ('%d', '%s', 'Ozel Model', '%s')", PlayerData[playerid][pID], Player_GetName(playerid),ReturnDate());
	        mysql_query(g_SQL, query, false);
	        Oyuncu_Kaydet(playerid);
	        MesajGonder(playerid, "%d TL ödeyerek Özel Kiyafet satin aldiniz, F8 tusuna basarak SS alin ve forumumuzdan ticket açin. (www.LosAngeles.com)",GetPVarInt(playerid, "UrunFiyat"));
	        Log_Write("logs/oocmarket.log", "%s adli kisi ooc marketden Özel Kiyafet adli urunu satin aldi.",ReturnName(playerid));
	        DeletePVar(playerid, "UrunFiyat");
	    }
	}
	return 1;
}
Dialog:SoyadKilitle(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new query[150];
	    format(query, sizeof(query), "INSERT INTO `kilitlisoyadlar` (`Soyad`, `Kilitleyen`, `Tarih`) VALUES ('%s', '%s', '%s')", GetPlayerLastName(playerid, ReturnName(playerid), 1), ReturnName(playerid), ReturnDate());
	    mysql_query(g_SQL, query, false);
	    PlayerData[playerid][pBakiye] -= GetPVarInt(playerid, "UrunFiyat");
		MesajGonder(playerid, "%d TL ödeyerek soyadinizi kilitlediniz.", GetPVarInt(playerid, "UrunFiyat"));
		Log_Write("logs/oocmarket.log", "%s adli kisi ooc marketden Soyadi kilitleme adli urunu satin aldi.",ReturnName(playerid));
		DeletePVar(playerid, "UrunFiyat");
	}
	return 1;
}
Dialog:oocmyas(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (isnull(inputtext)) return Dialog_Show(playerid, oocmyas, DIALOG_STYLE_INPUT, "Karakter Yapilandirma Paketi (Adim 1)", "{FFFFFF}Karakter Yapilandirma Paketi: {ffd000}Karakter Yasi\n\n{FFFFFF}Lütfen karakterinizin yasini girin:", "Devam", "Vazgeç");
	    if (!IsNumeric(inputtext)) return Dialog_Show(playerid, oocmyas, DIALOG_STYLE_INPUT, "Karakter Yapilandirma Paketi (Adim 1)", "{FFFFFF}Karakter Yapilandirma Paketi: {ffd000}Karakter Yasi\n\n{FFFFFF}Lütfen karakterinizin yasini girin:", "Devam", "Vazgeç");
	    if (strval(inputtext) < 18 || strval(inputtext) > 80)
	    {
	        HataMesajGonder(playerid, "Minimum 18, maksimum 80 yas girebilirsiniz!");
	        return Dialog_Show(playerid, oocmyas, DIALOG_STYLE_INPUT, "Karakter Yapilandirma Paketi (Adim 1)", "{FFFFFF}Karakter Yapilandirma Paketi: {ffd000}Karakter Yasi\n\n{FFFFFF}Lütfen karakterinizin yasini girin:", "Devam", "Vazgeç");
	    }
	    SetPVarInt(playerid, "KarakterYas", strval(inputtext));
	    Dialog_Show(playerid, oocmdogumyeri, DIALOG_STYLE_INPUT, "Karakter Yapilandirma Paketi (Adim 2)", "{FFFFFF}Karakter Yapilandirma Paketi: {ffd000}Dogum Yeri\n\n{FFFFFF}Lütfen karakterinizin dogum yerini girin:", "Devam", "Geri");
	}
	return 1;
}
Dialog:oocmdogumyeri(playerid, response, listitem, inputtext[])
{
	if (!response) return Dialog_Show(playerid, oocmyas, DIALOG_STYLE_INPUT, "Karakter Yapilandirma Paketi (Adim 1)", "{FFFFFF}Karakter Yapilandirma Paketi: {ffd000}Karakter Yasi\n\n{FFFFFF}Lütfen karakterinizin yasini girin:", "Devam", "Vazgeç");
	if (response)
	{
	    if (isnull(inputtext)) return Dialog_Show(playerid, oocmdogumyeri, DIALOG_STYLE_INPUT, "Karakter Yapilandirma Paketi (Adim 2)", "{FFFFFF}Karakter Yapilandirma Paketi: {ffd000}Dogum Yeri\n\n{FFFFFF}Lütfen karakterinizin dogum yerini girin:", "Devam", "Geri");
	    if (strlen(inputtext) < 3 || strlen(inputtext) > 30)
	    {
	        HataMesajGonder(playerid, "Dogum yeri çok kisa veya çok uzun.");
	        return Dialog_Show(playerid, oocmdogumyeri, DIALOG_STYLE_INPUT, "Karakter Yapilandirma Paketi (Adim 2)", "{FFFFFF}Karakter Yapilandirma Paketi: {ffd000}Dogum Yeri\n\n{FFFFFF}Lütfen karakterinizin dogum yerini girin:", "Devam", "Geri");
	    }
	    SetPVarString(playerid, "DogumYeri", inputtext);
	    Dialog_Show(playerid, oocmtenrengi, DIALOG_STYLE_LIST, "Karakter Yapilandirma Paketi (Adim 3)", "Beyaz\nSiyah", "Bitir", "Geri");
	}
	return 1;
}
Dialog:oocmtenrengi(playerid, response, listitem, inputtext[])
{
	if (!response) return Dialog_Show(playerid, oocmdogumyeri, DIALOG_STYLE_INPUT, "Karakter Yapilandirma Paketi (Adim 2)", "{FFFFFF}Karakter Yapilandirma Paketi: {ffd000}Dogum Yeri\n\nLütfen karakterinizin dogum yerini girin:", "Devam", "Geri");
	if (response)
	{
	    if (PlayerData[playerid][pBakiye] >= GetPVarInt(playerid, "UrunFiyat"))
	    {
	    	new yas = GetPVarInt(playerid, "KarakterYas");
	    	new dogum[30];
	    	GetPVarString(playerid, "DogumYeri", dogum, sizeof(dogum));

	    	PlayerData[playerid][pYas] = yas;
	    	format(PlayerData[playerid][pDogum], 30, dogum);
	    	PlayerData[playerid][pTen] = listitem+1;
	    	PlayerData[playerid][pBakiye] -= GetPVarInt(playerid, "UrunFiyat");
			MesajGonder(playerid, "%d TL ödeyerek karakterinizi basariyla yapilandirdiniz.", GetPVarInt(playerid, "UrunFiyat"));
			Log_Write("logs/oocmarket.log", "%s adli kisi ooc marketden Karakter yapilandirma adli urunu satin aldi.",ReturnName(playerid));
			DeletePVar(playerid, "UrunFiyat");
			DeletePVar(playerid, "DogumYeri");
			DeletePVar(playerid, "KarakterYas");
	    	Oyuncu_Kaydet(playerid);
	    }
	}
	return 1;
}
Dialog:oocmisimdegistir(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (isnull(inputtext)) return Dialog_Show(playerid, oocmisimdegistir, DIALOG_STYLE_INPUT, "isim Degistir", "{ff0022}> {FFFFFF}Lütfen yeni isminizi girin (Ad_Soyad formatinda olmalidir):\n{ff0022}Not: {FFFFFF}isminizi degistirdikten sonra IC siciliniz sifirlanir.", "Devam", "Vazgeç");
	    if (strlen(inputtext) <= 3)
	    {
	        HataMesajGonder(playerid, "Çok kisa bir ad girdiniz.");
	        return Dialog_Show(playerid, oocmisimdegistir, DIALOG_STYLE_INPUT, "isim Degistir", "{ff0022}> {FFFFFF}Lütfen yeni isminizi girin (Ad_Soyad formatinda olmalidir):\n{ff0022}Not: {FFFFFF}isminizi degistirdikten sonra IC siciliniz sifirlanir.", "Devam", "Vazgeç");
	    }
	    if (!IsValidRoleplayName(inputtext))
	    {
	        HataMesajGonder(playerid, "isminiz Ad_Soyad formatinda olmalidir. (Örnek: Danny_Ruswell)");
	        return Dialog_Show(playerid, oocmisimdegistir, DIALOG_STYLE_INPUT, "isim Degistir", "{ff0022}> {FFFFFF}Lütfen yeni isminizi girin (Ad_Soyad formatinda olmalidir):\n{ff0022}Not: {FFFFFF}isminizi degistirdikten sonra IC siciliniz sifirlanir.", "Devam", "Vazgeç");
	    }
	    if (SoyadKilitlimi(GetPlayerLastName(playerid, inputtext, 0)))
	    {
	        HataMesajGonder(playerid, "Yazdiginiz soyad kilitlenmis.");
	        return Dialog_Show(playerid, oocmisimdegistir, DIALOG_STYLE_INPUT, "isim Degistir", "{ff0022}> {FFFFFF}Lütfen yeni isminizi girin (Ad_Soyad formatinda olmalidir):\n{ff0022}Not: {FFFFFF}isminizi degistirdikten sonra IC siciliniz sifirlanir.", "Devam", "Vazgeç");
	    }
	    if (!IsimKontrol(inputtext))
	    {
	        HataMesajGonder(playerid, "Bu isim baskasi tarafindan kullanilmaktadir.");
	        return Dialog_Show(playerid, oocmisimdegistir, DIALOG_STYLE_INPUT, "isim Degistir", "{ff0022}> {FFFFFF}Lütfen yeni isminizi girin (Ad_Soyad formatinda olmalidir):\n{ff0022}Not: {FFFFFF}isminizi degistirdikten sonra IC siciliniz sifirlanir.", "Devam", "Vazgeç");
	    }
	    SetPVarString(playerid, "IsimChange", inputtext);
	    Dialog_Show(playerid, oocmcinsiyetdegistir, DIALOG_STYLE_LIST, "Cinsiyet Degistir", "Erkek\nKadin", "Devam", "Geri");
	}
	return 1;
}
Dialog:oocmcinsiyetdegistir(playerid, response, listitem, inputtext[])
{
	if (!response)
	{
	    DeletePVar(playerid, "IsimChange");
	    Dialog_Show(playerid, oocmisimdegistir, DIALOG_STYLE_INPUT, "isim Degistir", "{ff0022}> {FFFFFF}Lütfen yeni isminizi girin (Ad_Soyad formatinda olmalidir):\n{ff0022}Not: {FFFFFF}isminizi degistirdikten sonra IC siciliniz sifirlanir.", "Devam", "Vazgeç");
	}
	else
	{
	    new ad[24];
	    GetPVarString(playerid, "IsimChange", ad, sizeof(ad));
	    if ((PlayerData[playerid][pHapisSure] > 0 && PlayerData[playerid][pCK] == 1 && strcmp(ad, Player_GetName(playerid), false) != 0) || PlayerData[playerid][pHapis] == 1 && PlayerData[playerid][pHapisSure] > 50)
	    {
	        PlayerData[playerid][pCK] = 0;
	        format(PlayerData[playerid][pHapisSebep], 50, "");
	        PlayerData[playerid][pHapisSure] = 1;
	    }
	    PlayerData[playerid][pCinsiyet] = listitem+1;
	    ChangeName(playerid, ad);
	    PlayerData[playerid][pBakiye] -= GetPVarInt(playerid, "UrunFiyat");
	    IC_Sicil_Reset(playerid);
	    PlayerData[playerid][pAranma] = 0;
	    SetPlayerWantedLevel(playerid, 0);
	    DeletePVar(playerid, "IsimChange");
	    MesajGonder(playerid, "%d TL ödeyerek karakter adiniz basariyla '%s' olarak degistirildi.", GetPVarInt(playerid, "UrunFiyat"), ad);
	    DeletePVar(playerid, "UrunFiyat");
	    Oyuncu_Kaydet(playerid);
	}
	return 1;
}
stock IsPlayerSpawnedEx(playerid)
{
    if (playerid < 0 || playerid >= MAX_PLAYERS)
        return 0;

    return (GetPlayerState(playerid) != PLAYER_STATE_SPECTATING && GetPlayerState(playerid) != PLAYER_STATE_NONE && GetPlayerState(playerid) != PLAYER_STATE_WASTED);
}
stock NumaraKontrol(numara)
{
	new query[100];
	format(query, sizeof(query), "SELECT null FROM `oyuncular` WHERE `Telefon` = '%d'", numara);
	new Cache:Radless = mysql_query(g_SQL, query);
	new rows;
	cache_get_row_count(rows);
	cache_delete(Radless);
	if (rows) return 1;
	return 0;
}
stock IC_Sicil_Reset(playerid)
{
	new query[124];
	format(query, sizeof(query), "DELETE FROM `icsicil` WHERE `playersqlid` = '%d'", PlayerData[playerid][pID]);
	mysql_query(g_SQL, query, false);
	return 1;
}
stock ChangeName(playerid, name[])
{
	new oldname[24];
	GetPlayerName(playerid, oldname, sizeof(oldname));
    SetPlayerName(playerid, name);
	new query[200];
    format(query, sizeof(query), "UPDATE `oyuncular` SET `Isim` = '%s' WHERE `Isim` = '%s'", name, oldname);
    mysql_query(g_SQL, query, false);
    format(query, sizeof(query), "UPDATE `siparisler` SET `sipariseden` = '%s' WHERE `sqlid` = '%d'", name, PlayerData[playerid][pID]);
    mysql_query(g_SQL, query, false);
    format(query, sizeof(query), "INSERT INTO namechanges (`sqlid`, `EskiAd`, `YeniAd`, `Tarih`) VALUES ('%d', '%s', '%s', '%s')", PlayerData[playerid][pID], oldname, name, ReturnDate());
    mysql_query(g_SQL, query, false);
    Log_Write("logs/namechange.log", "%s adli kisi karakter adini %s olarak degistirdi.",oldname, name);
    return 1;
}
stock IsimKontrol(ad[])
{
	foreach (new i:Player)
	{
	    if (strcmp(Player_GetName(i), ad, false) == 0) return 0;
	}
	new query[100];
	format(query, sizeof(query), "SELECT null FROM `oyuncular` WHERE `Isim` = '%s'", ad);
	mysql_query(g_SQL, query);
	new rows;
	cache_get_row_count(rows);
	if (rows) return 0;
	return 1;
}
stock GetUrunBilgi(urunadi[], &fiyat, &durum)
{
	new query[124];
	format(query, sizeof(query), "SELECT * FROM `oocmarket` WHERE `urunadi` = '%s'", urunadi);
	new Cache:Radless = mysql_query(g_SQL, query);
	new rows;
	cache_get_row_count(rows);
	if (rows)
	{
	    cache_get_value_name_int(0, "fiyat", fiyat);
	    cache_get_value_name_int(0, "durum", durum);
	}
	cache_delete(Radless);
	return 1;
}
Dialog:UrunDuzenle(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (listitem == 0)
	    {
	        if (PlayerData[playerid][pAdmin] < 4) return 1;
	        Dialog_Show(playerid, UrunEkle, DIALOG_STYLE_INPUT, "Ürün Ekle - Ad", "{ff0022}> {FFFFFF}Lütfen eklemek istediginiz ürünün adini girin:", "Devam", "Geri");
		}
		if (listitem == 1)
		{
		    if (PlayerData[playerid][pAdmin] < 4) return 1;
		    Dialog_Show(playerid, UrunSil, DIALOG_STYLE_INPUT, "Ürün Sil", "{ff0022}> {FFFFFF}Lütfen silmek istediginiz ürünün tam adini girin:", "Devam", "Geri");
		}
		if (listitem == 2)
		{
		    if (PlayerData[playerid][pAdmin] < 4) return 1;
		    Dialog_Show(playerid, FiyatDegistir, DIALOG_STYLE_INPUT, "Ürün Fiyat Degistir", "{ff0022}> {FFFFFF}Lütfen fiyatini degistirmek istediginiz ürünün tam adini girin:", "Devam", "Geri");
		}
		if (listitem == 3)
		{
		    if (PlayerData[playerid][pAdmin] < 4) return 1;
		    Dialog_Show(playerid, UrunDurum, DIALOG_STYLE_INPUT, "Ürün Pasiflestir/Aktiflestir", "{ff0022}> {FFFFFF}Lütfen ürünün tam adini girin:", "Devam", "Geri");
		}
	}
	return 1;
}
Dialog:UrunDurum(playerid, response, listitem, inputtext[])
{
	if (!response) return Dialog_Show(playerid, UrunDuzenle, DIALOG_STYLE_LIST, "Düzenle", "{FFFFFF}Ürün Ekle\n{FFFFFF}Ürün Sil\n{FFFFFF}Ürün Fiyat Düzenle\nÜrün Pasiflestir/Aktiflestir", "Seç", "Kapat");
	if (response)
	{
	    if (isnull(inputtext)) return Dialog_Show(playerid, UrunDurum, DIALOG_STYLE_INPUT, "Ürün Pasiflestir/Aktiflestir", "{ff0022}> {FFFFFF}Lütfen ürünün tam adini girin:", "Devam", "Geri");
	    SetPVarString(playerid, "UrunAd", inputtext);
	    Dialog_Show(playerid, UrunPasifAktif, DIALOG_STYLE_MSGBOX, "Ürün Pasiflestir/Aktiflestir", "Bu ürüne ne yapmak istersiniz?", "Aktiflestir", "Pasiflestir");
	}
	return 1;
}
Dialog:UrunPasifAktif (playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new urunad[40];
	    GetPVarString(playerid, "UrunAd", urunad, sizeof(urunad));
	    new query[124];
	    format(query, sizeof(query), "UPDATE `oocmarket` SET `durum` = '1' WHERE `urunadi` = '%s'", urunad);
	    mysql_query(g_SQL, query, false);
	}
	else
	{
	    new urunad[40];
	    GetPVarString(playerid, "UrunAd", urunad, sizeof(urunad));
	    new query[124];
	    format(query, sizeof(query), "UPDATE `oocmarket` SET `durum` = '0' WHERE `urunadi` = '%s'", urunad);
	    mysql_query(g_SQL, query, false);
	}
	return 1;
}
Dialog:FiyatDegistir(playerid, response, listitem, inputtext[])
{
	if (!response) return Dialog_Show(playerid, UrunDuzenle, DIALOG_STYLE_LIST, "Düzenle", "{FFFFFF}Ürün Ekle\n{FFFFFF}Ürün Sil\n{FFFFFF}Ürün Fiyat Düzenle\nÜrün Pasiflestir/Aktiflestir", "Seç", "Kapat");
	if (response)
	{
	    if (isnull(inputtext)) return Dialog_Show(playerid, FiyatDegistir, DIALOG_STYLE_INPUT, "Ürün Fiyat Degistir", "{ff0022}> {FFFFFF}Lütfen fiyatini degistirmek istediginiz ürünün tam adini girin:", "Devam", "Geri");
	    SetPVarString(playerid, "FiyatDegistir", inputtext);
	    Dialog_Show(playerid, UrunFiyatDegistir, DIALOG_STYLE_INPUT, "Ürün Fiyat Degistir", "Fiyat girin:", "Degistir", "Kapat");
	}
	return 1;
}
Dialog:UrunFiyatDegistir(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (isnull(inputtext)) return Dialog_Show(playerid, UrunFiyatDegistir, DIALOG_STYLE_INPUT, "Ürün Fiyat Degistir", "Fiyat girin:", "Degistir", "Kapat");
	    if (!IsNumeric(inputtext)) return Dialog_Show(playerid, UrunFiyatDegistir, DIALOG_STYLE_INPUT, "Ürün Fiyat Degistir", "Fiyat girin:", "Degistir", "Kapat");
	    new urunad[40];
	    GetPVarString(playerid, "FiyatDegistir", urunad, sizeof(urunad));
	    new query[150];
	    format(query, sizeof(query), "UPDATE `oocmarket` SET `fiyat` = '%d' WHERE `urunadi` = '%s'", strval(inputtext), urunad);
	    mysql_query(g_SQL, query, false);
	}
	return 1;
}
Dialog:UrunSil(playerid, response, listitem, inputtext[])
{
	if (!response) return Dialog_Show(playerid, UrunDuzenle, DIALOG_STYLE_LIST, "Düzenle", "{FFFFFF}Ürün Ekle\n{FFFFFF}Ürün Sil\n{FFFFFF}Ürün Fiyat Düzenle\nÜrün Pasiflestir/Aktiflestir", "Seç", "Kapat");
	if (response)
	{
	    if (isnull(inputtext)) return Dialog_Show(playerid, UrunSil, DIALOG_STYLE_INPUT, "Ürün Sil", "{ff0022}> {FFFFFF}Lütfen silmek istediginiz ürünün tam adini girin:", "Devam", "Geri");
	    new query[100];
	    format(query, sizeof(query), "DELETE FROM `oocmarket` WHERE `urunadi` = '%s'", inputtext);
	    mysql_query(g_SQL, query, false);
	    SunucuMesaji(playerid, "%s adli ürün silindi.", inputtext);
	}
	return 1;
}
Dialog:UrunEkle(playerid, response, listitem, inputtext[])
{
	if (!response) return Dialog_Show(playerid, UrunDuzenle, DIALOG_STYLE_LIST, "Düzenle", "{FFFFFF}Ürün Ekle\n{FFFFFF}Ürün Sil\n{FFFFFF}Ürün Fiyat Düzenle\nÜrün Pasiflestir/Aktiflestir", "Seç", "Kapat");
	if (response)
	{
	    if (isnull(inputtext)) return Dialog_Show(playerid, UrunEkle, DIALOG_STYLE_INPUT, "Ürün Ekle - Ad", "{ff0022}> {FFFFFF}Lütfen eklemek istediginiz ürünün adini girin:", "Devam", "Geri");
	    SetPVarString(playerid, "UrunAd", inputtext);
	    Dialog_Show(playerid, UrunEkleFiyat, DIALOG_STYLE_INPUT, "Ürün Ekle - Fiyat", "{ff0022}> {FFFFFF}Lütfen ürünün fiyatini girin:", "Ekle", "Kapat");
	}
	return 1;
}
Dialog:UrunEkleFiyat(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (isnull(inputtext)) return Dialog_Show(playerid, UrunEkleFiyat, DIALOG_STYLE_INPUT, "Ürün Ekle - Fiyat", "ff0022}> {FFFFFF}Lütfen ürünün fiyatini girin:", "Ekle", "Kapat");
	    if (!IsNumeric(inputtext)) return Dialog_Show(playerid, UrunEkleFiyat, DIALOG_STYLE_INPUT, "Ürün Ekle - Fiyat", "ff0022}> {FFFFFF}Lütfen ürünün fiyatini girin:", "Ekle", "Kapat");
	    new query[250], ad[40];
	    GetPVarString(playerid, "UrunAd", ad, sizeof(ad));
	    format(query, sizeof(query), "INSERT INTO `oocmarket` (`urunadi`, `fiyat`, `durum`) VALUES ('%s', '%d', '1')", ad, strval(inputtext));
	    mysql_query(g_SQL, query, false);
	    MesajGonder(playerid, "%s adli ürün eklenmistir.", ad);
	}
	return 1;
}
Dialog:BakiyeGonderID(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (isnull(inputtext)) return Dialog_Show(playerid, BakiyeGonderID, DIALOG_STYLE_INPUT, "Bakiye Gönder", "{ff0022}> {FFFFFF}Lütfen Bakiye göndermek istediginiz oyuncunun ID'sini girin:", "Devam", "Geri");
	    if (!IsNumeric(inputtext)) return Dialog_Show(playerid, BakiyeGonderID, DIALOG_STYLE_INPUT, "Bakiye Gönder", "{ff0022}> {FFFFFF}Lütfen Bakiye göndermek istediginiz oyuncunun ID'sini girin:", "Devam", "Geri");
	    new id = strval(inputtext);
	    if (!IsPlayerConnected(id))
	    {
	        HataMesajGonder(playerid, "Oyuncu oyunda degil.");
	        return Dialog_Show(playerid, BakiyeGonderID, DIALOG_STYLE_INPUT, "Bakiye Gönder", "{ff0022}> {FFFFFF}Lütfen Bakiye göndermek istediginiz oyuncunun ID'sini girin:", "Devam", "Geri");
	    }
	    if (id == playerid)
	    {
	        HataMesajGonder(playerid, "Kendinize bakiye gönderemezsiniz.");
	        return Dialog_Show(playerid, BakiyeGonderID, DIALOG_STYLE_INPUT, "Bakiye Gönder", "{ff0022}> {FFFFFF}Lütfen Bakiye göndermek istediginiz oyuncunun ID'sini girin:", "Devam", "Geri");
	    }
	    SetPVarInt(playerid, "BakiyeID", id);
	    Dialog_Show(playerid, BakiyeGonder, DIALOG_STYLE_INPUT, "Bakiye Gönder", "{ff0022}> {FFFFFF}Lütfen göndermek istediginiz bakiye miktarini girin:", "Gönder", "Geri");
	}
	return 1;
}
Dialog:BakiyeGonder(playerid, response, listitem, inputtext[])
{
	if (!response) return Dialog_Show(playerid, BakiyeGonderID, DIALOG_STYLE_INPUT, "Bakiye Gönder", "{ff0022}> {FFFFFF}Lütfen Bakiye göndermek istediginiz oyuncunun ID'sini girin:", "Devam", "Geri");
	if (response)
	{
	    if (isnull(inputtext)) return Dialog_Show(playerid, BakiyeGonder, DIALOG_STYLE_INPUT, "Bakiye Gönder", "{ff0022}> {FFFFFF}Lütfen göndermek istediginiz bakiye miktarini girin:", "Gönder", "Geri");
	    if (!IsNumeric(inputtext)) return Dialog_Show(playerid, BakiyeGonder, DIALOG_STYLE_INPUT, "Bakiye Gönder", "{ff0022}> {FFFFFF}Lütfen göndermek istediginiz bakiye miktarini girin:", "Gönder", "Geri");
	    if (strval(inputtext) <= 0 || strval(inputtext) > 100)
	    {
	        HataMesajGonder(playerid, "Minimum 1, maksimum 100 TL gönderebilirsiniz!");
	        return Dialog_Show(playerid, BakiyeGonder, DIALOG_STYLE_INPUT, "Bakiye Gönder", "{ff0022}> {FFFFFF}Lütfen göndermek istediginiz bakiye miktarini girin:", "Gönder", "Geri");
		}
		if (PlayerData[playerid][pBakiye] < strval(inputtext))
		{
		    HataMesajGonder(playerid, "O kadar bakiyeniz yok!");
		    return Dialog_Show(playerid, BakiyeGonder, DIALOG_STYLE_INPUT, "Bakiye Gönder", "{ff0022}> {FFFFFF}Lütfen göndermek istediginiz bakiye miktarini girin:", "Gönder", "Geri");
		}
		new id = GetPVarInt(playerid, "BakiyeID");
		if (!OyundaDegil(id))
		{
		    HataMesajGonder(playerid, "Bakiye göndereceginiz kisi oyundan çikti.");
		    return 1;
		}
		PlayerData[playerid][pBakiye] -= strval(inputtext);
		PlayerData[id][pBakiye] += strval(inputtext);
		MesajGonder(playerid, "%s(%d) adli kisiye %d TL bakiye gönderdiniz.", ReturnName(id, 0), id, strval(inputtext));
		MesajGonder(id, "%s(%d) adli kisi size %d TL bakiye gönderdi.", ReturnName(playerid, 0), playerid, strval(inputtext));
		DeletePVar(playerid, "BakiyeID");
	}
	return 1;
}
Dialog:GarajGiris(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = GetPVarInt(playerid, "Garaj");
	    if (GarageData[id][gExists])
	    {
	        if (isnull(inputtext)) return Dialog_Show(playerid, GarajGiris, DIALOG_STYLE_INPUT, "Garaj sifre", "Bu garaj sifreli, lütfen sifreyi giriniz:", "Tamam", "Kapat");
	        if (!strcmp(GarageData[id][gSifre], inputtext, false))
	        {
	            if (!IsPlayerInAnyVehicle(playerid))
             	{
              		SetPlayerPos(playerid,GarageInteriors[GarageData[id][gInterior]][intX],GarageInteriors[GarageData[id][gInterior]][intY],GarageInteriors[GarageData[id][gInterior]][intZ]);
                	SetPlayerInterior(playerid,GarageInteriors[GarageData[id][gInterior]][intID]);
                 	SetPlayerVirtualWorld(playerid, id+23);
                  	SetPlayerFacingAngle(playerid,GarageInteriors[GarageData[id][gInterior]][intA]);
                   	SetCameraBehindPlayer(playerid);
                   	PlayerData[playerid][pGarage] = id;
              	}
              	if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
              	{
              	    new vehicleid = GetPlayerVehicleID(playerid);
              	    SetVehiclePos(vehicleid, GarageInteriors[GarageData[id][gInterior]][intX],GarageInteriors[GarageData[id][gInterior]][intY],GarageInteriors[GarageData[id][gInterior]][intZ]);
              	    SetVehicleVirtualWorld(vehicleid, id+23);
              	    LinkVehicleToInteriorEx(vehicleid, GarageInteriors[GarageData[id][gInterior]][intID]);
              	    SetVehicleZAngle(vehicleid, GarageInteriors[GarageData[id][gInterior]][intA]);
              	    SetPlayerPos(playerid,GarageInteriors[GarageData[id][gInterior]][intX],GarageInteriors[GarageData[id][gInterior]][intY],GarageInteriors[GarageData[id][gInterior]][intZ]);
                	SetPlayerInterior(playerid,GarageInteriors[GarageData[id][gInterior]][intID]);
                 	SetPlayerVirtualWorld(playerid, id+23);
                  	SetPlayerFacingAngle(playerid,GarageInteriors[GarageData[id][gInterior]][intA]);
                   	SetCameraBehindPlayer(playerid);
              	    PutPlayerInVehicle(playerid, vehicleid, 0);
              	    ObjelerYukleniyor(playerid);
              	    PlayerData[playerid][pGarage] = id;
              	    foreach (new i:Player)
              	    {
              	        if (IsPlayerInVehicle(i, vehicleid) && GetPlayerVehicleSeat(i) != 128 && GetPlayerVehicleSeat(i) != 0)
						{
						    SetPlayerPos(i,GarageInteriors[GarageData[id][gInterior]][intX],GarageInteriors[GarageData[id][gInterior]][intY],GarageInteriors[GarageData[id][gInterior]][intZ]);
                			SetPlayerInterior(i,GarageInteriors[GarageData[id][gInterior]][intID]);
                 			SetPlayerVirtualWorld(i, id+23);
                  			SetPlayerFacingAngle(i,GarageInteriors[GarageData[id][gInterior]][intA]);
                   			SetCameraBehindPlayer(i);
                   			PutPlayerInVehicle(i, vehicleid, GetPlayerVehicleSeat(i));
                   			ObjelerYukleniyor(i);
                   			PlayerData[i][pGarage] = id;
              	        }
              	    }
              	}
              	DeletePVar(playerid, "Garaj");
	        }
	        else
	        {
	            HataMesajGonder(playerid, "Hatali sifre girdiniz!");
	            return Dialog_Show(playerid, GarajGiris, DIALOG_STYLE_INPUT, "Garaj sifre", "Bu garaj sifreli, lütfen sifreyi giriniz:", "Tamam", "Kapat");
	        }
	    }
	}
	return 1;
}
Dialog:GarajAyarlar(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = GetPVarInt(playerid, "GarajID");
	    if (listitem == 0)
	    {
	        if (GarageData[id][gKilit] == 1) GarageData[id][gKilit] = 0;
	        else GarageData[id][gKilit] = 1;

	        Garaj_Yenile(id);
	        Garaj_Kaydet(id);
	        cmd_garaj(playerid);
	    }
	    if (listitem == 1)
	    {
	        Dialog_Show(playerid, GarajSifre, DIALOG_STYLE_INPUT, "Garaj ~ sifre", "{FFFFFF}Lütfen garajiniz için bir sifre belirleyin:\n\n{ff0000}NOT: {FFFFFF}sifre yerine 'Yok' (tirnaksiz) yazarsaniz garaj sifresiz olur.", "Degistir", "Geri");
	    }
	    if (listitem == 2)
	    {
	        if (GarageData[id][gParkDurum] == 1) GarageData[id][gParkDurum] = 0;
	        else GarageData[id][gParkDurum] = 1;

	        Garaj_Yenile(id);
	        Garaj_Kaydet(id);
	        cmd_garaj(playerid);
	    }
	    if (listitem == 3)
	    {
	        Garaj_AracListesi(playerid, id);
		}
	}
	return 1;
}
stock Garaj_AracListesi(playerid, id)
{
	new str[1000], baslik[60], sayi;
	for (new i; i<MAX_ARAC; i++) if (AracInfo[i][aracExists] && AracInfo[i][aracGaraj] == id)
	{
	    ParkedilenAraclar[playerid][sayi] = i;
	    sayi++;
	    format(str, sizeof(str), "%s{FFFFFF}%s (ID: %d)\n", str, ReturnVehicleModelName(AracInfo[i][aracModel]), i);

	}
	if (sayi == 0) return HataMesajGonder(playerid, "Park edilmis araç yok.");
	format(baslik, sizeof(baslik), "Parkedilen Araçlar {f44242}(%d/%d)", sayi, GarageData[id][gAracLimit]);
	Dialog_Show(playerid, GarajAraclar, DIALOG_STYLE_LIST, baslik, str, "Garajdan At", "Geri");
	return 1;
}
Dialog:GarajAraclar(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_garaj(playerid);
	if (response)
	{
	    new aracid = ParkedilenAraclar[playerid][listitem];
	    new garajid = GetPVarInt(playerid, "GarajID");
	    if (AracInfo[aracid][aracExists] && AracInfo[aracid][aracGaraj] == garajid)
	    {
	        SetVehiclePos(AracInfo[aracid][aracVehicle], GarageData[garajid][gPos][0]+1, GarageData[garajid][gPos][1]+1, GarageData[garajid][gPos][2]);
	        LinkVehicleToInteriorEx(AracInfo[aracid][aracVehicle], 0);
	        SetVehicleVirtualWorld(AracInfo[aracid][aracVehicle], GarageData[garajid][gVw]);
	        AracInfo[aracid][aracPos][0] = GarageData[garajid][gPos][0]+1;
	        AracInfo[aracid][aracPos][1] = GarageData[garajid][gPos][1]+1;
	        AracInfo[aracid][aracPos][2] = GarageData[garajid][gPos][2]+1;
	        AracInfo[aracid][aracGaraj] = -1;
	        AracInfo[aracid][aracInterior] = 0;
	        AracInfo[aracid][aracWorld] = GarageData[garajid][gVw];
	        MesajGonder(playerid, "%s model araç garajdan atildi.", ReturnVehicleModelName(AracInfo[aracid][aracModel]));
	        Garaj_AracListesi(playerid, garajid);
	    }
	}
	return 1;
}
Dialog:GarajSifre(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_garaj(playerid);
	if (response)
	{
	    if (isnull(inputtext)) return Dialog_Show(playerid, GarajSifre, DIALOG_STYLE_INPUT, "Garaj ~ sifre", "{FFFFFF}Lütfen garajiniz için bir sifre belirleyin:\n\n{ff0000}NOT: {FFFFFF}sifre yerine 'Yok' (tirnaksiz) yazarsaniz garaj sifresiz olur.", "Degistir", "Geri");
	    if (strlen(inputtext) > 30) return Dialog_Show(playerid, GarajSifre, DIALOG_STYLE_INPUT, "Garaj ~ sifre", "{FFFFFF}Lütfen garajiniz için bir sifre belirleyin:\n\n{ff0000}NOT: {FFFFFF}sifre yerine 'Yok' (tirnaksiz) yazarsaniz garaj sifresiz olur.", "Degistir", "Geri");

	    format(GarageData[GetPVarInt(playerid, "GarajID")][gSifre], 30, inputtext);
	    Garaj_Kaydet(GetPVarInt(playerid, "GarajID"));
	    cmd_garaj(playerid);
	}
	return 1;
}
Dialog:LSPD(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
	            KisiselCezalar(playerid);
	        }
	        case 1:
	        {
	            Dialog_Show(playerid, AracCezaPlaka, DIALOG_STYLE_INPUT, "{FFFFFF}Araç Cezalari", "Lütfen cezasini ödemek istediginiz aracin plakasini girin:", "Devam", "Kapat");
	        }
	        case 2:
	        {
	            new str[1000], sayi;
	            format(str, sizeof(str), "ID\tAraç Model\tCeza\n");
	            for (new i; i<MAX_ARAC; i++) if (AracInfo[i][aracExists] && AracInfo[i][aracSahip] == PlayerData[playerid][pID] && AracInfo[i][aracBaglandi] == 1)
	            {
	                sayi++;
	                format(str, sizeof(str), "%s%d\t%s\t{04ff00}%s\n", str, i, ReturnVehicleModelName(AracInfo[i][aracModel]), FormatNumber(AracInfo[i][aracBaglandiCeza]));
	            }
	            if (sayi == 0) return HataMesajGonder(playerid, "Haczedilen araciniz yok.");
	            Dialog_Show(playerid, HaczedilenAraclar, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}Haczedilen Araçlarim", str, "Serbest Birak", "Kapat");
	        }
	        case 3:
	        {
	            Dialog_Show(playerid, KefaletOde, DIALOG_STYLE_INPUT, "{FFFFFF}Kefalet Öde", "Lütfen kefaletini ödemek istediginiz kisinin ID'sini girin:", "Devam", "Kapat");
	        }
	        case 4:
	        {
	            if (!spamProtect(playerid, "MemurCagir", 60)) return HataMesajGonder(playerid, "Tekrar memur çagirmak için 1 dakika beklemelisiniz.");
	        	SendBirlikMessageEx(BIRLIK_LSPD, COLOR_DEPARTMENT, "** DEPARTMAN: %s adli kisi lobiye Memur talep ediyor.", ReturnName(playerid, 0));
	            MesajGonder(playerid, "Memur çagirdiniz.");
			 }
	        case 5:
	        {
	            new str[1024], sayi;
	            format(str, sizeof(str), "ID\tAraç Model\tFiyat\n");
	            for (new i; i<MAX_ARAC; i++) if (AracInfo[i][aracExists] && AracInfo[i][aracSahip] == PlayerData[playerid][pID] && AracInfo[i][aracHurda] == 1)
	            {
                    new hurda = GetGaleriFiyat(AracInfo[i][aracModel])/5;
	                sayi++;
	                format(str, sizeof(str), "%s%d\t%s\t%s\n", str, i, ReturnVehicleModelName(AracInfo[i][aracModel]), FormatNumber(hurda));
	            }
	            if (sayi == 0) return HataMesajGonder(playerid, "Hurdada aracýnýz yok.");
	            Dialog_Show(playerid, HurdadakiAraclar, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}Hurdadaki Araçlarým", str, "Hurdadan Çýkart", "Kapat");
	        }
	    }
	}
	return 1;
}
Dialog:AracCezaPlaka(playerid, response, listitem, inputtext[])
{
	if (response)
	{
    	if (isnull(inputtext)) return Dialog_Show(playerid, AracCezaPlaka, DIALOG_STYLE_INPUT, "{FFFFFF}Araç Cezalari", "Lütfen cezasini ödemek istediginiz aracin plakasini girin:", "Devam", "Kapat");
	    new id = -1;
	    for (new i; i != MAX_ARAC; i++)
	    {
	        if (AracInfo[i][aracExists] && AracInfo[i][aracTip] == 4 && AracInfo[i][aracSahip] > 0)
	        {
	            if (strcmp(AracInfo[i][aracPlaka], inputtext, false) == 0)
	            {
	                id = i;
	                break;
				}
			}
		}
		if (id == -1)
		{
		    HataMesajGonder(playerid, "Geçersiz plaka girdiniz.");
		    return Dialog_Show(playerid, AracCezaPlaka, DIALOG_STYLE_INPUT, "{FFFFFF}Araç Cezalari", "Lütfen cezasini ödemek istediginiz aracin plakasini girin:", "Devam", "Kapat");
		}
		if (AracInfo[id][aracTicket] == 0)
		{
		    HataMesajGonder(playerid, "Bu aracin cezasi yok.");
		    return Dialog_Show(playerid, AracCezaPlaka, DIALOG_STYLE_INPUT, "{FFFFFF}Araç Cezalari", "Lütfen cezasini ödemek istediginiz aracin plakasini girin:", "Devam", "Kapat");
		}
		SetPVarInt(playerid, "TicketID", id);
		Dialog_Show(playerid, AracCezaOde, DIALOG_STYLE_MSGBOX, "Araç Ceza Öde", "{FFFFFF}Bu aracin {04ff00}%s {FFFFFF}cezasi bulunmaktadir. Ödemek istiyor musunuz?", "Öde", "Iptal", FormatNumber(AracInfo[id][aracTicket]));
	}
	return 1;
}
Dialog:AracCezaOde(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = GetPVarInt(playerid, "TicketID");
	    if (AracInfo[id][aracTicket] > PlayerData[playerid][pCash]) return HataMesajGonder(playerid, "Yeterli paraniz yok.");
	    ParaVer(playerid, -AracInfo[id][aracTicket]);
	    MesajGonder(playerid, "Aracin %s miktar cezasini ödediniz.", FormatNumber(AracInfo[id][aracTicket]));
	    AracInfo[id][aracTicket] = 0;
	    AracInfo[id][aracTicketTime] = 0;
	    AracInfo[id][aracElKonuldu] = 0;
	    Arac_Kaydet(id);
	    DeletePVar(playerid, "TicketID");
	}
	return 1;
}
Dialog:KefaletOde(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (isnull(inputtext) || !IsNumeric(inputtext) || playerid == strval(inputtext)) return Dialog_Show(playerid, KefaletOde, DIALOG_STYLE_INPUT, "{FFFFFF}Kefalet Öde", "Lütfen kefaletini ödemek istediginiz kisinin ID'sini girin:", "Devam", "Kapat");
	    new id = strval(inputtext);
	    if (!OyundaDegil(id))
	    {
	        HataMesajGonder(playerid, "Oyuncu oyunda degil.");
	        return Dialog_Show(playerid, KefaletOde, DIALOG_STYLE_INPUT, "{FFFFFF}Kefalet Öde", "Lütfen kefaletini ödemek istediginiz kisinin ID'sini girin:", "Devam", "Kapat");
	    }
	    if (PlayerData[id][pHapis] == 0 || PlayerData[id][pHapisSure]/60 < 3)
	    {
	        HataMesajGonder(playerid, "Bu oyuncu IC hapiste degil veya hapisten çikmasina az kalmis.");
	        return Dialog_Show(playerid, KefaletOde, DIALOG_STYLE_INPUT, "{FFFFFF}Kefalet Öde", "Lütfen kefaletini ödemek istediginiz kisinin ID'sini girin:", "Devam", "Kapat");
	    }
	    SetPVarInt(playerid, "KefaletID", strval(inputtext));
	    Dialog_Show(playerid, KefaletOde2, DIALOG_STYLE_MSGBOX, "{FFFFFF}Kefalet Öde", "{FFFFFF}%s adli kisiyi hapisten çikarmak istiyorsaniz {04ff00}$%d {FFFFFF}ödemelisiniz. Kabul ediyor musunuz?", "Evet", "Hayir", ReturnName(id, 0), floatround(PlayerData[id][pHapisSure]/60*500));
	}
	return 1;
}
Dialog:KefaletOde2(playerid, response, listitem, inputtext[])
{
	if (!response) return DeletePVar(playerid, "KefaletID");
	if (response)
	{
	    new id = GetPVarInt(playerid, "KefaletID");
	    if (!OyundaDegil(id)) return HataMesajGonder(playerid, "Oyuncu oyunda degil.");
	    if (PlayerData[id][pHapis] == 0 || PlayerData[id][pHapisSure]/60 < 3) return HataMesajGonder(playerid, "Bu oyuncu IC hapiste degil veya hapisten çikmasina az kalmis.");
	    if (PlayerData[playerid][pCash] < floatround(PlayerData[id][pHapisSure]/60*500)) return HataMesajGonder(playerid, "Yeterli paraniz yok.");
	    new miktar = floatround(PlayerData[id][pHapisSure]/60*500);
	    ParaVer(playerid, -miktar);
	    MesajGonder(playerid, "%s adli kisiyi {04ff00}%s {FFFFFF} kefalet ödeyerek çikardiniz.", ReturnName(id, 0), FormatNumber(miktar));
	    MesajGonder(id, "%s adli kisi {04ff00}%s {FFFFFF}kefalet ödeyerek sizi hapisten çikardi.", ReturnName(playerid, 0), FormatNumber(miktar));
	    PlayerData[id][pHapis] = 0;
	    PlayerData[id][pHapisSure] = 0;
		SetPlayerPos(id, 1464.9292,-1690.9778,-70.0371);
  		SetPlayerInterior(id, 0);
    	SetPlayerVirtualWorld(id, 0);
     	SetCameraBehindPlayer(id);
      	ObjelerYukleniyor(id);
  		PlayerTextDrawHide(id, HapisTD[id]);

	}
	return 1;
}
Dialog:HaczedilenAraclar(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = strval(inputtext);
	    if (AracInfo[id][aracExists] && AracInfo[id][aracSahip] == PlayerData[playerid][pID] && AracInfo[id][aracBaglandi] == 1)
	    {
	        if (AracInfo[id][aracBaglandiCeza] > PlayerData[playerid][pCash]) return HataMesajGonder(playerid, "Yeterli paraniz yok.");

	        ParaVer(playerid, -AracInfo[id][aracBaglandiCeza]);

			MesajGonder(playerid, "%s model aracinizi {04ff00}%s {FFFFFF}ödeyerek serbest biraktiniz. (/araclarim)",ReturnVehicleModelName(AracInfo[id][aracModel]), FormatNumber(AracInfo[id][aracBaglandiCeza]));
			MesajGonder(playerid, "Araciniz LSPD binasinin önünde park edildi. (\"/aracimibul\")");

			AracInfo[id][aracPos][0] = 1511.8376;
            AracInfo[id][aracPos][1] = -1661.9646;
            AracInfo[id][aracPos][2] = 13.4252;
            AracInfo[id][aracPos][3] = 269.9812;

			AracInfo[id][aracBaglandi] = 0;
	        AracInfo[id][aracBaglandiCeza] = 0;

			Arac_Kaydet(id);
			Arac_Spawn(id, 1);
	    }
	}
	return 1;
}
stock KisiselCezalar(playerid)
{
	new str[1000], sayi = 0;
	strcat(str, "Ekleyen\tSebep\tMiktar\tTarih\n");
	for (new i; i<MAX_PLAYER_TICKETS; i++) if (TicketData[playerid][i][ticketExists])
	{
	    CezaListele[playerid][sayi] = i;
	    sayi++;
	    format(str, sizeof(str), "%s%s\t%.20s\t{04ff00}%s\t%s\n", str, TicketData[playerid][i][ticketMemur], TicketData[playerid][i][ticketReason], FormatNumber(TicketData[playerid][i][ticketFee]), TicketData[playerid][i][ticketDate]);
	}
	if (sayi == 0) return HataMesajGonder(playerid, "Cezaniz yok.");
	Dialog_Show(playerid, KisiselCezalar, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}Kisisel Cezalar", str, "Öde", "Geri");
	return 1;
}
Dialog:KisiselCezalar(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = CezaListele[playerid][listitem];
	    if (TicketData[playerid][id][ticketExists])
	    {
	        if (TicketData[playerid][id][ticketFee] > PlayerData[playerid][pCash]) return HataMesajGonder(playerid, "Bu cezayi ödemek için yeterli paraniz yok.");
	        ParaVer(playerid, -TicketData[playerid][id][ticketFee]);
	        MesajGonder(playerid, "{04ff00}%s {FFFFFF}miktar cezayi ödediniz.", FormatNumber(TicketData[playerid][id][ticketFee]));
	        Ticket_Remove(playerid, id);
	    }
	}
	return 1;
}
Dialog:HukumetBinasi(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (listitem == 0)
	    {
	        Dialog_Show(playerid, AracVergi, DIALOG_STYLE_INPUT, "Araç Plaka", "{E74C3C}> {FFFFFF}Lütfen vergisini ödemek istediginiz aracin plakasini girin:", "Devam", "Geri");
	    }
	    if (listitem == 1)
	    {
	        Dialog_Show(playerid, IsyeriVergi, DIALOG_STYLE_INPUT, "isyeri ID", "{E74C3C}> {FFFFFF}Lütfen vergisini ödemek istediginiz isyerinin ID'sini girin:", "Devam", "Geri");
	    }
	    if (listitem == 2)
	    {
	        Dialog_Show(playerid, EvVergi, DIALOG_STYLE_INPUT, "Ev ID", "{E74C3C}> {FFFFFF}Lütfen vergisini ödemek istediginiz evin ID'sini girin:", "Devam", "Geri");
	    }
	    if (listitem == 3)
	    {
			if (PlayerData[playerid][pPartner] < 1) return HataMesajGonder(playerid, "Evli degilsiniz.");
			if (PlayerData[playerid][pCash] < 1500) return HataMesajGonder(playerid, "Bosanmak için yeterli paraniz yok. ($1,500)");
			Dialog_Show(playerid, Bosanma, DIALOG_STYLE_MSGBOX, "Bosanma", "{E74C3C}> {FFFFFF}$1,500 ödeyerek esinizden bosanmayi onayliyor musunuz?", "Evet", "Hayir");
	    }
	    if (listitem == 4)
	    {
	        if (PlayerData[playerid][pMaas] < 1) return HataMesajGonder(playerid, "Maasiniz yok.");
	        Dialog_Show(playerid, MaasCek, DIALOG_STYLE_INPUT, "Maas Çek", "{E74C3C}> {FFFFFF}Lütfen çekmek istediginiz maas miktarini girin:", "Çek", "Geri");
	    }
	}
	return 1;
}
Dialog:Bosanma(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (PlayerData[playerid][pPartner] > 0 && PlayerData[playerid][pCash] >= 1500)
	    {
	        new query[100];
	        ParaVer(playerid, -1500);
	        PlayerData[playerid][pPartner] = 0;
	        format(query, sizeof(query), "UPDATE `oyuncular` SET `Partner` = '0' WHERE `Partner` = '%d'", PlayerData[playerid][pID]);
	        mysql_query(g_SQL, query, false);
	        foreach (new i : Player) if (PlayerData[i][pPartner] == PlayerData[playerid][pID])
	        {
            	PlayerData[i][pPartner] = 0;
            }
            MesajGonder(playerid, "$1,500 ödeyerek esinizden bosandiniz.");
	    }
	}
	return 1;
}
Dialog:MaasCek(playerid, response, listitem, inputtext[])
{
	if (!response) return Dialog_Show(playerid, HukumetBinasi, DIALOG_STYLE_LIST, "{FFFFFF}Hükümet Binasi", "{FFFFFF}Araç Vergisi Sorgula\n{FFFFFF}isyeri Vergisi Sorgula\n{FFFFFF}Ev Vergisi Sorgula\n{FFFFFF}Bosanma islemleri\n{FFFFFF}Maas Çek {00ff15}(%s)", "Seç", "Kapat", FormatNumber(PlayerData[playerid][pMaas]));
	if (response)
	{
	    if (isnull(inputtext) || !IsNumeric(inputtext)) return Dialog_Show(playerid, MaasCek, DIALOG_STYLE_INPUT, "Maas Çek", "{E74C3C}> {FFFFFF}Lütfen çekmek istediginiz maas miktarini girin:", "Çek", "Geri");
	    if (strval(inputtext) < 1) return Dialog_Show(playerid, MaasCek, DIALOG_STYLE_INPUT, "Maas Çek", "{E74C3C}> {FFFFFF}Lütfen çekmek istediginiz maas miktarini girin:", "Çek", "Geri");
	    if (strval(inputtext) > PlayerData[playerid][pMaas])
	    {
	        HataMesajGonder(playerid, "O kadar maasiniz yok.");
	        return Dialog_Show(playerid, MaasCek, DIALOG_STYLE_INPUT, "Maas Çek", "{E74C3C}> {FFFFFF}Lütfen çekmek istediginiz maas miktarini girin:", "Çek", "Geri");
	    }
	    PlayerData[playerid][pMaas] -= strval(inputtext);
	    ParaVer(playerid, strval(inputtext));
	    MesajGonder(playerid, "Maasinizdan {04ff00}%s {C8C8C8}miktar para çektiniz.", FormatNumber(strval(inputtext)));
	}
	return 1;
}
Dialog:EvVergi(playerid, response, listitem, inputtext[])
{
	if (!response) return Dialog_Show(playerid, HukumetBinasi, DIALOG_STYLE_LIST, "{FFFFFF}Hükümet Binasi", "{FFFFFF}Araç Vergisi Sorgula\n{FFFFFF}isyeri Vergisi Sorgula\n{FFFFFF}Ev Vergisi Sorgula\n{FFFFFF}Bosanma islemleri\n{FFFFFF}Maas Çek {00ff15}(%s)", "Seç", "Kapat", FormatNumber(PlayerData[playerid][pMaas]));
	if (response)
	{
	    if (isnull(inputtext) || !IsNumeric(inputtext)) return Dialog_Show(playerid, EvVergi, DIALOG_STYLE_INPUT, "Ev ID", "{E74C3C}> {FFFFFF}Lütfen vergisini ödemek istediginiz evin ID'sini girin:", "Devam", "Geri");
	    if ((strval(inputtext) < 0 || strval(inputtext) >= MAX_EV) || !HouseInfo[strval(inputtext)][evExists])
	    {
	        HataMesajGonder(playerid, "Hatali ev ID'si girdiniz.");
	        return Dialog_Show(playerid, EvVergi, DIALOG_STYLE_INPUT, "Ev ID", "{E74C3C}> {FFFFFF}Lütfen vergisini ödemek istediginiz evin ID'sini girin:", "Devam", "Geri");
	    }
	    if (HouseInfo[strval(inputtext)][evVergi] < 1)
	    {
	        HataMesajGonder(playerid, "Bu evin vergisi yok.");
            return Dialog_Show(playerid, EvVergi, DIALOG_STYLE_INPUT, "Ev ID", "{E74C3C}> {FFFFFF}Lütfen vergisini ödemek istediginiz evin ID'sini girin:", "Devam", "Geri");
	    }
	    SetPVarInt(playerid, "evID", strval(inputtext));
	    Dialog_Show(playerid, EvVergiOde, DIALOG_STYLE_MSGBOX, "Ev Vergi Öde", "{FFFFFF}'%s' adli evin {04ff00}%s {C8C8C8}vergisi bulunmaktadir. Ödemek istiyor musunuz?", "Öde", "Geri", HouseInfo[strval(inputtext)][evIsim], FormatNumber(HouseInfo[strval(inputtext)][evVergi]));
	}
	return 1;
}
Dialog:EvVergiOde(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = GetPVarInt(playerid, "evID");
	    if (HouseInfo[id][evVergi] > PlayerData[playerid][pCash]) return HataMesajGonder(playerid, "Yeterli paraniz yok.");
	    ParaVer(playerid, -HouseInfo[id][evVergi]);
	    MesajGonder(playerid, "%s adli evin {04ff00}%s {C8C8C8}miktar vergisini ödediniz.", HouseInfo[id][evIsim], FormatNumber(HouseInfo[id][evVergi]));
	    HouseInfo[id][evVergi] = 0;
	    HouseInfo[id][evVergiSure] = 0;
	    Ev_Kaydet(id);
	    DeletePVar(playerid, "evID");
	}
	return 1;
}
Dialog:IsyeriVergi(playerid, response, listitem, inputtext[])
{
	if (!response) return Dialog_Show(playerid, HukumetBinasi, DIALOG_STYLE_LIST, "{FFFFFF}Hükümet Binasý", "{FFFFFF}Araç Vergisi Sorgula\n{FFFFFF}Ýþyeri Vergisi Sorgula\n{FFFFFF}Ev Vergisi Sorgula\n{FFFFFF}Boþanma islemleri\n{FFFFFF}Maaþ Çek {00ff15}(%s)", "Seç", "Kapat", FormatNumber(PlayerData[playerid][pMaas]));
	if (response)
	{
	    if (isnull(inputtext) || !IsNumeric(inputtext)) return Dialog_Show(playerid, IsyeriVergi, DIALOG_STYLE_INPUT, "Ýþyeri ID", "{E74C3C}> {FFFFFF}Lütfen vergisini ödemek istediginiz iþyerinin ID'sini girin:", "Devam", "Geri");
	    if ((strval(inputtext) < 0 || strval(inputtext) >= MAX_ISYERI) || !Isyeri[strval(inputtext)][isyeriExists])
	    {
	        HataMesajGonder(playerid, "Hatali isyeri ID'si girdiniz.");
	        return Dialog_Show(playerid, IsyeriVergi, DIALOG_STYLE_INPUT, "Ýþyeri ID", "{E74C3C}> {FFFFFF}Lütfen vergisini ödemek istediginiz isyerinin ID'sini girin:", "Devam", "Geri");
	    }
	    if (Isyeri[strval(inputtext)][isyeriVergi] < 1)
	    {
	        HataMesajGonder(playerid, "Bu isyerinin vergisi yok.");
            return Dialog_Show(playerid, IsyeriVergi, DIALOG_STYLE_INPUT, "Ýþyeri ID", "{E74C3C}> {FFFFFF}Lütfen vergisini ödemek istediginiz isyerinin ID'sini girin:", "Devam", "Geri");
	    }
	    SetPVarInt(playerid, "IsyeriID", strval(inputtext));
	    Dialog_Show(playerid, IsyeriVergiOde, DIALOG_STYLE_MSGBOX, "Ýþyeri Vergi Öde", "{FFFFFF}'%s' adlý iþyerinin {04ff00}%s {FFFFFF}vergisi bulunmaktadýr. Ödemek istiyor musunuz?", "Öde", "Geri", Isyeri[strval(inputtext)][isyeriName], FormatNumber(Isyeri[strval(inputtext)][isyeriVergi]));
	}
	return 1;
}
Dialog:IsyeriVergiOde(playerid, response, listitem, inputtext[])
{
	//if (!response) return Dialog_Show(playerid, IsyeriVergi, DIALOG_STYLE_INPUT, "isyeri ID", "{E74C3C}> {FFFFFF}Lütfen vergisini ödemek istediginiz isyerinin ID'sini girin:", "Devam", "Geri");
	if (response)
	{
	    new id = GetPVarInt(playerid, "IsyeriID");
	    if (Isyeri[id][isyeriVergi] > PlayerData[playerid][pCash]) return HataMesajGonder(playerid, "Yeterli paraniz yok.");
	    ParaVer(playerid, -Isyeri[id][isyeriVergi]);
	    MesajGonder(playerid, "%s adlý iþyerinin {04ff00}%s {C8C8C8}miktar vergisini ödediniz.", Isyeri[id][isyeriName], FormatNumber(Isyeri[id][isyeriVergi]));
	    Isyeri[id][isyeriVergi] = 0;
	    Isyeri[id][isyeriVergiSure] = 0;
	    Isyeri_Kaydet(id);
	    DeletePVar(playerid, "IsyeriID");
	}
	return 1;
}
Dialog:AracVergi(playerid, response, listitem, inputtext[])
{
	if (!response) return Dialog_Show(playerid, HukumetBinasi, DIALOG_STYLE_LIST, "{FFFFFF}Hükümet Binasi", "{FFFFFF}Araç Vergisi Sorgula\n{FFFFFF}isyeri Vergisi Sorgula\n{FFFFFF}Ev Vergisi Sorgula\n{FFFFFF}Bosanma islemleri\n{FFFFFF}Maas Çek {00ff15}(%s)", "Seç", "Kapat", FormatNumber(PlayerData[playerid][pMaas]));
	if (response)
	{
	    if (isnull(inputtext)) return Dialog_Show(playerid, AracVergi, DIALOG_STYLE_INPUT, "Araç Plaka", "{E74C3C}> {FFFFFF}Lütfen vergisini ödemek istediginiz aracin plakasini girin:", "Devam", "Geri");
	    new id = -1;
	    for (new i; i < MAX_ARAC; i++)
	    {
	        if (AracInfo[i][aracExists] && AracInfo[i][aracTip] == 4 && AracInfo[i][aracSahip] > 0)
	        {
	            if (strcmp(AracInfo[i][aracPlaka], inputtext, false) == 0)
	            {
	                id = i;
	                break;
				}
			}
		}
		if (id == -1)
		{
		    HataMesajGonder(playerid, "Geçersiz plaka girdiniz.");
		    return Dialog_Show(playerid, AracVergi, DIALOG_STYLE_INPUT, "Araç Plaka", "{E74C3C}> {FFFFFF}Lütfen vergisini ödemek istediginiz aracin plakasini girin:", "Devam", "Geri");
		}
		if (AracInfo[id][aracVergi] == 0)
		{
		    HataMesajGonder(playerid, "Bu aracin vergisi yok.");
		    return Dialog_Show(playerid, AracVergi, DIALOG_STYLE_INPUT, "Araç Plaka", "{E74C3C}> {FFFFFF}Lütfen vergisini ödemek istediginiz aracin plakasini girin:", "Devam", "Geri");
		}
		SetPVarInt(playerid, "VergiID", id);
		Dialog_Show(playerid, AracVergiOde, DIALOG_STYLE_MSGBOX, "Araç Vergi Öde", "{FFFFFF}Bu aracin {04ff00}%s {FFFFFF}vergisi bulunmaktadir. Ödemek istiyor musunuz?", "Öde", "Iptal", FormatNumber(AracInfo[id][aracVergi]));
	}
	return 1;
}
Dialog:AracVergiOde(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = GetPVarInt(playerid, "VergiID");
	    if (AracInfo[id][aracVergi] > PlayerData[playerid][pCash]) return HataMesajGonder(playerid, "Yeterli paraniz yok.");
	    ParaVer(playerid, -AracInfo[id][aracVergi]);
	    MesajGonder(playerid, "Aracin %s miktar vergisini ödediniz.", FormatNumber(AracInfo[id][aracVergi]));
	    AracInfo[id][aracVergi] = 0;
	    AracInfo[id][aracVergiSure] = 0;
	    Arac_Kaydet(id);
	    DeletePVar(playerid, "VergiID");
	}
	return 1;
}
stock OyuncuSilahlar(playerid)
{
	new string[200],sayi = 0;
	strcat(string, "ID\t{FFFFFF}Silah Adi\t{FFFFFF}Mermi\n");
	new a;
	for (new i; i<13; i++) if (PlayerData[playerid][pSilahlar][i] > 0)
	{
	    sayi++;
	    GetPlayerWeaponData(playerid, i, a, PlayerData[playerid][pMermiler][i]);
	    format(string, sizeof(string), "%s{FFFFFF}%d\t{FFFFFF}%s\t{FFFFFF}%d\n", string, PlayerData[playerid][pSilahlar][i], ReturnWeaponName(PlayerData[playerid][pSilahlar][i]), PlayerData[playerid][pMermiler][i]);
	}
	if (sayi == 0) return HataMesajGonder(playerid, "Hiç silahiniz yok.");
	Dialog_Show(playerid, Silahlarim, DIALOG_STYLE_TABLIST_HEADERS, "Silah Envanteri", string, "Seç", "Kapat");
	return 1;
}
Dialog:Bagaj(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (listitem == 0)
	    {
	        if (GetFactionType(playerid) != BIRLIK_LSPD) Dialog_Show(playerid, BagajUyusturucular, DIALOG_STYLE_LIST, "{E74C3C}Bagaj: {FFFFFF}Uyuþturucular", "{FFFFFF}Uyuþturucu Koy\t{53f442}%d gram üzerinizde\n{FFFFFF}Uyuþturucu Al\t{ff0000}%d gram bagajda", "Seç", "Geri", PlayerDrugData[playerid][Drugs], AracInfo[GetPVarInt(playerid, "AracBagaj")][aracUyusturucu]);
	        else Dialog_Show(playerid, BagajUyusturucular, DIALOG_STYLE_LIST, "{E74C3C}Bagaj: {FFFFFF}Uyuþturucular", "{FFFFFF}Uyuþturucu Koy\t{53f442}%d gram üzerinizde\n{FFFFFF}Uyuþturucu Al\t{ff0000}%d gram bagajda\n{FFFFFF}Uyuþturuculara El Koy", "Seç", "Geri", PlayerDrugData[playerid][Drugs], AracInfo[GetPVarInt(playerid, "AracBagaj")][aracUyusturucu]);
	    }
	    if (listitem == 1)
	    {
	        AracSilahlar(playerid, GetPVarInt(playerid, "AracBagaj"));
		}
	}
	return 1;
}
Dialog:BagajUyusturucular(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_bagajddddd(playerid);
	if (response)
	{
	    if (listitem == 0)
	    {
	        if (PlayerDrugData[playerid][Drugs] < 1)
	        {
	            HataMesajGonder(playerid, "Üzerinizde hiç uyuþturucu yok.");
	            if (GetFactionType(playerid) != BIRLIK_LSPD) Dialog_Show(playerid, BagajUyusturucular, DIALOG_STYLE_LIST, "{E74C3C}Bagaj: {FFFFFF}Uyuþturucular", "{FFFFFF}Uyuþturucu Koy\t{53f442}%d gram üzerinizde\n{FFFFFF}Uyuþturucu Al\t{ff0000}%d gram bagajda", "Seç", "Geri", PlayerDrugData[playerid][Drugs], AracInfo[GetPVarInt(playerid, "AracBagaj")][aracUyusturucu]);
	        	else Dialog_Show(playerid, BagajUyusturucular, DIALOG_STYLE_LIST, "{E74C3C}Bagaj: {FFFFFF}Uyuþturucular", "{FFFFFF}Uyuþturucu Koy\t{53f442}%d gram üzerinizde\n{FFFFFF}Uyuþturucu Al\t{ff0000}%d gram bagajda\n{FFFFFF}Uyuþturuculara El Koy", "Seç", "Geri", PlayerDrugData[playerid][Drugs], AracInfo[GetPVarInt(playerid, "AracBagaj")][aracUyusturucu]);
	        	return 1;
	        }
	        Dialog_Show(playerid, UyusturucuKoy, DIALOG_STYLE_INPUT, "{E74C3C}Bagaj: {FFFFFF}Uyuþturucu Koy", "{E74C3C}» {FFFFFF}Lütfen araca koymak istediðiniz uyuþturucu miktarýný girin:", "Koy", "Geri");
		}
		if (listitem == 1)
		{
		    if (AracInfo[GetPVarInt(playerid, "AracBagaj")][aracUyusturucu] < 1)
		    {
		        HataMesajGonder(playerid, "Aracýn bagajýnda hiç uyuþturucu yok.");
		        if (GetFactionType(playerid) != BIRLIK_LSPD) Dialog_Show(playerid, BagajUyusturucular, DIALOG_STYLE_LIST, "{E74C3C}Bagaj: {FFFFFF}Uyuþturucular", "{FFFFFF}Uyuþturucu Koy\t{53f442}%d gram üzerinizde\n{FFFFFF}Uyuþturucu Al\t{ff0000}%d gram bagajda", "Seç", "Geri", PlayerDrugData[playerid][Drugs], AracInfo[GetPVarInt(playerid, "AracBagaj")][aracUyusturucu]);
	        	else Dialog_Show(playerid, BagajUyusturucular, DIALOG_STYLE_LIST, "{E74C3C}Bagaj: {FFFFFF}Uyuþturucular", "{FFFFFF}Uyuþturucu Koy\t{53f442}%d gram üzerinizde\n{FFFFFF}Uyuþturucu Al\t{ff0000}%d gram bagajda\n{FFFFFF}Uyuþturuculara El Koy", "Seç", "Geri", PlayerDrugData[playerid][Drugs], AracInfo[GetPVarInt(playerid, "AracBagaj")][aracUyusturucu]);
	        	return 1;
		    }
		    Dialog_Show(playerid, UyusturucuAl, DIALOG_STYLE_INPUT, "{E74C3C}Bagaj: {FFFFFF}Uyuþturucu Al", "{E74C3C}» {FFFFFF}Lütfen aracýn bagajýndan almak istediðiniz uyuþturucu miktarýný girin:", "Al", "Geri");
		}
		if (listitem == 2)
		{
		    if (AracInfo[GetPVarInt(playerid, "AracBagaj")][aracUyusturucu] < 1)
		    {
		        HataMesajGonder(playerid, "Aracýn bagajýnda hiç uyuþturucu yok.");
		        if (GetFactionType(playerid) != BIRLIK_LSPD) Dialog_Show(playerid, BagajUyusturucular, DIALOG_STYLE_LIST, "{E74C3C}Bagaj: {FFFFFF}Uyuþturucular", "{FFFFFF}Uyuþturucu Koy\t{53f442}%d gram üzerinizde\n{FFFFFF}Uyuþturucu Al\t{ff0000}%d gram bagajda", "Seç", "Geri", PlayerDrugData[playerid][Drugs], AracInfo[GetPVarInt(playerid, "AracBagaj")][aracUyusturucu]);
	        	else Dialog_Show(playerid, BagajUyusturucular, DIALOG_STYLE_LIST, "{E74C3C}Bagaj: {FFFFFF}Uyuþturucular", "{FFFFFF}Uyuþturucu Koy\t{53f442}%d gram üzerinizde\n{FFFFFF}Uyuþturucu Al\t{ff0000}%d gram bagajda\n{FFFFFF}Uyuþturuculara El Koy", "Seç", "Geri", PlayerDrugData[playerid][Drugs], AracInfo[GetPVarInt(playerid, "AracBagaj")][aracUyusturucu]);
	        	return 1;
		    }
		    AracInfo[GetPVarInt(playerid, "AracBagaj")][aracUyusturucu] = 0;
		    Arac_Kaydet(GetPVarInt(playerid, "AracBagaj"));
		    MesajGonder(playerid, "Aracýn bagajýnda bulunan uyuþturuculara el koydunuz.");
		}
	}
	return 1;
}
Dialog:EvUyusturucuKoy(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new evid = House_Inside(playerid);
	    if (evid == -1) return 1;
	    if (isnull(inputtext) || !IsNumeric(inputtext)) return Dialog_Show(playerid, EvUyusturucuKoy, DIALOG_STYLE_INPUT, "Uyusturucu Koy", "{FFFFFF}Lütfen evinize koymak istediginiz uyusturucu miktarini girin:", "Koy", "Kapat");
	    if (strval(inputtext) > PlayerDrugData[playerid][Drugs])
	    {
	        HataMesajGonder(playerid, "Üzerinizde o kadar uyusturucu yok.");
	        return Dialog_Show(playerid, EvUyusturucuKoy, DIALOG_STYLE_INPUT, "Uyusturucu Koy", "{FFFFFF}Lütfen evinize koymak istediginiz uyusturucu miktarini girin:", "Koy", "Kapat");
	    }
	    if (strval(inputtext) < PlayerDrugData[playerid][Drugs])
	    {
	        HataMesajGonder(playerid, "Üzerinizde o kadar uyusturucu yok.");
	        return Dialog_Show(playerid, EvUyusturucuKoy, DIALOG_STYLE_INPUT, "Uyusturucu Koy", "{FFFFFF}Lütfen evinize koymak istediginiz uyusturucu miktarini girin:", "Koy", "Kapat");
	    }
	    if (strval(inputtext) < 1)
	    {
	        HataMesajGonder(playerid, "En az 1 gram uyuþturucu koyabilirsiniz.");
	        return Dialog_Show(playerid, EvUyusturucuKoy, DIALOG_STYLE_INPUT, "Uyusturucu Koy", "{FFFFFF}Lütfen evinize koymak istediginiz uyusturucu miktarini girin:", "Koy", "Kapat");
	    }
	    HouseInfo[evid][evUyusturucu] += strval(inputtext);
	    PlayerDrugData[playerid][Drugs] -= strval(inputtext);
	    MesajGonder(playerid, "Evinizin kasasina %d gram uyusturucu koydunuz.", strval(inputtext));
	    Ev_Kaydet(evid);
	}
	return 1;
}
Dialog:EvUyusturucuAl(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = House_Inside(playerid);
	    if (id == -1) return 1;
	    if (isnull(inputtext) || !IsNumeric(inputtext)) return Dialog_Show(playerid, EvUyusturucuAl, DIALOG_STYLE_INPUT, "Uyusturucu Al", "{FFFFFF}Lütfen evinizin kasasindan almak istediginiz uyusturucu miktarini girin:", "Al", "Kapat");
	    if (strval(inputtext) > HouseInfo[id][evUyusturucu])
	    {
	        HataMesajGonder(playerid, "Evinizin kasasinda o kadar uyusturucu yok.");
	        return Dialog_Show(playerid, EvUyusturucuAl, DIALOG_STYLE_INPUT, "Uyusturucu Al", "{FFFFFF}Lütfen evinizin kasasindan almak istediginiz uyusturucu miktarini girin:", "Al", "Kapat");
	    }
		if (strval(inputtext) < 1)
	    {
	        HataMesajGonder(playerid, "En az 1 gram uyuþturucu alabilirsiniz.");
	        return Dialog_Show(playerid, EvUyusturucuKoy, DIALOG_STYLE_INPUT, "Uyusturucu Koy", "{FFFFFF}Lütfen evinize koymak istediginiz uyusturucu miktarini girin:", "Koy", "Kapat");
	    }
	    HouseInfo[id][evUyusturucu] -= strval(inputtext);
	    PlayerDrugData[playerid][Drugs] += strval(inputtext);
	    MesajGonder(playerid, "Evinizin kasasindan %d gram uyusturucu aldiniz.", strval(inputtext));
	    Ev_Kaydet(id);
	}
	return 1;
}
Dialog:UyusturucuAl(playerid, response, listitem, inputtext[])
{
	if (!response)
	{
	    if (GetFactionType(playerid) != BIRLIK_LSPD) Dialog_Show(playerid, BagajUyusturucular, DIALOG_STYLE_LIST, "{E74C3C}Bagaj: {FFFFFF}Uyusturucular", "{FFFFFF}Uyusturucu Koy\t{53f442}%d gram üzerinizde\n{FFFFFF}Uyusturucu Al\t{ff0000}%d gram bagajda", "Seç", "Geri", PlayerDrugData[playerid][Drugs], AracInfo[GetPVarInt(playerid, "AracBagaj")][aracUyusturucu]);
    	else Dialog_Show(playerid, BagajUyusturucular, DIALOG_STYLE_LIST, "{E74C3C}Bagaj: {FFFFFF}Uyusturucular", "{FFFFFF}Uyusturucu Koy\t{53f442}%d gram üzerinizde\n{FFFFFF}Uyusturucu Al\t{ff0000}%d gram bagajda\n{FFFFFF}Uyusturuculara El Koy", "Seç", "Geri", PlayerDrugData[playerid][Drugs], AracInfo[GetPVarInt(playerid, "AracBagaj")][aracUyusturucu]);
	}
	else
	{
	    if (isnull(inputtext)) return Dialog_Show(playerid, UyusturucuAl, DIALOG_STYLE_INPUT, "{E74C3C}Bagaj: {FFFFFF}Uyusturucu Al", "{E74C3C}> {FFFFFF}Lütfen aracin bagajindan almak istediginiz uyusturucu miktarini girin:", "Al", "Geri");
	    if (!IsNumeric(inputtext)) return Dialog_Show(playerid, UyusturucuAl, DIALOG_STYLE_INPUT, "{E74C3C}Bagaj: {FFFFFF}Uyusturucu Al", "{E74C3C}> {FFFFFF}Lütfen aracin bagajindan almak istediginiz uyusturucu miktarini girin:", "Al", "Geri");
	    if (strval(inputtext) < 1)
	    {
	        HataMesajGonder(playerid, "Geçersiz miktar girdiniz.");
	        return Dialog_Show(playerid, UyusturucuAl, DIALOG_STYLE_INPUT, "{E74C3C}Bagaj: {FFFFFF}Uyusturucu Al", "{E74C3C}> {FFFFFF}Lütfen aracin bagajindan almak istediginiz uyusturucu miktarini girin:", "Al", "Geri");
	    }
	    if (AracInfo[GetPVarInt(playerid, "AracBagaj")][aracUyusturucu] < strval(inputtext))
	    {
	        HataMesajGonder(playerid, "Bagajda o kadar uyusturucu yok.");
	        return Dialog_Show(playerid, UyusturucuAl, DIALOG_STYLE_INPUT, "{E74C3C}Bagaj: {FFFFFF}Uyusturucu Al", "{E74C3C}> {FFFFFF}Lütfen aracin bagajindan almak istediginiz uyusturucu miktarini girin:", "Al", "Geri");
	    }
	    if (PlayerDrugData[playerid][Drugs] + strval(inputtext) > CARRY_LIMIT)
	    {
	        HataMesajGonder(playerid, "Üzerinizde en fazla %d gram uyusturucu tasiyabilirsiniz.", CARRY_LIMIT);
	        return Dialog_Show(playerid, UyusturucuAl, DIALOG_STYLE_INPUT, "{E74C3C}Bagaj: {FFFFFF}Uyusturucu Al", "{E74C3C}> {FFFFFF}Lütfen aracin bagajindan almak istediginiz uyusturucu miktarini girin:", "Al", "Geri");
	    }
	    AracInfo[GetPVarInt(playerid, "AracBagaj")][aracUyusturucu] -= strval(inputtext);
	    PlayerDrugData[playerid][Drugs] += strval(inputtext);
	    MesajGonder(playerid, "Bagajdan %d gram uyusturucu aldiniz.", strval(inputtext));
	    if (GetFactionType(playerid) != BIRLIK_LSPD) Dialog_Show(playerid, BagajUyusturucular, DIALOG_STYLE_LIST, "{E74C3C}Bagaj: {FFFFFF}Uyusturucular", "{FFFFFF}Uyusturucu Koy\t{53f442}%d gram üzerinizde\n{FFFFFF}Uyusturucu Al\t{ff0000}%d gram bagajda", "Seç", "Geri", PlayerDrugData[playerid][Drugs], AracInfo[GetPVarInt(playerid, "AracBagaj")][aracUyusturucu]);
    	else Dialog_Show(playerid, BagajUyusturucular, DIALOG_STYLE_LIST, "{E74C3C}Bagaj: {FFFFFF}Uyusturucular", "{FFFFFF}Uyusturucu Koy\t{53f442}%d gram üzerinizde\n{FFFFFF}Uyusturucu Al\t{ff0000}%d gram bagajda\n{FFFFFF}Uyusturuculara El Koy", "Seç", "Geri", PlayerDrugData[playerid][Drugs], AracInfo[GetPVarInt(playerid, "AracBagaj")][aracUyusturucu]);
    	Arac_Kaydet(GetPVarInt(playerid, "AracBagaj"));
	}
	return 1;
}
Dialog:UyusturucuKoy(playerid, response, listitem, inputtext[])
{
	if (!response)
	{
	    if (GetFactionType(playerid) != BIRLIK_LSPD) Dialog_Show(playerid, BagajUyusturucular, DIALOG_STYLE_LIST, "{E74C3C}Bagaj: {FFFFFF}Uyusturucular", "{FFFFFF}Uyusturucu Koy\t{53f442}%d gram üzerinizde\n{FFFFFF}Uyusturucu Al\t{ff0000}%d gram bagajda", "Seç", "Geri", PlayerDrugData[playerid][Drugs], AracInfo[GetPVarInt(playerid, "AracBagaj")][aracUyusturucu]);
    	else Dialog_Show(playerid, BagajUyusturucular, DIALOG_STYLE_LIST, "{E74C3C}Bagaj: {FFFFFF}Uyusturucular", "{FFFFFF}Uyusturucu Koy\t{53f442}%d gram üzerinizde\n{FFFFFF}Uyusturucu Al\t{ff0000}%d gram bagajda\n{FFFFFF}Uyusturuculara El Koy", "Seç", "Geri", PlayerDrugData[playerid][Drugs], AracInfo[GetPVarInt(playerid, "AracBagaj")][aracUyusturucu]);
	}
	else
	{
	    if (isnull(inputtext)) return Dialog_Show(playerid, UyusturucuKoy, DIALOG_STYLE_INPUT, "{E74C3C}Bagaj: {FFFFFF}Uyusturucu Koy", "{E74C3C}> {FFFFFF}Lütfen araca koymak istediginiz uyusturucu miktarini girin:", "Koy", "Geri");
	    if (!IsNumeric(inputtext)) return Dialog_Show(playerid, UyusturucuKoy, DIALOG_STYLE_INPUT, "{E74C3C}Bagaj: {FFFFFF}Uyusturucu Koy", "{E74C3C}> {FFFFFF}Lütfen araca koymak istediginiz uyusturucu miktarini girin:", "Koy", "Geri");
	    if (strval(inputtext) < 1 || strval(inputtext) > 300)
	    {
	        HataMesajGonder(playerid, "Geçersiz miktar girdiniz. (1-300 arasinda olmalidir)");
	        return Dialog_Show(playerid, UyusturucuKoy, DIALOG_STYLE_INPUT, "{E74C3C}Bagaj: {FFFFFF}Uyusturucu Koy", "{E74C3C}> {FFFFFF}Lütfen araca koymak istediginiz uyusturucu miktarini girin:", "Koy", "Geri");
	    }
	    if (PlayerDrugData[playerid][Drugs] < strval(inputtext))
	    {
	        HataMesajGonder(playerid, "Üzerinizde o kadar uyusturucu yok.");
	        return Dialog_Show(playerid, UyusturucuKoy, DIALOG_STYLE_INPUT, "{E74C3C}Bagaj: {FFFFFF}Uyusturucu Koy", "{E74C3C}> {FFFFFF}Lütfen araca koymak istediginiz uyusturucu miktarini girin:", "Koy", "Geri");
	    }
	    if (IsVehicleBike(AracInfo[GetPVarInt(playerid, "AracBagaj")][aracVehicle]) && AracInfo[GetPVarInt(playerid, "AracBagaj")][aracUyusturucu] + strval(inputtext) >= 50)
	    {
	        HataMesajGonder(playerid, "Motor tipi araçlara en fazla 50 gram uyusturucu koyabilirsiniz.");
	        return Dialog_Show(playerid, UyusturucuKoy, DIALOG_STYLE_INPUT, "{E74C3C}Bagaj: {FFFFFF}Uyusturucu Koy", "{E74C3C}> {FFFFFF}Lütfen araca koymak istediginiz uyusturucu miktarini girin:", "Koy", "Geri");
	    }
	    if (AracInfo[GetPVarInt(playerid, "AracBagaj")][aracUyusturucu] + strval(inputtext) >= 100)
	    {
	        HataMesajGonder(playerid, "Aracin bagajinda maksimum 100 gram uyusturucu olabilir.");
	        return Dialog_Show(playerid, UyusturucuKoy, DIALOG_STYLE_INPUT, "{E74C3C}Bagaj: {FFFFFF}Uyusturucu Koy", "{E74C3C}> {FFFFFF}Lütfen araca koymak istediginiz uyusturucu miktarini girin:", "Koy", "Geri");
		}
	    PlayerDrugData[playerid][Drugs] -= strval(inputtext);
	    AracInfo[GetPVarInt(playerid, "AracBagaj")][aracUyusturucu] += strval(inputtext);
	    MesajGonder(playerid, "%d gram uyusturucuyu aracin bagajina koydunuz.", strval(inputtext));
	    if (GetFactionType(playerid) != BIRLIK_LSPD) Dialog_Show(playerid, BagajUyusturucular, DIALOG_STYLE_LIST, "{E74C3C}Bagaj: {FFFFFF}Uyusturucular", "{FFFFFF}Uyusturucu Koy\t{53f442}%d gram üzerinizde\n{FFFFFF}Uyusturucu Al\t{ff0000}%d gram bagajda", "Seç", "Geri", PlayerDrugData[playerid][Drugs], AracInfo[GetPVarInt(playerid, "AracBagaj")][aracUyusturucu]);
    	else Dialog_Show(playerid, BagajUyusturucular, DIALOG_STYLE_LIST, "{E74C3C}Bagaj: {FFFFFF}Uyusturucular", "{FFFFFF}Uyusturucu Koy\t{53f442}%d gram üzerinizde\n{FFFFFF}Uyusturucu Al\t{ff0000}%d gram bagajda\n{FFFFFF}Uyusturuculara El Koy", "Seç", "Geri", PlayerDrugData[playerid][Drugs], AracInfo[GetPVarInt(playerid, "AracBagaj")][aracUyusturucu]);
    	Arac_Kaydet(GetPVarInt(playerid, "AracBagaj"));
	}
	return 1;
}
Dialog:Silahlarim(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (GetFactionType(playerid) == BIRLIK_LSPD || GetFactionType(playerid) == BIRLIK_LSMD || GetFactionType(playerid) == BIRLIK_FBI) return HataMesajGonder(playerid, "Bu bölüme erisim izniniz yok. (LSPD ve LSMD üyeleri için engellendi.)");
		if (PlayerData[playerid][pLevel] < 2) return HataMesajGonder(playerid, "Bu bölüme erisim izniniz yok. (En az 2 level olmalisiniz.)");

		new silahid = strval(inputtext);
	    if (silahid > 0)
	    {
	        SetPVarInt(playerid, "SilahID", silahid);
	        new str[50];
	        format(str, sizeof(str), "Silah: {ff8300}%s (ID: %d, Mermi: %d)", ReturnWeaponName(silahid), silahid, PlayerData[playerid][pMermiler][g_aWeaponSlots[silahid]]);
	        Dialog_Show(playerid, Silahlarim2, DIALOG_STYLE_LIST, str, "{FFFFFF}Þarjör Tak\n{FFFFFF}Silahi Baskasina Ver\n{FFFFFF}Silahi Sat", "Seç", "Geri");
	    }
	}
	return 1;
}
Dialog:Silahlarim2(playerid, response, listitem, inputtext[])
{
	if (!response) return OyuncuSilahlar(playerid);
	if (response)
	{
	    new sid = GetPVarInt(playerid, "SilahID");
	    switch (listitem)
	    {
	        case 0:
	        {
	            if (PlayerData[playerid][pMermiler][g_aWeaponSlots[sid]] > 0) return HataMesajGonder(playerid, "Sadece mermisi bitmis silahlara sarjör takabilirsiniz.");
	            if (PlayerData[playerid][pEsyalar][13] < 1) return HataMesajGonder(playerid, "sarjörünüz yok.");
	            if (PlayerHasWeapon(playerid, SilahFiyatlar[listitem][silahID])) return HataMesajGonder(playerid, "Bu silaha sahip degilsiniz!");
	            PlayerData[playerid][pEsyalar][13]--;
	            GiveWeaponToPlayer(playerid, sid, GetWeaponMagazineAmmo(sid));
	            switch (sid)
	            {
	                case 22:
	                {
	                    ApplyAnimation(playerid, "COLT45", "colt45_reload", 4.1, 0, 1, 1, 0, 2000, 1);
	                    ApplyAnimation(playerid, "COLT45", "colt45_reload", 4.1, 0, 1, 1, 0, 2000, 1);
	                }
	                case 24:
	                {
	                    ApplyAnimation(playerid, "SILENCED", "Silence_reload", 4.1, 0, 1, 1, 0, 2000, 1);
	                    ApplyAnimation(playerid, "SILENCED", "Silence_reload", 4.1, 0, 1, 1, 0, 2000, 1);
	                }
	                case 28:
	                {
	                    ApplyAnimation(playerid, "UZI", "UZI_reload", 4.1, 0, 1, 1, 0, 2000, 1);
	                    ApplyAnimation(playerid, "UZI", "UZI_reload", 4.1, 0, 1, 1, 0, 2000, 1);
	                }
	                case 29:
	                {
	                    ApplyAnimation(playerid, "TEC", "TEC_reload", 4.1, 0, 1, 1, 0, 2000, 1);
	                    ApplyAnimation(playerid, "TEC", "TEC_reload", 4.1, 0, 1, 1, 0, 2000, 1);
	                }
	                case 30, 31:
	                {
	                    ApplyAnimation(playerid, "BUDDY", "buddy_reload", 4.1, 0, 1, 1, 0, 2000, 1);
	                    ApplyAnimation(playerid, "BUDDY", "buddy_reload", 4.1, 0, 1, 1, 0, 2000, 1);
	                }
	            }
	            SunucuMesaji(playerid, "Baþarýyla þarjör taktýn.");
	        }
	        case 1:
	        {
	            if (IsPlayerInAnyVehicle(playerid)) return HataMesajGonder(playerid, "Araç içerisinde bunu yapamazsiniz.");
	            Dialog_Show(playerid, SilahVer, DIALOG_STYLE_INPUT, "Oyuncu ID", "{ff1d00}> {FFFFFF}Lütfen silahi vermek istediginiz kisinin ID'sini girin:", "SVer", "Kapat");
	        }
	        case 2:
			{
			    if (IsPlayerInAnyVehicle(playerid)) return HataMesajGonder(playerid, "Araç içerisinde bunu yapamazsiniz.");
			    Dialog_Show(playerid, SilahSat, DIALOG_STYLE_INPUT, "Oyuncu ID", "{ff1d00}> {FFFFFF}Lütfen silahi satmak istediginiz kisinin ID'sini girin:", "Sat", "Kapat");
			}
			/*case 3:
			{
			    if (IsPlayerInAnyVehicle(playerid)) return HataMesajGonder(playerid, "Araç içerisinde bunu yapamazsiniz.");
			    new Float:pos[3];
			    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
			    DropWeapon(PlayerData[playerid][pID], GetPVarInt(playerid, "SilahID"), PlayerData[playerid][pMermiler][g_aWeaponSlots[GetPVarInt(playerid, "SilahID")]], pos[0], pos[1], pos[2]-0.9, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
			    ResetWeapon(playerid, GetPVarInt(playerid, "SilahID"));
			    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s adli kisi %s model silahini yere atar.", ReturnName(playerid, 0), ReturnWeaponName(GetPVarInt(playerid, "SilahID")));
			}*/
	    }
	}
	return 1;
}
Dialog:BagajSilahlar(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_bagajddddd(playerid);
	if (response)
	{
	    if (listitem == 5)
	    {
	        for (new i; i<5; i++)
	        {
	            AracInfo[GetPVarInt(playerid, "AracBagaj")][aracSilahlar][i] = 0;
	            AracInfo[GetPVarInt(playerid, "AracBagaj")][aracMermiler][i] = 0;
	        }
	        SunucuMesaji(playerid, "Araçta bulunan bütün silahlara el koydunuz.");
	        AracSilahlar(playerid, GetPVarInt(playerid, "AracBagaj"));
	        Arac_Kaydet(GetPVarInt(playerid, "AracBagaj"));
	        return 1;
		}
		if (GetFactionType(playerid) == BIRLIK_LSPD) return HataMesajGonder(playerid, "Polisler bunu yapamaz.");
		if (!Car_IsOwner(playerid, GetPVarInt(playerid, "AracBagaj"))) return HataMesajGonder(playerid, "Bu aracin sahibi degilsiniz.");
 		if (AracInfo[GetPVarInt(playerid, "AracBagaj")][aracSilahlar][listitem] < 1)
   		{
     		if (!GetWeapon(playerid))
       		{
         		HataMesajGonder(playerid, "Slot bos, bu slota silah koymak için elinize silah almalisiniz.");
           		return AracSilahlar(playerid, GetPVarInt(playerid, "AracBagaj"));
         	}
          	new silahid = GetWeapon(playerid);
           	new ammo = GetPlayerAmmo(playerid);
            AracInfo[GetPVarInt(playerid, "AracBagaj")][aracSilahlar][listitem] = silahid;
            AracInfo[GetPVarInt(playerid, "AracBagaj")][aracMermiler][listitem] = ammo;
            ResetWeapon(playerid, silahid);
            SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s adli kisi %s model silahini aracin bagajina koyar.", ReturnName(playerid, 0), ReturnWeaponName(silahid));
            AracSilahlar(playerid, GetPVarInt(playerid, "AracBagaj"));
            Arac_Kaydet(GetPVarInt(playerid, "AracBagaj"));
		}
		else
		{
  			if (PlayerHasWeapon(playerid, AracInfo[GetPVarInt(playerid, "AracBagaj")][aracSilahlar][listitem]) || PlayerData[playerid][pSilahlar][g_aWeaponSlots[AracInfo[GetPVarInt(playerid, "AracBagaj")][aracSilahlar][listitem]]] > 0)
  			{
  			    HataMesajGonder(playerid, "Bu silaha sahipsiniz veya bu tür silahiniz var.");
  			    return AracSilahlar(playerid, GetPVarInt(playerid, "AracBagaj"));
  			}
  			GiveWeaponToPlayer(playerid, AracInfo[GetPVarInt(playerid, "AracBagaj")][aracSilahlar][listitem], AracInfo[GetPVarInt(playerid, "AracBagaj")][aracMermiler][listitem]);
  			SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s adli kisi %s model silahini aracin bagajindan alir.", ReturnName(playerid, 0), ReturnWeaponName(AracInfo[GetPVarInt(playerid, "AracBagaj")][aracSilahlar][listitem]));
  			AracInfo[GetPVarInt(playerid, "AracBagaj")][aracSilahlar][listitem] = 0;
  			AracInfo[GetPVarInt(playerid, "AracBagaj")][aracMermiler][listitem] = 0;
  			AracSilahlar(playerid, GetPVarInt(playerid, "AracBagaj"));
  			Arac_Kaydet(GetPVarInt(playerid, "AracBagaj"));
		}
	}
	return 1;
}
Dialog:EvSilahlar(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_ev(playerid);
	if (response)
	{
	    new id = House_Inside(playerid);
	    if (id == -1) return 1;
 		if (HouseInfo[id][evSilahlar][listitem] < 1)
   		{
     		if (!GetWeapon(playerid))
       		{
         		HataMesajGonder(playerid, "Slot bos, bu slota silah koymak için elinize silah almalisiniz.");
           		return EvSilahlar(playerid, id);
         	}
          	new silahid = GetWeapon(playerid);
           	new ammo = GetPlayerAmmo(playerid);
            HouseInfo[id][evSilahlar][listitem] = silahid;
            HouseInfo[id][evMermiler][listitem] = ammo;
            ResetWeapon(playerid, silahid);
            EvSilahlar(playerid, id);
            Ev_Kaydet(id);
		}
		else
		{
  			if (PlayerHasWeapon(playerid, HouseInfo[id][evSilahlar][listitem]) || PlayerData[playerid][pSilahlar][g_aWeaponSlots[HouseInfo[id][evSilahlar][listitem]]] > 0)
  			{
  			    HataMesajGonder(playerid, "Bu silaha sahipsiniz veya bu tür silahiniz var.");
  			    return EvSilahlar(playerid, id);
  			}
  			GiveWeaponToPlayer(playerid, HouseInfo[id][evSilahlar][listitem], HouseInfo[id][evMermiler][listitem]);
  			HouseInfo[id][evSilahlar][listitem] = 0;
  			HouseInfo[id][evMermiler][listitem] = 0;
  			EvSilahlar(playerid, id);
  			Ev_Kaydet(id);
		}
	}
	return 1;
}
stock EvSilahlar(playerid, id)
{
	new str[1000];
	for (new i; i<10; i++)
	{
	    if (HouseInfo[id][evSilahlar][i] > 0) format(str, sizeof(str), "%s%s\t%d mermi\n", str, ReturnWeaponName(HouseInfo[id][evSilahlar][i]), HouseInfo[id][evMermiler][i]);
	    else format(str, sizeof(str), "%sBos Slot\t \n", str);
	}

	Dialog_Show(playerid, EvSilahlar, DIALOG_STYLE_TABLIST, "{E74C3C}Ev: {FFFFFF}Silahlar", str, "Seç", "Geri");
	return 1;
}

stock AracSilahlar(playerid, id)
{
	new str[700];
	if (AracInfo[id][aracSilahlar][0] < 1) format(str, sizeof(str), "Bos Slot\n");
	else format(str, sizeof(str), "%s\t%d\n", ReturnWeaponName(AracInfo[id][aracSilahlar][0]), AracInfo[id][aracMermiler][0]);
	if (AracInfo[id][aracSilahlar][1] < 1) format(str, sizeof(str), "%sBos Slot\n", str);
	else format(str, sizeof(str), "%s%s\t%d\n", str, ReturnWeaponName(AracInfo[id][aracSilahlar][1]), AracInfo[id][aracMermiler][1]);
	if (AracInfo[id][aracSilahlar][2] < 1) format(str, sizeof(str), "%sBos Slot\n", str);
	else format(str, sizeof(str), "%s%s\t%d\n", str, ReturnWeaponName(AracInfo[id][aracSilahlar][2]), AracInfo[id][aracMermiler][2]);
	if (AracInfo[id][aracSilahlar][3] < 1) format(str, sizeof(str), "%sBos Slot\n", str);
	else format(str, sizeof(str), "%s%s\t%d\n", str, ReturnWeaponName(AracInfo[id][aracSilahlar][3]), AracInfo[id][aracMermiler][3]);
	if (AracInfo[id][aracSilahlar][4] < 1) format(str, sizeof(str), "%sBos Slot\n", str);
	else format(str, sizeof(str), "%s%s\t%d\n", str, ReturnWeaponName(AracInfo[id][aracSilahlar][4]), AracInfo[id][aracMermiler][4]);

	if (GetFactionType(playerid) == BIRLIK_LSPD)
		strcat(str, "{ff1d00}> {FFFFFF}Silahlara El Koy");

	Dialog_Show(playerid, BagajSilahlar, DIALOG_STYLE_TABLIST, "{E74C3C}Bagaj: {FFFFFF}Silahlar", str, "Seç", "Geri");
	return 1;
}

stock DropSil(id)
{
	new query[100];
	format(query, sizeof(query), "DELETE FROM `droppedWeapons` WHERE `dID` = '%d'", DroppedWeapon[id][droppedID]);
	mysql_query(g_SQL, query, false);
	DroppedWeapon[id][droppedExists] = false;
 	DroppedWeapon[id][droppedPlayer] = -1;
  	DroppedWeapon[id][droppedPos][0] = 0;
   	DroppedWeapon[id][droppedPos][1] = 0;
    DroppedWeapon[id][droppedPos][2] = 0;
    DroppedWeapon[id][droppedWeapon] = 0;
    DroppedWeapon[id][droppedAmmo] = 0;
    DroppedWeapon[id][droppedInt] = 0;
    DroppedWeapon[id][droppedVw] = 0;
    DestroyDynamicObject(DroppedWeapon[id][droppedObject]);
    DestroyDynamic3DTextLabel(DroppedWeapon[id][droppedText]);
	return 1;
}
stock DropWeapon(sqlid, weaponid, ammo, Float:x, Float:y, Float:z, interior, world)
{
	new str[50], query[256];
	for (new i; i<MAX_DROPPED_WEAPONS; i++) if (!DroppedWeapon[i][droppedExists])
	{
	    DroppedWeapon[i][droppedExists] = true;
        DroppedWeapon[i][droppedID] = i;

	    DroppedWeapon[i][droppedPlayer] = sqlid;
	    DroppedWeapon[i][droppedPos][0] = x;
	    DroppedWeapon[i][droppedPos][1] = y;
	    DroppedWeapon[i][droppedPos][2] = z;
	    DroppedWeapon[i][droppedWeapon] = weaponid;
	    DroppedWeapon[i][droppedAmmo] = ammo;
	    DroppedWeapon[i][droppedInt] = interior;
	    DroppedWeapon[i][droppedVw] = world;
	    DroppedWeapon[i][droppedObject] = CreateDynamicObject(GetWeaponModel(DroppedWeapon[i][droppedWeapon]), DroppedWeapon[i][droppedPos][0], DroppedWeapon[i][droppedPos][1], DroppedWeapon[i][droppedPos][2], 93.7, 120.0, 120.0, DroppedWeapon[i][droppedInt], DroppedWeapon[i][droppedVw]);
        format(str, sizeof(str), "%s (Mermi: %d)", ReturnWeaponName(DroppedWeapon[i][droppedWeapon]), DroppedWeapon[i][droppedAmmo]);
        DroppedWeapon[i][droppedText] = CreateDynamic3DTextLabel(str, COLOR_LIGHTBLUE, DroppedWeapon[i][droppedPos][0], DroppedWeapon[i][droppedPos][1], DroppedWeapon[i][droppedPos][2], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, DroppedWeapon[i][droppedVw], DroppedWeapon[i][droppedInt]);

        mysql_format(g_SQL, query, sizeof(query), "INSERT INTO `droppedWeapons` (`dID`, `dPlayer`, `dropX`, `dropY`, `dropZ`, `dInterior`, `dVw`, `dWeapon`, `dAmmo`) VALUES ('%d', '%d', '%.4f','%.4f','%.4f','%d', '%d', '%d', '%d')",
		i,
		sqlid,
        x,
        y,
        z,
        interior,
        world,
        weaponid,
        ammo);
        mysql_query(g_SQL, query);
        return i;
	}
	return -1;
}
GetWeaponMagazineAmmo(weaponid)
{
    switch (weaponid)
    {
        case 22: return 34;
        case 23: return 17;
        case 24: return 7;
        case 25: return 5;
        case 26: return 4;
        case 27: return 7;
        case 28: return 100;
        case 29: return 30;
        case 30: return 30;
        case 31: return 50;
        case 32: return 100;
        case 38: return 500;
    }
    return -1;
}
Dialog:SilahSat(playerid, response, listitem, inputtext[])
{
	if (response)
	{
     	if (isnull(inputtext)) return Dialog_Show(playerid, SilahSat, DIALOG_STYLE_INPUT, "Oyuncu ID", "{ff1d00}> {FFFFFF}Lütfen silahi satmak istediginiz kisinin ID'sini girin:", "Sat", "Kapat");
	    if (!IsNumeric(inputtext)) return Dialog_Show(playerid, SilahSat, DIALOG_STYLE_INPUT, "Oyuncu ID", "{ff1d00}> {FFFFFF}Lütfen silahi satmak istediginiz kisinin ID'sini girin:", "Sat", "Kapat");
	    new id = strval(inputtext);
	    new sid = GetPVarInt(playerid, "SilahID");
	    if (!OyundaDegil(id))
	    {
	        HataMesajGonder(playerid, "Oyuncu oyunda degil.");
	        return Dialog_Show(playerid, SilahSat, DIALOG_STYLE_INPUT, "Oyuncu ID", "{ff1d00}> {FFFFFF}Lütfen silahi satmak istediginiz kisinin ID'sini girin:", "Sat", "Kapat");
	    }
	    if (!IsPlayerNearPlayer(playerid, id, 4.0))
	    {
	        HataMesajGonder(playerid, "Kisiye yeterince yakin degilsiniz.");
	        return Dialog_Show(playerid, SilahSat, DIALOG_STYLE_INPUT, "Oyuncu ID", "{ff1d00}> {FFFFFF}Lütfen silahi satmak istediginiz kisinin ID'sini girin:", "Sat", "Kapat");
	    }
	    if (id == playerid)
	    {
	        HataMesajGonder(playerid, "Kendine silah satamazsin.");
	        return Dialog_Show(playerid, SilahSat, DIALOG_STYLE_INPUT, "Oyuncu ID", "{ff1d00}> {FFFFFF}Lütfen silahi satmak istediginiz kisinin ID'sini girin:", "Sat", "Kapat");
	    }
	    if (PlayerData[id][pLevel] < 2)
			return HataMesajGonder(playerid, "Silah satma engellendi. (Karsi taraf en az 2 level olmali.)");
	    if (PlayerData[id][pSilahOffer] != -1)
	    {
	        HataMesajGonder(playerid, "Bu oyuncuya zaten silah verme/satma istegi gönderilmis.");
	        return Dialog_Show(playerid, SilahSat, DIALOG_STYLE_INPUT, "Oyuncu ID", "{ff1d00}> {FFFFFF}Lütfen silahi satmak istediginiz kisinin ID'sini girin:", "Sat", "Kapat");
		}
	    if (PlayerHasWeapon(id, sid) || PlayerData[id][pSilahlar][g_aWeaponSlots[sid]] != 0)
	    {
	        HataMesajGonder(playerid, "Kisi bu silaha sahip veya ayni tür silahi var.");
	        return Dialog_Show(playerid, SilahSat, DIALOG_STYLE_INPUT, "Oyuncu ID", "{ff1d00}> {FFFFFF}Lütfen silahi satmak istediginiz kisinin ID'sini girin:", "Sat", "Kapat");
	    }
	    SetPVarInt(playerid, "SilahSatID", id);
	    Dialog_Show(playerid, SilahSat2, DIALOG_STYLE_INPUT, "Fiyat", "{ff1d00}> {FFFFFF}Lütfen silahi satmak istediginiz fiyati girin:", "Sat", "Geri");
	}
	return 1;
}
Dialog:SilahSat2(playerid, response, listitem, inputtext[])
{
	if (!response) return Dialog_Show(playerid, SilahSat2, DIALOG_STYLE_INPUT, "Fiyat", "{ff1d00}> {FFFFFF}Lütfen silahi satmak istediginiz fiyati girin:", "Sat", "Geri");
	if (response)
	{
	    new id = GetPVarInt(playerid, "SilahSatID");
	    if (!OyundaDegil(id))
	    {
	        HataMesajGonder(playerid, "Oyuncu oyundan çikti.");
	        return 1;
	        //return Dialog_Show(playerid, SilahSat, DIALOG_STYLE_INPUT, "Oyuncu ID", "{ff1d00}» {FFFFFF}Lütfen silahi satmak istediginiz kisinin ID'sini girin:", "Sat", "Kapat");
	    }
	    if (!IsPlayerNearPlayer(playerid, id, 4.0))
	    {
	        HataMesajGonder(playerid, "Kisi sizden uzaklasti.");
	        return 1;
	        //return Dialog_Show(playerid, SilahSat, DIALOG_STYLE_INPUT, "Oyuncu ID", "{ff1d00}» {FFFFFF}Lütfen silahi satmak istediginiz kisinin ID'sini girin:", "Sat", "Kapat");
	    }
	    if (PlayerData[id][pSilahOffer] != -1)
	    {
	        HataMesajGonder(playerid, "Bu oyuncuya baskasi tarafindan silah verme/satma istegi gönderildi.");
	        return 1;
	        //return Dialog_Show(playerid, SilahSat, DIALOG_STYLE_INPUT, "Oyuncu ID", "{ff1d00}» {FFFFFF}Lütfen silahi satmak istediginiz kisinin ID'sini girin:", "Sat", "Kapat");
		}
	    if (PlayerHasWeapon(id, GetPVarInt(playerid, "SilahID")) || PlayerData[id][pSilahlar][g_aWeaponSlots[GetPVarInt(playerid, "SilahID")]] != 0)
	    {
	        HataMesajGonder(playerid, "Kisi bu silaha sahip veya ayni tür silahi var.");
	        return 1;
	        //return Dialog_Show(playerid, SilahSat, DIALOG_STYLE_INPUT, "Oyuncu ID", "{ff1d00}» {FFFFFF}Lütfen silahi satmak istediginiz kisinin ID'sini girin:", "Sat", "Kapat");
	    }
	    if (isnull(inputtext)) return Dialog_Show(playerid, SilahSat2, DIALOG_STYLE_INPUT, "Fiyat", "{ff1d00}> {FFFFFF}Lütfen silahi satmak istediginiz fiyati girin:", "Sat", "Geri");
	    if (!IsNumeric(inputtext)) return Dialog_Show(playerid, SilahSat2, DIALOG_STYLE_INPUT, "Fiyat", "{ff1d00}> {FFFFFF}Lütfen silahi satmak istediginiz fiyati girin:", "Sat", "Geri");
	    if (strval(inputtext) <= 0 || strval(inputtext) >= 250000)
	    {
	        HataMesajGonder(playerid, "Geçersiz fiyat girdiniz. ($1-250000 arasi deger girilmelidir.)");
	        return Dialog_Show(playerid, SilahSat2, DIALOG_STYLE_INPUT, "Fiyat", "{ff1d00}> {FFFFFF}Lütfen silahi satmak istediginiz fiyati girin:", "Sat", "Geri");
	    }
	    if(strval(inputtext) > PlayerData[playerid][pCash])
	    {
	    	HataMesajGonder(playerid, "Kisinin üzerinde bu kadar para yok!");
	    	return Dialog_Show(playerid, SilahSat2, DIALOG_STYLE_INPUT, "Fiyat", "{ff1d00}> {FFFFFF}Lütfen silahi satmak istediginiz fiyati girin:", "Sat", "Geri");
	    }

	    PlayerData[id][pSilahOffer] = playerid;
	    PlayerData[id][pSilahOfferID] = GetPVarInt(playerid, "SilahID");
	    PlayerData[id][pSilahOfferFiyat] = strval(inputtext);
	    Dialog_Show(id, SilahSatmaIstek, DIALOG_STYLE_MSGBOX, "Silah Satma istegi", "{AFAFAF}%s adli kisi sana {ff005d}%s (Mermi: %d) {FFFFFF}silahini {04ff00}%s {FFFFFF}fiyatina satmak istiyor. Kabul ediyor musun?", "Evet", "Hayir", ReturnName(playerid, 0), ReturnWeaponName(GetPVarInt(playerid, "SilahID")), PlayerData[playerid][pMermiler][g_aWeaponSlots[GetPVarInt(playerid, "SilahID")]], FormatNumber(strval(inputtext)));

	}
	return 1;
}
Dialog:SilahSatmaIstek(playerid, response, listitem, inputtext[])
{
    new id = PlayerData[playerid][pSilahOffer];
	new sid = PlayerData[playerid][pSilahOfferID];
	new fiyat = PlayerData[playerid][pSilahOfferFiyat];
	if (id == -1) return 1;
	if (!response)
	{
	    SunucuMesaji(id, "Silah satma isteginiz reddedildi.");
	    PlayerData[playerid][pSilahOffer] = -1;
	    PlayerData[playerid][pSilahOfferID] = 0;
		PlayerData[playerid][pSilahOfferFiyat] = 0;
	}
	else
	{
	    if (!OyundaDegil(id) || !IsPlayerNearPlayer(playerid, id, 5.0))
	    {
	        PlayerData[playerid][pSilahOffer] = -1;
	        PlayerData[playerid][pSilahOfferID] = 0;
	        PlayerData[playerid][pSilahOfferFiyat] = 0;
	        return HataMesajGonder(playerid, "Oyuncu oyunda degil veya sizden uzaklasti.");
	    }
	    if (!PlayerHasWeapon(id, sid))
	    {
	        PlayerData[playerid][pSilahOffer] = -1;
	        PlayerData[playerid][pSilahOfferID] = -1;
	        PlayerData[playerid][pSilahOfferFiyat] = 0;
	        return HataMesajGonder(playerid, "Oyuncu artik bu silaha sahip degil.");
	    }
	    if (PlayerData[playerid][pCash] < fiyat)
	    {
	    	PlayerData[playerid][pSilahOffer] = -1;
	    	PlayerData[playerid][pSilahOfferID] = 0;
   		    PlayerData[playerid][pSilahOfferFiyat] = 0;
		    return HataMesajGonder(playerid, "Bu silahi almak için yeterli paraniz yok!");
		}
		ParaVer(playerid, -fiyat);
	    ParaVer(id, fiyat);
	    GiveWeaponToPlayer(playerid, sid, PlayerData[id][pMermiler][g_aWeaponSlots[sid]]);
	    if (PlayerData[id][pMermiler][g_aWeaponSlots[sid]] > 0) ResetWeapon(id, sid);
	    else PlayerData[id][pSilahlar][g_aWeaponSlots[sid]] = 0;
	    MesajGonder(id, "%s model silahinizi %s adli kisiye %s fiyatina sattiniz.", ReturnWeaponName(sid), ReturnName(playerid, 0), FormatNumber(fiyat));
	    MesajGonder(playerid, "%s adli kisi size %s model silahini %s fiyatina satti. (silahin mermisi yoksa envantere eklenir)", ReturnName(id, 0),ReturnWeaponName(sid), FormatNumber(fiyat));
	    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s adli kisi %s adli kisiye %s model silahini %s fiyatina satar.", ReturnName(id, 0), ReturnName(playerid, 0), ReturnWeaponName(sid), FormatNumber(fiyat));
	    PlayerData[playerid][pSilahOffer] = -1;
	    PlayerData[playerid][pSilahOfferID] = 0;
	    PlayerData[playerid][pSilahOfferFiyat] = 0;
	}
	return 1;
}
Dialog:SilahVer(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (isnull(inputtext)) return Dialog_Show(playerid, SilahVer, DIALOG_STYLE_INPUT, "Oyuncu ID", "{ff1d00}> {FFFFFF}Lütfen silahi vermek istediginiz kisinin ID'sini girin:", "Ver", "Kapat");
	    if (!IsNumeric(inputtext)) return Dialog_Show(playerid, SilahVer, DIALOG_STYLE_INPUT, "Oyuncu ID", "{ff1d00}> {FFFFFF}Lütfen silahi vermek istediginiz kisinin ID'sini girin:", "Ver", "Kapat");
	    new id = strval(inputtext);
	    new sid = GetPVarInt(playerid, "SilahID");
	    if (!OyundaDegil(id))
	    {
	        HataMesajGonder(playerid, "Oyuncu oyunda degil.");
	        return Dialog_Show(playerid, SilahVer, DIALOG_STYLE_INPUT, "Oyuncu ID", "{ff1d00}> {FFFFFF}Lütfen silahi vermek istediginiz kisinin ID'sini girin:", "Ver", "Kapat");
	    }
	    if (!IsPlayerNearPlayer(playerid, id, 4.0))
	    {
	        HataMesajGonder(playerid, "Kisiye yeterince yakin degilsiniz.");
	        return Dialog_Show(playerid, SilahVer, DIALOG_STYLE_INPUT, "Oyuncu ID", "{ff1d00}> {FFFFFF}Lütfen silahi vermek istediginiz kisinin ID'sini girin:", "Ver", "Kapat");
	    }
	    if (id == playerid)
	    {
	        HataMesajGonder(playerid, "Kendine silah veremezsin.");
	        return Dialog_Show(playerid, SilahVer, DIALOG_STYLE_INPUT, "Oyuncu ID", "{ff1d00}> {FFFFFF}Lütfen silahi vermek istediginiz kisinin ID'sini girin:", "Ver", "Kapat");
	    }
	    if (PlayerData[id][pSilahOffer] != -1)
	    {
	        HataMesajGonder(playerid, "Bu oyuncuya zaten silah verme istegi gönderilmis.");
	        return Dialog_Show(playerid, SilahVer, DIALOG_STYLE_INPUT, "Oyuncu ID", "{ff1d00}> {FFFFFF}Lütfen silahi vermek istediginiz kisinin ID'sini girin:", "Ver", "Kapat");
		}
	    if (PlayerHasWeapon(id, sid) || PlayerData[id][pSilahlar][g_aWeaponSlots[sid]] != 0)
	    {
	        HataMesajGonder(playerid, "Kisi bu silaha sahip veya ayni tür silahi var.");
	        return Dialog_Show(playerid, SilahVer, DIALOG_STYLE_INPUT, "Oyuncu ID", "{ff1d00}> {FFFFFF}Lütfen silahi vermek istediginiz kisinin ID'sini girin:", "Ver", "Kapat");
	    }
	    PlayerData[id][pSilahOffer] = playerid;
	    PlayerData[id][pSilahOfferID] = sid;
	    Dialog_Show(id, SilahIstek, DIALOG_STYLE_MSGBOX, "Silah Verme istegi", "{AFAFAF}%s adli kisi sana {ff005d}%s (Mermi: %d) {FFFFFF}silahini vermek istiyor. Kabul ediyor musun?", "Evet", "Hayir", ReturnName(playerid, 0), ReturnWeaponName(sid), PlayerData[playerid][pMermiler][g_aWeaponSlots[GetPVarInt(playerid, "SilahID")]]);
	    MesajGonder(playerid, "Silah verme istegi gönderildi, kisinin yanitini bekleyin.");
	}
	return 1;
}
Dialog:SilahIstek(playerid, response, listitem, inputtext[])
{
	new id = PlayerData[playerid][pSilahOffer];
	new sid = PlayerData[playerid][pSilahOfferID];
	if (id == -1) return 1;
	if (!response)
	{
	    SunucuMesaji(id, "Silah verme isteginiz reddedildi.");
	    PlayerData[playerid][pSilahOffer] = -1;
	    PlayerData[playerid][pSilahOfferID] = 0;
	}
	else
	{
	    if (!OyundaDegil(id) || !IsPlayerNearPlayer(playerid, id, 5.0))
	    {
	        PlayerData[playerid][pSilahOffer] = -1;
	        PlayerData[playerid][pSilahOfferID] = 0;
	        return HataMesajGonder(playerid, "Oyuncu oyunda degil veya sizden uzaklasti.");
	    }
	    if (!PlayerHasWeapon(id, sid))
	    {
	        PlayerData[playerid][pSilahOffer] = -1;
	        PlayerData[playerid][pSilahOfferID] = 0;
	        return HataMesajGonder(playerid, "Oyuncu artik bu silaha sahip degil.");
	    }
	    GiveWeaponToPlayer(playerid, sid, PlayerData[id][pMermiler][g_aWeaponSlots[sid]]);
	    if (PlayerData[id][pMermiler][g_aWeaponSlots[sid]] > 0) ResetWeapon(id, sid);
	    else PlayerData[id][pSilahlar][g_aWeaponSlots[sid]] = 0;
	    MesajGonder(id, "%s model silahinizi %s adli kisiye verdiniz.", ReturnWeaponName(sid), ReturnName(playerid, 0));
	    MesajGonder(playerid, "%s adli kisi size %s model silahini verdi. (silahin mermisi yoksa envantere eklenir)", ReturnName(id, 0),ReturnWeaponName(sid));
	    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s adli kisi %s adli kisiye %s model silahini verir.", ReturnName(id, 0), ReturnName(playerid, 0), ReturnWeaponName(sid));
	    PlayerData[playerid][pSilahOffer] = -1;
	    PlayerData[playerid][pSilahOfferID] = 0;
	}
	return 1;
}

forward TamirExit(playerid, vehicleid);
public TamirExit(playerid, vehicleid)
{
	new id = GetPVarInt(playerid, "pnsID"),
	    Float:zacisi;

	SetPlayerVirtualWorld(playerid, Tamirhane[id][Tamirhane_World]);
	SetPlayerInterior(playerid, Tamirhane[id][Tamirhane_Interior]);

	zacisi = Tamirhane[id][Tamirhane_Pos][2] + 2.5;

	SetVehiclePos(vehicleid, Tamirhane[id][Tamirhane_Pos][0], Tamirhane[id][Tamirhane_Pos][1], zacisi);
	SetVehicleZAngle(vehicleid, Tamirhane[id][Tamirhane_Pos][3]);

    SetVehicleVirtualWorld(vehicleid, Tamirhane[id][Tamirhane_World]);
    LinkVehicleToInteriorEx(vehicleid, Tamirhane[id][Tamirhane_Interior]);

	foreach(new i: Player)
	{
		if (i != playerid && IsPlayerInVehicle(i, vehicleid) && GetPlayerVehicleSeat(i) != 128 && GetPlayerVehicleSeat(i) != 0)
		{
			TogglePlayerControllable(i, true);

			SetPlayerPos(i, Tamirhane[id][Tamirhane_Pos][0], Tamirhane[id][Tamirhane_Pos][1], zacisi);

			SetPlayerInterior(i, Tamirhane[id][Tamirhane_Interior]);
	        SetPlayerVirtualWorld(i, Tamirhane[id][Tamirhane_World]);

			PutPlayerInVehicle(i, vehicleid, GetPlayerVehicleSeat(i));
	    }
	}

	SetPVarInt(playerid, "pnsID", -1);

	TogglePlayerControllable(playerid, true);

	new idex = Car_GetID(vehicleid);
	if (idex != -1 && AracInfo[idex][aracZirhVarMi] == 1)
	    AracInfo[idex][aracZirh] = 50;

    ChangeVehicleColor(vehicleid, AracInfo[idex][aracRenkler][0],  AracInfo[idex][aracRenkler][1]);

    SetVehicleHealth(vehicleid, 999);
    RepairVehicle(vehicleid);

	Tamirhane[id][Tamirhane_Kullaniliyor] = 0;
    TogglePlayerControllable(playerid, 1);
	SunucuMesaji(playerid, "Tamir islemi tamamlandi. (Ücret: $%d)", TAMIRCI_UCRET);
	return 1;
}

forward AracRespawn(vehicleid);
public AracRespawn(vehicleid)
{
	if (OyundaDegil(GetVehicleDriver(vehicleid))) return 1;
	SetVehicleToRespawn(vehicleid);

	AracYuk[vehicleid] = 0;
	AracCP[vehicleid] = -1;

	LoadedTrash[vehicleid] = 0;
	return 1;
}

forward RepairCar(playerid, vehicleid);
public RepairCar(playerid, vehicleid)
{
    RepairVehicle(vehicleid);
    GameTextForPlayer(playerid, " ", 1, 3);
	SetPVarInt(playerid, "TamirEdiyor", 0);
    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s araci tamir etti.", ReturnName(playerid, 0));
    return 1;
}
stock CadirID(playerid)
{
	for (new i; i<MAX_CADIR; i++) if (CadirData[i][cadirExists] == true && CadirData[i][cadirSahip] == playerid)
	{
	    return i;
	}
	return -1;
}
stock Cadir_Yakin(playerid)
{
	for (new i; i<MAX_CADIR; i++) if (CadirData[i][cadirExists] == true)
	{
	    if (IsPlayerInRangeOfPoint(playerid, 5.0, CadirData[i][cadirPos][0], CadirData[i][cadirPos][1], CadirData[i][cadirPos][2])) return i;
	}
	return -1;
}
stock Cadir_Sil(playerid)
{
	for (new i; i<MAX_CADIR; i++) if (CadirData[i][cadirExists] == true && CadirData[i][cadirSahip] == playerid)
	{
	    CadirData[i][cadirExists] = false;
	    CadirData[i][cadirSahip] = -1;
	    CadirData[i][cadirPos][0] = 0.0;
	    CadirData[i][cadirPos][1] = 0.0;
	    CadirData[i][cadirPos][2] = 0.0;
	    DestroyDynamicObject(CadirData[i][cadirObject]);
	    DestroyDynamic3DTextLabel(CadirData[i][cadirText]);
	    break;
	}
	return 1;
}
stock Cadir_Kur(playerid)
{
	for (new i; i<MAX_CADIR; i++) if (CadirData[i][cadirExists] == false)
	{
	    new Float:angle;
	    CadirData[i][cadirExists] = true;
	    CadirData[i][cadirSahip] = playerid;
	    GetPlayerPos(playerid, CadirData[i][cadirPos][0], CadirData[i][cadirPos][1], CadirData[i][cadirPos][2]);
	    GetPlayerFacingAngle(playerid, angle);
	    CadirData[i][cadirPos][0] += (5 * floatsin(-angle, degrees));
    	CadirData[i][cadirPos][1] += (5 * floatcos(-angle, degrees));
    	CadirData[i][cadirPos][2] -= 1.0;
	    CadirData[i][cadirObject] = CreateDynamicObject(3243, CadirData[i][cadirPos][0], CadirData[i][cadirPos][1], CadirData[i][cadirPos][2], 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
	    new str[80];
	    format(str, sizeof(str), "{f91313}Çadir (#%d)\n\n{FFFFFF}Olusturan: %s", i, ReturnName(playerid, 0));
	    CadirData[i][cadirText] = CreateDynamic3DTextLabel(str, -1, CadirData[i][cadirPos][0], CadirData[i][cadirPos][1], CadirData[i][cadirPos][2], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
	    return 1;
	}
	return 0;
}
stock IsPlayerInLosSantos(playerid)
{
    new Float:x,Float:y,Float:z;
    GetPlayerPos(playerid, x, y, z);
    if (x >= 44.60 && y >= -2892.90 && x <= 2997.00 && y <= -768.00) return 1;
    else return 0;
}

forward RefillUpdate(playerid, vehicleid);
public RefillUpdate(playerid, vehicleid)
{
    if (GetPVarInt(playerid, "BenzinDolduruyor") == 0 || GetNearestVehicle(playerid) != AracInfo[vehicleid][aracVehicle])
        return 0;

    AracInfo[vehicleid][aracBenzin] = (AracInfo[vehicleid][aracBenzin] + 30.0 >= 100.0) ? (100.0) : (AracInfo[vehicleid][aracBenzin] + 30.0);

    SetPVarInt(playerid, "BenzinDolduruyor", 0);
    TogglePlayerControllable(playerid, true);
    MesajGonder(playerid, "Yakit dolduruldu. (30L)");
    return 1;
}

Dialog:Reklamlar(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = strval(inputtext);
	    if (Reklamlar[id][reklamExists])
	    {
	        SetPVarInt(playerid, "reklamID", id);
	        Dialog_Show(playerid, ReklamSonuclandir, DIALOG_STYLE_LIST, "{FFFFFF}Reklam", "{FFFFFF}Onayla\n{FFFFFF}Reddet", "Seç", "Geri");
	    }
	}
	return 1;
}
Dialog:ReklamSonuclandir(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_rek(playerid);
	if (response)
	{
	    new id = GetPVarInt(playerid, "reklamID");
	    if (Reklamlar[id][reklamExists])
	    {
	        new oyuncuid = GetPlayerIDWithSQLID(Reklamlar[id][reklamGonderen]);
	        if (listitem == 0)
	        {

	            if (oyuncuid != -1)
	            {
	                ParaVer(oyuncuid, -Reklamlar[id][reklamUcret]);
	                MesajGonder(oyuncuid, "Reklamýnýz onaylandý ve yayýnlandý.");
	            }
	            else
	            {
	                OfflineParaVer(Reklamlar[id][reklamGonderen], -Reklamlar[id][reklamUcret]);
	                BildirimEkle(Reklamlar[id][reklamGonderen], "Reklamýnýz onaylandý ve yayýnlandý.", "Sistem");
	            }
	            if (strlen(Reklamlar[id][reklamIcerik]) > 64)
			    {
                    foreach (new i : Player) if (PlayerData[i][pAyarlar][2] == 0)
                    {
                        SendClientMessageEx(i, 0xFF912BAA, "[%s]: {FFFFFF}%.64s", Birlikler[Reklamlar[id][ajansID]][birlikAd], Reklamlar[id][reklamIcerik]);
                        SendClientMessageEx(i, 0xFF912BAA, "{FFFFFF}...%s {FF912B}(Ýletiþim %d)", Reklamlar[id][reklamIcerik][64], (Reklamlar[id][reklamIletisim] == -1) ? (0) : (Reklamlar[id][reklamIletisim]));
                    }
			    }
			    else
			    {
			        foreach (new i : Player) if (PlayerData[i][pAyarlar][2] == 0)
			        {
			            SendClientMessageEx(i, 0xFF912BAA, "[%s]: {FFFFFF}%s {FF912B}(Ýletiþim: %d)", Birlikler[Reklamlar[id][ajansID]][birlikAd], Reklamlar[id][reklamIcerik], (Reklamlar[id][reklamIletisim] == -1) ? (0) : (Reklamlar[id][reklamIletisim]));
			        }
			    }

			    Birlikler[Reklamlar[id][ajansID]][ReklamSayisi]++;
			    Birlikler[Reklamlar[id][ajansID]][birlikKasaPara] += Reklamlar[id][reklamUcret];
			    Reklamlar[id][reklamExists] = 0;
			    format(Reklamlar[id][reklamIcerik], 128, "");
			    Reklamlar[id][reklamIletisim] = -1;
			    Reklamlar[id][ajansID] = -1;
			    Reklamlar[id][reklamGonderen] = -1;

			    MesajGonder(playerid, "Reklam onaylanmistir.");
			    AdminHelperMessage(COLOR_LIGHTRED, "AdmCmd: %s, bir adet reklam onayladý.", PlayerData[playerid][pAdminName]);
			    cmd_rek(playerid);
	        }
	        if (listitem == 1)
	        {
	            if (oyuncuid != -1) SunucuMesaji(playerid, "Reklamý onaylamadýnýz.");
	            else BildirimEkle(Reklamlar[id][reklamGonderen], "Reklamýnýz onaylanmadý.", "Sistem");
	            AdminHelperMessage(COLOR_LIGHTRED, "AdmCmd: %s, bir adet reklam reddetti.", PlayerData[playerid][pAdminName]);
	            Reklamlar[id][reklamExists] = 0;
			    format(Reklamlar[id][reklamIcerik], 128, "");
			    Reklamlar[id][reklamIletisim] = -1;
			    Reklamlar[id][ajansID] = -1;
			    Reklamlar[id][reklamGonderen] = -1;
			    MesajGonder(playerid, "Reklam reddedildi.");
			    cmd_rek(playerid);
	        }
	    }
	}
	return 1;
}
stock Reklam_Olustur(playerid, icerik[])
{
	for (new re; re<MAX_REKLAM; re++)
	{
	    if (!Reklamlar[re][reklamExists])
	    {
			Reklamlar[re][reklamExists] = 1;
	        format(Reklamlar[re][reklamIcerik], 128, icerik);
	        Reklamlar[re][ajansID] = GetPVarInt(playerid, "pAjansReklamID");
	        Reklamlar[re][reklamIletisim] = PlayerData[playerid][pTelefon];
	        Reklamlar[re][reklamGonderen] = PlayerData[playerid][pID];
	        Reklamlar[re][reklamUcret] = Birlikler[GetPVarInt(playerid, "pAjansReklamID")][ReklamUcreti];
	        return re;
	    }
	}
	return -1;
}
stock AjansListele(playerid)
{
	for (new i; i<MAX_BIRLIK; i++) if (Birlikler[i][birlikExists] && Birlikler[i][birlikTip] == BIRLIK_HABER)
	{
	    Birlik_Kaydet(i);
	}

	new str[1000], string[124];
    format(string, sizeof(string), "SELECT * FROM `birlikler` WHERE `btip` = '3' ORDER BY aktifdinleyici DESC LIMIT %d, 15", GetPVarInt(playerid, "AjansPage")*15);
    new Cache:Radless = mysql_query(g_SQL, string);
    new rows;
    cache_get_row_count(rows);
    if (rows)
    {
        new sqlid, pawnid, dinleyici, yayintipi, yayindurum, birlikad[32];
        if(GetPVarInt(playerid, "pAjansReklam") == 1)
        {
	        strcat(str, "{FFFFFF}Kanal Adi\t{FFFFFF}Reklam Durumu\t{FFFFFF}Reklam Ücreti\n");
	        for (new i; i<rows; i++)
	        {
	            cache_get_value_name_int(i, "bid", sqlid);
	            cache_get_value_name(i, "bisim", birlikad, 32);
	            pawnid = GetFactionByID(sqlid);
	            AjansListeleme[playerid][i] = pawnid;
	            format(string, sizeof(string), "{FFFFFF}%s\t%s\t{FFFFFF}$%d\n", birlikad, (Birlikler[pawnid][ReklamAlimi] >= 1) ? ("{2ECC71}Aliyor") : ("{ff0000}Almiyor"), Birlikler[pawnid][ReklamUcreti]);
	            strcat(str, string);
	        }
        }

        else
        {
	        strcat(str, "{FFFFFF}Kanal Adi\t{FFFFFF}Yayin Durumu\t{FFFFFF}Yayin Tipi\t{FFFFFF}Dinleyici\n");
	        for (new i; i<rows; i++)
	        {
	            cache_get_value_name_int(i, "bid", sqlid);
	            cache_get_value_name_int(i, "aktifdinleyici", dinleyici);
	            cache_get_value_name_int(i, "yayintipi", yayintipi);
	            cache_get_value_name_int(i, "yayindurum", yayindurum);
	            cache_get_value_name(i, "bisim", birlikad, 32);
	            pawnid = GetFactionByID(sqlid);
	            AjansListeleme[playerid][i] = pawnid;
	            format(string, sizeof(string), "{FFFFFF}%s\t%s\t{FFFFFF}%s\t{FFFFFF}%d\n", birlikad, (yayindurum == 1) ? ("{2ECC71}Açýk") : ("{ff0000}Kapalý"), (yayintipi == 0) ? ("Haber") : ("Müzik"), dinleyici);
	            strcat(str, string);
	        }
    	}
        if (rows > 15) strcat(str, "{AFAFAF}> Ileri\n{AFAFAF}> Geri");
        format(string, sizeof(string), "Yayin Ajanslari {AA3333}(Sayfa %d)", GetPVarInt(playerid, "AjansPage")+1);
        Dialog_Show(playerid, Dinle, DIALOG_STYLE_TABLIST_HEADERS, string, str, "Dinle", "Kapat");
	}
	cache_delete(Radless);
	return 1;
}
Dialog:Dinle(playerid, response, listitem, inputtext[])
{
	if (response)
	{
        if (strfind(inputtext, "Ileri", true) != -1)
        {
            SetPVarInt(playerid, "AjansPage", GetPVarInt(playerid, "AjansPage")+1);
            AjansListele(playerid);
            return 1;
        }
        if (strfind(inputtext, "Geri", true) != -1)
        {
            if (GetPVarInt(playerid, "AjansPage") < 1)
            {
                AjansListele(playerid);
                HataMesajGonder(playerid, "Zaten ilk sayfadasiniz!");
            }
            else
            {
                SetPVarInt(playerid, "AjansPage", GetPVarInt(playerid, "AjansPage")-1);
                AjansListele(playerid);
            }
            return 1;
        }
        new id = AjansListeleme[playerid][listitem];
        if (Birlikler[id][birlikExists] && Birlikler[id][birlikTip] == BIRLIK_HABER)
        {
        	if(GetPVarInt(playerid, "pAjansReklam") == 1)
        	{
				if(PlayerData[playerid][pCash] < Birlikler[id][ReklamUcreti])
				{
					DeletePVar(playerid, "pAjansReklam"), DeletePVar(playerid, "pAjansReklamID");
					return HataMesajGonder(playerid, "Reklam ücreti $%d karsilayamiyorsunuz.", Birlikler[id][ReklamUcreti]);
				}

        		SetPVarInt(playerid, "pAjansReklamID", id);
        		Dialog_Show(playerid, AjansReklamVer, DIALOG_STYLE_INPUT, "Reklam Ver", "%s ajansinda $%d karsiliginda reklam verebilirsiniz. Reklam metnini giriniz.", "Gönder", "Kapat", Birlikler[id][birlikAd], Birlikler[id][ReklamUcreti]);
        	}

        	else
        	{
            	PlayerData[playerid][pDinle] = id;
            	MesajGonder(playerid, "Artik %s adli ajansin yayinini dinliyorsunuz.", Birlikler[id][birlikAd]);
            	Birlik_Kaydet(id);
        	}
        }
	}
	return 1;
}

Dialog:AjansReklamVer(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = GetPVarInt(playerid, "pAjansReklamID");

		if(Birlikler[id][ReklamAlimi] < 1)
		{
			DeletePVar(playerid, "pAjansReklam"), DeletePVar(playerid, "pAjansReklamID");
			return HataMesajGonder(playerid, "Bu ajans reklam almiyor.");
		}

		if(Birlikler[id][ReklamUcreti] < 1)
		{
			DeletePVar(playerid, "pAjansReklam"), DeletePVar(playerid, "pAjansReklamID");
			return HataMesajGonder(playerid, "Bu ajansin reklam fiyati ayarlanmamis.");
		}

		if(PlayerData[playerid][pCash] < Birlikler[id][ReklamUcreti])
		{
			DeletePVar(playerid, "pAjansReklam"), DeletePVar(playerid, "pAjansReklamID");
			return HataMesajGonder(playerid, "Reklam ücreti $%d karsilayamiyorsunuz.", Birlikler[id][ReklamUcreti]);
		}

		new metin[125];

		if(sscanf(inputtext, "s[125]", metin))
			return Dialog_Show(playerid, AjansReklamVer, DIALOG_STYLE_INPUT, "Reklam Ver", "%s ajansinda $%d karsiliginda reklam verebilirsiniz. Reklam metnini giriniz.", "Gönder", "Kapat", Birlikler[id][birlikAd], Birlikler[id][ReklamUcreti]);

		if(strlen(metin) < 5 || strlen(metin) > 125)
			return Dialog_Show(playerid, AjansReklamVer, DIALOG_STYLE_INPUT, "Reklam Ver", "%s ajansinda $%d karsiliginda reklam verebilirsiniz. Reklam metnini giriniz.", "Gönder", "Kapat", Birlikler[id][birlikAd], Birlikler[id][ReklamUcreti]);

		new reklamid = Reklam_Olustur(playerid, metin);

		if(reklamid == -1)
			return HataMesajGonder(playerid, "Reklam gönderilemedi. Lütfen daha sonra tekrar deneyin.");

		MesajGonder(playerid, "Reklamýnýz iþleme alýndý, yetkililerin reklamýnýzý onaylamasýný bekleyiniz.");
		AdminHelperMessage(COLOR_LIGHTRED, "Yeni bekleyen reklamlar var. (/rek)");

		DeletePVar(playerid, "pAjansReklam"), DeletePVar(playerid, "pAjansReklamID");
	}

	else
	{
		DeletePVar(playerid, "pAjansReklam"), DeletePVar(playerid, "pAjansReklamID");
	}

	return 1;
}

/*
	if (Birlikler[id][ReklamAlimi] != 1) return HataMesajGonder(playerid, "Bu ajans reklam almiyor.");
	if (Birlikler[id][ReklamUcreti] > PlayerData[playerid][pCash]) return HataMesajGonder(playerid, "Reklam ücretini karsilamiyorsunuz.");
*/

stock IsNewsVehicle(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
	    case 488, 582: return 1;
	}
	return 0;
}
Dialog:Kumarhane(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (listitem == 0)
	    {
	    	if (PlayerData[playerid][pCash] < 100) return HataMesajGonder(playerid, "Yeterli paraniz bulunmuyor!");
	    	Dialog_Show(playerid, TekCiftBahis, DIALOG_STYLE_INPUT, "{FFFFFF}Kumarhane - {AA3333}Tek/Çift", "{AA3333}> {FFFFFF}Lütfen oynamak istediginiz bahis miktarini girin ($100 ile $1500 arasinda olmalidir)", "Devam", "Geri");
	    }
	    if (listitem == 1)
	    {
	        if (PlayerData[playerid][pCash] < 100) return HataMesajGonder(playerid, "Yeterli paraniz bulunmuyor!");
	        Dialog_Show(playerid, SupremeNumber, DIALOG_STYLE_INPUT, "{FFFFFF}Kumarhane - {AA3333}Supreme Number", "{AA3333}> {FFFFFF}Lütfen oynamak istediginiz bahis miktarini girin ($100 ile $1500 arasinda olmalidir)", "Devam", "Geri");
	    }
	    if (listitem == 2)
	    {
	        if (PlayerData[playerid][pCash] < 100) return HataMesajGonder(playerid, "Yeterli paraniz bulunmuyor!");
	        Dialog_Show(playerid, ZarDuellosu, DIALOG_STYLE_INPUT, "{FFFFFF}Kumarhane - {AA3333}Zar Düellosu", "Lütfen oynamak istediginiz bahis miktarini girin:\n\n{AA3333}Uyari: {FFFFFF}En az $100, en fazla $2,000 bahis oynayabilirsiniz.", "Devam", "Kapat");
	    }
	}
	return 1;
}
Dialog:ZarDuellosu(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (isnull(inputtext)) return Dialog_Show(playerid, ZarDuellosu, DIALOG_STYLE_INPUT, "{FFFFFF}Kumarhane - {AA3333}Zar Düellosu", "Lütfen oynamak istediginiz bahis miktarini girin:\n\n{AA3333}Uyari: {FFFFFF}En az $100, en fazla $2,000 bahis oynayabilirsiniz.", "Devam", "Kapat");
	    if (!IsNumeric(inputtext)) return Dialog_Show(playerid, ZarDuellosu, DIALOG_STYLE_INPUT, "{FFFFFF}Kumarhane - {AA3333}Zar Düellosu", "Lütfen oynamak istediginiz bahis miktarini girin:\n\n{AA3333}Uyari: {FFFFFF}En az $100, en fazla $2,000 bahis oynayabilirsiniz.", "Devam", "Kapat");
	    if (strval(inputtext) < 100 || strval(inputtext) > 2000) return Dialog_Show(playerid, ZarDuellosu, DIALOG_STYLE_INPUT, "{FFFFFF}Kumarhane - {AA3333}Zar Düellosu", "Lütfen oynamak istediginiz bahis miktarini girin:\n\n{AA3333}Uyari: {FFFFFF}En az $100, en fazla $2,000 bahis oynayabilirsiniz.", "Devam", "Kapat");
	    if (strval(inputtext) > PlayerData[playerid][pCash])
	    {
	        HataMesajGonder(playerid, "O kadar paraniz yok.");
	        return Dialog_Show(playerid, ZarDuellosu, DIALOG_STYLE_INPUT, "{FFFFFF}Kumarhane - {AA3333}Zar Düellosu", "Lütfen oynamak istediginiz bahis miktarini girin:\n\n{AA3333}Uyari: {FFFFFF}En az $100, en fazla $2,000 bahis oynayabilirsiniz.", "Devam", "Kapat");
	    }
	    SetPVarInt(playerid, "kumar_para", strval(inputtext));
	    Dialog_Show(playerid, ZarDuellosu2, DIALOG_STYLE_INPUT, "{FFFFFF}Kumarhane - {AA3333}Zar Düellosu", "Lütfen düello yapmak istediginiz kisinin ID'sini girin:", "Devam", "Geri");
	}
	return 1;
}
Dialog:ZarDuellosu2(playerid, response, listitem, inputtext[])
{
	if (!response) return Dialog_Show(playerid, ZarDuellosu, DIALOG_STYLE_INPUT, "{FFFFFF}Kumarhane - {AA3333}Zar Düellosu", "Lütfen oynamak istediginiz bahis miktarini girin:\n\n{AA3333}Uyari: {FFFFFF}En az $100, en fazla $2,000 bahis oynayabilirsiniz.", "Devam", "Kapat");
	if (response)
	{
	    if (isnull(inputtext) || !IsNumeric(inputtext)) return Dialog_Show(playerid, ZarDuellosu2, DIALOG_STYLE_INPUT, "{FFFFFF}Kumarhane - {AA3333}Zar Düellosu", "Lütfen düello yapmak istediginiz kisinin ID'sini girin:", "Devam", "Geri");
	    new id = strval(inputtext);
	    if (!OyundaDegil(id))
	    {
	        HataMesajGonder(playerid, "Oyuncu oyunda degil.");
	        return Dialog_Show(playerid, ZarDuellosu2, DIALOG_STYLE_INPUT, "{FFFFFF}Kumarhane - {AA3333}Zar Düellosu", "Lütfen düello yapmak istediginiz kisinin ID'sini girin:", "Devam", "Geri");
	    }
	    if (playerid == id)
	    {
	        HataMesajGonder(playerid, "Kendi ID'ni yazamazsin!");
	        return Dialog_Show(playerid, ZarDuellosu2, DIALOG_STYLE_INPUT, "{FFFFFF}Kumarhane - {AA3333}Zar Düellosu", "Lütfen düello yapmak istediginiz kisinin ID'sini girin:", "Devam", "Geri");
	    }
	    if (!IsPlayerNearPlayer(playerid, id, 20.0))
	    {
	        HataMesajGonder(playerid, "Kisiye yeterince yakin degilsiniz.");
	        return Dialog_Show(playerid, ZarDuellosu2, DIALOG_STYLE_INPUT, "{FFFFFF}Kumarhane - {AA3333}Zar Düellosu", "Lütfen düello yapmak istediginiz kisinin ID'sini girin:", "Devam", "Geri");
	    }
	    if (IsPlayerPause(id))
	    {
	        HataMesajGonder(playerid, "Bu oyuncu AFK, zar düellosu yollayamazsiniz.");
	        return Dialog_Show(playerid, ZarDuellosu2, DIALOG_STYLE_INPUT, "{FFFFFF}Kumarhane - {AA3333}Zar Düellosu", "Lütfen düello yapmak istediginiz kisinin ID'sini girin:", "Devam", "Geri");
	    }
	    if (GetPVarInt(id, "kumar_id") != INVALID_PLAYER_ID)
	    {
	        HataMesajGonder(playerid, "Bu kisi suanda baskasiyla düello yapiyor.");
	        return Dialog_Show(playerid, ZarDuellosu2, DIALOG_STYLE_INPUT, "{FFFFFF}Kumarhane - {AA3333}Zar Düellosu", "Lütfen düello yapmak istediginiz kisinin ID'sini girin:", "Devam", "Geri");
	    }
	    new bahis = GetPVarInt(playerid, "kumar_para");
	    if (PlayerData[id][pCash] < bahis)
	    {
	        HataMesajGonder(playerid, "Bu kisinin yeterli parasi yok.");
	        return Dialog_Show(playerid, ZarDuellosu2, DIALOG_STYLE_INPUT, "{FFFFFF}Kumarhane - {AA3333}Zar Düellosu", "Lütfen düello yapmak istediginiz kisinin ID'sini girin:", "Devam", "Geri");
	    }
	    SetPVarInt(id, "kumar_para", bahis);
     	new para = GetPVarInt(playerid, "kumar_para");
      	SetPVarInt(playerid, "kumar_id", id);
       	SetPVarInt(id, "kumar_id", playerid);
       	MesajGonder(playerid, "%s kisisine düello daveti gönderildi, yanitini bekleyin.", ReturnName(id, 0));
       	Dialog_Show(id, DuelloDavet, DIALOG_STYLE_MSGBOX, "Düello Daveti", "{ffffff}%s, {2ecc71}$%s {ffffff}miktarinda bahisle sizi zar düellosuna davet ediyor. Kabul ediyor musunuz?", "Evet", "Hayir", ReturnName(playerid, 0), FormatNumber(para));
	}
	return 1;
}
Dialog:DuelloDavet(playerid, response, listitem, inputtext[])
{
    if (!response)
   	{
  		new id = GetPVarInt(playerid, "kumar_id");
    	SunucuMesaji(id, "%s düello davetinizi reddetti.", ReturnName(playerid, 0));
       	SetPVarInt(id, "kumar_id", INVALID_PLAYER_ID);
        SetPVarInt(playerid, "kumar_id", INVALID_PLAYER_ID);
    }
    if (response)
    {
    	new id = GetPVarInt(playerid, "kumar_id");
     	MesajGonder(id, "%s zar düellosunu kabul etti.", ReturnName(playerid, 0));
       	SetPVarInt(playerid, "kumar_kimde", 0);
        SetPVarInt(id, "kumar_kimde", 1);
        KumarDondurme(playerid);
        KumarDondurme(id);
    }
	return 1;
}
Dialog:SupremeNumber(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_kumar(playerid);
	if (response)
	{
	    if (isnull(inputtext)) return Dialog_Show(playerid, SupremeNumber, DIALOG_STYLE_INPUT, "{FFFFFF}Kumarhane - {AA3333}Supreme Number", "{AA3333}> {FFFFFF}Lütfen oynamak istediginiz bahis miktarini girin ($100 ile $1500 arasinda olmalidir)", "Devam", "Geri");
	    if (strval(inputtext) < 100 || strval(inputtext) > 1500) return Dialog_Show(playerid, SupremeNumber, DIALOG_STYLE_INPUT, "{FFFFFF}Kumarhane - {AA3333}Supreme Number", "{AA3333}> {FFFFFF}Lütfen oynamak istediginiz bahis miktarini girin ($100 ile $1500 arasinda olmalidir)", "Devam", "Geri");
	    if (PlayerData[playerid][pCash] < strval(inputtext))
	    {
	        HataMesajGonder(playerid, "Yazdiginiz bahis kadar paraniz yok!");
	        return Dialog_Show(playerid, SupremeNumber, DIALOG_STYLE_INPUT, "{FFFFFF}Kumarhane - {AA3333}Supreme Number", "{AA3333}> {FFFFFF}Lütfen oynamak istediginiz bahis miktarini girin ($100 ile $1500 arasinda olmalidir)", "Devam", "Geri");
	    }
	    new sayi = RandomEx(1,7);
		new oyuncusayi = RandomEx(1,7);
		new id = Business_Inside(playerid);
  		if (id == -1 || Isyeri[id][isyeriTip] != 7) return 1;
		if (sayi == oyuncusayi)
		{
  			SendClientMessage(playerid, -1, "{528b8b}___________________________________________________________________");
			SendClientMessageEx(playerid, -1, "{FFFFFF}Kurpiyer bir zar atti ve {38c5f7}%d {FFFFFF}geldi.", sayi);
			SendClientMessageEx(playerid, -1, "{FFFFFF}Siz bir zar attiniz ve {38c5f7}%d {FFFFFF}geldi.", oyuncusayi);
			SendClientMessage(playerid, -1, "{FFFFFF}Hiç bir kazanan olmadi!");
			SendClientMessage(playerid,-1, "{528b8b}___________________________________________________________________");
		}
		else if (sayi > oyuncusayi)
		{
		    SendClientMessage(playerid, -1, "{528b8b}___________________________________________________________________");
			SendClientMessageEx(playerid, -1, "{FFFFFF}Kurpiyer bir zar atti ve {38c5f7}%d {FFFFFF}geldi.", sayi);
			SendClientMessageEx(playerid, -1, "{FFFFFF}Siz bir zar attiniz ve {38c5f7}%d {FFFFFF}geldi.", oyuncusayi);
			SendClientMessageEx(playerid, -1, "{FFFFFF}Üzgünüz, {38c5f7}%s {FFFFFF}kaybettiniz.", FormatNumber(strval(inputtext)));
			SendClientMessage(playerid, -1, "{528b8b}___________________________________________________________________");
			ParaVer(playerid, -strval(inputtext));
			Isyeri[id][isyeriKasa] += strval(inputtext);
			Isyeri_Kaydet(id);
		}
		else
		{
		    SendClientMessage(playerid, -1, "{528b8b}___________________________________________________________________");
			SendClientMessageEx(playerid, -1, "{FFFFFF}Kurpiyer bir zar atti ve {38c5f7}%d {FFFFFF}geldi.", sayi);
			SendClientMessageEx(playerid, -1, "{FFFFFF}Siz bir zar attiniz ve {38c5f7}%d {FFFFFF}geldi.", oyuncusayi);
			SendClientMessageEx(playerid, -1, "Tebrikler, {38c5f7}%s {FFFFFF}kazandiniz!", FormatNumber(strval(inputtext)*2));
			SendClientMessage(playerid,-1, "{528b8b}___________________________________________________________________");
			ParaVer(playerid, strval(inputtext));
			Isyeri[id][isyeriKasa] -= strval(inputtext);
			Isyeri_Kaydet(id);
		}
	}
	return 1;
}
Dialog:TekCiftBahis(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_kumar(playerid);
	if (response)
	{
	    if (isnull(inputtext)) return Dialog_Show(playerid, TekCiftBahis, DIALOG_STYLE_INPUT, "{FFFFFF}Kumarhane - {AA3333}Tek/Çift", "{AA3333}> {FFFFFF}Lütfen oynamak istediginiz bahis miktarini girin ($100 ile $1500 arasinda olmalidir)", "Devam", "Geri");
	    if (strval(inputtext) < 100 || strval(inputtext) > 1500) return Dialog_Show(playerid, TekCiftBahis, DIALOG_STYLE_INPUT, "{FFFFFF}Kumarhane - {AA3333}Tek/Çift", "{AA3333}> {FFFFFF}Lütfen oynamak istediginiz bahis miktarini girin ($100 ile $1500 arasinda olmalidir)", "Devam", "Geri");
	    if (PlayerData[playerid][pCash] < strval(inputtext))
	    {
	        HataMesajGonder(playerid, "Yazdiginiz bahis kadar paraniz yok!");
	        return Dialog_Show(playerid, TekCiftBahis, DIALOG_STYLE_INPUT, "{FFFFFF}Kumarhane - {AA3333}Tek/Çift", "{AA3333}> {FFFFFF}Lütfen oynamak istediginiz bahis miktarini girin ($100 ile $1500 arasinda olmalidir)", "Devam", "Geri");
	    }
	    SetPVarInt(playerid, "BahisPara", strval(inputtext));
	    Dialog_Show(playerid, TekCift, DIALOG_STYLE_LIST, "{FFFFFF}Kumarhane - {AA3333}Tek/Çift", "{FFFFFF}Tek\n{FFFFFF}Çift", "Seç", "Geri");
	}
	return 1;
}
Dialog:TekCift(playerid, response, listitem, inputtext[])
{
	if (!response)
	{
	    DeletePVar(playerid, "BahisPara");
	    Dialog_Show(playerid, TekCiftBahis, DIALOG_STYLE_INPUT, "{FFFFFF}Kumarhane - {AA3333}Tek/Çift", "{AA3333}> {FFFFFF}Lütfen oynamak istediginiz bahis miktarini girin ($100 ile $1500 arasinda olmalidir)", "Devam", "Geri");
	    return 1;
	}
	else
	{
	    if (listitem == 0)
	    {
	        new sayi = RandomEx(1,7);
	        new id = Business_Inside(playerid);
	        if (id == -1 || Isyeri[id][isyeriTip] != 7) return 1;
	        if (sayi == 1 || sayi == 3 || sayi == 5)
	        {
	            ParaVer(playerid, GetPVarInt(playerid, "BahisPara"));
				SendClientMessage(playerid,-1, "{528b8b}___________________________________________________________________");
				SendClientMessageEx(playerid, -1, "{FFFFFF}Kurpiyer bir zar atti ve {38c5f7}%d {FFFFFF}geldi. Tebrikler {38c5f7}%s {FFFFFF}kazandiniz!", sayi, FormatNumber(GetPVarInt(playerid, "BahisPara")*2));
				SendClientMessage(playerid,-1, "{528b8b}___________________________________________________________________");
				Isyeri[id][isyeriKasa] -= GetPVarInt(playerid, "BahisPara");
				Isyeri_Kaydet(id);
				DeletePVar(playerid, "BahisPara");
	        }
	        else
	        {
	            ParaVer(playerid, -GetPVarInt(playerid, "BahisPara"));
				SendClientMessage(playerid,-1, "{528b8b}___________________________________________________________________");
				SendClientMessageEx(playerid, -1, "{FFFFFF}Kurpiyer bir zar atti ve {38c5f7}%d {FFFFFF}geldi. Üzgünüz, {38c5f7}%s {FFFFFF}kaybettiniz!", sayi, FormatNumber(GetPVarInt(playerid, "BahisPara")));
				SendClientMessage(playerid,-1, "{528b8b}___________________________________________________________________");
				Isyeri[id][isyeriKasa] += GetPVarInt(playerid, "BahisPara");
				Isyeri_Kaydet(id);
				DeletePVar(playerid, "BahisPara");
	        }

	    }
	    if (listitem == 1)
	    {
	        new sayi = RandomEx(1,7);
	        new id = Business_Inside(playerid);
	        if (id == -1 || Isyeri[id][isyeriTip] != 7) return 1;
	        if (sayi == 2 || sayi == 4 || sayi == 6)
	        {
	            ParaVer(playerid, GetPVarInt(playerid, "BahisPara"));
				SendClientMessage(playerid,-1, "{528b8b}___________________________________________________________________");
				SendClientMessageEx(playerid, -1, "{FFFFFF}Kurpiyer bir zar atti ve {38c5f7}%d {FFFFFF}geldi. Tebrikler {38c5f7}%s {FFFFFF}kazandiniz!", sayi, FormatNumber(GetPVarInt(playerid, "BahisPara")*2));
				SendClientMessage(playerid,-1, "{528b8b}___________________________________________________________________");
				Isyeri[id][isyeriKasa] -= GetPVarInt(playerid, "BahisPara");
				Isyeri_Kaydet(id);
				DeletePVar(playerid, "BahisPara");
	        }
	        else
	        {
	            ParaVer(playerid, -GetPVarInt(playerid, "BahisPara"));
				SendClientMessage(playerid,-1, "{528b8b}___________________________________________________________________");
				SendClientMessageEx(playerid, -1, "{FFFFFF}Kurpiyer bir zar atti ve {38c5f7}%d {FFFFFF}geldi. Üzgünüz, {38c5f7}%s {FFFFFF}kaybettiniz!", sayi, FormatNumber(GetPVarInt(playerid, "BahisPara")));
				SendClientMessage(playerid,-1, "{528b8b}___________________________________________________________________");
				Isyeri[id][isyeriKasa] += GetPVarInt(playerid, "BahisPara");
				Isyeri_Kaydet(id);
				DeletePVar(playerid, "BahisPara");
	        }
	    }
	}
	return 1;
}
KumarReset(playerid, kumar_mode = 0){
    if (kumar_mode == 0){
        SetPVarInt(playerid, "kumar_id", INVALID_PLAYER_ID);
        SetPVarInt(playerid, "kumar_para", 0);
        SetPVarInt(playerid, "kumar_para2", 0);
        SetPVarInt(playerid, "kumar_kimde", 0);
    }else{
        SetPVarInt(playerid, "kumar_id", INVALID_PLAYER_ID);
        SetPVarInt(playerid, "kumar_para", 0);
        SetPVarInt(playerid, "kumar_para2", 0);
        SetPVarInt(playerid, "kumar_kimde", 0);
        ShowPlayerDialog(playerid, -1, DIALOG_STYLE_MSGBOX, "", "", "", "");
    }
}
KumarDondurme(playerid)
{
    new sz[325];
    new id = GetPVarInt(playerid, "kumar_id");
    new bahis = GetPVarInt(playerid, "kumar_para");
    format(sz, sizeof(sz), "{3498db}> Partner: {ffffff}%s\n", ReturnName(id, 0));
    format(sz, sizeof(sz), "%s{3498db}> Bahis: {ffffff}%s (Degistir)\n", sz, FormatNumber(bahis));
    format(sz, sizeof(sz), "%s{3498db}> {ffffff}Döndür\n", sz);
    format(sz, sizeof(sz), "%s\t\n", sz);
    format(sz, sizeof(sz), "%s\t\n ", sz);
    format(sz, sizeof(sz), "%s{e74c3c}> {ffffff}Düelloyu Bitir\n", sz);
    Dialog_Show(playerid, KumarDondurme, DIALOG_STYLE_LIST, "Zar Düellosu", sz, "Seç", "");
    return 1;
}
Dialog:KumarDondurme(playerid, response, listitem, inputtext[])
{
	if (!response) return KumarDondurme(playerid);
	if (response)
	{
	    switch (listitem)
	    {
	        case 0, 3, 4: KumarDondurme(playerid);
	        case 1: Dialog_Show(playerid, BahisDegistir, DIALOG_STYLE_INPUT, "Bahis Degistir", "Lütfen degistirmek istediginiz bahis tutarini girin.\n\nUyari: En az $100 en fazla $2,000 girebilirsin.", "Degistir", "Iptal");
	        case 2:
         	{
                    new durum = GetPVarInt(playerid, "kumar_kimde");
                    if (!durum) {
                        KumarDondurme(playerid);
                        HataMesajGonder(playerid, "Oyun sirasi sizde degil.");
                        return 1;
                    }
                    if (durum){
                        new
                            ben[3],
                            karsi[3],
                            sz[300],
                            id = GetPVarInt(playerid, "kumar_id"),
                            bahis = GetPVarInt(playerid, "kumar_para")
                        ;

                        if (PlayerData[playerid][pCash] < bahis)
                        {
                            SunucuMesaji(playerid, "Yeterli paraniz kalmadigi için zar düellosu sonlandirildi.");
                            SunucuMesaji(id, "Karsi tarafin yeterli parasi kalmadigi için zar düellosu sonlandirildi.");
                            KumarReset(playerid, 1);
                            KumarReset(id, 1);
                            return 1;
                        }

                        if (PlayerData[id][pCash] < bahis)
                        {
                            SunucuMesaji(id, "Yeterli paraniz kalmadigi için zar düellosu sonlandirildi.");
                            SunucuMesaji(playerid, "Karsi tarafin yeterli parasi kalmadigi için zar düellosu sonlandirildi.");
                            KumarReset(playerid, 1);
                            KumarReset(id, 1);
                            return 1;
                        }

                        SetPVarInt(playerid, "kumar_kimde", 0);
                        SetPVarInt(id, "kumar_kimde", 1);

                        ben[0] = ZAR_NXR();
                        ben[1] = ZAR_NXR();
                        ben[2] = ben[0] + ben[1];

                        karsi[0] = ZAR_NXR();
                        karsi[1] = ZAR_NXR();
                        karsi[2] = karsi[0] + karsi[1];

						SendClientMessage(playerid, 0xFFFFFF, "");
                        SendClientMessage(playerid, 0xFFFFFF, "");
                        SendClientMessage(playerid, 0xFFFFFF, "");
                        SendClientMessage(playerid, 0xFFFFFF, "");
                        SendClientMessage(playerid, 0xFFFFFF, "");

                        SendClientMessage(id, 0xFFFFFF, "");
                        SendClientMessage(id, 0xFFFFFF, "");
                        SendClientMessage(id, 0xFFFFFF, "");
                        SendClientMessage(id, 0xFFFFFF, "");
                        SendClientMessage(id, 0xFFFFFF, "");

                        SendClientMessage(playerid, 0x6a89ccff, "___________________________________");
                        SendClientMessage(id, 0x6a89ccff, "___________________________________");
                        format(sz, sizeof(sz), "%s, (1. Zar: %d), (2. Zar: %d), (Toplam: %d)", ReturnName(playerid, 0), ben[0], ben[1], ben[2]);
                        SendClientMessage(playerid, 0x6a89ccff, sz);
                        SendClientMessage(id, 0x6a89ccff, sz);

                        format(sz, sizeof(sz), "%s, (1. Zar: %d), (2. Zar: %d), (Toplam: %d)", ReturnName(id, 0), karsi[0], karsi[1], karsi[2]);
                        SendClientMessage(playerid, 0x6a89ccff, sz);
                        SendClientMessage(id, 0x6a89ccff, sz);

                        if (ben[2] > karsi[2]){
                            format(sz, sizeof(sz), "Bu roundu %s (%s) kazandi !", ReturnName(playerid, 0), FormatNumber(bahis));
                            ParaVer(playerid, bahis);
                            ParaVer(id, -bahis);
                        }
                        if (karsi[2] > ben[2]){
                            format(sz, sizeof(sz), "Bu roundu %s (%s) kazandi !", ReturnName(id, 0), FormatNumber(bahis));
                            ParaVer(playerid, -bahis);
                            ParaVer(id, bahis);
                        }
                        if (ben[2] == karsi[2]){
                            format(sz, sizeof(sz), "Bu roundu kimse kazanamadi !");
                        }
                        SendClientMessage(playerid, 0x6a89ccff, sz);
                        SendClientMessage(id, 0x6a89ccff, sz);

                        SendClientMessage(playerid, 0x6a89ccff, "___________________________________");
                        SendClientMessage(id, 0x6a89ccff, "___________________________________");

                        KumarDondurme(playerid);
                        KumarDondurme(id);
			}

		}
		case 5:
   			{
      			//new sz[300];
         		new id = GetPVarInt(playerid, "kumar_id");
           		MesajGonder(id, "%s zar düellosunu bitirdi.", ReturnName(playerid, 0));
				MesajGonder(playerid, "Zar düellosunu bitirdiniz.");
				ShowPlayerDialog(id, -1, DIALOG_STYLE_MSGBOX, "", "", "", "");
    			ShowPlayerDialog(playerid, -1, DIALOG_STYLE_MSGBOX, "", "", "", "");
       			KumarReset(playerid, 1);
          		KumarReset(id, 1);
      		}
	    }
	}
	return 1;
}
Dialog:BahisDegistir(playerid, response, listitem, inputtext[])
{
    if (!response) return KumarDondurme(playerid);
    if (response)
    {
        if (isnull(inputtext) || !IsNumeric(inputtext) || strval(inputtext) < 100 || strval(inputtext) > 2000) return Dialog_Show(playerid, BahisDegistir, DIALOG_STYLE_INPUT, "Bahis Degistir", "Lütfen degistirmek istediginiz bahis tutarini girin.\n\nUyari: En az $100 en fazla $2,000 girebilirsin.", "Degistir", "Iptal");
        if (strval(inputtext) > PlayerData[playerid][pCash])
        {
            HataMesajGonder(playerid, "O kadar paraniz yok.");
            return Dialog_Show(playerid, BahisDegistir, DIALOG_STYLE_INPUT, "Bahis Degistir", "Lütfen degistirmek istediginiz bahis tutarini girin.\n\nUyari: En az $100 en fazla $2,000 girebilirsin.", "Degistir", "Iptal");
        }
       	new id = GetPVarInt(playerid, "kumar_id");
		if (strval(inputtext) > PlayerData[id][pCash])
		{
		    HataMesajGonder(playerid, "Karsidaki kisinin o kadar parasi yok.");
		    return Dialog_Show(playerid, BahisDegistir, DIALOG_STYLE_INPUT, "Bahis Degistir", "Lütfen degistirmek istediginiz bahis tutarini girin.\n\nUyari: En az $100 en fazla $2,000 girebilirsin.", "Degistir", "Iptal");
		}
		SetPVarInt(playerid, "kumar_para2", strval(inputtext));
		MesajGonder(playerid, "%s adli kisiye bahis degistirme teklifi gönderildi.", ReturnName(id, 0));
		Dialog_Show(id, BahisDegistir2, DIALOG_STYLE_MSGBOX, "Bahis Degistirme", "{ffffff}%s, bahis tutarini {2ecc71}$%s {ffffff}olarak güncellemek istiyor.", "Kabul Et", "Reddet", ReturnName(playerid, 0), FormatNumber(strval(inputtext)));
    }
	return 1;
}
Dialog:BahisDegistir2(playerid, response, listitem, inputtext[])
{
	if (!response)
	{
	    //new sz[128];
     	new id = GetPVarInt(playerid, "kumar_id");
      	SetPVarInt(playerid, "kumar_para2", 0);
       	SetPVarInt(id, "kumar_para2", 0);
       	SunucuMesaji(id, "%s, göndermis oldugunuz bahis tutarini kabul etmedi.", ReturnName(playerid, 0));
        KumarDondurme(playerid);
        KumarDondurme(id);
	}
	if (response)
	{
	    new id = GetPVarInt(playerid, "kumar_id");
     	new bahis = GetPVarInt(id, "kumar_para2");
      	SetPVarInt(playerid, "kumar_para2", 0);
       	SetPVarInt(id, "kumar_para2", 0);
       	SetPVarInt(playerid, "kumar_para", bahis);
        SetPVarInt(id, "kumar_para", bahis);
        MesajGonder(id, "%s, göndermis oldugunuz bahis tutarini kabul etti.", ReturnName(playerid, 0));
        KumarDondurme(playerid);
        KumarDondurme(id);
	}
	return 1;
}
forward Refuel(playerid, aracid);
public Refuel(playerid, aracid)
{
    new price = floatround(0.5 * BENZIN_UCRET);
    if (PlayerData[playerid][pCash] < price)
    {
        HataMesajGonder(playerid, "Yeterli paraniz yok!");
        Fuel_ResetPlayer(playerid);
        return 1;
    }
    FuelBought[playerid] += 0.5;
    AracInfo[aracid][aracBenzin] += 0.5;
    new string[64];
	format(string, sizeof(string), "~b~~h~Dolduruluyor...~n~~n~~w~Fiyat: ~g~~h~$%d ~y~~h~(%.2f L)", floatround(FuelBought[playerid] * LITRE_PRICE), FuelBought[playerid]);
	PlayerTextDrawSetString(playerid, FuelText[playerid], string);
	ParaVer(playerid, -price);

	if (AracInfo[aracid][aracBenzin] >= 100.0)
	{
		AracInfo[aracid][aracBenzin] = 100.0;
		Fuel_ResetPlayer(playerid);
	}
	return 1;
}

Fuel_ResetPlayer(playerid)
{
	if (UsingPumpID[playerid] != -1)
	{
    	Pompa[UsingPumpID[playerid]][Pompa_Kullaniliyor] = false;
		Pompa_Objeler(UsingPumpID[playerid], false);
	}

	if (RefuelTimer[playerid] != -1)
	{
	    KillTimer(RefuelTimer[playerid]);
	    RefuelTimer[playerid] = -1;

	    PlayerTextDrawHide(playerid, FuelText[playerid]);
	}

    UsingPumpID[playerid] = -1;
 	FuelBought[playerid] = 0.0;
	return 1;
}
stock PayDay(playerid)
{
    new maas = GetServerBilgi("SaatlikMaas");
    new vergi = GetServerBilgi("MaasVergi");
    new olusummaas;
    switch (GetFactionType(playerid))
    {
        case BIRLIK_LSPD, BIRLIK_FBI, BIRLIK_LSMD, BIRLIK_GOV:
        {
            switch (PlayerData[playerid][pFactionRutbe])
            {
                case 1..12:
                {
                    olusummaas = 50*PlayerData[playerid][pFactionRutbe] + 150;
                }
                case 13:
                {
                    olusummaas = 800;
                }
                case 14:
                {
                    olusummaas = 900;
                }
                case 15:
                {
                    olusummaas = 1000;
                }
            }
        }
        case BIRLIK_LEGAL:
        {
            switch (PlayerData[playerid][pFactionRutbe])
            {
	            case 1..6: olusummaas = 25*PlayerData[playerid][pFactionRutbe] + 25;
	            case 7: olusummaas = 300;
	            case 8: olusummaas = 325;
	            case 9: olusummaas = 350;
	            case 10: olusummaas = 375;
	            case 11..14: olusummaas = 400;
	            case 15: olusummaas = 450;
            }
        }
	}
	new kiraid = EvKiraID(playerid);
	if (olusummaas > 0 && kiraid != -1)
	{
	    SendClientMessageEx(playerid, -1, "{228B22}________________ [ %s %s | Payday ] ________________", ReturnDate());
	    SendClientMessageEx(playerid, -1, "{A9A9A9}Saatlik Maaþ: %s", FormatNumber(maas));
	    SendClientMessageEx(playerid, -1, "{A9A9A9}Vatandaþlýk vergisi: %s", FormatNumber(vergi));
	    SendClientMessageEx(playerid, -1, "{A9A9A9}Oluþum Maaþý: %s", FormatNumber(olusummaas));
	    SendClientMessageEx(playerid, -1, "{A9A9A9}Kira Ücreti: %s", FormatNumber(HouseInfo[kiraid][evKiraUcret]));
	    switch (PlayerData[playerid][pVip])
	    {
	        case 1: SendClientMessageEx(playerid, -1, "{A9A9A9}VIP maaþý: $600");
	    }
	}
	else if (olusummaas > 0 && kiraid == -1)
	{
	    SendClientMessageEx(playerid, -1, "{228B22}________________ [ %s %s | Payday ] ________________", ReturnDate());
	    SendClientMessageEx(playerid, -1, "{A9A9A9}Saatlik Maaþ: %s", FormatNumber(maas));
	    SendClientMessageEx(playerid, -1, "{A9A9A9}Vatandaþlýk vergisi: %s", FormatNumber(vergi));
	    SendClientMessageEx(playerid, -1, "{A9A9A9}Oluþum Maaþý: %s", FormatNumber(olusummaas));
	    switch (PlayerData[playerid][pVip])
	    {
	        case 1: SendClientMessageEx(playerid, -1, "{A9A9A9}VIP maaþý: $600");
	    }
	}
	else if (olusummaas <= 0 && kiraid != -1)
	{
	    SendClientMessageEx(playerid, -1, "{228B22}________________ [ %s %s | Payday ] ________________", ReturnDate());
	    SendClientMessageEx(playerid, -1, "{A9A9A9}Saatlik Maaþ: %s", FormatNumber(maas));
	    SendClientMessageEx(playerid, -1, "{A9A9A9}Vatandaþlýk vergisi: %s", FormatNumber(vergi));
	    SendClientMessageEx(playerid, -1, "{A9A9A9}Kira Ücreti: %s", FormatNumber(HouseInfo[kiraid][evKiraUcret]));
	    switch (PlayerData[playerid][pVip])
	    {
	        case 1: SendClientMessageEx(playerid, -1, "{A9A9A9}VIP maaþý: $600");
	    }
	}
	else if (olusummaas <= 0 && kiraid == -1)
	{
	    SendClientMessageEx(playerid, -1, "{228B22}________________ [ %s %s | Payday ] ________________", ReturnDate());
	    SendClientMessageEx(playerid, -1, "{A9A9A9}Saatlik Maaþ: %s", FormatNumber(maas));
	    SendClientMessageEx(playerid, -1, "{A9A9A9}Vatandaþlýk vergisi: %s", FormatNumber(vergi));
	    switch (PlayerData[playerid][pVip])
	    {
	        case 1: SendClientMessageEx(playerid, -1, "{A9A9A9}VIP maaþý: $600");
	    }
	}
	maas -= vergi;
	if (kiraid != -1 && HouseInfo[kiraid][evKiralik] == 1 && HouseInfo[kiraid][evKiralayan] == PlayerData[playerid][pID])
	{
	    if (maas+PlayerData[playerid][pMaas] < HouseInfo[kiraid][evKiraUcret])
	    {
	        HouseInfo[kiraid][evKiralayan] = -1;
	        Ev_Kaydet(kiraid);
	        Ev_Yenile(kiraid);
	        if (GetPlayerIDWithSQLID(HouseInfo[kiraid][evSahip]) != -1)
	        {
	            SunucuMesaji(playerid, "%s adlý kiþi kirayý ödemediði için evden otomatik olarak atýldý.",ReturnName(playerid, 0));
	        }
	        else
			{
			    new str[100];
			    format(str, sizeof(str), "%s adlý kiþi kirayý ödemediði için evden otomatik olarak atýldý.", ReturnName(playerid, 0));
			    BildirimEkle(HouseInfo[kiraid][evSahip], str, "Sistem");
			}
	    }
	    else
	    {
	        if (maas > HouseInfo[kiraid][evKiraUcret]) maas -= HouseInfo[kiraid][evKiraUcret];
	        else PlayerData[playerid][pMaas] -= HouseInfo[kiraid][evKiraUcret];
	        HouseInfo[kiraid][evCash] += HouseInfo[kiraid][evKiraUcret];
	        Ev_Kaydet(kiraid);
	    }
	}

	PlayerData[playerid][pMaas] += maas+olusummaas;
	new vipmaas;
	switch (PlayerData[playerid][pVip])
	{
	    case 1: PlayerData[playerid][pMaas] += 600, vipmaas = 600;
	}
	foreach(new i: Player)
	GameTextForPlayer(i, "~y~PayDay", 5000, 1);
	SendClientMessageEx(playerid, -1, "{A9A9A9}Maaþ Hesabý: %s", FormatNumber(PlayerData[playerid][pMaas]));

	SendClientMessageEx(playerid, -1, "{ffff00}[TOTAL MAAÞ] {FFFFFF}((Gelen Maaþ: %s))", FormatNumber(maas+olusummaas+vipmaas));
	SendClientMessageEx(playerid, -1, "{228B22}__________________________________________________", ReturnDate());
	return 1;
}
stock Boombox_SetURL(playerid, url[])
{
	if (BoomboxData[playerid][boomboxPlaced])
	{
	    strpack(BoomboxData[playerid][boomboxURL], url, 128 char);

		foreach (new i : Player) if (PlayerData[i][pMuzikKutusu] == playerid)
		{
 			StopAudioStreamForPlayer(i);
   			PlayAudioStreamForPlayer(i, url, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2], 30.0, 1);
  		}
	}
	return 1;
}
stock Boombox_Destroy(playerid)
{
	if (BoomboxData[playerid][boomboxPlaced])
	{
		if (IsValidDynamicObject(BoomboxData[playerid][boomboxObject]))
		    DestroyDynamicObject(BoomboxData[playerid][boomboxObject]);

		if (IsValidDynamic3DTextLabel(BoomboxData[playerid][boomboxText3D]))
		    DestroyDynamic3DTextLabel(BoomboxData[playerid][boomboxText3D]);

		foreach (new i : Player) if (PlayerData[i][pMuzikKutusu] == playerid) {
		    StopAudioStreamForPlayer(i);
		}
        BoomboxData[playerid][boomboxPlaced] = false;
        BoomboxData[playerid][boomboxInterior] = 0;
        BoomboxData[playerid][boomboxWorld] = 0;
	}
	return 1;
}
stock Boombox_Nearest(playerid)
{
	foreach (new i : Player) if (BoomboxData[i][boomboxPlaced] && GetPlayerInterior(playerid) == BoomboxData[i][boomboxInterior] && GetPlayerVirtualWorld(playerid) == BoomboxData[i][boomboxWorld] && IsPlayerInRangeOfPoint(playerid, 30.0, BoomboxData[i][boomboxPos][0], BoomboxData[i][boomboxPos][1], BoomboxData[i][boomboxPos][2])) {
     	return i;
	}
	return INVALID_PLAYER_ID;
}
stock Boombox_Place(playerid)
{
	new
	    Float:angle;

	GetPlayerFacingAngle(playerid, angle);

	strpack(BoomboxData[playerid][boomboxURL], "", 128 char);
	GetPlayerPos(playerid, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2]);

	BoomboxData[playerid][boomboxPlaced] = true;
	BoomboxData[playerid][boomboxInterior] = GetPlayerInterior(playerid);
	BoomboxData[playerid][boomboxWorld] = GetPlayerVirtualWorld(playerid);
	new string[512];
	format(string, sizeof(string), "[Boombox]\n\nOlusturan: %s.", ReturnName(playerid, 0));
    BoomboxData[playerid][boomboxObject] = CreateDynamicObject(2226, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2] - 0.9, 0.0, 0.0, angle, BoomboxData[playerid][boomboxWorld], BoomboxData[playerid][boomboxInterior]);
    BoomboxData[playerid][boomboxText3D] = CreateDynamic3DTextLabel(string, 0x39D8EDFF, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2] - 0.7, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, BoomboxData[playerid][boomboxWorld], BoomboxData[playerid][boomboxInterior]);

	return 1;
}
stock Lokasyon_Sil(id)
{
	new query[100];
	format(query, sizeof(query), "DELETE FROM `lokasyon` WHERE `ID` = '%d'", Lokasyon[id][ID]);
	mysql_query(g_SQL, query, false);
	Lokasyon[id][Exists] = false;
	format(Lokasyon[id][lokasyonAd], 30, "");
	Lokasyon[id][lokasyonPos][0] = 0.0;
	Lokasyon[id][lokasyonPos][1] = 0.0;
	Lokasyon[id][lokasyonPos][2] = 0.0;
	return 1;
}

stock Lokasyon_Ekle(ad[], Float:posX, Float:posY, Float:posZ)
{
	for (new i; i<MAX_LOKASYON; i++)
	{
	    if (Lokasyon[i][Exists] == false)
	    {
	        Lokasyon[i][Exists] = true;
			Lokasyon[i][ID] = i;

	        format(Lokasyon[i][lokasyonAd], 30, ad);
	        Lokasyon[i][lokasyonPos][0] = posX;
	        Lokasyon[i][lokasyonPos][1] = posY;
	        Lokasyon[i][lokasyonPos][2] = posZ;

	        new query[256];
			mysql_format(g_SQL, query, sizeof(query), "INSERT INTO `lokasyon` (`ID`, `Ad`, `posX`, `posY`, `posZ`) VALUES ('%d', '%s', '%f', '%f', '%f')", i, ad, posX, posY, posZ);
			mysql_query (g_SQL, query);
			return i;
	    }
	}
	return -1;
}

stock CagriKapat(playerid)
{
	new targetid = PlayerData[playerid][pCallLine];
	if (PlayerData[playerid][pAramada] == ARAMA_ARANIYOR)
	{
		SunucuMesaji(targetid, "Giden çagri reddedildi.");
		SunucuMesaji(playerid, "Gelen çagri reddedildi.");
		PlayerData[playerid][pAramada] = 0;
		PlayerData[targetid][pAramada] = 0;
		PlayerData[playerid][pCallLine] = -1;
		PlayerData[targetid][pCallLine] = -1;
		DeletePVar(playerid, "Arayan");
		DeletePVar(targetid, "Arayan");
	}
	else if (PlayerData[playerid][pAramada] == ARAMA_ARIYOR)
	{
		PlayerData[playerid][pAramada] = 0;
		PlayerData[targetid][pAramada] = 0;
		PlayerData[playerid][pCallLine] = -1;
		PlayerData[targetid][pCallLine] = -1;
		DeletePVar(playerid, "Arayan");
		DeletePVar(targetid, "Arayan");
		MesajGonder(playerid, "Çagri bitirildi.");
	}
	else if (PlayerData[playerid][pAramada] == ARAMA_KONUSUYOR)
	{
		MesajGonder(playerid, "Telefonu kapattiniz.");
		MesajGonder(targetid, "Konustugunuz kisi telefonu kapatti.");
		PlayerData[playerid][pAramada] = 0;
		PlayerData[targetid][pAramada] = 0;
		PlayerData[playerid][pCallLine] = -1;
		PlayerData[targetid][pCallLine] = -1;
		DeletePVar(playerid, "Arayan");
		DeletePVar(targetid, "Arayan");
	}
	return 1;
}
SetFactionMarker(playerid, type, color)
{
    foreach (new i : Player) if (GetFactionType(i) == type) {
    	SetPlayerMarkerForPlayer(i, playerid, color);
	}
	return 1;
}
stock Telefon_Menu(playerid)
{
	new str[100];
	format(str, sizeof(str), "Telefon (#%d)", PlayerData[playerid][pTelefon]);
	Dialog_Show(playerid, TelefonMenu, DIALOG_STYLE_LIST, str, "{2bad65}> {FFFFFF}Numara Çevir\n{2bad65}> {FFFFFF}Kisa Mesaj Yolla\n{2bad65}> {FFFFFF}Kartvizitler\n{2bad65}> {FFFFFF}Tarayici\n{2bad65}> {FFFFFF}Tarifem\n{2bad65}> {FFFFFF}Ayarlar\n\n{2bad65}> %s", "Seç", "Kapat", (PlayerData[playerid][pTelefonAyar][0] == 0) ? ("{FF0000}Telefonu Kapat") : ("{08d342}Telefonu Aç"));
	return 1;
}
Dialog:HizmetSecin(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		SetPVarInt(playerid, "Hizmet", listitem+1);
		Dialog_Show(playerid, Aciklama, DIALOG_STYLE_INPUT, "Operatör ~ Açýklama", "Lütfen olay hakkinda kisa bir Açýklama yazin:", "Gönder", "Kapat");
	}
	return 1;
}
Dialog:Aciklama(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (isnull(inputtext)) return Dialog_Show(playerid, Aciklama, DIALOG_STYLE_INPUT, "Operatör ~ Açýklama", "Lütfen olay hakkinda kisa bir Açýklama yazin:", "Gönder", "Kapat");
	    if (GetPVarInt(playerid, "Hizmet") == 1)
	    {
	        new Float:pos[3];
	        format(PlayerData[playerid][pIhbar], 128, inputtext);
	        PlayerData[playerid][pIhbarSayac] = 300;
	        SetFactionMarker(playerid, BIRLIK_LSPD, 0x00D700FF);
	    	SetFactionMarker(playerid, BIRLIK_FBI, 0x00D700FF);
	    	GetPlayerPosEx(playerid, pos[0], pos[1], pos[2]);
	    	SendBirlikMessageEx(BIRLIK_LSPD, COLOR_RADIO, "** (Radyo) 911 ÇAGRISI: %s (Yer: %s - Tel No: %d)", ReturnName(playerid, 0), GetLocation(pos[0], pos[1], pos[2]), PlayerData[playerid][pTelefon]);
	    	SendBirlikMessageEx(BIRLIK_LSPD, COLOR_RADIO, "** (Radyo) Açýklama: %s", inputtext);
	    	SendBirlikMessageEx(BIRLIK_FBI, COLOR_RADIO, "** (Radyo) 911 ÇAGRISI: %s (Yer: %s - Tel No: %d)", ReturnName(playerid, 0), GetLocation(pos[0], pos[1], pos[2]), PlayerData[playerid][pTelefon]);
	    	SendBirlikMessageEx(BIRLIK_FBI, COLOR_RADIO, "** (Radyo) Açýklama: %s", inputtext);
	    	MesajGonder(playerid, "Tüm birimler bilgilendirildi, tesekkürler.");
	    	DeletePVar(playerid, "Hizmet");
	    }
	    else if (GetPVarInt(playerid, "Hizmet") == 2)
	    {
	        new Float:pos[3];
	        GetPlayerPosEx(playerid, pos[0], pos[1], pos[2]);
	        SendBirlikMessageEx(BIRLIK_LSMD, 0xFF8282FF, "** 911 ÇAgRISI: %s (Yer: %s - Tel No: %d)", ReturnName(playerid, 0), GetLocation(pos[0], pos[1], pos[2]), PlayerData[playerid][pTelefon]);
	        SendBirlikMessageEx(BIRLIK_LSMD, 0xFF8282FF, "** AÇIKLAMA: %s", inputtext);
	        SetFactionMarker(playerid, BIRLIK_LSMD, 0xFF8282FF);
	        MesajGonder(playerid, "Tüm saglik birimleri bilgilendirildi, tesekkürler.");
	    }
	    DeletePVar(playerid, "Hizmet");
	}
	return 1;
}
Dialog:TelefonMenu(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    switch (listitem)
	    {
	        case 0: // Arama
	        {
	            if (PlayerData[playerid][pTelefonAyar][0] == 1) return HataMesajGonder(playerid, "Telefonunuz Kapalý.");
	            if (PlayerData[playerid][pAramada] != 0) return HataMesajGonder(playerid, "su an aramada oldugunuz için kimseyi arayamazsiniz.");
	            Dialog_Show(playerid, Arama, DIALOG_STYLE_INPUT, "Telefon ~ Arama", "Lütfen aramak istediginiz numarayi girin:\n\n{38c5f7}911 - Acil Durum | 333 - Taksi | 555 - Tarifeci", "Ara", "Geri");
	        }
	        case 1: // SMS Yolla
	        {
	        	if (PlayerData[playerid][pTelefonAyar][0] == 1) return HataMesajGonder(playerid, "Telefonunuz Kapalý.");
	        	if (PlayerData[playerid][pTarife] == -1 || PlayerData[playerid][pTarifeKalan][1] == 0) return HataMesajGonder(playerid, "Tarifeniz yok veya SMS hakkiniz bitmis.");
	        	Dialog_Show(playerid, SMSGonder, DIALOG_STYLE_INPUT, "Telefon ~ SMS Yolla", "Lütfen SMS yollamak istediginiz numarayi girin:", "Devam", "Geri");
	        }
	        case 2: // Rehber
	        {
	        	if (PlayerData[playerid][pTelefonAyar][0] == 1) return HataMesajGonder(playerid, "Telefonunuz Kapalý.");
	            Telefon_Rehber(playerid);
	        }
	        case 3: // Tarayici
	        {
	            if (PlayerData[playerid][pTelefonAyar][0] == 1) return HataMesajGonder(playerid, "Telefonunuz Kapalý.");
	        	if (PlayerData[playerid][pTarife] == -1 || PlayerData[playerid][pTarifeKalan][2] <= 2) return HataMesajGonder(playerid, "Tarifeniz yok veya internet paketiniz yetmiyor. Tarife satin almak için /ara 555");
	        	PlayerData[playerid][pTarifeKalan][2] -= 3;
	        	Dialog_Show(playerid, Tarayici, DIALOG_STYLE_LIST, "Telefon ~ Tarayici", "{38c5f7}> {FFFFFF}Araç ilanlari\n{38c5f7}> {FFFFFF}BitCoin\n{38c5f7}> {FFFFFF}Müzik Çalar\n{38c5f7}> {FFFFFF}Konum Gönder", "Seç", "Kapat");
	        }
	        case 4: // Tarifem
	        {
	        	if (PlayerData[playerid][pTarife] == -1)
	        	{
	        		HataMesajGonder(playerid, "Tarifeniz yok, 555 numarasini arayarak tarife satin alabilirsiniz.");
	        		return Telefon_Menu(playerid);
	        	}
	        	Dialog_Show(playerid, Tarifem, DIALOG_STYLE_LIST, "Telefon ~ Tarife", "{2bad65}> {FFFFFF}Tarifeniz:\t\t{FFFFFF}%s\n{2bad65}> {FFFFFF}Kalan Dakika:\t\t{FFFFFF}%d/%d\n{2bad65}> {FFFFFF}Kalan SMS:\t\t{FFFFFF}%d/%d\n{2bad65}> {FFFFFF}Kalan Internet:\t{FFFFFF}%d/%d\n\n{2bad65}> {FFFFFF}Tarifeyi Iptal Et", "Seç", "Kapat",
	        	Tarifeler[PlayerData[playerid][pTarife]][TarifeAdi], PlayerData[playerid][pTarifeKalan][0], Tarifeler[PlayerData[playerid][pTarife]][TarifeDakika],  PlayerData[playerid][pTarifeKalan][1], Tarifeler[PlayerData[playerid][pTarife]][TarifeSMS], PlayerData[playerid][pTarifeKalan][2],  Tarifeler[PlayerData[playerid][pTarife]][TarifeNet]);
			}
			case 5: // Ayarlar
			{
				if (PlayerData[playerid][pTelefonAyar][0] == 1) return HataMesajGonder(playerid, "Telefonunuz Kapalý.");
	            Dialog_Show(playerid, TelefonAyarlar, DIALOG_STYLE_LIST, "Telefon ~ Ayarlar", "{2bad65}> {FFFFFF}Titresim:\t\t%s\n{2bad65}> {FFFFFF}Hoparlör:\t\t%s\n{2bad65}> {FFFFFF}Bilinmeyen Numara Engeli:\t%s\n{2bad65}> {FFFFFF}SMS Engeli:\t\t%s\n{2bad65}> {FFFFFF}Arama Engeli:\t\t%s", "Seç", "Geri",(PlayerData[playerid][pTelefonAyar][1] == 0) ? ("{F22C2C}Kapalý") : ("{2CF26B}Açýk"),
				(PlayerData[playerid][pTelefonAyar][2] == 0) ? ("{F22C2C}Kapalý") : ("{2CF26B}Açik"),  (PlayerData[playerid][pTelefonAyar][3] == 0) ? ("{F22C2C}Kapalý") : ("{2CF26B}Açik"),  (PlayerData[playerid][pTelefonAyar][4] == 0) ? ("{F22C2C}Kapalý") : ("{2CF26B}Açik"), (PlayerData[playerid][pTelefonAyar][5] == 0) ? ("{F22C2C}Kapalý") : ("{2CF26B}Açýk"));
			}
			case 6: // Telefonu Kapat
			{
			    if (PlayerData[playerid][pTelefonAyar][0] == 0)
			    {
			        PlayerData[playerid][pTelefonAyar][0] = 1;
			        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s isaret parmagini telefon kapatma dügmesine dogru götürür ve telefonu kapatir.", ReturnName(playerid, 0));
			        if (PlayerData[playerid][pAramada] != 0) CagriKapat(playerid);
			    }
			    else
			    {
			        PlayerData[playerid][pTelefonAyar][0] = 0;
			        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s isaret parmagini telefon açma dügmesine dogru götürür ve telefonu açar.", ReturnName(playerid, 0));
			    }
			}
	    }
	}
	return 1;
}
Dialog:Tarayici(playerid, response, listitem, inputtext[])
{
	if (!response) return Telefon_Menu(playerid);
	if (response)
	{
	    if (listitem == 0)
	    {
	        if (PlayerData[playerid][pTarife] == -1 || PlayerData[playerid][pTarifeKalan][2] < 2) return HataMesajGonder(playerid, "Tarifeniz yok veya internet paketiniz yetmiyor. Tarife satin almak için /ara 555");
	        PlayerData[playerid][pTarifeKalan][2] -= 2;
	        Dialog_Show(playerid, AracIlanlari, DIALOG_STYLE_INPUT, "{FFFFFF}Tarayici ~ Araç ilanlari", "{38c5f7}> {FFFFFF}Lütfen aratmak istediginiz aracin modelini veya adini girin:", "Ara", "Geri");
	    }
	    if (listitem == 1)
	    {
            if (PlayerData[playerid][pTarife] == -1 || PlayerData[playerid][pTarifeKalan][2] < 2) return HataMesajGonder(playerid, "Tarifeniz yok veya internet paketiniz yetmiyor. Tarife satin almak için /ara 555.");
            PlayerData[playerid][pTarifeKalan][2] -= 2;
            Bitcoin_Menu(playerid);
	    }
	    if (listitem == 2)
	    {
	        if (PlayerData[playerid][pTarife] == -1 || PlayerData[playerid][pTarifeKalan][2] < 10) return HataMesajGonder(playerid, "Tarifeniz yok veya internet paketiniz yetmiyor. Tarife satin almak için /ara 555");
	        Dialog_Show(playerid, MuzikCalar, DIALOG_STYLE_INPUT, "Tarayici ~ Müzik Çalar", "{38c5f7}> {FFFFFF}Lütfen oynatmak istediginiz müzigin .mp3 uzantili linkini girin:", "Oynat", "Geri");
	    }
	    if (listitem == 3)
	    {
	        if (PlayerData[playerid][pTarife] == -1 || PlayerData[playerid][pTarifeKalan][2] < 5) return HataMesajGonder(playerid, "Tarifeniz yok veya internet paketiniz yetmiyor. Tarife satin almak için /ara 555");
	        Dialog_Show(playerid, KonumGonder, DIALOG_STYLE_INPUT, "Konum Gönder", "{38c5f7}> {FFFFFF}Konum göndermek istediginiz numarayi girin:", "Gönder", "Geri");
	    }
	}
	return 1;
}
Dialog:GPS(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
	            if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
	            GlobalLokasyonlar(playerid);
	        }
	        case 1:
	        {
	            if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
	            Dialog_Show(playerid, FindHouse, DIALOG_STYLE_INPUT, "Ev Bul", "{38c5f7}> {FFFFFF}Lütfen bulmak istediginiz evin ID'sini girin:", "Devam", "Geri");
	        }
	        case 2:
	        {
	            if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
	            Dialog_Show(playerid, FindBiz, DIALOG_STYLE_INPUT, "isyeri Bul", "{38c5f7}> {FFFFFF}Lütfen bulmak istediginiz isyerinin adini girin:", "Devam", "Geri");
			}
			case 3:
			{
			    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
			    Dialog_Show(playerid, FindEntrance, DIALOG_STYLE_INPUT, "Bina Bul", "{38c5f7}> {FFFFFF}Lütfen bulmak istediginiz binanin numarasini girin:", "Bul", "Geri");
			}
	    }
	}
	return 1;
}
Dialog:FindEntrance(playerid, response, listitem, inputtext[])
{
	if (!response) return Dialog_Show(playerid, GPS, DIALOG_STYLE_LIST, "GPS", "{38c5f7}> {FFFFFF}Global Lokasyonlar\n{38c5f7}> {FFFFFF}Ev Bul\n{38c5f7}> {FFFFFF}isyeri Bul\n{38c5f7}> {FFFFFF}Bina Bul\n{38c5f7}> {FFFFFF}Konum Gönder", "Seç", "Geri");
	if (response)
	{
	    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
	    if (isnull(inputtext)) return Dialog_Show(playerid, FindEntrance, DIALOG_STYLE_INPUT, "Bina Bul", "{38c5f7}> {FFFFFF}Lütfen bulmak istediginiz binanin numarasini girin:", "Bul", "Geri");
	    if (!IsNumeric(inputtext)) return Dialog_Show(playerid, FindEntrance, DIALOG_STYLE_INPUT, "Bina Bul", "{38c5f7}> {FFFFFF}Lütfen bulmak istediginiz binanin numarasini girin:", "Bul", "Geri");
	    new id = strval(inputtext);
	    if ((id < 0 || id >= MAX_ENTRANCES) || !EntranceData[id][entranceExists])
	    {
	        HataMesajGonder(playerid, "Geçersiz bina numarasi girdiniz.");
	        return Dialog_Show(playerid, FindEntrance, DIALOG_STYLE_INPUT, "Bina Bul", "{38c5f7}> {FFFFFF}Lütfen bulmak istediginiz binanin numarasini girin:", "Bul", "Geri");
	    }
     	if (PlayerData[playerid][pGPS] != -1 || GetPVarInt(playerid, "IsyeriBuluyor") != -1 || GetPVarInt(playerid, "EvBuluyor") != -1)
      	{
       		SetPVarInt(playerid, "IsyeriBuluyor", -1);
       		SetPVarInt(playerid, "EvBuluyor", -1);
         	PlayerData[playerid][pGPS] = -1;
          	DisablePlayerCheckpoint(playerid);
       	}
       	cmd_cpsifirla(playerid);

        SetPVarInt(playerid, "BinaBuluyor", id);
        PlayerTextDrawShow(playerid, MesafeTD[playerid]);
        SetPlayerCheckpoint(playerid, EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2], 4.0);
        MesajGonder(playerid, "'%s' adli bina haritada isaretlenmistir.", EntranceData[id][entranceName]);
	}
	return 1;
}
Dialog:KonumGonder(playerid, response, listitem, inputtext[])
{
	if (!response) return Dialog_Show(playerid, Tarayici, DIALOG_STYLE_LIST, "Telefon ~ Tarayici", "{38c5f7}> {FFFFFF}Araç ilanlari\n{38c5f7}> {FFFFFF}BitCoin\n{38c5f7}> {FFFFFF}Müzik Çalar\n{38c5f7}> {FFFFFF}Konum Gönder", "Seç", "Kapat");
	if (response)
	{
	    if (isnull(inputtext)) return Dialog_Show(playerid, KonumGonder, DIALOG_STYLE_INPUT, "Konum Gönder", "{38c5f7}> {FFFFFF}Konum göndermek istediginiz numarayi girin:", "Gönder", "Geri");
	    if (!IsNumeric(inputtext)) return Dialog_Show(playerid, KonumGonder, DIALOG_STYLE_INPUT, "Konum Gönder", "{38c5f7}> {FFFFFF}Konum göndermek istediginiz numarayi girin:", "Gönder", "Geri");
	    new targetid = GetNumberOwner(strval(inputtext));
	    if (targetid == INVALID_PLAYER_ID || targetid == playerid || PlayerData[targetid][pBaygin] > 0 || PlayerData[targetid][pKelepce] > 0 || PlayerData[targetid][pHapisSure] > 0 || PlayerData[targetid][pTelefonAyar][0] == 1)
	    {
	        HataMesajGonder(playerid, "Geçersiz numara girdiniz veya kisi müsait degil.");
	        return Dialog_Show(playerid, KonumGonder, DIALOG_STYLE_INPUT, "Konum Gönder", "{38c5f7}> {FFFFFF}Konum göndermek istediginiz numarayi girin:", "Gönder", "Geri");
	    }
	    if (!spamProtect(playerid, "KonumGonder", 60)) return HataMesajGonder(playerid, "Tekrar konum göndermek için 1 dakika beklemelisiniz.");
	    PlayerData[playerid][pTarifeKalan][2] -= 15;
	    SetPVarInt(targetid, "KonumKabul", playerid);
	    MesajGonder(playerid, "%d numarali telefona konumunuz gönderildi, sabit kalmaya çalisin.", strval(inputtext));
	    SunucuMesaji(targetid, "%d numarali telefon size konumunu gönderdi, (\"/kabulet konum\") ile kabul edebilirsiniz.", PlayerData[playerid][pTelefon]);
	}
	return 1;
}
Dialog:FindBiz(playerid, response, listitem, inputtext[])
{
	if (!response) return Dialog_Show(playerid, GPS, DIALOG_STYLE_LIST, "GPS", "{38c5f7}> {FFFFFF}Global Lokasyonlar\n{38c5f7}> {FFFFFF}Ev Bul\n{38c5f7}> {FFFFFF}isyeri Bul\n{38c5f7}> {FFFFFF}Bina Bul", "Seç", "Geri");
	if (response)
	{
	    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
	    if (isnull(inputtext)) return Dialog_Show(playerid, FindBiz, DIALOG_STYLE_INPUT, "isyeri Bul", "{38c5f7}> {FFFFFF}Lütfen bulmak istediginiz isyerinin adini girin:", "Devam", "Geri");
	    FindBusiness(playerid, inputtext);
	}
	return 1;
}
Dialog:FindHouse(playerid, response, listitem, inputtext[])
{
	if (!response) return Dialog_Show(playerid, GPS, DIALOG_STYLE_LIST, "GPS", "{38c5f7}> {FFFFFF}Global Lokasyonlar\n{38c5f7}> {FFFFFF}Ev Bul\n{38c5f7}> {FFFFFF}isyeri Bul\n{38c5f7}> {FFFFFF}Bina Bul", "Seç", "Geri");
	if (response)
	{
	    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
	    if (isnull(inputtext)) return Dialog_Show(playerid, FindHouse, DIALOG_STYLE_INPUT, "Ev Bul", "{38c5f7}> {FFFFFF}Lütfen bulmak istediginiz evin ID'sini girin:", "Devam", "Geri");
	    if (!IsNumeric(inputtext)) return Dialog_Show(playerid, FindHouse, DIALOG_STYLE_INPUT, "Ev Bul", "{38c5f7}> {FFFFFF}Lütfen bulmak istediginiz evin ID'sini girin:", "Devam", "Geri");
	    new id = strval(inputtext);
	    if ((id < 0 || id >= MAX_EV) || !HouseInfo[id][evExists])
	    {
	        HataMesajGonder(playerid, "Bu ID'de bir ev bulunmuyor.");
	        return Dialog_Show(playerid, FindHouse, DIALOG_STYLE_INPUT, "Ev Bul", "{38c5f7}> {FFFFFF}Lütfen bulmak istediginiz evin ID'sini girin:", "Devam", "Geri");
	    }
     	if (PlayerData[playerid][pGPS] != -1 || GetPVarInt(playerid, "IsyeriBuluyor") != -1 || GetPVarInt(playerid, "BinaBuluyor") != -1)
      	{
       		SetPVarInt(playerid, "IsyeriBuluyor", -1);
       		SetPVarInt(playerid, "BinaBuluyor", -1);
         	PlayerData[playerid][pGPS] = -1;
          	DisablePlayerCheckpoint(playerid);
       	}
       	cmd_cpsifirla(playerid);

        SetPVarInt(playerid, "EvBuluyor", id);
        PlayerTextDrawShow(playerid, MesafeTD[playerid]);
        SetPlayerCheckpoint(playerid, HouseInfo[id][evPos][0], HouseInfo[id][evPos][1], HouseInfo[id][evPos][2], 4.0);
        MesajGonder(playerid, "Ev haritada isaretlendi.");
	}
	return 1;
}
Dialog:GlobalLokasyonlar(playerid, response, listitem, inputtext[])
{
	if (!response) return Dialog_Show(playerid, GPS, DIALOG_STYLE_LIST, "GPS", "{38c5f7}> {FFFFFF}Global Lokasyonlar\n{38c5f7}> {FFFFFF}Ev Bul\n{38c5f7}> {FFFFFF}isyeri Bul\n{38c5f7}> {FFFFFF}Bina Bul", "Seç", "Geri");
	if (response)
	{
	    new id = strval(inputtext);
	    if (Lokasyon[id][Exists] == true)
	    {
	        if (GetPVarInt(playerid, "EvBuluyor") != -1 || GetPVarInt(playerid, "IsyeriBuluyor") != -1 || GetPVarInt(playerid, "BinaBuluyor") != -1)
	        {
	            SetPVarInt(playerid, "IsyeriBuluyor", -1);
	            SetPVarInt(playerid, "EvBuluyor", -1);
	            SetPVarInt(playerid, "BinaBuluyor", -1);
	            DisablePlayerCheckpoint(playerid);
	        }
	        cmd_cpsifirla(playerid);

	        PlayerData[playerid][pGPS] = id;
	        PlayerTextDrawShow(playerid, MesafeTD[playerid]);
	        SetPlayerCheckpoint(playerid, Lokasyon[id][lokasyonPos][0], Lokasyon[id][lokasyonPos][1], Lokasyon[id][lokasyonPos][2], 3.0);
	        MesajGonder(playerid, "'%s' adli yer haritada isaretlendi.", Lokasyon[id][lokasyonAd]);
	    }
	}
	return 1;
}
Dialog:EvBul(playerid, response, listitem, inputtext[])
{
	if (!response) return Dialog_Show(playerid, GPS, DIALOG_STYLE_LIST, "GPS", "{38c5f7}> {FFFFFF}Global Lokasyonlar\n{38c5f7}> {FFFFFF}Ev Bul\n{38c5f7}> {FFFFFF}isyeri Bul\n{38c5f7}> {FFFFFF}Bina Bul", "Seç", "Geri");
	if (response)
	{
	    new id = strval(inputtext);
	    if (HouseInfo[id][evExists])
	    {
	        if (PlayerData[playerid][pGPS] != -1 || GetPVarInt(playerid, "IsyeriBuluyor") != -1 || GetPVarInt(playerid, "BinaBuluyor") != -1)
	        {
	            SetPVarInt(playerid, "IsyeriBuluyor", -1);
	            SetPVarInt(playerid, "BinaBuluyor", -1);
	            PlayerData[playerid][pGPS] = -1;
	            DisablePlayerCheckpoint(playerid);
	        }
	        cmd_cpsifirla(playerid);

	        SetPVarInt(playerid, "EvBuluyor", id);
	        PlayerTextDrawShow(playerid, MesafeTD[playerid]);
	        SetPlayerCheckpoint(playerid, HouseInfo[id][evPos][0], HouseInfo[id][evPos][1], HouseInfo[id][evPos][2], 4.0);
	        MesajGonder(playerid, "Ev haritada isaretlendi.");
	    }
	}
	return 1;
}
Dialog:IsyeriBul(playerid, response, listitem, inputtext[])
{
	if (!response) return Dialog_Show(playerid, GPS, DIALOG_STYLE_LIST, "GPS", "{38c5f7}> {FFFFFF}Global Lokasyonlar\n{38c5f7}> {FFFFFF}Ev Bul\n{38c5f7}> {FFFFFF}isyeri Bul\n{38c5f7}> {FFFFFF}Bina Bul", "Seç", "Geri");
	if (response)
	{
	    new id = strval(inputtext);
	    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
	    if (Isyeri[id][isyeriExists])
	    {
	        if (PlayerData[playerid][pGPS] != -1 || GetPVarInt(playerid, "EvBuluyor") != -1 || GetPVarInt(playerid, "BinaBuluyor") != -1)
	        {
	            SetPVarInt(playerid, "EvBuluyor", -1);
	            SetPVarInt(playerid, "BinaBuluyor", -1);
	            PlayerData[playerid][pGPS] = -1;
	            DisablePlayerCheckpoint(playerid);
	        }
	        cmd_cpsifirla(playerid);

	        SetPVarInt(playerid, "IsyeriBuluyor", id);
	        PlayerTextDrawShow(playerid, MesafeTD[playerid]);
	        SetPlayerCheckpoint(playerid, Isyeri[id][isyeriPos][0], Isyeri[id][isyeriPos][1], Isyeri[id][isyeriPos][2], 4.0);
	        MesajGonder(playerid, "isyeri haritada isaretlendi.");
	    }
	}
	return 1;
}
stock FindBusiness(playerid, bizname[])
{
    new str[1000], string[124], sayi, tip[30];
	strcat(str, "ID\tAd\tÝþyeri Türü\tMesafe\n");
	for (new i; i<MAX_ISYERI; i++) if (Isyeri[i][isyeriExists])
	{
	    if (strfind(Isyeri[i][isyeriName], bizname, true) != -1)
	    {
	        switch (Isyeri[i][isyeriTip])
			{
			    case 1: tip = "Market";
			    case 2: tip = "Kiyafet Maðazasý";
			    case 3: tip = "Fast Food";
			    case 4: tip = "Araç Galerisi";
			    case 5: tip = "Elektronik";
			    case 6: tip = "Bar/Pub";
			    case 7: tip = "Kumarhane";
			    default: tip = "Bilinmiyor";
			}
            format(string, sizeof(string), "{FFFFFF}%d\t{FFFFFF}%s\t{FFFFFF}%s\t{38c5f7}%.2f metre\n", i, Isyeri[i][isyeriName], tip, GetPlayerDistanceFromPoint(playerid, Isyeri[i][isyeriPos][0], Isyeri[i][isyeriPos][1], Isyeri[i][isyeriPos][2]));
            strcat(str, string);
            sayi++;
	    }
	}
	if (sayi == 0)
	{
	    HataMesajGonder(playerid, "Ýþyeri bulunamadý.");
	    return Dialog_Show(playerid, FindBiz, DIALOG_STYLE_INPUT, "Ýþyeri Bul", "{38c5f7}» {FFFFFF}Lütfen bulmak istediðiniz iþyerinin adýný girin:", "Devam", "Geri");
	}
	format(string, sizeof(string), "Bulunan Ýþyerleri (%d adet)", sayi);
	Dialog_Show(playerid, IsyeriBul, DIALOG_STYLE_TABLIST_HEADERS, string, str, "Ýþaretle", "Geri");
	return 1;
}
stock GlobalLokasyonlar(playerid)
{
	new str[1700], string[124], sayi;
	strcat(str, "ID\tAd\tMesafe\n");
	for (new i; i<MAX_LOKASYON; i++)
	{
	    if (Lokasyon[i][Exists] == true)
	    {
	        sayi++;
	        format(string, sizeof(string), "{FFFFFF}%d\t{FFFFFF}%s\t{38c5f7}%.2f metre\n", i, Lokasyon[i][lokasyonAd], GetPlayerDistanceFromPoint(playerid, Lokasyon[i][lokasyonPos][0],Lokasyon[i][lokasyonPos][1], Lokasyon[i][lokasyonPos][2]));
	        strcat(str, string);
	    }
	}
	if (sayi == 0) return HataMesajGonder(playerid, "Hiç lokasyon bulunamadi.");
	format(string, sizeof(string), "Global Lokasyonlar (%d konum)", sayi);
	Dialog_Show(playerid, GlobalLokasyonlar, DIALOG_STYLE_TABLIST_HEADERS, string, str, "isaretle", "Geri");
	return 1;
}
Bitcoin_Menu(playerid)
{
	//if (BITCOIN_ALMA == 0 || BITCOIN_SATMA == 0) return HataMesajGonder(playerid, "BitCoin sistemi devre disi.");
	new str[50];
	format(str, sizeof(str), "{FFFFFF}BitCoin Sayiniz: {38c5f7}%d", PlayerData[playerid][pBitcoin]);
	Dialog_Show(playerid, BitCoin, DIALOG_STYLE_LIST, str, "{38c5f7}> {FFFFFF}BitCoin Al\t\t{38c5f7}%d\n{38c5f7}> {FFFFFF}BitCoin Sat\t\t{38c5f7}%d", "Seç", "Geri", BITCOIN_ALMA, BITCOIN_SATMA);
	return 1;
}
Dialog:MuzikCalar(playerid, response, listitem, inputtext[])
{
	if (!response) return Dialog_Show(playerid, Tarayici, DIALOG_STYLE_LIST, "Telefon ~ Tarayici", "{38c5f7}> {FFFFFF}Araç ilanlari\n{38c5f7}> {FFFFFF}BitCoin\n{38c5f7}> {FFFFFF}Müzik Çalar\n{38c5f7}> {FFFFFF}Konum Gönder", "Seç", "Kapat");
	if (response)
	{
	    if (isnull(inputtext) || strlen(inputtext) < 5) return Dialog_Show(playerid, MuzikCalar, DIALOG_STYLE_INPUT, "Tarayici ~ Müzik Çalar", "{38c5f7}> {FFFFFF}Lütfen oynatmak istediginiz müzigin .mp3 uzantili linkini girin:", "Oynat", "Geri");
	    PlayAudioStreamForPlayer(playerid, inputtext);
	    PlayerData[playerid][pTarifeKalan][2] -= 10;
	}
	return 1;
}
Dialog:BitCoin(playerid, response, listitem, inputtext[])
{
	if (!response) return Dialog_Show(playerid, Tarayici, DIALOG_STYLE_LIST, "Telefon ~ Tarayici", "{38c5f7}> {FFFFFF}Araç ilanlari\n{38c5f7}> {FFFFFF}BitCoin\n{38c5f7}> {FFFFFF}Müzik Çalar\n{38c5f7}> {FFFFFF}Konum Gönder", "Seç", "Kapat");
	if (response)
	{
	    if (listitem == 0)
	    {
	        Dialog_Show(playerid, BitcoinAl, DIALOG_STYLE_INPUT, "{FFFFFF}BitCoin Alma", "{38c5f7}> {FFFFFF}Lütfen almak istediginiz BitCoin sayisini girin:", "Al", "Geri");
	    }
	    if (listitem == 1)
	    {
	        Dialog_Show(playerid, BitcoinSat, DIALOG_STYLE_INPUT, "{FFFFFF}BitCoin Sat", "{38c5f7}> {FFFFFF}Lütfen satmak istediginiz BitCoin sayisini girin:", "Sat", "Geri");
	    }
	}
	return 1;
}
Dialog:BitcoinSat(playerid, response, listitem, inputtext[])
{
	if (!response) return Bitcoin_Menu(playerid);
	if (response)
	{
        if (isnull(inputtext)) return Dialog_Show(playerid, BitcoinSat, DIALOG_STYLE_INPUT, "{FFFFFF}BitCoin Sat", "{38c5f7}> {FFFFFF}Lütfen satmak istediginiz BitCoin sayisini girin:", "Sat", "Geri");
        if (!IsNumeric(inputtext)) return Dialog_Show(playerid, BitcoinSat, DIALOG_STYLE_INPUT, "{FFFFFF}BitCoin Sat", "{38c5f7}> {FFFFFF}Lütfen satmak istediginiz BitCoin sayisini girin:", "Sat", "Geri");
        if (strval(inputtext) <= 0) return Dialog_Show(playerid, BitcoinSat, DIALOG_STYLE_INPUT, "{FFFFFF}BitCoin Sat", "{38c5f7}> {FFFFFF}Lütfen satmak istediginiz BitCoin sayisini girin:", "Sat", "Geri");
        if (PlayerData[playerid][pBitcoin] < strval(inputtext))
        {
            HataMesajGonder(playerid, "O kadar BitCoin'iniz bulunmuyor.");
            return Dialog_Show(playerid, BitcoinSat, DIALOG_STYLE_INPUT, "{FFFFFF}BitCoin Sat", "{38c5f7}> {FFFFFF}Lütfen satmak istediginiz BitCoin sayisini girin:", "Sat", "Geri");
        }
        PlayerData[playerid][pBitcoin] -= strval(inputtext);
        ParaVer(playerid, strval(inputtext)*BITCOIN_SATMA);
        PlayerData[playerid][pTarifeKalan][2] -= RandomEx(3, 9);
	    if (PlayerData[playerid][pTarifeKalan][2] < 0) PlayerData[playerid][pTarifeKalan][2] = 0;
	    Oyuncu_Kaydet(playerid);
	    MesajGonder(playerid, "{38c5f7}%d {FFFFFF}BitCoin {38c5f7}%d$ {FFFFFF}karsiliginda satildi.",strval(inputtext), BITCOIN_SATMA);
	}
	return 1;
}
Dialog:BitcoinAl(playerid, response, listitem, inputtext[])
{
	if (!response) return Bitcoin_Menu(playerid);
	if (response)
	{
	    if (isnull(inputtext)) return Dialog_Show(playerid, BitcoinAl, DIALOG_STYLE_INPUT, "{FFFFFF}BitCoin Alma", "{38c5f7}> {FFFFFF}Lütfen almak istediginiz BitCoin sayisini girin:", "Al", "Geri");
	    if (!IsNumeric(inputtext)) return Dialog_Show(playerid, BitcoinAl, DIALOG_STYLE_INPUT, "{FFFFFF}BitCoin Alma", "{38c5f7}> {FFFFFF}Lütfen almak istediginiz BitCoin sayisini girin:", "Al", "Geri");
	    if (strval(inputtext) <= 0 || strval(inputtext) >= 1001)
	    {
	        HataMesajGonder(playerid, "BitCoin sayisi 1 ile 1000 arasinda olmalidir.");
	        return Dialog_Show(playerid, BitcoinAl, DIALOG_STYLE_INPUT, "{FFFFFF}BitCoin Alma", "{38c5f7}> {FFFFFF}Lütfen almak istediginiz BitCoin sayisini girin:", "Al", "Geri");
	    }
	    if (PlayerData[playerid][pCash] < strval(inputtext)*BITCOIN_ALMA)
	    {
	        HataMesajGonder(playerid, "Yeterli paraniz yok.");
	        return Dialog_Show(playerid, BitcoinAl, DIALOG_STYLE_INPUT, "{FFFFFF}BitCoin Alma", "{38c5f7}> {FFFFFF}Lütfen almak istediginiz BitCoin sayisini girin:", "Al", "Geri");
	    }
	    PlayerData[playerid][pTarifeKalan][2] -= RandomEx(5, 12);
	    if (PlayerData[playerid][pTarifeKalan][2] < 0) PlayerData[playerid][pTarifeKalan][2] = 0;
	    ParaVer(playerid, -strval(inputtext)*BITCOIN_ALMA);
	    PlayerData[playerid][pBitcoin] += strval(inputtext);
	    Oyuncu_Kaydet(playerid);
	    MesajGonder(playerid, "{38c5f7}%d$ {FFFFFF}karsiliginda {38c5f7}%d {FFFFFF}BitCoin satin aldiniz.", BITCOIN_ALMA, strval(inputtext));
	}
	return 1;
}
Dialog:AracIlanlari(playerid, response, listitem, inputtext[])
{
	if (!response) return Telefon_Menu(playerid);
	if (response)
	{
	    if (PlayerData[playerid][pTarife] == -1 || PlayerData[playerid][pTarifeKalan][2] <= 2) return HataMesajGonder(playerid, "Tarifeniz yok veya internet paketiniz yetmiyor. Tarife satin almak için /ara 555");
	    if (isnull(inputtext)) return Dialog_Show(playerid, AracIlanlari, DIALOG_STYLE_INPUT, "{FFFFFF}Tarayici ~ Araç ilanlari", "{38c5f7}> {FFFFFF}Lütfen aratmak istediginiz aracin modelini veya adini girin:", "Ara", "Geri");
		new veh = GetVehicleModelIDFromName(inputtext);
		if (veh != -1)
		{
  			PlayerData[playerid][pTarifeKalan][2] -= 3;
		    AracIlanlari(playerid, veh);
		    return 1;
		}
		if (strval(inputtext) >= 411 && strval(inputtext) <= 611)
		{
		    PlayerData[playerid][pTarifeKalan][2] -= 3;
		    AracIlanlari(playerid, strval(inputtext));
		    return 1;
		}
		HataMesajGonder(playerid, "Böyle bir araç yok!");
		Dialog_Show(playerid, AracIlanlari, DIALOG_STYLE_INPUT, "{FFFFFF}Tarayici ~ Araç ilanlari", "{38c5f7}> {FFFFFF}Lütfen aratmak istediginiz aracin modelini veya adini girin:", "Ara", "Geri");
	}
	return 1;
}
AracIlanlari(playerid, aracid)
{
    if (aracid < 411 || aracid > 611) return HataMesajGonder(playerid, "Böyle bir araç yok!");
    new str[1000], string[200], sayi;
    strcat(str, "{FFFFFF}ID\t{FFFFFF}Fiyat\t{FFFFFF}Kilometre\t{FFFFFF}Vergi\n");
	for (new i; i<MAX_ARAC; i++)
	{
	    if (AracInfo[i][aracExists] && AracInfo[i][aracModel] == aracid && AracInfo[i][aracSatilik] == 1 && AracInfo[i][aracTip] == 4)
	    {
	        sayi++;
	        format(string, sizeof(string), "{FFFFFF}%d\t{38c5f7}%s\t{FFFFFF}%.1f\t{38c5f7}%s\n",i, FormatNumber(AracInfo[i][aracFiyat]), AracInfo[i][aracKM], FormatNumber(AracInfo[i][aracVergi]));
	        strcat(str, string);
	    }
	}
	if (sayi == 0)
	{
	    HataMesajGonder(playerid, "Satilik araç bulunamadi.");
	    return Dialog_Show(playerid, AracIlanlari, DIALOG_STYLE_INPUT, "{FFFFFF}Tarayici ~ Araç ilanlari", "{38c5f7}> {FFFFFF}Lütfen aratmak istediginiz aracin modelini veya adini girin:", "Ara", "Geri");
	}
	format(string, sizeof(string), "Satilik Araçlar (%d)", sayi);
	Dialog_Show(playerid, SatilikAraclar, DIALOG_STYLE_TABLIST_HEADERS, string, str, "isaretle", "Geri");
	return 1;
}
Dialog:SatilikAraclar(playerid, response, listitem, inputtext[])
{
	if (!response) return Dialog_Show(playerid, AracIlanlari, DIALOG_STYLE_INPUT, "{FFFFFF}Tarayici ~ Araç ilanlari", "{38c5f7}> {FFFFFF}Lütfen aratmak istediginiz aracin modelini veya adini girin:", "Ara", "Geri");
	if (response)
	{
	    if (PlayerData[playerid][pTarifeKalan][2] < 3) return HataMesajGonder(playerid, "Tarifeniz yok veya internet paketiniz yetmiyor. Tarife satin almak için /ara 555");
	    new id = strval(inputtext);
	    if (AracInfo[id][aracExists])
	    {
	        if (AracInfo[id][aracDisplay] == 0)
	        {
	            HataMesajGonder(playerid, "Aracin yeri tespit edilemedi.");
	            return AracIlanlari(playerid, AracInfo[id][aracModel]);
	        }
	        if (GetVehicleVirtualWorld(AracInfo[id][aracVehicle]) != GetPlayerVirtualWorld(playerid))
	        {
	            HataMesajGonder(playerid, "Aracin yeri tespit edilemedi.");
	            return AracIlanlari(playerid, AracInfo[id][aracModel]);
	        }
	        cmd_cpsifirla(playerid);

	        new Float:pos[3];
	        GetVehiclePos(AracInfo[id][aracVehicle], pos[0], pos[1], pos[2]);
	        SetPVarInt(playerid, "AraciniBuluyor", 1);
	        SetPlayerCheckpoint(playerid, pos[0], pos[1], pos[2], 5.0);
	        MesajGonder(playerid, "Aracin yeri haritada isaretlendi.");
	        PlayerData[playerid][pTarifeKalan][2] -= 3;
	    }
	}
	return 1;
}
Dialog:Tarifem(playerid, response, listitem, inputtext[])
{
	if (!response) return Telefon_Menu(playerid);
	if (response)
	{
		if (listitem == 4)
		{
			PlayerData[playerid][pTarife] = -1;
			PlayerData[playerid][pTarifeKalan][0] = 0;
			PlayerData[playerid][pTarifeKalan][1] = 0;
			PlayerData[playerid][pTarifeKalan][2] = 0;
			PlayerData[playerid][pTarifeSure] = 0;
			Oyuncu_Kaydet(playerid);
			MesajGonder(playerid, "Tarifeniz iptal edildi.");
			Telefon_Menu(playerid);
		}
	}
	return 1;
}
Dialog:SMSGonder(playerid, response, listitem, inputtext[])
{
	if (!response) return Telefon_Menu(playerid);
	if (response)
	{
		if (isnull(inputtext)) return Dialog_Show(playerid, SMSGonder, DIALOG_STYLE_INPUT, "Telefon ~ SMS Yolla", "Lütfen SMS yollamak istediginiz numarayi girin:", "Devam", "Geri");
		if (!IsNumeric(inputtext)) return Dialog_Show(playerid, SMSGonder, DIALOG_STYLE_INPUT, "Telefon ~ SMS Yolla", "Lütfen SMS yollamak istediginiz numarayi girin:", "Devam", "Geri");
		if (strval(inputtext) == 911 || strval(inputtext) == 121 || strval(inputtext) == 555)
		{
			HataMesajGonder(playerid, "Bu numaraya SMS gönderemezsiniz.");
			return Dialog_Show(playerid, SMSGonder, DIALOG_STYLE_INPUT, "Telefon ~ SMS Yolla", "Lütfen SMS yollamak istediginiz numarayi girin:", "Devam", "Geri");
		}
		new targetid = GetNumberOwner(strval(inputtext));
		if (targetid == INVALID_PLAYER_ID || targetid == playerid || Jammer_Near(targetid) == 1)
		{
			HataMesajGonder(playerid, "Geçersiz numara girdiniz.");
			return Dialog_Show(playerid, SMSGonder, DIALOG_STYLE_INPUT, "Telefon ~ SMS Yolla", "Lütfen SMS yollamak istediginiz numarayi girin:", "Devam", "Geri");
		}
		if (PlayerData[targetid][pTelefonAyar][0] == 1 || PlayerData[targetid][pTelefonAyar][4] == 1)
		{
			HataMesajGonder(playerid, "Bu numara SMS alimlarini kapatmis.");
			return Dialog_Show(playerid, SMSGonder, DIALOG_STYLE_INPUT, "Telefon ~ SMS Yolla", "Lütfen SMS yollamak istediginiz numarayi girin:", "Devam", "Geri");
		}
		SetPVarInt(playerid, "SMSNumara", strval(inputtext));
		Dialog_Show(playerid, SMSGonder2, DIALOG_STYLE_INPUT, "Telefon ~ SMS Gönder", "Lütfen göndermek istediginiz mesaji girin:", "Gönder", "Kapat");
		/*SendClientMessageEx(targetid, COLOR_YELLOW, "[SMS]: %s - %s", text, TelNo(targetid, playerid));
		SendClientMessageEx(playerid, COLOR_YELLOW, "[SMS]: %s - %s", text, TelNo(targetid, playerid));

        PlayerPlaySoundEx(targetid, 21001);*/
	}
	return 1;
}
Dialog:SMSGonder2(playerid, response, listitem, inputtext[])
{
	if (!response)
	{
		DeletePVar(playerid, "SMSNumara");
		Dialog_Show(playerid, SMSGonder, DIALOG_STYLE_INPUT, "Telefon ~ SMS Yolla", "Lütfen SMS yollamak istediginiz numarayi girin:", "Devam", "Geri");
	}
	if (response)
	{
		if (isnull(inputtext)) return Dialog_Show(playerid, SMSGonder2, DIALOG_STYLE_INPUT, "Telefon ~ SMS Gönder", "Lütfen göndermek istediginiz mesaji girin:", "Gönder", "Kapat");
		if (strlen(inputtext) < 3 || strlen(inputtext) > 128)
		{
			HataMesajGonder(playerid, "Mesaj uzunlugu 3 ile 128 karakter arasinda olmalidir.");
			return Dialog_Show(playerid, SMSGonder2, DIALOG_STYLE_INPUT, "Telefon ~ SMS Gönder", "Lütfen göndermek istediginiz mesaji girin:", "Gönder", "Kapat");
		}
		new targetid = GetNumberOwner(GetPVarInt(playerid, "SMSNumara"));
		if (targetid == INVALID_PLAYER_ID)
		{
			HataMesajGonder(playerid, "Geçersiz numara girdiniz.");
			DeletePVar(playerid, "SMSNumara");
			return 1;
		}
		if (PlayerData[targetid][pTelefonAyar][0] == 1 || PlayerData[targetid][pTelefonAyar][4] == 1)
		{
			HataMesajGonder(playerid, "Bu numara SMS alimlarini kapatmis.");
			DeletePVar(playerid, "SMSNumara");
			return 1;
		}
		PlayerData[playerid][pTarifeKalan][1]--;
		DeletePVar(playerid, "SMSNumara");
		SendClientMessageEx(targetid, COLOR_YELLOW, "[SMS]: %s - %s", inputtext, TelNo(targetid, playerid));
		SendClientMessageEx(playerid, COLOR_YELLOW, "[SMS]: %s - %s", inputtext, ReturnName(playerid, 0));

        PlayerPlaySoundEx(targetid, 21001);

	}
	return 1;
}
Dialog:Arama(playerid, response, listitem, inputtext[])
{
	if (!response) return Telefon_Menu(playerid);
	if (response)
	{
	    if (PlayerData[playerid][pAramada] != 0) return HataMesajGonder(playerid, "su an aramada oldugunuz için kimseyi arayamazsiniz.");
	    if (isnull(inputtext)) return Dialog_Show(playerid, Arama, DIALOG_STYLE_INPUT, "Telefon ~ Arama", "Lütfen aramak istediginiz numarayi girin:\n\n{38c5f7}911 - Acil Durum | 333 - Taksi | 555 - Tarifeci", "Ara", "Geri");
	    if (!IsNumeric(inputtext)) return Dialog_Show(playerid, Arama, DIALOG_STYLE_INPUT, "Telefon ~ Arama", "Lütfen aramak istediginiz numarayi girin:\n\n{38c5f7}911 - Acil Durum | 333 - Taksi | 555 - Tarifeci", "Ara", "Geri");
	    if (strval(inputtext) == PlayerData[playerid][pTelefon])
	    {
	        HataMesajGonder(playerid, "Kendinizi aramayazsiniz.");
	        return Dialog_Show(playerid, Arama, DIALOG_STYLE_INPUT, "Telefon ~ Arama", "Lütfen aramak istediginiz numarayi girin:\n\n{38c5f7}911 - Acil Durum | 121 - Taksi | 555 - Tarifeci", "Ara", "Geri");
	    }
	    if (strval(inputtext) == 555)
	    {
	    	new string[750], sayi;
	    	for (new i; i<sizeof(Tarifeler); i++)
	    	{
	    		sayi++;
	    		format(string, sizeof(string), "%s{FFFFFF}%s {38c5f7}(%s){FFFFFF} - %d dakika / %d SMS / %d MB\n", string, Tarifeler[i][TarifeAdi], FormatNumber(Tarifeler[i][TarifeFiyat]), Tarifeler[i][TarifeDakika], Tarifeler[i][TarifeSMS], Tarifeler[i][TarifeNet]);
	    	}
	    	if (sayi == 0) return HataMesajGonder(playerid, "Hiç tarife yok.");
	    	Dialog_Show(playerid, Tarifeler, DIALOG_STYLE_LIST, "Tarifeci", string, "Seç", "Kapat");
	    	return 1;
	    }
	    if (strval(inputtext) == 911)
	    {
	        if (!spamProtect(playerid, "AcilDurum", 120)) return HataMesajGonder(playerid, "Tekrar ihbar vermek için 2 dakika beklemelisiniz.");
	        Dialog_Show(playerid, HizmetSecin, DIALOG_STYLE_LIST, "{FFFFFF}Operatör ~ Hizmet Seçin:", "{9189EF}Los Angeles Polis Departmani\n{FF8282}Los Angeles Medical Department", "Seç", "Kapat");
	        return 1;
	    }
	    if (strval(inputtext) == 333)
    	{
	        PlayerData[playerid][pTaxiCalled] = 1;
	        PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
	        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s telefonunda bir kaç numara tuslar.", ReturnName(playerid, 0));
	        MesajGonder(playerid, "Taksi çagirdiniz, lütfen bekleyin...");
	        new Float:pos[3];
	        GetPlayerPosEx(playerid, pos[0], pos[1], pos[2]);
	        foreach (new i:Player) if (GetPlayerState(i) == PLAYER_STATE_DRIVER && PlayerData[i][pTaxiDuty] == true)
	        {
	            SendClientMessageEx(i, 0x42f445FF, "%s adli kisi %s bölgesine taksi talep ediyor.", ReturnName(playerid, 0), GetLocation(pos[0], pos[1], pos[2]));
	        }
	        return 1;
    	}
	    if (PlayerData[playerid][pTarife] == -1 || PlayerData[playerid][pTarifeKalan][0] == 0)
		{
		    HataMesajGonder(playerid, "Tarifeniz yok veya tarifenizde dakika kalmamis.");
		    return Dialog_Show(playerid, Arama, DIALOG_STYLE_INPUT, "Telefon ~ Arama", "Lütfen aramak istediginiz numarayi girin:\n\n{38c5f7}911 - Acil Durum | 333 - Taksi | 555 - Tarifeci", "Ara", "Geri");
		}
	    new targetid = GetNumberOwner(strval(inputtext));
	    if (targetid == INVALID_PLAYER_ID || targetid == playerid || PlayerData[targetid][pBaygin] > 0 || PlayerData[targetid][pKelepce] > 0 || PlayerData[targetid][pHapisSure] > 0 || PlayerData[targetid][pTelefonAyar][0] == 1 || PlayerData[targetid][pTelefonAyar][5] == 1 || Jammer_Near(targetid) == 1) return HataMesajGonder(playerid, "Aradiginiz numaraya su anda ulasilamiyor, lütfen daha sonra tekrar deneyiniz.");
	    if (PlayerData[targetid][pAramada] != 0) return HataMesajGonder(playerid, "Mesgül tonu aldin...");
	    if (PlayerData[targetid][pTelefonAyar][3] == 1 && !RehberdeVar(targetid, PlayerData[playerid][pTelefon])) return HataMesajGonder(playerid, "Bu numara bilinmeyen numaralari engellemis.");
	    PlayerData[playerid][pAramada] = ARAMA_ARIYOR;
	    PlayerData[targetid][pAramada] = ARAMA_ARANIYOR;
	    PlayerData[playerid][pCallLine] = targetid;
	    PlayerData[targetid][pCallLine] = playerid;
	    SetPVarInt(playerid, "Arayan", 1);
	    MesajGonder(playerid, "Numara araniyor, lütfen cevap vermesini bekleyin. /cagrikapat ile çagriyi bitirebilirsiniz.");
	    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s telefonunda bir kaç numara tuslar.", ReturnName(playerid, 0));
	    SunucuMesaji(targetid, "Gelen Arama: %s  - /cagrikabul ile çagriyi kabul edebilir, /cagrikapat ile çagriyi kapatabilirsiniz.", TelNo(targetid, playerid));
	    PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
	    if (PlayerData[targetid][pTelefonAyar][1]) SendNearbyMessage(targetid, 30.0, COLOR_CYAN, "** Telefonu titremektedir. (( %s ))", ReturnName(targetid, 0));
	    else
		{
			SendNearbyMessage(targetid, 30.0, COLOR_CYAN, "** Telefon çalmaktadir. (( %s ))", ReturnName(targetid, 0));
            PlayerPlaySoundEx(targetid, 23000);
		}
	}
	return 1;
}
TelNo(playerid, targetid)
{
	new query[200], returnn[24] = "Bilinmeyen";
    if (!OyundaDegil(targetid)) return returnn;
    format(query, sizeof(query), "SELECT `Isim` FROM `rehber` WHERE `Numara` = '%d' AND `RehberNumara` = '%d'", PlayerData[playerid][pTelefon], PlayerData[targetid][pTelefon]);
    new Cache:cachee = mysql_query(g_SQL, query);
    new rows;
    cache_get_row_count(rows);
    if (rows)
    {
        new name[24];
        cache_get_value_name(0, "Isim", name, 24);
        format(returnn, sizeof(returnn), "%s", name);
    }
    else
    {
        format(returnn, sizeof(returnn), "%d", PlayerData[targetid][pTelefon]);
    }
    cache_delete(cachee);
	return returnn;
}
RehberdeVar(playerid, numara)
{
	new query[200];
	format(query, sizeof(query), "SELECT null FROM `rehber` WHERE `Numara` = '%d' AND `RehberNumara` = '%d'", PlayerData[playerid][pTelefon], numara);
	new Cache:cachee = mysql_query(g_SQL, query);
	new rows;
    cache_get_row_count(rows);
    cache_delete(cachee);
    if (rows) return 1;
    return 0;
}
GetNumberOwner(number)
{
	foreach (new i : Player) if (PlayerData[i][pTelefon] != -1 && PlayerData[i][pTelefon] == number) {
		return i;
	}
	return INVALID_PLAYER_ID;
}
GetVehicleModelIDFromName(vname[])
{
        for (new i = 0; i < 211; i++)
        {
                if ( strfind(VehicleNames[i], vname, true) != -1 )
                        return i + 400;
        }
        return -1;
}
stock Telefon_Rehber(playerid)
{
	if (PlayerData[playerid][pTelefon] == -1) return 1;
	new query[124], str[500];
	format(query, sizeof(query), "SELECT * FROM `rehber` WHERE `Numara` = '%d' ORDER BY `Numara` DESC LIMIT 15", PlayerData[playerid][pTelefon]);
	new Cache:cachee = mysql_query(g_SQL, query);
	new rows;
	cache_get_row_count(rows);
	if (rows)
	{
		new number, name[24], tarih[20];
		for (new i; i<rows; i++)
		{
			cache_get_value_name_int(i, "RehberNumara", number);
			cache_get_value_name(i, "Isim", name, 24);
			cache_get_value_name(i, "Tarih", tarih, 20);
			RehberListeleme[playerid][i] = number;
			format(str, sizeof(str), "%s{FFFFFF}%s (Numara: %d) - %s\n", str, name, number, tarih);

		}
		strcat(str, "{38c5f7}> {FFFFFF}Kisi Ekle");
	}
	else
	{
		format(str, sizeof(str), "{38c5f7}> {FFFFFF}Kisi Ekle");
	}
	SetPVarInt(playerid, "RehberSayi", rows);
	cache_delete(cachee);
	Dialog_Show(playerid, TelefonRehber, DIALOG_STYLE_LIST, "Rehber", str, "Seç", "Geri");
	return 1;
}
Dialog:Tarifeler(playerid, response, listitem, inputtext[])
{
	if (!response) return Telefon_Menu(playerid);
	if (response)
	{
		if (PlayerData[playerid][pTarife] != -1) return HataMesajGonder(playerid, "Zaten tarifeniz var, önce mevcut tarifenizi iptal etmelisiniz.");
		if (PlayerData[playerid][pCash] < Tarifeler[listitem][TarifeFiyat]) return HataMesajGonder(playerid, "Bu tarifeyi almak için yeterli paraniz yok.");
		ParaVer(playerid, -Tarifeler[listitem][TarifeFiyat]);
		PlayerData[playerid][pTarife] = listitem;
		PlayerData[playerid][pTarifeKalan][0] = Tarifeler[listitem][TarifeDakika];
		PlayerData[playerid][pTarifeKalan][1] = Tarifeler[listitem][TarifeSMS];
		PlayerData[playerid][pTarifeKalan][2] = Tarifeler[listitem][TarifeNet];
		PlayerData[playerid][pTarifeSure] = gettime()+7*86400;
		Oyuncu_Kaydet(playerid);
		MesajGonder(playerid, "{38c5f7}'%s' {FFFFFF}adli tarifeyi satin aldiniz. ", Tarifeler[listitem][TarifeAdi]);
	}
	return 1;
}
Dialog:TelefonRehber(playerid, response, listitem, inputtext[])
{
	if (!response) return Telefon_Menu(playerid), DeletePVar(playerid, "RehberSayi");
	if (response)
	{
		if (listitem == GetPVarInt(playerid, "RehberSayi"))
		{
            new rehbersayi = 15;
		    switch (PlayerData[playerid][pVip])
		    {
		        case 1: rehbersayi += 10;
		        case 2: rehbersayi += 20;
		        case 3: rehbersayi += 25;
		    }
			if (GetPVarInt(playerid, "RehberSayi") >= rehbersayi)
			{
				Telefon_Rehber(playerid);
				return HataMesajGonder(playerid, "Telefon rehberine en fazla %d kisi ekleyebilirsiniz.", rehbersayi);
			}
			else
			{
				Dialog_Show(playerid, RehberEkle, DIALOG_STYLE_INPUT, "Kisi Ekle", "{FFFFFF}Lütfen rehberinize eklemek istediginiz numarayi girin:", "Devam", "Geri");
			}
		}
		else
		{
			new number = RehberListeleme[playerid][listitem];
			if (number != 0)
			{
				SetPVarInt(playerid, "RehberNumber", number);
				Dialog_Show(playerid, RehberAyar, DIALOG_STYLE_LIST, "Rehber", "{38c5f7}> {FFFFFF}Ara\n{38c5f7}> {FFFFFF}SMS Yolla\n{38c5f7}> {FFFFFF}Sil", "Seç", "Geri");
			}
		}
	}
	return 1;
}
Dialog:RehberAyar(playerid, response, listitem, inputtext[])
{
	if (!response) Telefon_Rehber(playerid);
	if (response)
	{
		if (listitem == 0)
		{
			new targetid = GetNumberOwner(GetPVarInt(playerid, "RehberNumber"));
			if (PlayerData[playerid][pAramada] != 0) return HataMesajGonder(playerid, "su an aramada oldugunuz için kimseyi arayamazsiniz.");
			if (targetid == INVALID_PLAYER_ID || /*targetid == playerid ||*/ PlayerData[targetid][pBaygin] > 0 || PlayerData[targetid][pKelepce] > 0 || PlayerData[targetid][pHapisSure] > 0 || PlayerData[targetid][pTelefonAyar][0] == 1 || PlayerData[targetid][pTelefonAyar][5] == 1 || Jammer_Near(targetid) == 1)
			{
				Telefon_Rehber(playerid);
				return HataMesajGonder(playerid, "Aradiginiz numaraya su anda ulasilamiyor, lütfen daha sonra tekrar deneyiniz.");
			}
			if (PlayerData[playerid][pTarife] == -1 || PlayerData[playerid][pTarifeKalan][0] == 0)
			{
			    HataMesajGonder(playerid, "Tarifeniz yok veya tarifenizde dakika kalmamis, 555 numarasini arayarak yenileyebilirsiniz.");
			    return Telefon_Rehber(playerid);
			}
			if (PlayerData[targetid][pAramada] != 0)
			{
				Telefon_Rehber(playerid);
				return HataMesajGonder(playerid, "Mesgul tonu aldin...");
			}
			PlayerData[playerid][pAramada] = ARAMA_ARIYOR;
		    PlayerData[targetid][pAramada] = ARAMA_ARANIYOR;
		    PlayerData[playerid][pCallLine] = targetid;
		    PlayerData[targetid][pCallLine] = playerid;
		    SetPVarInt(playerid, "Arayan", 1);
		    SetPVarInt(targetid, "Arayan", 0);
		    MesajGonder(playerid, "Numara araniyor, lütfen cevap vermesini bekleyin. /cagrikapat ile çagriyi bitirebilirsiniz.");
		    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s telefonunda bir kaç numara tuslar.", ReturnName(playerid, 0));
		    SunucuMesaji(targetid, "Gelen Arama: %s  - /cagrikabul ile çagriyi kabul edebilir, /cagrikapat ile çagriyi kapatabilirsiniz.", TelNo(targetid, playerid));
		    PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
		    if (PlayerData[targetid][pTelefonAyar][1]) SendNearbyMessage(targetid, 30.0, COLOR_CYAN, "** Telefonu titremektedir. (( %s ))", ReturnName(targetid, 0));
		    else
			{
				SendNearbyMessage(targetid, 30.0, COLOR_CYAN, "** Telefon çalmaktadir. (( %s ))", ReturnName(targetid, 0));
	            PlayerPlaySoundEx(targetid, 23000);
			}
			DeletePVar(playerid, "RehberSayi");
			DeletePVar(playerid, "RehberNumber");

		}
		if (listitem == 1)
		{
		    if (PlayerData[playerid][pTarife] == -1 || PlayerData[playerid][pTarifeKalan][1] == 0)
	 		{
	 		    HataMesajGonder(playerid, "Tarifeniz yok veya SMS hakkiniz bitmis.");
			 	return Telefon_Rehber(playerid);
	 		}
			new targetid = GetNumberOwner(GetPVarInt(playerid, "RehberNumber"));
			if (targetid == INVALID_PLAYER_ID || targetid == playerid || Jammer_Near(targetid) == 1)
			{
				HataMesajGonder(playerid, "Bu numaraya su anda ulasilamiyor.");
				Telefon_Rehber(playerid);
				return 1;
			}
			if (PlayerData[targetid][pTelefonAyar][0] == 1 || PlayerData[targetid][pTelefonAyar][4] == 1)
			{
				HataMesajGonder(playerid, "Bu numara SMS alimlarini kapatmis.");
				return Telefon_Rehber(playerid);
			}
			SetPVarInt(playerid, "SMSNumara", GetPVarInt(playerid, "RehberNumber"));
			Dialog_Show(playerid, SMSGonder2, DIALOG_STYLE_INPUT, "Telefon ~ SMS Gönder", "Lütfen göndermek istediginiz mesaji girin:", "Gönder", "Kapat");
		}
		if (listitem == 2)
		{
			new query[124];
			format(query, sizeof(query), "DELETE FROM `rehber` WHERE `Numara` = '%d' AND `RehberNumara` = '%d'", PlayerData[playerid][pTelefon], GetPVarInt(playerid, "RehberNumber"));
			mysql_query(g_SQL, query, false);
			DeletePVar(playerid, "RehberNumber");
			Telefon_Rehber(playerid);
		}
	}
	return 1;
}
Dialog:RehberEkle(playerid, response, listitem, inputtext[])
{
	if (!response) return Telefon_Rehber(playerid);
	if (response)
	{
		if (isnull(inputtext)) return Dialog_Show(playerid, RehberEkle, DIALOG_STYLE_INPUT, "Kisi Ekle", "{FFFFFF}Lütfen rehberinize eklemek istediginiz numarayi girin:", "Devam", "Geri");
		if (!IsNumeric(inputtext)) return Dialog_Show(playerid, RehberEkle, DIALOG_STYLE_INPUT, "Kisi Ekle", "{FFFFFF}Lütfen rehberinize eklemek istediginiz numarayi girin:", "Devam", "Geri");
		if (strval(inputtext) == 911 || strval(inputtext) == 121 || strval(inputtext) == 555) return Dialog_Show(playerid, RehberEkle, DIALOG_STYLE_INPUT, "Kisi Ekle", "{FFFFFF}Lütfen rehberinize eklemek istediginiz numarayi girin:", "Devam", "Geri");
		if (RehberdeVar(playerid, strval(inputtext))) return Dialog_Show(playerid, RehberEkle, DIALOG_STYLE_INPUT, "Kisi Ekle", "{FFFFFF}Lütfen rehberinize eklemek istediginiz numarayi girin:", "Devam", "Geri");
		if (strval(inputtext) == PlayerData[playerid][pTelefon])
		{
		    HataMesajGonder(playerid, "Kendi numaranizi ekleyemezsiniz.");
		    return Dialog_Show(playerid, RehberEkle, DIALOG_STYLE_INPUT, "Kisi Ekle", "{FFFFFF}Lütfen rehberinize eklemek istediginiz numarayi girin:", "Devam", "Geri");
		}
		SetPVarInt(playerid, "RehberNumara", strval(inputtext));
		Dialog_Show(playerid, RehberEkleAd, DIALOG_STYLE_INPUT, "Kisi Ekle", "{FFFFFF}Lütfen kisinin ismini girin:", "Devam", "Geri");
	}
	return 1;
}
Dialog:RehberEkleAd(playerid, response, listitem, inputtext[])
{
	if (!response) return Dialog_Show(playerid, RehberEkle, DIALOG_STYLE_INPUT, "Kisi Ekle", "{FFFFFF}Lütfen rehberinize eklemek istediginiz numarayi girin:", "Devam", "Geri");
	if (response)
	{
		if (isnull(inputtext)) return Dialog_Show(playerid, RehberEkleAd, DIALOG_STYLE_INPUT, "Kisi Ekle", "{FFFFFF}Lütfen kisinin ismini girin:", "Devam", "Geri");
		new query[300];
		format(query, sizeof(query), "INSERT INTO `rehber` (`Numara`, `RehberNumara`, `Isim`, `Tarih`) VALUES ('%d', '%d', '%s', '%s')", PlayerData[playerid][pTelefon],GetPVarInt(playerid, "RehberNumara"), SQL_ReturnEscaped(inputtext), ReturnDate());
		mysql_query(g_SQL, query, false);
		DeletePVar(playerid, "RehberNumara");
		MesajGonder(playerid, "Rehberinize '%s' adli kisi eklenmistir.", inputtext);
		Telefon_Rehber(playerid);
	}
	return 1;
}
Dialog:TelefonAyarlar(playerid, response, listitem, inputtext[])
{
	if (!response) return Telefon_Menu(playerid);
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
	            if (PlayerData[playerid][pTelefonAyar][1] == 0) PlayerData[playerid][pTelefonAyar][1] = 1;
	            else PlayerData[playerid][pTelefonAyar][1] = 0;
	            Dialog_Show(playerid, TelefonAyarlar, DIALOG_STYLE_LIST, "Telefon ~ Ayarlar", "{38c5f7}> {FFFFFF}Titresim:\t\t%s\n{38c5f7}> {FFFFFF}Hoparlör:\t\t%s\n{38c5f7}> {FFFFFF}Bilinmeyen Numara Engeli:\t%s\n{38c5f7}> {FFFFFF}SMS Engeli:\t\t%s\n{38c5f7}> {FFFFFF}Arama Engeli:\t\t%s", "Seç", "Geri",(PlayerData[playerid][pTelefonAyar][1] == 0) ? ("{F22C2C}Kapalý") : ("{2CF26B}Açýk"),
				(PlayerData[playerid][pTelefonAyar][2] == 0) ? ("{F22C2C}Kapalý") : ("{2CF26B}Açýk"),  (PlayerData[playerid][pTelefonAyar][3] == 0) ? ("{F22C2C}Kapalý") : ("{2CF26B}Açýk"),  (PlayerData[playerid][pTelefonAyar][4] == 0) ? ("{F22C2C}Kapalý") : ("{2CF26B}Açýk"), (PlayerData[playerid][pTelefonAyar][5] == 0) ? ("{F22C2C}Kapalý") : ("{2CF26B}Açýk"));
	        }
	        case 1:
	        {
	            if (PlayerData[playerid][pTelefonAyar][2] == 0) PlayerData[playerid][pTelefonAyar][2] = 1;
	            else PlayerData[playerid][pTelefonAyar][2] = 0;
	            Dialog_Show(playerid, TelefonAyarlar, DIALOG_STYLE_LIST, "Telefon ~ Ayarlar", "{38c5f7}> {FFFFFF}Titresim:\t\t%s\n{38c5f7}> {FFFFFF}Hoparlör:\t\t%s\n{38c5f7}> {FFFFFF}Bilinmeyen Numara Engeli:\t%s\n{38c5f7}> {FFFFFF}SMS Engeli:\t\t%s\n{38c5f7}> {FFFFFF}Arama Engeli:\t\t%s", "Seç", "Geri",(PlayerData[playerid][pTelefonAyar][1] == 0) ? ("{F22C2C}Kapalý") : ("{2CF26B}Açýk"),
				(PlayerData[playerid][pTelefonAyar][2] == 0) ? ("{F22C2C}Kapalý") : ("{2CF26B}Açýk"),  (PlayerData[playerid][pTelefonAyar][3] == 0) ? ("{F22C2C}Kapalý") : ("{2CF26B}Açýk"),  (PlayerData[playerid][pTelefonAyar][4] == 0) ? ("{F22C2C}Kapalý") : ("{2CF26B}Açýk"), (PlayerData[playerid][pTelefonAyar][5] == 0) ? ("{F22C2C}Kapalý") : ("{2CF26B}Açýk"));
	        }
	        case 2:
	        {
	            if (PlayerData[playerid][pTelefonAyar][3] == 0) PlayerData[playerid][pTelefonAyar][3] = 1;
	            else PlayerData[playerid][pTelefonAyar][3] = 0;
	            Dialog_Show(playerid, TelefonAyarlar, DIALOG_STYLE_LIST, "Telefon ~ Ayarlar", "{38c5f7}> {FFFFFF}Titresim:\t\t%s\n{38c5f7}> {FFFFFF}Hoparlör:\t\t%s\n{38c5f7}> {FFFFFF}Bilinmeyen Numara Engeli:\t%s\n{38c5f7}> {FFFFFF}SMS Engeli:\t\t%s\n{38c5f7}> {FFFFFF}Arama Engeli:\t\t%s", "Seç", "Geri",(PlayerData[playerid][pTelefonAyar][1] == 0) ? ("{F22C2C}Kapalý") : ("{2CF26B}Açýk"),
				(PlayerData[playerid][pTelefonAyar][2] == 0) ? ("{F22C2C}Kapalý") : ("{2CF26B}Açýk"),  (PlayerData[playerid][pTelefonAyar][3] == 0) ? ("{F22C2C}Kapalý") : ("{2CF26B}Açýk"),  (PlayerData[playerid][pTelefonAyar][4] == 0) ? ("{F22C2C}Kapalý") : ("{2CF26B}Açýk"), (PlayerData[playerid][pTelefonAyar][5] == 0) ? ("{F22C2C}Kapalý") : ("{2CF26B}Açýk"));
	        }
	        case 3:
	        {
	            if (PlayerData[playerid][pTelefonAyar][4] == 0) PlayerData[playerid][pTelefonAyar][4] = 1;
	            else PlayerData[playerid][pTelefonAyar][4] = 0;
	            Dialog_Show(playerid, TelefonAyarlar, DIALOG_STYLE_LIST, "Telefon ~ Ayarlar", "{38c5f7}> {FFFFFF}Titresim:\t\t%s\n{38c5f7}> {FFFFFF}Hoparlör:\t\t%s\n{38c5f7}> {FFFFFF}Bilinmeyen Numara Engeli:\t%s\n{38c5f7}> {FFFFFF}SMS Engeli:\t\t%s\n{38c5f7}> {FFFFFF}Arama Engeli:\t\t%s", "Seç", "Geri",(PlayerData[playerid][pTelefonAyar][1] == 0) ? ("{F22C2C}Kapalý") : ("{2CF26B}Açýk"),
				(PlayerData[playerid][pTelefonAyar][2] == 0) ? ("{F22C2C}Kapalý") : ("{2CF26B}Açýk"),  (PlayerData[playerid][pTelefonAyar][3] == 0) ? ("{F22C2C}Kapalý") : ("{2CF26B}Açýk"),  (PlayerData[playerid][pTelefonAyar][4] == 0) ? ("{F22C2C}Kapalý") : ("{2CF26B}Açýk"), (PlayerData[playerid][pTelefonAyar][5] == 0) ? ("{F22C2C}Kapalý") : ("{2CF26B}Açýk"));
	        }
	        case 4:
	        {
	            if (PlayerData[playerid][pTelefonAyar][5] == 0) PlayerData[playerid][pTelefonAyar][5] = 1;
	            else PlayerData[playerid][pTelefonAyar][5] = 0;
	            Dialog_Show(playerid, TelefonAyarlar, DIALOG_STYLE_LIST, "Telefon ~ Ayarlar", "{38c5f7}> {FFFFFF}Titresim:\t\t%s\n{38c5f7}> {FFFFFF}Hoparlör:\t\t%s\n{38c5f7}> {FFFFFF}Bilinmeyen Numara Engeli:\t%s\n{38c5f7}> {FFFFFF}SMS Engeli:\t\t%s\n{38c5f7}> {FFFFFF}Arama Engeli:\t\t%s", "Seç", "Geri",(PlayerData[playerid][pTelefonAyar][1] == 0) ? ("{F22C2C}Kapalý") : ("{2CF26B}Açýk"),
				(PlayerData[playerid][pTelefonAyar][2] == 0) ? ("{F22C2C}Kapalý") : ("{2CF26B}Açýk"),  (PlayerData[playerid][pTelefonAyar][3] == 0) ? ("{F22C2C}Kapalý") : ("{2CF26B}Açýk"),  (PlayerData[playerid][pTelefonAyar][4] == 0) ? ("{F22C2C}Kapalý") : ("{2CF26B}Açýk"), (PlayerData[playerid][pTelefonAyar][5] == 0) ? ("{F22C2C}Kapalý") : ("{2CF26B}Açýk"));
	        }
	    }
	}
	return 1;
}

stock YaraliListesi(playerid)
{
	new str[500], string[200], sayi;
	strcat(str, "{FF8282}Ad\t{FF8282}Bölge\t{FF8282}Durum\n");
	foreach (new i:Player)
	{
	    if (PlayerData[i][pBaygin] == 1)
	    {
	        new Float:pos[3];
	        GetPlayerPosEx(i, pos[0], pos[1], pos[2]);
	        format(string, sizeof(string), "{FFFFFF}%s\t{FFFFFF}%s\t%s\n", ReturnName(i), GetLocation(pos[0], pos[1], pos[2]), (EMSAccepted(i) != INVALID_PLAYER_ID) ? ("{00FF6E}Kabul Edildi") : ("{FF0000}Bekliyor"));
	        strcat(str, string);
	        sayi++;
	    }
	}
	if (sayi == 0) return HataMesajGonder(playerid,  "Hiç yarali yok.");
	format(string, sizeof(string), "Yaralilar (%d)", sayi);
	Dialog_Show(playerid, Yaralilar, DIALOG_STYLE_TABLIST_HEADERS, string, str, "Kabul Et", "Kapat");
	return 1;
}

stock EMSAccepted(playerid)
{
	foreach (new i:Player)
	{
	    if (EMSKabul[i] == playerid && GetFactionType(i) == BIRLIK_LSMD)
	    {
	        return i;
	    }
	}
	return INVALID_PLAYER_ID;
}
stock SetPlayerLookAt(playerid, Float:X, Float:Y)
{
    new Float:Px, Float:Py, Float: Pa;
    GetPlayerPos(playerid, Px, Py, Pa);
    Pa = floatabs(atan((Y-Py)/(X-Px)));
    if (X <= Px && Y >= Py) Pa = floatsub(180, Pa);
    else if (X < Px && Y < Py) Pa = floatadd(Pa, 180);
    else if (X >= Px && Y <= Py) Pa = floatsub(360.0, Pa);
    Pa = floatsub(Pa, 90.0);
    if (Pa >= 360.0) Pa = floatsub(Pa, 360.0);
    SetPlayerFacingAngle(playerid, Pa);
}
ReturnHealth(playerid)
{
	static
	    Float:amount;

	GetPlayerHealth(playerid, amount);
	return floatround(amount, floatround_round);
}
ReturnArmour(playerid)
{
	static
	    Float:amount;

	GetPlayerArmour(playerid, amount);
	return floatround(amount, floatround_round);
}

stock GetAracVergi(aracmodel)
{
	if (aracmodel < 400 || aracmodel > 611) return 0;
	new Float:vergi = GetGaleriFiyat(aracmodel)/1000*0.3;
	return floatround(vergi);
}

stock GetAracMaksVergi(aracmodel)
{
	if (aracmodel < 400 || aracmodel > 611) return 0;
	new Float:vergi = GetGaleriFiyat(aracmodel) * 0.2;
	return floatround(vergi);
}

stock Car_LSPDTrunk(playerid, carid)
{
	new string[550];
	string[0] = EOS;

	strcat(string, "{1394BF}Ad\t{1394BF}Mermi\n");
	for (new i; i<5; i++)
	{
	    if (PolisAraci[carid][Silahlar][i] != 0 && PolisAraci[carid][Mermiler][i] != 0)
	    {
	        new silahadi[15];
	        GetWeaponName(PolisAraci[carid][Silahlar][i], silahadi, sizeof(silahadi));
	        format(string, sizeof(string), "%s{FFFFFF}%s\t{FFFFFF}%d\n",string,silahadi,PolisAraci[carid][Mermiler][i]);

		}
		else
		{
		    format(string, sizeof(string), "%s{FFFFFF}Bos Silah Yuvasi\t{FFFFFF}0\n",string);
		}
	}
 	format(string, sizeof(string), "%s{FFFFFF}Agri Kesici (%d adet)\n",string, PolisAraci[carid][AgriKesici]);
	format(string, sizeof(string), "%s{FFFFFF}Çelik Yelek (%d adet)",string, PolisAraci[carid][CelikYelek]);
	SetPVarInt(playerid, "AracBagaj", carid);
	Dialog_Show(playerid, LSPDTrunk, DIALOG_STYLE_TABLIST_HEADERS, "{1394BF}LSPD ~ Bagaj", string, "Seç", "Kapat");
	return 1;
}
Dialog:LSMDLobi(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (listitem == 0)
	    {
	        if (ReturnHealth(playerid) >= 90 && PlayerData[playerid][pTopallama] == false) return HataMesajGonder(playerid, "Tedavi olmaya ihtiyaciniz yok.");
	        CanAyarla(playerid, 100);
	        PlayerData[playerid][pTopallama] = false;
	        PlayerData[playerid][pTopallamaSayac] = 0;
	        MesajGonder(playerid, "Tedavi edildiniz.");
	    }
	    if (listitem == 1)
	    {
	        if (!spamProtect(playerid, "DoktorCagir", 60)) return HataMesajGonder(playerid, "Tekrar doktor çagirmak için 1 dakika beklemelisiniz.");
	        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s masada bulunan zile basar ve doktor çagirir.", ReturnName(playerid, 0));
	        SendBirlikMessageEx(BIRLIK_LSMD, 0xFF8282AA, "%s adli kisi lobiye Doktor talep ediyor.", ReturnName(playerid, 0));
	    }
	    if (listitem == 2)
	    {
	        if (PlayerData[playerid][pBagimlilik] == 0) return HataMesajGonder(playerid, "Uyusturucu bagimlisi degilsiniz.");
	        PlayerData[playerid][pBagimlilik] = 0;
	        PlayerData[playerid][pBagimlilikSayac][0] = 0;
	        PlayerData[playerid][pBagimlilikSayac][1] = 0;
	        MesajGonder(playerid, "Uyusturucu bagimliligindan kurtuldunuz.");
		}
	}
	return 1;
}
stock IsyeriMaksVergi(id)
{
	new maksvergi = 0;
	switch (Isyeri[id][isyeriTip])
	{
	    case 1: maksvergi = 75000;
	    case 2: maksvergi = 55000;
	    case 3: maksvergi = 49000;
	    case 4: maksvergi = 85000;
	    case 5: maksvergi = 60000;
	    case 6: maksvergi = 53000;
	    case 7: maksvergi = 155000;
	}
	return maksvergi;
}
stock GetIsyeriVergi(id)
{
	new vergi = 0;
	switch (Isyeri[id][isyeriTip])
	{
	    case 1: vergi = 80;
	    case 2: vergi = 65;
	    case 3: vergi = 50;
	    case 4: vergi = 100;
	    case 5: vergi = 75;
	    case 6: vergi = 60;
	    case 7: vergi = 200;
	}
	return vergi;
}
stock GetGaleriFiyat(amodel)
{
	new query[100];
	format(query, sizeof(query), "SELECT `fiyat` FROM `satilikaraclar` WHERE `model` = '%d'", amodel);
	new Cache:Radless = mysql_query(g_SQL, query);
	new rows;
	cache_get_row_count(rows);
	if (rows)
	{
		new fiyat = 0;
		cache_get_value_name_int(0, "fiyat", fiyat);
		cache_delete(Radless);
		return fiyat;
	}

	else return 0;

}
Dialog:LSPDTrunk(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPVarInt(playerid, "AracBagaj");
	    if (strfind(inputtext, "Agri Kesici", true) != -1)
	    {
	        if (PolisAraci[vehicleid][AgriKesici] > 0)
	        {
	            PolisAraci[vehicleid][AgriKesici]--;
	            CanAyarla(playerid, 100.0);
	            SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s araçtan agri kesici alir ve yutar.", ReturnName(playerid, 0));
			}
			else
			{
			    HataMesajGonder(playerid, "Bagajda hiç agri kesici kalmamis.");
			}
			return 1;
		}
		if (strfind(inputtext, "Çelik Yelek", true) != -1)
		{
		    if (PolisAraci[vehicleid][CelikYelek] > 0)
		    {
		        PolisAraci[vehicleid][CelikYelek]--;
		        ZirhAyarla(playerid, 100.0);
		        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s araçtan çelik yelek alir ve giyer.", ReturnName(playerid, 0));
			}
			else
			{
			    HataMesajGonder(playerid, "Bagajda hiç çelik yelek kalmamis.");
			}
			return 1;
		}
		new silahad[15];
		if (PolisAraci[vehicleid][Silahlar][listitem] == 0)
		{
		    if (!GetWeapon(playerid))
		    {
		        HataMesajGonder(playerid, "Elinizde silah yok!");
		        return Car_LSPDTrunk(playerid, vehicleid);
		    }
		    if (GetWeapon(playerid) == 23 && PlayerData[playerid][pTazer])
		    {
		        HataMesajGonder(playerid, "Bagaja Tazer koyamazsiniz!");
		        return Car_LSPDTrunk(playerid, vehicleid);
		    }
		    if (GetWeapon(playerid) == 25 && PlayerData[playerid][pBeanbag])
		    {
		        HataMesajGonder(playerid, "Bagaja Beanbag koyamazsiniz!");
		        return Car_LSPDTrunk(playerid, vehicleid);
		    }
		    if (GetPlayerAmmo(playerid) < 2)
		    {
		        HataMesajGonder(playerid, "Mermisi bitmis bir silahi bagaja koyamazsiniz!");
		        return Car_LSPDTrunk(playerid, vehicleid);
		    }
		    PolisAraci[vehicleid][Silahlar][listitem] = GetWeapon(playerid);
		    PolisAraci[vehicleid][Mermiler][listitem] = GetPlayerAmmo(playerid);
		    ResetWeapon(playerid, GetWeapon(playerid));
		    GetWeaponName(PolisAraci[vehicleid][Silahlar][listitem], silahad, sizeof(silahad));
		    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s '%s' model silahi aracin bagajina koyar.", ReturnName(playerid, 0), silahad);
		}
		else
		{
		    if (PlayerHasWeapon(playerid, PolisAraci[vehicleid][Silahlar][listitem]))
		    {
		        HataMesajGonder(playerid, "Bu silaha zaten sahipsin!");
		        return Car_LSPDTrunk(playerid, vehicleid);
		    }
		    GiveWeaponToPlayer(playerid,PolisAraci[vehicleid][Silahlar][listitem], PolisAraci[vehicleid][Mermiler][listitem]);
		    GetWeaponName(PolisAraci[vehicleid][Silahlar][listitem], silahad, sizeof(silahad));
		    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s polis aracinin bagajindan '%s' model silahi alir.", ReturnName(playerid, 0), silahad);
		    PolisAraci[vehicleid][Silahlar][listitem] = 0;
		    PolisAraci[vehicleid][Mermiler][listitem] = 0;

		}
	}
	return 1;
}

stock SetPlayerInPrison(playerid)
{
	new virtual = RandomEx(1, 100);
	new interior = RandomEx(1, 100);

	SetPlayerPos(playerid, 227.1028, 110.2860, 999.0156);
	SetPlayerInterior(playerid, interior);
	SetPlayerVirtualWorld(playerid, virtual);
	SetCameraBehindPlayer(playerid);
	return 1;
}

Arrest_Nearest(playerid)
{
    for (new i = 0; i != MAX_ARREST_POINTS; i ++) if (ArrestData[i][arrestExists] && IsPlayerInRangeOfPoint(playerid, 4.0, ArrestData[i][arrestPos][0], ArrestData[i][arrestPos][1], ArrestData[i][arrestPos][2]))
	{
		if (GetPlayerInterior(playerid) == ArrestData[i][arrestInterior] && GetPlayerVirtualWorld(playerid) == ArrestData[i][arrestWorld])
			return i;
	}
	return -1;
}
stock IsPlayerNearArrest(playerid)
{
	new
	    id = Arrest_Nearest(playerid);

	return (id != -1);
}

stock MenuMVB(playerid)
{
	if (GetFactionType(playerid) == BIRLIK_LSPD || GetFactionType(playerid) == BIRLIK_FBI)
	{
	    Dialog_Show(playerid, MenuMVB, DIALOG_STYLE_LIST, "{1394BF}Mobil Veritabani", "{1394BF}> {FFFFFF}Kriminal Veritabani\n{1394BF}> {FFFFFF}Plaka inceleme\n{1394BF}> {FFFFFF}Telefon Sorgulat\n{1394BF}> {FFFFFF}Aranmalar\n{1394BF}> {FFFFFF}Ihbarlar\n{1394BF}> {FFFFFF}Dashcam Aç/Kapat\n{1394BF}> {FFFFFF}Gecikmis Vatandas Cezalari", "Seç", "Kapat");
	}
}

Dialog:MenuMVB(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		switch (listitem)
		{
		    case 0: // Kriminal Veritabani
		    {
				Dialog_Show(playerid, MVBIDYaz, DIALOG_STYLE_INPUT, "{1394BF}Mobil Veritabani ~ Kriminal Veritabani", "Lütfen incelemek istediginiz kisinin ID'sini girin:", "Devam", "Geri");
		    }
		    case 1: // Plaka Inceleme
		    {
				Dialog_Show(playerid, PlakaGir, DIALOG_STYLE_INPUT, "{1394BF}Mobil Veritabani ~ Plaka Incele", "{FFFFFF}Lütfen incelemek istediginiz plakayi girin:", "Devam", "Geri");
		    }
		    case 2: // Telefon Sorgulat
		    {
				Dialog_Show(playerid, TelefonSorgulat, DIALOG_STYLE_INPUT, "{1394BF}Mobil Veritabani ~ Telefon Sorgulat", "{FFFFFF}Lütfen sorgulatmak istediginiz telefon numarasini girin:", "Devam", "Geri");
		    }
		    case 3: // Aranmalar
		    {
		        new str[500], string[100],sayi;
		        strcat(str, "{1394BF}ID\t{1394BF}Ad/Soyad\t{1394BF}Aranma Seviyesi\n");
		        foreach (new i:Player)
		        {
		            if (PlayerData[i][pAranma] > 0)
		            {
		                sayi++;
		                format(string, sizeof(string), "{FFFFFF}%d\t{FFFFFF}%s\t{FFFFFF}%d", i, ReturnName(i, 0), PlayerData[i][pAranma]);
		                strcat(str, string);
		            }
		        }
		        if (sayi == 0) return HataMesajGonder(playerid, "Arananlar listesi bos.");
		        format(string, sizeof(string), "{1394BF}Mobil Veritabani - Arananlar: %d", sayi);
		        Dialog_Show(playerid, Arananlar, DIALOG_STYLE_TABLIST_HEADERS, string, str, "Geri", "");
		    }
		    case 4: // Ihbarlar
		    {
		        new string[1024], sayi;
			 	foreach (new i : Player)
				{
				    if (strlen(PlayerData[i][pIhbar]) > 0)
					{
			 			format(string, sizeof(string), "%s[Tel No: %d] %s: %s\n", string, PlayerData[i][pTelefon], ReturnName(i, 0), PlayerData[i][pIhbar]);
					    sayi++;
					}
				}
				if (sayi == 0) return HataMesajGonder(playerid, "Hiç ihbar yok.");
				Dialog_Show(playerid, Ihbarlar, DIALOG_STYLE_MSGBOX, "ihbarlar", string, "Tamam", "");
		    }
		    case 5: // Dashcam
		    {
		        if (IsPlayerInAnyVehicle(playerid))
		        {
		            new vehicleid = GetPlayerVehicleID(playerid);
	    			if (vehRadar[vehicleid] == true)
    				{
    				    for (new i; i<5; i++) TextDrawDestroy(carMDC[vehicleid][i]);
      					vehRadar[vehicleid] = false;
      					vehRadarLimit[vehicleid] = 100;
	        			KillTimer(timerMDC[vehicleid]);
	        			MesajGonder(playerid, "Dashcam kapandi.");
						for (new i; i < 5; i++) TextDrawHideForPlayer(playerid, carMDC[GetPlayerVehicleID(playerid)][i]);
	    			}
	    			else
    				{
    				    CreateMDCTextdraws(vehicleid);
				    	vehRadar[vehicleid] = true;
      					vehRadarLimit[vehicleid] = 100;
            			timerMDC[vehicleid] = SetTimerEx ("RadarGuncelle", 100, 1, "d", vehicleid);
           				MesajGonder(playerid, "Dashcam açýldý.");
					}
		        }
		    }
		}
	}
	return 1;
}
stock CreateMDCTextdraws(vehicleid)
{
    carMDC[vehicleid][0] = TextDrawCreate(546.749938, 159.083328, "box");
	TextDrawLetterSize(carMDC[vehicleid][0], 0.000000, 5.830162);
	TextDrawTextSize(carMDC[vehicleid][0], 619.000000, 0.000000);
	TextDrawAlignment(carMDC[vehicleid][0], 1);
	TextDrawColor(carMDC[vehicleid][0], -1);
	TextDrawUseBox(carMDC[vehicleid][0], 1);
	TextDrawBoxColor(carMDC[vehicleid][0], 80);
	TextDrawSetShadow(carMDC[vehicleid][0], 0);
	TextDrawSetOutline(carMDC[vehicleid][0], 0);
	TextDrawBackgroundColor(carMDC[vehicleid][0], 255);
	TextDrawFont(carMDC[vehicleid][0], 1);
	TextDrawSetProportional(carMDC[vehicleid][0], 1);
	TextDrawSetShadow(carMDC[vehicleid][0], 0);

	carMDC[vehicleid][1] = TextDrawCreate(567.833374, 149.750045, "mdc");
	TextDrawLetterSize(carMDC[vehicleid][1], 0.400000, 1.600000);
	TextDrawAlignment(carMDC[vehicleid][1], 1);
	TextDrawColor(carMDC[vehicleid][1], -2147483393);
	TextDrawSetShadow(carMDC[vehicleid][1], 0);
	TextDrawSetOutline(carMDC[vehicleid][1], -2);
	TextDrawBackgroundColor(carMDC[vehicleid][1], 255);
	TextDrawFont(carMDC[vehicleid][1], 3);
	TextDrawSetProportional(carMDC[vehicleid][1], 1);
	TextDrawSetShadow(carMDC[vehicleid][1], 0);

	carMDC[vehicleid][2] = TextDrawCreate(550.497985, 168.416625, "~r~PLAKA: ~y~N/A");
	TextDrawLetterSize(carMDC[vehicleid][2], 0.276309, 1.179998);
	TextDrawAlignment(carMDC[vehicleid][2], 1);
	TextDrawColor(carMDC[vehicleid][2], -1);
	TextDrawSetShadow(carMDC[vehicleid][2], 0);
	TextDrawSetOutline(carMDC[vehicleid][2], -1);
	TextDrawBackgroundColor(carMDC[vehicleid][2], 255);
	TextDrawFont(carMDC[vehicleid][2], 1);
	TextDrawSetProportional(carMDC[vehicleid][2], 1);
	TextDrawSetShadow(carMDC[vehicleid][2], 0);

	carMDC[vehicleid][3] = TextDrawCreate(549.561096, 181.833236, "~r~MODEL: ~y~N/A");
	TextDrawLetterSize(carMDC[vehicleid][3], 0.276309, 1.179998);
	TextDrawAlignment(carMDC[vehicleid][3], 1);
	TextDrawColor(carMDC[vehicleid][3], -1);
	TextDrawSetShadow(carMDC[vehicleid][3], 0);
	TextDrawSetOutline(carMDC[vehicleid][3], -1);
	TextDrawBackgroundColor(carMDC[vehicleid][3], 255);
	TextDrawFont(carMDC[vehicleid][3], 1);
	TextDrawSetProportional(carMDC[vehicleid][3], 1);
	TextDrawSetShadow(carMDC[vehicleid][3], 0);

	carMDC[vehicleid][4] = TextDrawCreate(550.029541, 195.833236, "~r~HIZ: ~y~N/A");
	TextDrawLetterSize(carMDC[vehicleid][4], 0.276309, 1.179998);
	TextDrawAlignment(carMDC[vehicleid][4], 1);
	TextDrawColor(carMDC[vehicleid][4], -1);
	TextDrawSetShadow(carMDC[vehicleid][4], 0);
	TextDrawSetOutline(carMDC[vehicleid][4], -1);
	TextDrawBackgroundColor(carMDC[vehicleid][4], 255);
	TextDrawFont(carMDC[vehicleid][4], 1);
	TextDrawSetProportional(carMDC[vehicleid][4], 1);
	TextDrawSetShadow(carMDC[vehicleid][4], 0);
	return 1;
}
Dialog:TelefonSorgulat(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_mdc(playerid);
	if (response)
	{
	    if (isnull(inputtext) || !IsNumeric(inputtext)) return Dialog_Show(playerid, TelefonSorgulat, DIALOG_STYLE_INPUT, "{1394BF}Mobil Veritabani ~ Telefon Sorgulat", "{FFFFFF}Lütfen sorgulatmak istediginiz telefon numarasini girin:", "Devam", "Geri");
	    new oyuncuid = -1;
	    foreach (new i:Player)
	    {
	        if (PlayerData[i][pTelefon] == strval(inputtext))
	        {
	            oyuncuid = i;
	            break;
	        }
	    }
	    if (oyuncuid == -1)
	    {
	        HataMesajGonder(playerid, "Girdiginiz numara bulunamadi.");
	        return Dialog_Show(playerid, TelefonSorgulat, DIALOG_STYLE_INPUT, "{1394BF}Mobil Veritabani ~ Telefon Sorgulat", "{FFFFFF}Lütfen sorgulatmak istediginiz telefon numarasini girin:", "Devam", "Geri");
	    }
	    Dialog_Show(playerid, TelefonSorgulat2, DIALOG_STYLE_MSGBOX, "Telefon Sorgulatma Sonuçlari", "{AFAFAF}Ad Soyad: {FFFFFF}%s (%d)\n{AFAFAF}Yas: {FFFFFF}%d\n{AFAFAF}Dogum Yeri: {FFFFFF}%s\n{AFAFAF}Cinsiyet: {FFFFFF}%s", "Tamam", "Geri",ReturnName(oyuncuid, 0), oyuncuid, PlayerData[oyuncuid][pYas], PlayerData[oyuncuid][pDogum], (PlayerData[oyuncuid][pCinsiyet] == 1) ? ("Bay") : ("Bayan"));
	}
	return 1;
}
Dialog:TelefonSorgulat2(playerid, response, listitem, inputtext[])
{
	if (!response || response) return Dialog_Show(playerid, TelefonSorgulat, DIALOG_STYLE_INPUT, "{1394BF}Mobil Veritabani ~ Telefon Sorgulat", "{FFFFFF}Lütfen sorgulatmak istediginiz telefon numarasini girin:", "Devam", "Geri");
	return 1;
}
Dialog:Ihbarlar(playerid, response, listitem, inputtext[])
{
	if (response) return cmd_mdc(playerid);
	return 1;
}
Dialog:Arananlar(playerid, response, listitem, inputtext[])
{
	if (response) return cmd_mdc(playerid);
	return 1;
}

Dialog:MVBIDYaz(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_mdc(playerid);
	if (response)
	{
	    if (isnull(inputtext)) return Dialog_Show(playerid, MVBIDYaz, DIALOG_STYLE_INPUT, "{1394BF}Mobil Veritabani ~ Kriminal Veritabani", "Lütfen incelemek istediginiz kisinin ID'sini girin:", "Devam", "Geri");
	    if (!IsNumeric(inputtext)) return Dialog_Show(playerid, MVBIDYaz, DIALOG_STYLE_INPUT, "{1394BF}Mobil Veritabani ~ Kriminal Veritabani", "Lütfen incelemek istediginiz kisinin ID'sini girin:", "Devam", "Geri");
	    if (!OyundaDegil(strval(inputtext)))
	    {
	        HataMesajGonder(playerid, "Böyle bir kisi yok!");
	        return Dialog_Show(playerid, MVBIDYaz, DIALOG_STYLE_INPUT, "{1394BF}Mobil Veritabani ~ Kriminal Veritabani", "Lütfen incelemek istediginiz kisinin ID'sini girin:", "Devam", "Geri");
	    }
	    SetPVarInt(playerid, "KriminalVeritabani", strval(inputtext));
	    Dialog_Show(playerid, Kriminal, DIALOG_STYLE_LIST, "{1394BF}Mobil Veritabani ~ Kriminal Veritabani", "{1394BF}> {FFFFFF}Kimlik Bilgileri\n{1394BF}> {FFFFFF}Sicil Kaydi\n{1394BF}> {FFFFFF}Mülkler\n{1394BF}> {FFFFFF}Aranma Ekle\n{1394BF}> {FFFFFF}Aranma Sil\n{1394BF}> {FFFFFF}Ceza Yaz\n{1394BF}> {FFFFFF}Lokasyon Bul\n{1394BF}> {FFFFFF}Cezalar", "Seç", "Geri");
	}
	return 1;
}
Dialog:Kriminal(playerid, response, listitem, inputtext[])
{
	if (!response)
	{
	    DeletePVar(playerid, "KriminalVeritabani");
	    cmd_mdc(playerid);
	}
	else
	{
	    new hedefid = GetPVarInt(playerid, "KriminalVeritabani");
	    if (listitem == 0)
	    {
	        if (!OyundaDegil(hedefid)) return HataMesajGonder(playerid, "Kisi oyundan çikmis.");
	        new str[750], string[100];
	        format(string, sizeof(string), "{FFFFFF}Ad Soyad: {9189EF}%s (%d)\n", ReturnName(hedefid, 0), hedefid);
	        strcat(str, string);
	        format(string, sizeof(string), "{FFFFFF}Cinsiyet: {9189EF}%s\n", (PlayerData[hedefid][pCinsiyet] == 1) ? ("Erkek") : ("Kadin"));
	        strcat(str, string);
	        format(string, sizeof(string), "{FFFFFF}Yas: {9189EF}%d\n", PlayerData[hedefid][pYas]);
	        strcat(str, string);
	        format(string, sizeof(string), "{FFFFFF}Dogum Yeri: {9189EF}%s\n", PlayerData[hedefid][pDogum]);
	        strcat(str, string);
	        format(string, sizeof(string), "{FFFFFF}Ten Rengi: {9189EF}%s\n", (PlayerData[hedefid][pTen] == 1) ? ("Beyaz") : ("Siyah"));
	        strcat(str, string);
	        format(string, sizeof(string), "{FFFFFF}Partner: {9189EF}Yok\n");
	        strcat(str, string);
	        if (PlayerData[hedefid][pTelefon] == -1) format(string, sizeof(string), "{FFFFFF}Telefon: {9189EF}Yok\n");
	        else format(string, sizeof(string), "{FFFFFF}Telefon: {9189EF}%d\n", PlayerData[hedefid][pTelefon]);
	        strcat(str, string);
	        format(string, sizeof(string), "{FFFFFF}Ehliyet: {9189EF}%s\n", (PlayerData[hedefid][pEhliyet] == 1) ? ("Var") : ("Yok"));
	        strcat(str, string);
	        format(string, sizeof(string), "{FFFFFF}Motor ehliyeti: {9189EF}%s\n", (PlayerData[hedefid][pMotorEhliyet] == 1) ? ("Var") : ("Yok"));
	        strcat(str, string);
	        format(string, sizeof(string), "{FFFFFF}Aranma: {9189EF}%s\n", (PlayerData[hedefid][pAranma] > 0) ? ("Evet") : ("Hayir"));
	        strcat(str, string);

	        Dialog_Show(playerid, KimlikBilgileri, DIALOG_STYLE_LIST, "{1394BF}Mobil Veritabani ~ Kimlik Bilgileri", str, "Geri", "");
	    }
	    if (listitem == 1) // Sicil Kaydi
	    {
	        if (!OyundaDegil(hedefid)) return HataMesajGonder(playerid, "Kisi oyundan çikmis.");
	        if (ICSicil_GetCount(PlayerData[hedefid][pID]) < 1)
	        {
	            HataMesajGonder(playerid, "Bu oyuncunun hiç sicil kaydi yok.");
	            return Dialog_Show(playerid, Kriminal, DIALOG_STYLE_LIST, "{1394BF}Mobil Veritabani ~ Kriminal Veritabani", "{1394BF}> {FFFFFF}Kimlik Bilgileri\n{1394BF}> {FFFFFF}Sicil Kaydi\n{1394BF}» {FFFFFF}Mülkler\n{1394BF}> {FFFFFF}Aranma Ekle\n{1394BF}> {FFFFFF}Aranma Sil\n{1394BF}> {FFFFFF}Ceza Yaz\n{1394BF}> {FFFFFF}Lokasyon Bul\n{1394BF}> {FFFFFF}Cezalar", "Seç", "Geri");
	        }
	        SetPVarInt(playerid, "ListPage", 0);
	        SicilGoruntule(playerid, hedefid);
	    }
	    if (listitem == 2) // Mulkler
	    {
	        if (!OyundaDegil(hedefid)) return HataMesajGonder(playerid, "Kisi oyundan çikmis.");
	        Dialog_Show(playerid, Mulkler, DIALOG_STYLE_LIST, "{1394BF}Mobil Veritabani ~ Mülkler", "{1394BF}> {FFFFFF}Evler\n{1394BF}> {FFFFFF}Araçlar\n{1394BF}> {FFFFFF}isyerleri\n{1394BF}> {FFFFFF}Gateler", "Seç", "Kapat");
	    }
	    if (listitem == 3) // Aranma Ekle
	    {
	        if (!OyundaDegil(hedefid)) return HataMesajGonder(playerid, "Kisi oyundan çikmis.");
	        if (PlayerData[hedefid][pAranma] >=6)
	        {
	            HataMesajGonder(playerid, "Bir kisiye en fazla 6 suç eklenebilir.");
	            return Dialog_Show(playerid, Kriminal, DIALOG_STYLE_LIST, "{1394BF}Mobil Veritabani ~ Kriminal Veritabani", "{1394BF}> {FFFFFF}Kimlik Bilgileri\n{1394BF}> {FFFFFF}Sicil Kaydi\n{1394BF}> {FFFFFF}Mülkler\n{1394BF}> {FFFFFF}Aranma Ekle\n{1394BF}> {FFFFFF}Aranma Sil\n{1394BF}> {FFFFFF}Ceza Yaz\n{1394BF}> {FFFFFF}Lokasyon Bul\n{1394BF}> {FFFFFF}Cezalar", "Seç", "Geri");
	        }
	        Dialog_Show(playerid, AranmaEkle, DIALOG_STYLE_INPUT, "{1394BF}Mobil Veritabani ~ Aranma Ekle", "{FFFFFF}Lütfen kisiye eklemek istediginiz suçu girin:", "Ekle", "Geri");
	    }
	    if (listitem == 4) // Aranma Sil
	    {
	        if (!OyundaDegil(hedefid)) return HataMesajGonder(playerid, "Kisi oyundan çikmis.");
	        if (PlayerData[hedefid][pAranma] < 1)
	        {
	            HataMesajGonder(playerid, "Bu kisinin zaten aranmasi yok.");
	            return Dialog_Show(playerid, Kriminal, DIALOG_STYLE_LIST, "{1394BF}Mobil Veritabani ~ Kriminal Veritabani", "{1394BF}> {FFFFFF}Kimlik Bilgileri\n{1394BF}> {FFFFFF}Sicil Kaydi\n{1394BF}> {FFFFFF}Mülkler\n{1394BF}> {FFFFFF}Aranma Ekle\n{1394BF}> {FFFFFF}Aranma Sil\n{1394BF}> {FFFFFF}Ceza Yaz\n{1394BF}> {FFFFFF}Lokasyon Bul\n{1394BF}> {FFFFFF}Cezalar", "Seç", "Geri");
	        }
	        PlayerData[hedefid][pAranma] = 0;
	        SetPlayerWantedLevel(hedefid, 0);
	        SendBirlikMessage(PlayerData[playerid][pFaction], COLOR_DEPARTMENT, "** DEPARTMAN: %s %s, %s adli kisinin aranmalarini temizledi.",Birlik_GetRutbe(playerid), ReturnName(playerid, 0), ReturnName(hedefid, 0));
	        MesajGonder(hedefid, "%s adli memur tarafindan aranmalariniz temizlendi.", ReturnName(playerid, 0));
	    }
		if (listitem == 5) // Ceza Yaz
		{
		    if (!OyundaDegil(hedefid)) return HataMesajGonder(playerid, "Kisi oyundan çikmis.");
		    Dialog_Show(playerid, CezaYaz, DIALOG_STYLE_INPUT, "{1394BF}Mobil Veritabani ~ Ceza Yaz", "Lütfen ceza sebebini girin:", "Devam", "Geri");
		}
		if (listitem == 6) // Lokasyon Bul
		{
            if (!OyundaDegil(hedefid)) return HataMesajGonder(playerid, "Kisi oyundan çikmis.");
            if (PlayerData[hedefid][pTelefon] == -1 || PlayerData[hedefid][pTelefonAyar][0] == 1)
            {
                HataMesajGonder(playerid, "Kisinin telefonu yok veya telefonunu kapatmis.");
                return Dialog_Show(playerid, Kriminal, DIALOG_STYLE_LIST, "{1394BF}Mobil Veritabani ~ Kriminal Veritabani", "{1394BF}> {FFFFFF}Kimlik Bilgileri\n{1394BF}> {FFFFFF}Sicil Kaydi\n{1394BF}> {FFFFFF}Mülkler\n{1394BF}> {FFFFFF}Aranma Ekle\n{1394BF}> {FFFFFF}Aranma Sil\n{1394BF}> {FFFFFF}Ceza Yaz\n{1394BF}> {FFFFFF}Lokasyon Bul\n{1394BF}> {FFFFFF}Cezalar", "Seç", "Geri");
            }
            if (!spamProtect(playerid, "LokasyonBul", 20))
            {
                HataMesajGonder(playerid, "Tekrar lokasyon bulmak için biraz bekleyin.");
                Dialog_Show(playerid, Kriminal, DIALOG_STYLE_LIST, "{1394BF}Mobil Veritabani ~ Kriminal Veritabani", "{1394BF}> {FFFFFF}Kimlik Bilgileri\n{1394BF}> {FFFFFF}Sicil Kaydi\n{1394BF}> {FFFFFF}Mülkler\n{1394BF}> {FFFFFF}Aranma Ekle\n{1394BF}> {FFFFFF}Aranma Sil\n{1394BF}> {FFFFFF}Ceza Yaz\n{1394BF}> {FFFFFF}Lokasyon Bul\n{1394BF}> {FFFFFF}Cezalar", "Seç", "Geri");
                return 1;
            }
            new Float:pos[3];
            GetPlayerPosEx(hedefid, pos[0], pos[1], pos[2]);
            cmd_cpsifirla(playerid);

            SetPlayerCheckpoint(playerid, pos[0], pos[1], pos[2], 5.0);
            SetTimerEx("IsaretSil", 10000, false, "i", playerid);
            MesajGonder(playerid, "%s adli kisi en son %s bölgesinde görüldü, 10 saniye sonra isaret kaybolacak.", ReturnName(hedefid, 0), GetLocation(pos[0], pos[1], pos[2]));
		}
		if (listitem == 7) // Cezalar
		{
		    if (!OyundaDegil(hedefid)) return HataMesajGonder(playerid, "Kisi oyundan çikmis.");
		    new str[1000], string[100], sayi;
		    strcat(str, "Memur\tSebep\tMiktar\tTarih\n");
		    for (new i; i<MAX_PLAYER_TICKETS; i++) if (TicketData[hedefid][i][ticketExists])
		    {
		        format(string, sizeof(string), "%s\t%s\t{2aff00}%.20s\t{FFFFFF}%s\n", TicketData[hedefid][i][ticketMemur], TicketData[hedefid][i][ticketReason], FormatNumber(TicketData[hedefid][i][ticketFee]),TicketData[hedefid][i][ticketDate]);
		        strcat(str, string);
		        sayi++;
		    }
		    if (sayi == 0)
		    {
		        HataMesajGonder(playerid, "Bu kisiye ait ceza bulunamadi.");
		        return Dialog_Show(playerid, Kriminal, DIALOG_STYLE_LIST, "{1394BF}Mobil Veritabani ~ Kriminal Veritabani", "{1394BF}> {FFFFFF}Kimlik Bilgileri\n{1394BF}> {FFFFFF}Sicil Kaydi\n{1394BF}> {FFFFFF}Mülkler\n{1394BF}> {FFFFFF}Aranma Ekle\n{1394BF}> {FFFFFF}Aranma Sil\n{1394BF}> {FFFFFF}Ceza Yaz\n{1394BF}> {FFFFFF}Lokasyon Bul\n{1394BF}> {FFFFFF}Cezalar", "Seç", "Geri");
		    }
		    format(string, sizeof(string), "{FFFFFF}%s Cezalari (%d adet)", ReturnName(hedefid, 0), sayi);
		    Dialog_Show(playerid, Cezalar, DIALOG_STYLE_TABLIST_HEADERS, string, str, "Geri", "");
		}
	}
	return 1;
}

forward IsaretSil(playerid);
public IsaretSil(playerid)
{
	DisablePlayerCheckpoint(playerid);
	return 1;
}

Dialog:Cezalar(playerid, response, listitem, inputtext[])
{
	if (response) return Dialog_Show(playerid, Kriminal, DIALOG_STYLE_LIST, "{1394BF}Mobil Veritabani ~ Kriminal Veritabani", "{1394BF}> {FFFFFF}Kimlik Bilgileri\n{1394BF}> {FFFFFF}Sicil Kaydi\n{1394BF}> {FFFFFF}Mülkler\n{1394BF}> {FFFFFF}Aranma Ekle\n{1394BF}> {FFFFFF}Aranma Sil\n{1394BF}> {FFFFFF}Ceza Yaz\n{1394BF}> {FFFFFF}Lokasyon Bul\n{1394BF}> {FFFFFF}Cezalar", "Seç", "Geri");
	return 1;
}

Dialog:CezaYaz(playerid, response, listitem, inputtext[])
{
	if (!response) return Dialog_Show(playerid, Kriminal, DIALOG_STYLE_LIST, "{1394BF}Mobil Veritabani ~ Kriminal Veritabani", "{1394BF}> {FFFFFF}Kimlik Bilgileri\n{1394BF}> {FFFFFF}Sicil Kaydi\n{1394BF}> {FFFFFF}Mülkler\n{1394BF}> {FFFFFF}Aranma Ekle\n{1394BF}> {FFFFFF}Aranma Sil\n{1394BF}> {FFFFFF}Ceza Yaz\n{1394BF}> {FFFFFF}Lokasyon Bul\n{1394BF}> {FFFFFF}Cezalar", "Seç", "Geri");
	if (response)
	{
	    if (isnull(inputtext) || strlen(inputtext) < 3) return Dialog_Show(playerid, CezaYaz, DIALOG_STYLE_INPUT, "{1394BF}Mobil Veritabani ~ Ceza Yaz", "Lütfen ceza sebebini girin:", "Devam", "Geri");
	    if (strlen(inputtext) > 64)
	    {
	        HataMesajGonder(playerid, "Ceza sebebi 64 karakteri geçemez.");
	        return Dialog_Show(playerid, CezaYaz, DIALOG_STYLE_INPUT, "{1394BF}Mobil Veritabani ~ Ceza Yaz", "Lütfen ceza sebebini girin:", "Devam", "Geri");
	    }
	    SetPVarString(playerid, "CezaSebebi", inputtext);
	    Dialog_Show(playerid, CezaYaz2, DIALOG_STYLE_INPUT, "{1394BF}Mobil Veritabani ~ Ceza Yaz", "Lütfen ceza miktarini girin:", "Devam", "Geri");
	}
	return 1;
}

Dialog:CezaYaz2(playerid, response, listitem, inputtext[])
{
	if (!response)
	{
	    DeletePVar(playerid, "CezaSebebi");
	    return Dialog_Show(playerid, CezaYaz, DIALOG_STYLE_INPUT, "{1394BF}Mobil Veritabani ~ Ceza Yaz", "Lütfen ceza sebebini girin:", "Devam", "Geri");
	}
	else
	{
	    if (!OyundaDegil(GetPVarInt(playerid, "KriminalVeritabani"))) return HataMesajGonder(playerid, "Kisi oyundan çikmis.");
	    if (isnull(inputtext) || !IsNumeric(inputtext)) return Dialog_Show(playerid, CezaYaz2, DIALOG_STYLE_INPUT, "{1394BF}Mobil Veritabani ~ Ceza Yaz", "Lütfen ceza miktarini girin:", "Devam", "Geri");
	    if (strval(inputtext) <= 5 || strval(inputtext) > 5000)
	    {
	        HataMesajGonder(playerid, "Geçersiz miktar girdiniz, $10 ile $5000 arasinda olmalidir.");
	        return Dialog_Show(playerid, CezaYaz2, DIALOG_STYLE_INPUT, "{1394BF}Mobil Veritabani ~ Ceza Yaz", "Lütfen ceza miktarini girin:", "Devam", "Geri");
	    }
	    new sebep[64], miktar = strval(inputtext);
	    GetPVarString(playerid, "CezaSebebi", sebep, sizeof(sebep));
	    new id = Ticket_Add(GetPVarInt(playerid, "KriminalVeritabani"), miktar, sebep, ReturnName(playerid, 0));
	    if (id != -1)
	    {
	        MesajGonder(playerid, "%s adli kisiye %s sebebiyle %s para cezasi yazdiniz.", ReturnName(GetPVarInt(playerid, "KriminalVeritabani"), 0), sebep, FormatNumber(miktar));
	        SunucuMesaji(GetPVarInt(playerid, "KriminalVeritabani"), "Memur %s, %s sebebiyle size %s para cezasi yazdi.", ReturnName(playerid, 0), sebep, FormatNumber(miktar));
	        SunucuMesaji(GetPVarInt(playerid, "KriminalVeritabani"), "Cezayi ödeyene kadar devlet hizmetlerinden yararlanamayacaksiniz. (PD binasindan ödeyebilirsiniz)", ReturnName(playerid, 0), sebep, FormatNumber(miktar));
	        SendBirlikMessage(PlayerData[playerid][pFaction], COLOR_DEPARTMENT, "** DEPARTMAN: %s %s, %s adli kisiye %s sebebiyle %s para cezasi yazdi.", Birlik_GetRutbe(playerid), ReturnName(playerid, 0), ReturnName(GetPVarInt(playerid, "KriminalVeritabani"), 0), sebep, FormatNumber(miktar));
	    }
	    else
	    {
	        HataMesajGonder(playerid, "Bu oyuncunun zaten ödenmemis %d cezasi var.", MAX_PLAYER_TICKETS);
	    }
	}
	return 1;
}
Dialog:AranmaEkle(playerid, response, listitem, inputtext[])
{
	if (!response) return Dialog_Show(playerid, Kriminal, DIALOG_STYLE_LIST, "{1394BF}Mobil Veritabani ~ Kriminal Veritabani", "{1394BF}> {FFFFFF}Kimlik Bilgileri\n{1394BF}> {FFFFFF}Sicil Kaydi\n{1394BF}> {FFFFFF}Mülkler\n{1394BF}> {FFFFFF}Aranma Ekle\n{1394BF}> {FFFFFF}Aranma Sil\n{1394BF}> {FFFFFF}Ceza Yaz\n{1394BF}> {FFFFFF}Lokasyon Bul\n{1394BF}> {FFFFFF}Cezalar", "Seç", "Geri");
	if (response)
	{
	    new hedefid = GetPVarInt(playerid, "KriminalVeritabani");
	    if (!OyundaDegil(hedefid)) return HataMesajGonder(playerid, "Kisi oyundan çikmis.");
	    if (isnull(inputtext)) return Dialog_Show(playerid, AranmaEkle, DIALOG_STYLE_INPUT, "{1394BF}Mobil Veritabani ~ Aranma Ekle", "{FFFFFF}Lütfen kisiye eklemek istediginiz suçu girin:", "Ekle", "Geri");
	    if (strlen(inputtext) < 3) return Dialog_Show(playerid, AranmaEkle, DIALOG_STYLE_INPUT, "{1394BF}Mobil Veritabani ~ Aranma Ekle", "{FFFFFF}Lütfen kisiye eklemek istediginiz suçu girin:", "Ekle", "Geri");
	    PlayerData[hedefid][pAranma]++;
	    SetPlayerWantedLevel(hedefid,PlayerData[hedefid][pAranma]);
	    SendBirlikMessage(PlayerData[playerid][pFaction], COLOR_DEPARTMENT, "** DEPARTMAN: %s %s, %s adli kisiye %s sebebiyle aranma ekledi.", Birlik_GetRutbe(playerid), ReturnName(playerid, 0), ReturnName(hedefid, 0), inputtext);
	    SunucuMesaji(hedefid, "%s adli memur size %s sebebiyle aranma ekledi. (Suç seviyeniz: %d)", ReturnName(playerid, 0), inputtext, PlayerData[hedefid][pAranma]);
	    Sicil_Ekle(PlayerData[hedefid][pID], ReturnName(playerid, 0), inputtext);
	    Dialog_Show(playerid, Kriminal, DIALOG_STYLE_LIST, "{1394BF}Mobil Veritabani ~ Kriminal Veritabani", "{1394BF}> {FFFFFF}Kimlik Bilgileri\n{1394BF}> {FFFFFF}Sicil Kaydi\n{1394BF}> {FFFFFF}Mülkler\n{1394BF}> {FFFFFF}Aranma Ekle\n{1394BF}> {FFFFFF}Aranma Sil\n{1394BF}> {FFFFFF}Ceza Yaz\n{1394BF}> {FFFFFF}Lokasyon Bul\n{1394BF}> {FFFFFF}Cezalar", "Seç", "Geri");
	}
	return 1;
}
stock GetTicketCount(playerid)
{
	new sayi = 0;
	for (new i; i<MAX_PLAYER_TICKETS; i++) if (TicketData[playerid][i][ticketExists])
	{
	    sayi++;
	}
	return sayi;
}
stock SicilGoruntule(playerid, id)
{
	new query[124];
	format(query, sizeof(query), "SELECT * FROM `icsicil` WHERE `playersqlid` = '%d' ORDER BY tarih DESC LIMIT %d, 15", PlayerData[id][pID], GetPVarInt(playerid, "ListPage")*15);
	new Cache:Radless = mysql_query(g_SQL, query);
	new rows;
	cache_get_row_count(rows);
	if (rows)
	{
	    new str[1500], string[100], sebep[50], memuradi[24], tarih[22];
	    strcat(str, "{1394BF}Sebep\t{1394BF}Memur\t{1394BF}Tarih\n");
	    for (new i; i<rows; i++)
	    {
	        cache_get_value_name(i, "sebep", sebep, 50);
	        cache_get_value_name(i, "memuradi", memuradi, 24);
	        cache_get_value_name(i, "tarih", tarih, 22);
	        format(string, sizeof(string), "{FFFFFF}%s\t{FFFFFF}%s\t{FFFFFF}%s\n", sebep, memuradi, tarih);
	        strcat(str, string);
	    }
	    cache_delete(Radless);
	    format(string, sizeof(string), "%s Sicil (Sayfa %d)", ReturnName(GetPVarInt(playerid, "KriminalVeritabani")), GetPVarInt(playerid, "ListPage")+1);
	    Dialog_Show(playerid, SicilGoruntule, DIALOG_STYLE_TABLIST_HEADERS, string, str, "Sonraki Sayfa", "Geri");
	}
	else
	{
	    cache_delete(Radless);
	    HataMesajGonder(playerid, "Daha fazla sicil kaydi bulunamadi.");
	    return Dialog_Show(playerid, Kriminal, DIALOG_STYLE_LIST, "{1394BF}Mobil Veritabani ~ Kriminal Veritabani", "{1394BF}> {FFFFFF}Kimlik Bilgileri\n{1394BF}> {FFFFFF}Sicil Kaydi\n{1394BF}> {FFFFFF}Mülkler\n{1394BF}> {FFFFFF}Aranma Ekle\n{1394BF}> {FFFFFF}Aranma Sil\n{1394BF}> {FFFFFF}Ceza Yaz\n{1394BF}> {FFFFFF}Lokasyon Bul\n{1394BF}> {FFFFFF}Cezalar", "Seç", "Geri");
	}
	return 1;
}
Dialog:SicilGoruntule(playerid, response, listitem, inputtext[])
{
	if (!response)
	{
	    SetPVarInt(playerid, "ListPage", GetPVarInt(playerid, "ListPage")-1);
	    if (GetPVarInt(playerid, "ListPage") < 0)
	    {
	        DeletePVar(playerid, "ListPage");
	        Dialog_Show(playerid, Kriminal, DIALOG_STYLE_LIST, "{1394BF}Mobil Veritabani ~ Kriminal Veritabani", "{1394BF}> {FFFFFF}Kimlik Bilgileri\n{1394BF}> {FFFFFF}Sicil Kaydi\n{1394BF}> {FFFFFF}Mülkler\n{1394BF}> {FFFFFF}Aranma Ekle\n{1394BF}> {FFFFFF}Aranma Sil\n{1394BF}> {FFFFFF}Ceza Yaz\n{1394BF}> {FFFFFF}Lokasyon Bul\n{1394BF}> {FFFFFF}Cezalar", "Seç", "Geri");
	        return 1;
	    }

	}
	else SetPVarInt(playerid, "ListPage", GetPVarInt(playerid, "ListPage")+1);

	SicilGoruntule(playerid, GetPVarInt(playerid, "KriminalVeritabani"));
	return 1;
}
stock ICSicil_GetCount(sqlid)
{
	new query[100];
	format(query, sizeof(query), "SELECT null FROM `icsicil` WHERE `playersqlid` = '%d'", sqlid);
	new Cache:Radless = mysql_query(g_SQL, query);
	new rows;
	cache_get_row_count(rows);
	cache_delete(Radless);
	return rows;
}
stock Sicil_Ekle(oyuncusqlid, memuradi[], sebep[])
{
	new query[275];
	format(query, sizeof(query), "INSERT INTO `icsicil` (`playersqlid`, `memuradi`, `sebep`, `tarih`) VALUES ('%d', '%s', '%s', '%s')", oyuncusqlid, memuradi, SQL_ReturnEscaped(sebep), ReturnDate());
	mysql_query(g_SQL, query, false);
	return 1;
}
Dialog:Mulkler(playerid, response, listitem, inputtext[])
{
	if (!response) return Dialog_Show(playerid, Kriminal, DIALOG_STYLE_LIST, "{1394BF}Mobil Veritabani ~ Kriminal Veritabani", "{1394BF}> {FFFFFF}Kimlik Bilgileri\n{1394BF}» {FFFFFF}Sicil Kaydi\n{1394BF} {FFFFFF}Mülkler\n{1394BF}> {FFFFFF}Aranma Ekle\n{1394BF}> {FFFFFF}Aranma Sil\n{1394BF}> {FFFFFF}Ceza Yaz\n{1394BF}> {FFFFFF}Lokasyon Bul\n{1394BF}> {FFFFFF}Cezalar", "Seç", "Geri");
	if (response)
	{
	    new str[500], string[100];
	    new id = GetPVarInt(playerid, "KriminalVeritabani");
	    if (!OyundaDegil(id)) return HataMesajGonder(playerid, "Kisi oyundan çikmis.");
	    if (listitem == 0)
	    {
	        if (Ev_GetCount(id) < 1)
	        {
	            HataMesajGonder(playerid, "Bu kisiye ait ev bulunamadi.");
	            return Dialog_Show(playerid, Mulkler, DIALOG_STYLE_LIST, "{1394BF}Mobil Veritabani ~ Mülkler", "{1394BF}> {FFFFFF}Evler\n{1394BF}> {FFFFFF}Araçlar\n{1394BF}> {FFFFFF}isyerleri\n{1394BF}> {FFFFFF}Gateler", "Seç", "Kapat");
	        }
	        strcat(str, "{1394BF}ID\t{1394BF}Ev Adi\t{1394BF}Adres\n");
	        for (new i; i<MAX_EV; i++) if (HouseInfo[i][evExists] && HouseInfo[i][evSahip] == PlayerData[id][pID])
	        {
	            format(string, sizeof(string), "{FFFFFF}%d\t{FFFFFF}%s\t{FFFFFF}%d, %s, %s\n", i, HouseInfo[i][evIsim], i, GetLocation(HouseInfo[i][evPos][0], HouseInfo[i][evPos][1], HouseInfo[i][evPos][2]), GetCityName(HouseInfo[i][evPos][0], HouseInfo[i][evPos][1], HouseInfo[i][evPos][2]));
	            strcat(str, string);
	        }
	        format(string, sizeof(string), "%s'in Evleri (%d adet)", ReturnName(id, 0), Ev_GetCount(id));
	        Dialog_Show(playerid, Evler, DIALOG_STYLE_TABLIST_HEADERS, string, str, "isaretle", "Geri");
	    }
	    if (listitem == 1)
	    {
	        if (Car_GetCount(id) < 1)
	        {
	            HataMesajGonder(playerid, "Bu kisiye ait araç bulunamadi.");
	            return Dialog_Show(playerid, Mulkler, DIALOG_STYLE_LIST, "{1394BF}Mobil Veritabani ~ Mülkler", "{1394BF}> {FFFFFF}Evler\n{1394BF}> {FFFFFF}Araçlar\n{1394BF}> {FFFFFF}isyerleri\n{1394BF}v {FFFFFF}Gateler", "Seç", "Kapat");
	        }
	        strcat(str, "{1394BF}Model\t{1394BF}Plaka\t{1394BF}Durum\n");
	        for (new i; i<MAX_ARAC; i++) if (AracInfo[i][aracExists] && AracInfo[i][aracSahip] == PlayerData[id][pID])
	        {
				format(string, sizeof(string), "{FFFFFF}%s\t{FFFFFF}%s\t{FFFFFF}%s\n",ReturnVehicleModelName(AracInfo[i][aracModel]), AracInfo[i][aracPlaka], (AracInfo[i][aracDisplay]) ? ("{2ECC71}Aktif") : ("{FF0000}Pasif"));
				strcat(str, string);
	        }
	        format(string, sizeof(string), "%s'in Araçlari (%d adet)", ReturnName(id, 0), Car_GetCount(id));
	        Dialog_Show(playerid, Araclar, DIALOG_STYLE_TABLIST_HEADERS, string, str, "Geri", "");
	    }
	    if (listitem == 2)
	    {
	        if (Isyeri_GetCount(id) < 1)
	        {
	            HataMesajGonder(playerid, "Bu kisiye ait isyeri bulunamadi.");
	            return Dialog_Show(playerid, Mulkler, DIALOG_STYLE_LIST, "{1394BF}Mobil Veritabani ~ Mülkler", "{1394BF}> {FFFFFF}Evler\n{1394BF}> {FFFFFF}Araçlar\n{1394BF}> {FFFFFF}isyerleri\n{1394BF}> {FFFFFF}Gateler", "Seç", "Kapat");
	        }
	        strcat(str, "{1394BF}ID\t{1394BF}isyeri Adi\t{1394BF}Adres\n");
	        for (new i; i<MAX_ISYERI; i++) if (Isyeri[i][isyeriExists] && Isyeri[i][isyeriSahip] == PlayerData[id][pID])
	        {
	            format(string, sizeof(string), "{FFFFFF}%d\t{FFFFFF}%s\t{FFFFFF}%s\n", i, Isyeri[i][isyeriName], GetLocation(Isyeri[i][isyeriPos][0],Isyeri[i][isyeriPos][1], Isyeri[i][isyeriPos][2]));
	            strcat(str, string);
	        }
	        format(string, sizeof(string), "%s'in isyerleri (%d adet)", ReturnName(id, 0), Isyeri_GetCount(id));
	        Dialog_Show(playerid, Isyerler, DIALOG_STYLE_TABLIST_HEADERS, string, str, "isaretle", "Geri");
	    }
	    if (listitem == 3)
	    {
	        new sayi;
	        strcat(str, "{1394BF}ID\t{1394BF}Model ID\t{1394BF}Adres\n");
	        for (new i; i<MAX_GATES; i++) if (GateData[i][gateExists] && GateData[i][gateOwner] == PlayerData[id][pID])
	        {
	            sayi++;
	            format(string, sizeof(string), "{FFFFFF}%d\t{FFFFFF}%d\t{FFFFFF}%s\n", i, GateData[i][gateModel], GetLocation(GateData[i][gatePos][0], GateData[i][gatePos][1], GateData[i][gatePos][2]));
	            strcat(str, string);
	        }
	        if (sayi == 0) return HataMesajGonder(playerid, "Bu kisiye ait gate bulunmuyor.");
	        format(string, sizeof(string), "%s'in Gateleri (%d adet)", ReturnName(id, 0), sayi);
	        Dialog_Show(playerid, Gateler, DIALOG_STYLE_TABLIST_HEADERS, string, str, "Geri", "");
	    }
	}
	return 1;
}
Dialog:Gateler(playerid, response, listitem, inputtext[])
{
	if (response) return Dialog_Show(playerid, Mulkler, DIALOG_STYLE_LIST, "{1394BF}Mobil Veritabani ~ Mülkler", "{1394BF}> {FFFFFF}Evler\n{1394BF}> {FFFFFF}Araçlar\n{1394BF}> {FFFFFF}isyerleri\n{1394BF}> {FFFFFF}Gateler", "Seç", "Kapat");
	return 1;
}
Dialog:Araclar(playerid, response, listitem, inputtext[])
{
	if (response) return Dialog_Show(playerid, Mulkler, DIALOG_STYLE_LIST, "{1394BF}Mobil Veritabani ~ Mülkler", "{1394BF}> {FFFFFF}Evler\n{1394BF}> {FFFFFF}Araçlar\n{1394BF}> {FFFFFF}isyerleri\n{1394BF}> {FFFFFF}Gateler", "Seç", "Kapat");
	return 1;
}
Dialog:Isyerler(playerid, response, listitem, inputtext[])
{
	if (!response) return Dialog_Show(playerid, Mulkler, DIALOG_STYLE_LIST, "{1394BF}Mobil Veritabani ~ Mülkler", "{1394BF}> {FFFFFF}Evler\n{1394BF}> {FFFFFF}Araçlar\n{1394BF}> {FFFFFF}isyerleri\n{1394BF}> {FFFFFF}Gateler", "Seç", "Kapat");
	if (response)
	{
	    new isid = strval(inputtext);
	    if (Isyeri[isid][isyeriExists])
	    {
	    	cmd_cpsifirla(playerid);
	        SetPVarInt(playerid, "AraciniBuluyor", 1);
	        DeletePVar(playerid, "KriminalVeritabani");
	        SetPlayerCheckpoint(playerid, Isyeri[isid][isyeriPos][0],Isyeri[isid][isyeriPos][1], Isyeri[isid][isyeriPos][2], 5.0);
	        MesajGonder(playerid, "isyeri haritada isaretlendi.");
	    }
	}
	return 1;
}
Dialog:Evler(playerid, response, listitem, inputtext[])
{
	if (!response) return Dialog_Show(playerid, Mulkler, DIALOG_STYLE_LIST, "{1394BF}Mobil Veritabani ~ Mülkler", "{1394BF}> {FFFFFF}Evler\n{1394BF}> {FFFFFF}Araçlar\n{1394BF}> {FFFFFF}isyerleri\n{1394BF}> {FFFFFF}Gateler", "Seç", "Kapat");
	if (response)
	{
	    new evid = strval(inputtext);
	    if (HouseInfo[evid][evExists])
	    {
	    	cmd_cpsifirla(playerid);
	        SetPVarInt(playerid, "AraciniBuluyor", 1);
	        DeletePVar(playerid, "KriminalVeritabani");
	        SetPlayerCheckpoint(playerid, HouseInfo[evid][evPos][0],HouseInfo[evid][evPos][1], HouseInfo[evid][evPos][2], 5.0);
	        MesajGonder(playerid, "Ev haritada isaretlendi.");
	    }
	}
	return 1;
}
Dialog:KimlikBilgileri(playerid, response, listitem, inputtext[])
{
	if (response) return Dialog_Show(playerid, Kriminal, DIALOG_STYLE_LIST, "{1394BF}Mobil Veritabani ~ Kriminal Veritabani", "{1394BF}> {FFFFFF}Kimlik Bilgileri\n{1394BF}» {FFFFFF}Sicil Kaydi\n{1394BF}» {FFFFFF}Mülkler\n{1394BF}» {FFFFFF}Aranma Ekle\n{1394BF}» {FFFFFF}Aranma Sil\n{1394BF}» {FFFFFF}Ceza Yaz\n{1394BF}» {FFFFFF}Lokasyon Bul\n{1394BF}» {FFFFFF}Cezalar", "Seç", "Geri");
	return 1;
}
Dialog:PlakaGir(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_mdc(playerid);
	if (response)
	{
	    if (isnull(inputtext)) return Dialog_Show(playerid, PlakaGir, DIALOG_STYLE_INPUT, "{1394BF}Mobil Veritabani ~ Plaka Incele", "{FFFFFF}Lütfen incelemek istediginiz plakayi girin:", "Devam", "Geri");
	    new bulundu = -1;
	    for (new i; i<MAX_ARAC; i++) if (AracInfo[i][aracExists])
	    {
	        if (strcmp(inputtext, AracInfo[i][aracPlaka], false) == 0)
	        {
	            bulundu = i;
	            break;
	        }
	    }
	    if (bulundu == -1)
	    {
	        HataMesajGonder(playerid, "Geçersiz plaka girdiniz.");
	        return Dialog_Show(playerid, PlakaGir, DIALOG_STYLE_INPUT, "{1394BF}Mobil Veritabani ~ Plaka Incele", "{FFFFFF}Lütfen incelemek istediginiz plakayi girin:", "Devam", "Geri");
	    }
	    else
	    {
	        SetPVarInt(playerid, "PlakaInceleID", bulundu);
	        Dialog_Show(playerid, PlakaIncele, DIALOG_STYLE_LIST, "{1394BF}Mobil Veritabani ~ Plaka Incele", "{1394BF}» {FFFFFF}Araç Bilgileri\n{1394BF}» {FFFFFF}Araca Ceza Yaz\n{1394BF}» {FFFFFF}Lokasyon Bul", "Seç", "Geri");
	    }
	}
	return 1;
}
Dialog:PlakaIncele(playerid, response, listitem, inputtext[])
{
	if (!response)
	{
	    DeletePVar(playerid, "PlakaInceleID");
	    cmd_mdc(playerid);
	}
	else
	{
	    new id = GetPVarInt(playerid, "PlakaInceleID");
	    if (listitem == 0)
	    {
	        new str[500], string[100], factname[30];
	        format(string, sizeof(string), "{FFFFFF}Sahip: {9189EF}%s\n", (AracInfo[id][aracSahip] == -1) ? ("Yok") : SQLName(AracInfo[id][aracSahip], 0));
	        strcat(str, string);
	        format(string, sizeof(string), "{FFFFFF}Model: {9189EF}%s\n", ReturnVehicleModelName(AracInfo[id][aracModel]));
	        strcat(str, string);
         	format(string, sizeof(string), "{FFFFFF}Plaka: {9189EF}%s\n", AracInfo[id][aracPlaka]);
	        strcat(str, string);
	        if (AracInfo[id][aracFaction] == -1) format(factname, sizeof(factname), "Yok");
	        else format(factname, sizeof(factname), "%s", Birlikler[GetFactionByID(AracInfo[id][aracFaction])][birlikAd]);
	        format(string, sizeof(string), "{FFFFFF}Birlik/Kurum: {9189EF}%s\n", factname);
	        strcat(str, string);
	        format(string, sizeof(string), "{FFFFFF}Vergi: {9189EF}%s/%s\n",FormatNumber(AracInfo[id][aracVergi]), FormatNumber(GetAracMaksVergi(AracInfo[id][aracModel])));
	        strcat(str, string);
	        format(string, sizeof(string), "{FFFFFF}Ceza: {9189EF}%s",FormatNumber(AracInfo[id][aracTicket]));
	        strcat(str, string);

	        Dialog_Show(playerid, MVBAracBilgileri, DIALOG_STYLE_LIST, "{1394BF}Mobil Veritabani ~ Araç Bilgileri", str, "Geri", "");
	    }
	    if (listitem == 1)
	    {
	        if (AracInfo[id][aracTip] != 4)
	        {
	            HataMesajGonder(playerid, "Bu araca ceza yazamazsin.");
	            return Dialog_Show(playerid, PlakaIncele, DIALOG_STYLE_LIST, "{1394BF}Mobil Veritabani ~ Plaka Incele", "{1394BF}» {FFFFFF}Araç Bilgileri\n{1394BF}» {FFFFFF}Araca Ceza Yaz\n{1394BF}» {FFFFFF}Lokasyon Bul", "Seç", "Geri");
	        }
	        Dialog_Show(playerid, AracCeza, DIALOG_STYLE_INPUT, "{1394BF}Mobil Veritabani ~ Araç Ceza Yaz", "Lütfen ceza miktarini girin:", "Ceza Kes", "Geri");
	    }
	    if (listitem == 2)
	    {
	        new Float:pos[3];
	        if (IsValidVehicle(AracInfo[id][aracVehicle]) && AracInfo[id][aracDisplay] == 1)
	        {
	            GetVehiclePos(AracInfo[id][aracVehicle], pos[0], pos[1], pos[2]);
	            MesajGonder(playerid, "Araçtan alinan son sinyal: %s", GetLocation(pos[0], pos[1], pos[2]));
	        }
	        else HataMesajGonder(playerid, "Araçtan sinyal alinamadi.");
	    }
	}
	return 1;
}
Dialog:AracCeza(playerid, response, listitem, inputtext[])
{
	if (!response) return Dialog_Show(playerid, PlakaIncele, DIALOG_STYLE_LIST, "{1394BF}Mobil Veritabani ~ Plaka Incele", "{1394BF}» {FFFFFF}Araç Bilgileri\n{1394BF}» {FFFFFF}Araca Ceza Yaz\n{1394BF}» {FFFFFF}Lokasyon Bul", "Seç", "Geri");
	if (response)
	{
	    if (isnull(inputtext)) return Dialog_Show(playerid, AracCeza, DIALOG_STYLE_INPUT, "{1394BF}Mobil Veritabani ~ Araç Ceza Yaz", "Lütfen ceza miktarini girin:", "Ceza Kes", "Geri");
	    if (!IsNumeric(inputtext)) return Dialog_Show(playerid, AracCeza, DIALOG_STYLE_INPUT, "{1394BF}Mobil Veritabani ~ Araç Ceza Yaz", "Lütfen ceza miktarini girin:", "Ceza Kes", "Geri");
	    if (strval(inputtext) < 50 || strval(inputtext) > 10000)
	    {
	        HataMesajGonder(playerid, "Ceza miktari $50 ile $10,000 arasinda olmalidir.");
	        return Dialog_Show(playerid, AracCeza, DIALOG_STYLE_INPUT, "{1394BF}Mobil Veritabani ~ Araç Ceza Yaz", "Lütfen ceza miktarini girin:", "Ceza Kes", "Geri");
	    }
	    new id = GetPVarInt(playerid, "PlakaInceleID");
		if (AracInfo[id][aracModel] == 509) return HataMesajGonder(playerid, "Bu araca ceza yazamazsin!");
	    AracInfo[id][aracTicket] += strval(inputtext);
	    if (AracInfo[id][aracTicketTime] < gettime()) AracInfo[id][aracTicketTime] = gettime()+3*86400;
	    SendBirlikMessage(PlayerData[playerid][pFaction], COLOR_DEPARTMENT, "** DEPARTMAN: %s %s, %s plakali araca %s miktar ceza kesti.", Birlik_GetRutbe(playerid), ReturnName(playerid, 0), AracInfo[id][aracPlaka], FormatNumber(strval(inputtext)));
	    if (AracInfo[id][aracSahip] != -1)
	    {
	        if (GetPlayerIDWithSQLID(AracInfo[id][aracSahip]) != -1)
	        {
	            SunucuMesaji(GetPlayerIDWithSQLID(AracInfo[id][aracSahip]), "%s adli memur %s model araciniza %s miktar ceza kesti.", ReturnName(playerid, 0), ReturnVehicleModelName(AracInfo[id][aracModel]), FormatNumber(strval(inputtext)));
	            SunucuMesaji(GetPlayerIDWithSQLID(AracInfo[id][aracSahip]), "Cezayi 72 saat içerisinde ödemezseniz araciniza devlet tarafindan el koyulacak.");
	        }
	        else
	        {
	            new str[80];
	            format(str, sizeof(str), "%s adli memur %s model araciniza %s ceza kesti.", ReturnName(playerid, 0), ReturnVehicleModelName(AracInfo[id][aracModel]), FormatNumber(strval(inputtext)));
	            BildirimEkle(AracInfo[id][aracSahip], str, "LSPD");
	        }
	    }
	}
	return 1;
}
Dialog:MVBAracBilgileri(playerid, response, listitem, inputtext[])
{
	if (response) return Dialog_Show(playerid, PlakaIncele, DIALOG_STYLE_LIST, "{1394BF}Mobil Veritabani ~ Plaka Incele", "{1394BF}» {FFFFFF}Araç Bilgileri\n{1394BF}» {FFFFFF}Araca Ceza Yaz\n{1394BF}» {FFFFFF}Lokasyon Bul", "Seç", "Geri");
	return 1;
}
stock CCTVMenu(playerid)
{
	new str[1000], string[100],sayi;
	strcat(str, "ID\tAd\n");
	foreach (new i:CCTVIter)
	{
 		sayi++;
   		format(string, sizeof(string), "{FFFFFF}%d\t{FFFFFF}%s\n",i, CCTVInfo[i][cctv_Name]);
     	strcat(str, string);
	}
	if (sayi == 0) return HataMesajGonder(playerid, "Hiç CCTV bulunamadi.");
	format(string, sizeof(string), "{00FF26}CCTV (Toplam %d/%d)", sayi, MAX_CCTV);
	Dialog_Show(playerid, CCTV, DIALOG_STYLE_TABLIST_HEADERS, string, str, "izle", "Kapat");
	return 1;
}
Dialog:CCTV(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new cid = strval(inputtext);
		if (Iter_Contains(CCTVIter, cid))
		{
			PlayerViewCCTV(playerid, cid);
		}
	}
	return 1;
}
PlayerViewCCTV(playerid, id)
{
	if (PlayerData[playerid][pCCTV] == -1)
	{
		new Float: x, Float: y, Float: z;

		GetPlayerPos(playerid, x, y, z);
		CCTV_oldSkin[playerid] = GetPlayerSkinEx(playerid);

		CCTV_oldX[playerid] = x;
		CCTV_oldY[playerid] = y;
		CCTV_oldZ[playerid] = z;
		CCTV_oldVW[playerid] = GetPlayerVirtualWorld(playerid);
		CCTV_oldInterior[playerid] = GetPlayerInterior(playerid);
	}
	SetPlayerVirtualWorld(playerid, CCTVInfo[id][cctv_VW]);
	SetPlayerInterior(playerid, CCTVInfo[id][cctv_Interior]);
	PlayerData[playerid][pCCTV] = id;
	TogglePlayerSpectating(playerid, 1);
	AttachCameraToObject(playerid, CCTVInfo[id][cctv_Object]);

	MesajGonder(playerid, "%s adli bölgeyi izlemeye basladin, (/cctvcik) ile çikabilirsiniz.", CCTVInfo[id][cctv_Name]);
	return 1;
}
PlayerCancelCCTV(playerid)
{
	TogglePlayerSpectating(playerid, 0);
	PlayerData[playerid][pCCTV] = -1;
	SetPlayerPos(playerid, CCTV_oldX[playerid], CCTV_oldY[playerid], CCTV_oldZ[playerid]);
	SetPlayerVirtualWorld(playerid, CCTV_oldVW[playerid]);
	SetPlayerInterior(playerid, CCTV_oldInterior[playerid]);
	SetPlayerSkin(playerid, CCTV_oldSkin[playerid]);
	ObjelerYukleniyor(playerid);
	SetWeapons(playerid);

	CCTV_oldX[playerid] = CCTV_oldY[playerid] = CCTV_oldZ[playerid] = 0.0;
	CCTV_oldVW[playerid] = CCTV_oldInterior[playerid] = CCTV_oldSkin[playerid] = -1;
	return 1;
}
stock GetClosestCar(iPlayer, iException = INVALID_VEHICLE_ID, Float: fRange = Float: 0x7F800000) {

	new
		iReturnID = -1,
		Float: fVehiclePos[4];

	for (new i = 1; i <= MAX_VEHICLES; ++i) if (GetVehicleModel(i) && i != iException) {
		GetVehiclePos(i, fVehiclePos[0], fVehiclePos[1], fVehiclePos[2]);
		if ((fVehiclePos[3] = GetPlayerDistanceFromPoint(iPlayer, fVehiclePos[0], fVehiclePos[1], fVehiclePos[2])) < fRange) {
			fRange = fVehiclePos[3];
			iReturnID = i;
		}
	}
	return iReturnID;
}
stock Float:Vehicle_GetSpeed(vehicleid)
{
    new Float: vx, Float: vy, Float: vz, Float: vel;
    vel = GetVehicleVelocity(vehicleid, vx, vy, vz);
    vel = (floatsqroot(((vx*vx)+(vy*vy))+(vz*vz)) * 181.5);
    return vel;
}
forward RadarGuncelle (vehid);
public RadarGuncelle (vehid)
{
    	new id = GetVehicleInfrontID (vehid);
        if (id < 0 || GetVehicleVirtualWorld(vehid) != GetVehicleVirtualWorld(id))
        {
 				TextDrawSetString(carMDC[vehid][2], "PLAKA: ~y~N/A");
 				TextDrawSetString(carMDC[vehid][3], "MODEL: ~y~N/A");
     			TextDrawSetString(carMDC[vehid][4], "HIZ: ~y~N/A");
        }
        else
        {
				new str[256];
                new ids = Car_GetID(id);
                format(str, sizeof(str), "PLAKA: ~y~%s", AracInfo[ids][aracPlaka]);
	            TextDrawSetString(carMDC[vehid][2], str);
	            format(str, sizeof(str), "MODEL: ~y~%s", ReturnVehicleModelName(GetVehicleModel(id)));
	            TextDrawSetString(carMDC[vehid][3], str);
				format(str, sizeof(str), "HIZ: ~y~%d KMH", GetPlayerSpeed(id));
	            TextDrawSetString(carMDC[vehid][4], str);
	            foreach (new i: Player)
		        {
		                if (IsPlayerInVehicle (i, vehid))
		            	{
							if (GetPlayerSpeed(id) > vehRadarLimit[vehid])
							    SunucuMesaji(i, "DiKKAT! %s plakali %s model araç hiz limitini asti! (Aracin hizi: %d KMH)", AracInfo[ids][aracPlaka], ReturnVehicleModelName(GetVehicleModel(id)), GetPlayerSpeed(id));
		                }
		        }
        }
        foreach (new i: Player)
        {
                if (IsPlayerInVehicle (i, vehid) && GetFactionType(i) == BIRLIK_LSPD)
            	{
                    for (new ia; ia < 5; ia++) TextDrawShowForPlayer(i, carMDC[vehid][ia]);
                }
        }
        return 1;
}
stock GetVehicleInfrontID (vehid)
{
    new Float: temp = 7.0;
        new j = 0;
        for (new i = 0; i < MAX_VEHICLES; i++)
        {
            new Float: a, Float: x1, Float: y1, Float: z1, Float: x2, Float: y2, Float: z2;
        GetVehiclePos (vehid, x1, y1, z1);
        GetVehicleZAngle (vehid, a);
                if (i != vehid)
                {
                        if (GetVehiclePos (i, x2, y2, z2))
                        {
                                new Float: distance = floatsqroot (floatpower ((x1 - x2), 2) + floatpower ((y1 - y2), 2) + floatpower ((z1 - z2), 2));
                                GetVehicleZAngle (vehid, a);

                                if (distance < 300.0)
                                {
                                x1 = x1 + (distance * floatsin(-a, degrees));
                                        y1 = y1 + (distance * floatcos(-a, degrees));

                                        distance = floatsqroot ((floatpower ((x1 - x2), 2)) + (floatpower ((y1 - y2), 2)));

                                        if (temp > distance)
                                        {
                                                temp = distance;
                                                j = i;
                                        }
                                }
                        }
                }
        }
        if (temp < 7.0) return j;
        return -1;
}
/*stock BirlikAdKisalt(bid)
{
	if (bid == -1) return 1;
	new kisaltma[30];
	format(kisaltma,sizeof(kisaltma), "%s",Birlikler[bid][birlikAd]);
	if (Birlikler[bid][birlikTip] == BIRLIK_LSPD) format(kisaltma,sizeof(kisaltma), "LSPD");
	if (Birlikler[bid][birlikTip] == BIRLIK_LSMD) format(kisaltma,sizeof(kisaltma), "LSMD");
	if (Birlikler[bid][birlikTip] == BIRLIK_FBI)  format(kisaltma,sizeof(kisaltma), "FBI");
	if (Birlikler[bid][birlikTip] == BIRLIK_DEVLET) format(kisaltma,sizeof(kisaltma), "GOV");
	return kisaltma;
}*/
stock GetVehicleMaxSeats(vehicleid)
{
	new deger;

	if(GetVehicleModel(vehicleid) == 599)
		deger = 4;

	else
	{
	    static const g_arrMaxSeats[] = {
			4, 2, 2, 2, 4, 4, 1, 2, 2, 4, 2, 2, 2, 4, 2, 2, 4, 2, 4, 2, 4, 4, 2, 2, 2, 1, 4, 4, 4, 2,
			1, 7, 1, 2, 2, 0, 2, 7, 4, 2, 4, 1, 2, 2, 2, 4, 1, 2, 1, 0, 0, 2, 1, 1, 1, 2, 2, 2, 4, 4,
			2, 2, 2, 2, 1, 1, 4, 4, 2, 2, 4, 2, 1, 1, 2, 2, 1, 2, 2, 4, 2, 1, 4, 3, 1, 1, 1, 4, 2, 2,
			4, 2, 4, 1, 2, 2, 2, 4, 4, 2, 2, 1, 2, 2, 2, 2, 2, 4, 2, 1, 1, 2, 1, 1, 2, 2, 4, 2, 2, 1,
			1, 2, 2, 2, 2, 2, 2, 2, 2, 4, 1, 1, 1, 2, 2, 2, 2, 7, 7, 1, 4, 2, 2, 2, 2, 2, 4, 4, 2, 2,
			4, 4, 2, 1, 2, 2, 2, 2, 2, 2, 4, 4, 2, 2, 1, 2, 4, 4, 1, 0, 0, 1, 1, 2, 1, 2, 2, 1, 2, 4,
			4, 2, 4, 1, 0, 4, 2, 2, 2, 2, 0, 0, 7, 2, 2, 1, 4, 4, 4, 2, 2, 2, 2, 2, 4, 2, 0, 0, 0, 4,
			0, 0
		};
		new
		    model = GetVehicleModel(vehicleid);

		if (400 <= model <= 611)
		    deger = g_arrMaxSeats[model - 400];
	}

	return deger;
}
stock GetAvailableSeat(vehicleid, start = 1)
{
	new seats = GetVehicleMaxSeats(vehicleid);

	for (new i = start; i < seats; i ++) if (!IsVehicleSeatUsed(vehicleid, i)) {
	    return i;
	}
	return -1;
}
stock IsVehicleSeatUsed(vehicleid, seat)
{
	foreach (new i : Player) if (IsPlayerInVehicle(i, vehicleid) && GetPlayerVehicleSeat(i) == seat) {
	    return 1;
	}
	return 0;
}
stock SendRadioMessage(frequency, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) if (PlayerData[i][pRadyo] == 1 && PlayerData[i][pFrekans] == frequency) {
		    SendClientMessage(i, color, string);
		}
		return 1;
	}
	foreach (new i : Player) if (PlayerData[i][pRadyo] == 1 && PlayerData[i][pFrekans] == frequency) {
 		SendClientMessage(i, color, str);
	}
	return 1;
}
stock SendBirlikMessageEx(type, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) if (PlayerData[i][pFaction] != -1 && GetFactionType(i) == type && PlayerData[i][pAyarlar][0] == 0) {
		    SendClientMessage(i, color, string);
		}
		return 1;
	}
	foreach (new i : Player) if (PlayerData[i][pFaction] != -1 && GetFactionType(i) == type && PlayerData[i][pAyarlar][0] == 0) {
 		SendClientMessage(i, color, str);
	}
	return 1;
}

CanAyarla(playerid, Float:amount)
{
	PlayerData[playerid][pHealth] = amount;
	SetPlayerHealth(playerid, amount);
    return 1;
}

ZirhAyarla(playerid, Float:amount)
{
	PlayerData[playerid][pArmour] = amount;
	SetPlayerArmour(playerid, amount);
    return 1;
}
Dialog:LSMDDolap(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (GetFactionType(playerid) != BIRLIK_LSMD) return 1;
	    if (listitem == 0)
	    {
	        if (!PlayerData[playerid][pOnDuty])
	        {
	            PlayerData[playerid][pOnDuty] = true;
                SetFactionColor(playerid);
                SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s dolabi açar ve ekipmanlarini alir.", ReturnName(playerid, 0));
	        }
	        else
	        {
	            PlayerData[playerid][pOnDuty] = false;
                SetPlayerColor(playerid, 0xFFFFFFFF);
                SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);
                ResetWeapons(playerid);
                SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s dolabi açar ve ekipmanlarini dolaba birakir.", ReturnName(playerid, 0));
	        }
	    }
	    if (listitem == 1)
	    {
	        new yazi[200];
	        for (new i; i<sizeof(DoktorSkinler); i++)
         	{
          		format(yazi,sizeof(yazi), "%s%d\n",yazi,DoktorSkinler[i]);
          	}
            ShowPlayerDialog(playerid, 69, DIALOG_STYLE_PREVMODEL, "Kiyafetler",yazi, "Sec", "Iptal");
	    }
	    if (listitem == 2)
	    {
	        Dialog_Show(playerid, LSMDEkipmanlar, DIALOG_STYLE_LIST, "{FF8282}Ekipmanlar", "{FF8282}» {FFFFFF}Sprey\n{FF8282}» {FFFFFF}Yangin Söndürücü\n{FF8282}» {FFFFFF}Agri Kesici", "Seç", "Kapat");
		}
	}
	return 1;
}
Dialog:LSMDEkipmanlar(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_dolap(playerid);
	if (response)
	{
	    if (listitem == 0)
	    {
	        if (PlayerHasWeapon(playerid, 41))
	        {
	            HataMesajGonder(playerid, "Zaten spreyiniz var!");
	            return Dialog_Show(playerid, LSMDEkipmanlar, DIALOG_STYLE_LIST, "{FF8282}Ekipmanlar", "{FF8282}» {FFFFFF}Sprey\n{FF8282}» {FFFFFF}Yangin Söndürücü\n{FF8282}» {FFFFFF}Agri Kesici", "Seç", "Kapat");
	        }
	        GiveWeaponToPlayer(playerid, 41, 1000);
	        Dialog_Show(playerid, LSMDEkipmanlar, DIALOG_STYLE_LIST, "{FF8282}Ekipmanlar", "{FF8282}» {FFFFFF}Sprey\n{FF8282}» {FFFFFF}Yangin Söndürücü\n{FF8282}» {FFFFFF}Agri Kesici", "Seç", "Kapat");
	    }
	    if (listitem == 1)
	    {
	        if (PlayerHasWeapon(playerid, 42))
	        {
	            HataMesajGonder(playerid, "Zaten yangin söndürücünüz var!");
	            return Dialog_Show(playerid, LSMDEkipmanlar, DIALOG_STYLE_LIST, "{FF8282}Ekipmanlar", "{FF8282}» {FFFFFF}Sprey\n{FF8282}» {FFFFFF}Yangin Söndürücü\n{FF8282}» {FFFFFF}Agri Kesici", "Seç", "Kapat");
	        }
	        GiveWeaponToPlayer(playerid, 42, 1000);
         	Dialog_Show(playerid, LSMDEkipmanlar, DIALOG_STYLE_LIST, "{FF8282}Ekipmanlar", "{FF8282}» {FFFFFF}Sprey\n{FF8282}» {FFFFFF}Yangin Söndürücü\n{FF8282}» {FFFFFF}Agri Kesici", "Seç", "Kapat");
		}
		if (listitem == 2)
		{
		    CanAyarla(playerid,100.0);
	        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s dolaptan agri kesici alir ve içer.", ReturnName(playerid, 0));
		}
	}
	return 1;
}

Dialog:LSSDDolap(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		if (listitem == 0)
		{
		    Dialog_Show(playerid, LSSDWeapon, DIALOG_STYLE_LIST, "LSSD Ekipmanlar", "Devriye Ekipmanlar\nAðýr Techizat (M4)\nÖzel Techizat (Sniper)", "Seç", "Geri");
		}
		if (listitem == 1)
		{
		    new yazi[500];
	        for (new i; i<sizeof(SerifSkinler); i++)
         	{
          		format(yazi,sizeof(yazi), "%s%d\n",yazi,SerifSkinler[i]);
          	}
            ShowPlayerDialog(playerid, 70, DIALOG_STYLE_PREVMODEL, "Serif Kiyafetler",yazi, "Sec", "Iptal");
		}
	}
	return 1;
}

Dialog:LSSDWeapon(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
		    case 0:
		    {
		        if (PlayerHasWeapon(playerid, 24) && PlayerHasWeapon(playerid, 41) && PlayerHasWeapon(playerid, 3)) return HataMesajGonder(playerid, "Zaten bu silaha sahipsin.");
		    	if (PlayerData[playerid][pSilahlar][g_aWeaponSlots[24]] != 0 && PlayerData[playerid][pSilahlar][g_aWeaponSlots[41]] != 0 && PlayerData[playerid][pSilahlar][g_aWeaponSlots[3]] != 0) return HataMesajGonder(playerid, "Bu silah türü sizde var.");

		    	GiveWeaponToPlayer(playerid, 24, 110);
		    	GiveWeaponToPlayer(playerid, 41, 1000);
		    	GiveWeaponToPlayer(playerid, 3, 1);
	  		}
	  		case 1:
	  		{
	  		    if (PlayerHasWeapon(playerid, 24) && PlayerHasWeapon(playerid, 30) && PlayerHasWeapon(playerid, 25)) return HataMesajGonder(playerid, "Zaten bu silaha sahipsin.");
		    	if (PlayerData[playerid][pSilahlar][g_aWeaponSlots[24]] != 0 && PlayerData[playerid][pSilahlar][g_aWeaponSlots[30]] != 0 && PlayerData[playerid][pSilahlar][g_aWeaponSlots[25]] != 0) return HataMesajGonder(playerid, "Bu silah türü sizde var.");

	  		    GiveWeaponToPlayer(playerid, 24, 110);
	  		    GiveWeaponToPlayer(playerid, 30, 750);
	  		    GiveWeaponToPlayer(playerid, 25, 100);
	  		}
	  		case 2:
	  		{
	  		    if (PlayerHasWeapon(playerid, 31) && PlayerHasWeapon(playerid, 34) && PlayerHasWeapon(playerid, 25)) return HataMesajGonder(playerid, "Zaten bu silaha sahipsin.");
		    	if (PlayerData[playerid][pSilahlar][g_aWeaponSlots[31]] != 0 && PlayerData[playerid][pSilahlar][g_aWeaponSlots[34]] != 0 && PlayerData[playerid][pSilahlar][g_aWeaponSlots[25]] != 0) return HataMesajGonder(playerid, "Bu silah türü sizde var.");

	  		    GiveWeaponToPlayer(playerid, 34, 30);
	  		    GiveWeaponToPlayer(playerid, 31, 750);
	  		    GiveWeaponToPlayer(playerid, 25, 100);
	  		}
		}
	}
	return 1;
}

Dialog:LSPDDolap(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (PlayerData[playerid][pFaction] == -1) return 1;
	    if (listitem == 0)
	    {
            if (!PlayerData[playerid][pOnDuty])
            {
                PlayerData[playerid][pOnDuty] = true;
                SetPlayerColor(playerid, 0xFFFFFFFF);
                SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s dolabi açar ve ekipmanlarini alir.", ReturnName(playerid, 0));
            }
            else
            {
                PlayerData[playerid][pOnDuty] = false;
                SetPlayerColor(playerid, 0xFFFFFFFF);
                SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);
                SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s dolabi açar ve ekipmanlarini dolaba birakir.", ReturnName(playerid, 0));
            }
	    }
	    if (listitem == 1)
	    {
	        new yazi[500];
	        for (new i; i<sizeof(PolisSkinler); i++)
         	{
          		format(yazi,sizeof(yazi), "%s%d\n",yazi,PolisSkinler[i]);
          	}
            ShowPlayerDialog(playerid, 61, DIALOG_STYLE_PREVMODEL, "Polis Kiyafetler",yazi, "Sec", "Iptal");
	    }
	    if (listitem == 2)
	    {
	        Dialog_Show(playerid,LSPDEkipmanlar,DIALOG_STYLE_LIST, "{1394BF}Ekipmanlar", "{1394BF}» {FFFFFF}Devriye Ekipmanlari\n{1394BF}» {FFFFFF}Özel Ekipmanlar\n{1394BF}» {FFFFFF}Aksesuarlar\n{1394BF}» {FFFFFF}Agri Kesici\n{1394BF}» {FFFFFF}Çelik Yelek", "Seç", "Kapat");
	    }
	    if (listitem == 3)
	    {
	        ResetWeapons(playerid);
	    }
	}
	return 1;
}
Dialog:LSPDEkipmanlar(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_dolap(playerid);
	if (response)
	{
	    if (listitem == 0)
	    {
	        Dialog_Show(playerid,DevriyeEkipmanlari,DIALOG_STYLE_LIST, "{1394BF}Devriye Ekipmanlari", "{1394BF}» {FFFFFF}Deagle\n{1394BF}» {FFFFFF}Sprey\n{1394BF}» {FFFFFF}Jop", "Seç", "Geri");
	    }
	    if (listitem == 1)
	    {
	        Dialog_Show(playerid,OzelEkipmanlar,DIALOG_STYLE_LIST, "{1394BF}Özel Ekipmanlar", "{1394BF}» {FFFFFF}M4\n{1394BF}» {FFFFFF}MP5\n{1394BF}» {FFFFFF}Shotgun\n{1394BF}» {FFFFFF}Göz Yasartici Gaz", "Seç", "Geri");
	    }
	    if (listitem == 2) // Aksesuarlar
	    {
	        AksesuarlariGoster(playerid,2);
	    }
	    if (listitem == 3)
	    {
	        CanAyarla(playerid,100.0);
	        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s dolaptan agri kesici alir ve içer.", ReturnName(playerid, 0));
	    }
	    if (listitem == 4)
	    {
	        ZirhAyarla(playerid,100.0);
	        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s dolaptan çelik yelek alir ve giyer.", ReturnName(playerid, 0));
	    }
	}
	return 1;
}
Dialog:DevriyeEkipmanlari(playerid, response, listitem, inputtext[])
{
	if (!response) return Dialog_Show(playerid,LSPDEkipmanlar,DIALOG_STYLE_LIST, "{1394BF}Ekipmanlar", "{1394BF}» {FFFFFF}Devriye Ekipmanlari\n{1394BF}» {FFFFFF}Özel Ekipmanlar\n{1394BF}» {FFFFFF}Aksesuarlar\n{1394BF}» {FFFFFF}Agri Kesici\n{1394BF}» {FFFFFF}Çelik Yelek", "Seç", "Kapat");
	if (response)
	{
	    if (listitem == 0)
	    {
		    if (PlayerHasWeapon(playerid, 24)) return HataMesajGonder(playerid, "Zaten bu silaha sahipsin.");
		    if (PlayerData[playerid][pSilahlar][g_aWeaponSlots[24]] != 0) return HataMesajGonder(playerid, "Bu silah türü sizde var.");
		    GiveWeaponToPlayer(playerid, 24, 110);
		    Dialog_Show(playerid,DevriyeEkipmanlari,DIALOG_STYLE_LIST, "{1394BF}Devriye Ekipmanlari", "{1394BF}» {FFFFFF}Deagle\n{1394BF}» {FFFFFF}Sprey\n{1394BF}» {FFFFFF}Jop", "Seç", "Geri");
	    }
	    if (listitem == 1)
	    {
	        if (PlayerHasWeapon(playerid, 41)) return HataMesajGonder(playerid, "Zaten bu silaha sahipsin.");
	        if (PlayerData[playerid][pSilahlar][g_aWeaponSlots[41]] != 0) return HataMesajGonder(playerid, "Bu silah türü sizde var.");
	        GiveWeaponToPlayer(playerid, 41, 1000);
	        Dialog_Show(playerid,DevriyeEkipmanlari,DIALOG_STYLE_LIST, "{1394BF}Devriye Ekipmanlari", "{1394BF}» {FFFFFF}Deagle\n{1394BF}» {FFFFFF}Sprey\n{1394BF}» {FFFFFF}Jop", "Seç", "Geri");
	    }
	    if (listitem == 2)
	    {
	        if (PlayerHasWeapon(playerid, 3)) return HataMesajGonder(playerid, "Zaten bu silaha sahipsin.");
	        if (PlayerData[playerid][pSilahlar][g_aWeaponSlots[3]] != 0) return HataMesajGonder(playerid, "Bu silah türü sizde var.");
	        GiveWeaponToPlayer(playerid, 3, 1);
	        Dialog_Show(playerid,DevriyeEkipmanlari,DIALOG_STYLE_LIST, "{1394BF}Devriye Ekipmanlari", "{1394BF}» {FFFFFF}Deagle\n{1394BF}» {FFFFFF}Sprey\n{1394BF}» {FFFFFF}Jop", "Seç", "Geri");
	    }
	}
	return 1;
}
Dialog:OzelEkipmanlar(playerid, response, listitem, inputtext[])
{
	if (!response) return Dialog_Show(playerid,LSPDEkipmanlar,DIALOG_STYLE_LIST, "{1394BF}Ekipmanlar", "{1394BF}» {FFFFFF}Devriye Ekipmanlari\n{1394BF}» {FFFFFF}Özel Ekipmanlar\n{1394BF}» {FFFFFF}Aksesuarlar\n{1394BF}» {FFFFFF}Agri Kesici\n{1394BF}» {FFFFFF}Çelik Yelek", "Seç", "Kapat");
	if (response)
	{
	    if (listitem == 0)
	    {
		    if (PlayerHasWeapon(playerid, 31)) return HataMesajGonder(playerid, "Zaten bu silaha sahipsin.");
		    if (PlayerData[playerid][pSilahlar][g_aWeaponSlots[31]] != 0) return HataMesajGonder(playerid, "Bu silah türü sizde var.");
		    GiveWeaponToPlayer(playerid, 31, 1000);
		    Dialog_Show(playerid,OzelEkipmanlar,DIALOG_STYLE_LIST, "{1394BF}Özel Ekipmanlar", "{1394BF}» {FFFFFF}M4\n{1394BF}» {FFFFFF}MP5\n{1394BF}» {FFFFFF}Shotgun\n{1394BF}» {FFFFFF}Göz Yasartici Gaz", "Seç", "Geri");
	    }
	    if (listitem == 1)
	    {
	        if (PlayerHasWeapon(playerid, 29)) return HataMesajGonder(playerid, "Zaten bu silaha sahipsin.");
	        if (PlayerData[playerid][pSilahlar][g_aWeaponSlots[29]] != 0) return HataMesajGonder(playerid, "Bu silah türü sizde var.");
	        GiveWeaponToPlayer(playerid, 29, 1000);
	        Dialog_Show(playerid,OzelEkipmanlar,DIALOG_STYLE_LIST, "{1394BF}Özel Ekipmanlar", "{1394BF}» {FFFFFF}M4\n{1394BF}» {FFFFFF}MP5\n{1394BF}» {FFFFFF}Shotgun\n{1394BF}» {FFFFFF}Göz Yasartici Gaz", "Seç", "Geri");
	    }
	    if (listitem == 2)
	    {
	        if (PlayerHasWeapon(playerid, 25)) return HataMesajGonder(playerid, "Zaten bu silaha sahipsin.");
	        if (PlayerData[playerid][pSilahlar][g_aWeaponSlots[25]] != 0) return HataMesajGonder(playerid, "Bu silah türü sizde var.");
	        GiveWeaponToPlayer(playerid, 25, 150);
	        Dialog_Show(playerid,OzelEkipmanlar,DIALOG_STYLE_LIST, "{1394BF}Özel Ekipmanlar", "{1394BF}» {FFFFFF}M4\n{1394BF}» {FFFFFF}MP5\n{1394BF}» {FFFFFF}Shotgun\n{1394BF}» {FFFFFF}Göz Yasartici Gaz", "Seç", "Geri");
	    }
	    if (listitem == 3)
	    {
	        if (PlayerHasWeapon(playerid, 17)) return HataMesajGonder(playerid, "Zaten bu silaha sahipsin.");
	        if (PlayerData[playerid][pSilahlar][g_aWeaponSlots[17]] != 0) return HataMesajGonder(playerid, "Bu silah türü sizde var.");
	        GiveWeaponToPlayer(playerid, 17, 50);
	        Dialog_Show(playerid,OzelEkipmanlar,DIALOG_STYLE_LIST, "{1394BF}Özel Ekipmanlar", "{1394BF}» {FFFFFF}M4\n{1394BF}» {FFFFFF}MP5\n{1394BF}» {FFFFFF}Shotgun\n{1394BF}» {FFFFFF}Göz Yasartici Gaz", "Seç", "Geri");
	    }
	}
	return 1;
}
SaveWeapons(playerid)
{
	if (pbOda[playerid] != -1 && !IsPlayerSpawned(playerid)) return 1;
	new a;
	for (new i; i<13; i++)
	{
	    GetPlayerWeaponData(playerid, i, a, PlayerData[playerid][pMermiler][i]);
	}
	return 1;
}

ResetWeapons(playerid)
{
	ResetPlayerWeapons(playerid);

	for (new i = 0; i < 13; i ++)
	{
		PlayerData[playerid][pSilahlar][i] = 0;
		PlayerData[playerid][pMermiler][i] = 0;
	}
	return 1;
}

stock PlayerHasWeapon(playerid, weaponid)
{
	new
	    weapon,
	    ammo;

	for (new i = 0; i < 13; i ++) if (PlayerData[playerid][pSilahlar][i] == weaponid) {
	    GetPlayerWeaponData(playerid, i, weapon, ammo);

	    if (weapon == weaponid) return 1;
	}
	return 0;
}
GiveWeaponToPlayer(playerid, weaponid, ammo)
{
	if (weaponid < 0 || weaponid > 46)
	    return 0;

	PlayerData[playerid][pSilahlar][g_aWeaponSlots[weaponid]] = weaponid;
	PlayerData[playerid][pMermiler][g_aWeaponSlots[weaponid]] += ammo;
	return GivePlayerWeapon(playerid, weaponid, ammo);
}
Entrance_Delete(entranceid)
{
    if (entranceid != -1 && EntranceData[entranceid][entranceExists])
    {
        new
            string[64];

        format(string, sizeof(string), "DELETE FROM `entrances` WHERE `entranceID` = '%d'", EntranceData[entranceid][entranceID]);
        mysql_tquery(g_SQL, string);

        if (IsValidDynamic3DTextLabel(EntranceData[entranceid][entranceText3D]))
            DestroyDynamic3DTextLabel(EntranceData[entranceid][entranceText3D]);

        if (IsValidDynamicPickup(EntranceData[entranceid][entrancePickup]))
            DestroyDynamicPickup(EntranceData[entranceid][entrancePickup]);

        if (IsValidDynamicMapIcon(EntranceData[entranceid][entranceMapIcon]))
            DestroyDynamicMapIcon(EntranceData[entranceid][entranceMapIcon]);


        EntranceData[entranceid][entranceExists] = false;
        EntranceData[entranceid][entranceID] = 0;
    }
    return 1;
}
Dialog:AracAlimOnay(playerid, response, listitem, inputtext[])
{
	if (!response) return RemovePlayerFromVehicle(playerid);
	if (response)
	{
	    new id = Car_GetID(GetPlayerVehicleID(playerid));
	    if (Car_GetCount(playerid) >= MAX_OWNABLE_CARS) return HataMesajGonder(playerid, "En fazla %d araca sahip olabilirsiniz.",MAX_OWNABLE_CARS);
	    if (AracInfo[id][aracFiyat] <=0) return 1;
	    if (AracInfo[id][aracSahip] == PlayerData[playerid][pID]) return 1;
	    if (PlayerData[playerid][pCash] < AracInfo[id][aracFiyat]) return HataMesajGonder(playerid, "Yeterli paraniz yok.");
	    ParaVer(playerid,-AracInfo[id][aracFiyat]);
	    if (AracInfo[id][aracSahip] != -1)
	    {
		    if (GetPlayerIDWithSQLID(AracInfo[id][aracSahip]) != -1)
		    {
		        ParaVer(GetPlayerIDWithSQLID(AracInfo[id][aracSahip]),AracInfo[id][aracFiyat]);
		        MesajGonder(GetPlayerIDWithSQLID(AracInfo[id][aracSahip]), "%s adli kisi aracinizi {48FF00}%s {C8C8C8}ödeyerek satin aldi.",ReturnName(playerid,0),FormatNumber(AracInfo[id][aracFiyat]));
		    }
		    else
		    {
		        OfflineParaVer(AracInfo[id][aracSahip],AracInfo[id][aracFiyat]);
		        new str[100];
		        format(str,sizeof(str), "%s adli kisi aracinizi %s ödeyerek satin aldi.",ReturnName(playerid,0),FormatNumber(AracInfo[id][aracFiyat]));
		        BildirimEkle(AracInfo[id][aracSahip],str, "Sistem");
		    }
	    }
	    if (Arac_GetKeyCount(id) > 0)
		{
		    new query[60];
			format(query, sizeof(query), "DELETE FROM `anahtarlar` WHERE `sqlid` = '%d' AND `tip` = '2'",AracInfo[id][aracID]);
			mysql_query(g_SQL, query, false);
		}
		MesajGonder(playerid, "'%s' model araci {48FF00}%s {C8C8C8}ödeyerek satin aldiniz.",ReturnVehicleModelName(GetVehicleModel(GetPlayerVehicleID(playerid))),FormatNumber(AracInfo[id][aracFiyat]));
	    AracInfo[id][aracSahip] = PlayerData[playerid][pID];
	    AracInfo[id][aracFiyat] = 0;
	    AracInfo[id][aracSatilik] = 0;
	    UpdateDynamic3DTextLabelText(AracInfo[id][aracLabel], -1, " ");
	    DestroyDynamic3DTextLabel(AracInfo[id][aracLabel]);
	    Arac_Kaydet(id);
	}
	return 1;
}

stock IsVehicleBike(vehicleid)
{
	new Bike[] = { 509, 481, 510, 462, 448,522, 581, 521, 523, 463, 586, 468, 471 };

	for (new i = 0; i < sizeof(Bike); i++)
    {
        if (GetVehicleModel(vehicleid) == Bike[i]) return 1;
    }
	return 0;
}

stock IsWindowedVehicle(vehicleid)
{
	static const g_aWindowStatus[] = {
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1,
	    1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1,
	    1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0,
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1,
		1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0
	};
	new modelid = GetVehicleModel(vehicleid);

    if (modelid < 400 || modelid > 611)
        return 0;

    return (g_aWindowStatus[modelid - 400]);
}

stock ParkedilenAracSayisi(id)
{
	new sayi = 0;
	for (new i; i<MAX_ARAC; i++) if (AracInfo[i][aracExists] && AracInfo[i][aracGaraj] == id)
	{
	    sayi++;
	}
	return sayi;
}
stock AracModifiyeler(playerid, id)
{
	new str[600], sayi;
	strcat(str, "{FF0000}Paintjob Sil\n");
	for (new i; i<14; i++) if (AracInfo[id][aracMods][i] > 0)
	{
	    ModifiyeListeleme[playerid][sayi] = i;
	    sayi++;
	    format(str, sizeof(str), "%s(ID: %d) %s\n", str, AracInfo[id][aracMods][i], GetComponentName(AracInfo[id][aracMods][i]));
	}
	Dialog_Show(playerid, AracModifiyeler, DIALOG_STYLE_LIST, "{C9A527}Araç Modifiyeleri", str, "Kaldir", "Kapat");
	return 1;
}
Dialog:AracModifiyeler(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new aracid = GetPVarInt(playerid, "ModifiyeID");
	    if (listitem == 0)
	    {
	        if (AracInfo[aracid][aracPaintjob] == -1)
	        {
	            HataMesajGonder(playerid, "Paintjob yok.");
	            return AracModifiyeler(playerid, aracid);
	        }
	        AracInfo[aracid][aracPaintjob] = -1;
	        ChangeVehiclePaintjob(AracInfo[aracid][aracVehicle], 3);
	        MesajGonder(playerid, "Paintjob kaldirildi.");
	        AracModifiyeler(playerid, aracid);
	        return 1;
	    }
	    new id = ModifiyeListeleme[playerid][listitem-1];
	    if (AracInfo[aracid][aracMods][id] > 0)
	    {
	        RemoveVehicleComponent(AracInfo[aracid][aracVehicle], AracInfo[aracid][aracMods][id]);
	        AracInfo[aracid][aracMods][id] = 0;
	        AracModifiyeler(playerid, aracid);
	        MesajGonder(playerid, "Modifiye kaldirildi.");
	    }
	}
	return 1;
}
Dialog:AracSat(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_arac(playerid);
	if (response)
	{
	    new id = GetPVarInt(playerid, "CarID");
	    if (!IsNumeric(inputtext)) return Dialog_Show(playerid,AracSat,DIALOG_STYLE_INPUT, "{FFFFFF}Araç Sat", "Lutfen aracin satis fiyatini yazin.\n\n{FF0000}NOT: {FFFFFF}0 yazarsaniz araciniz artik satilik olmaz.", "Tamam", "Geri");
	    if (strval(inputtext) < 0)
	    {
	        HataMesajGonder(playerid, "Geçersiz sayi girdiniz.");
	        return Dialog_Show(playerid,AracSat,DIALOG_STYLE_INPUT, "{FFFFFF}Araç Sat", "Lutfen aracin satis fiyatini yazin.\n\n{FF0000}NOT: {FFFFFF}0 yazarsaniz araciniz artik satilik olmaz.", "Tamam", "Geri");
	    }
	    if (strval(inputtext) <= 0)
	    {
	        AracInfo[id][aracSatilik] = 0;
	        AracInfo[id][aracFiyat] = 0;
	        Arac_Kaydet(id);
	        UpdateDynamic3DTextLabelText(AracInfo[id][aracLabel], -1, " ");
	        DestroyDynamic3DTextLabel(AracInfo[id][aracLabel]);
	        SunucuMesaji(playerid, "Araç artik satilik degil.");
	    }
	    else
	    {
	        UpdateDynamic3DTextLabelText(AracInfo[id][aracLabel], -1, " ");
	        DestroyDynamic3DTextLabel(AracInfo[id][aracLabel]);
	        AracInfo[id][aracSatilik] = 1;
	        AracInfo[id][aracFiyat] = strval(inputtext);
	        Arac_Kaydet(id);
	        new str[120];
		    format(str,sizeof(str), "{2ECC71}SATILIK\n{2ECC71}Fiyat: %s\n{2ECC71}%d",FormatNumber(AracInfo[id][aracFiyat]), (PlayerData[playerid][pTelefon] == -1) ? (0) : (PlayerData[playerid][pTelefon]));
		    AracInfo[id][aracLabel] = CreateDynamic3DTextLabel(str,-1, 0.0, -2.5, 0.4,30.0,INVALID_PLAYER_ID,AracInfo[id][aracVehicle], 1);

		    MesajGonder(playerid, "Araciniz satiliga çikarildi. (Fiyat: %s)", FormatNumber(AracInfo[id][aracFiyat]));
	    }
	}
	return 1;
}
stock GetSQLPhoneNumber(sqlid)
{
	if (sqlid == -1) return 0;
	new id = GetPlayerIDWithSQLID(sqlid);
	if (OyundaDegil(id))
	{
	    if (PlayerData[id][pTelefon] == -1) return 0;
	    else return PlayerData[id][pTelefon];
	}
	else
	{
	    new query[120];
	    format(query, sizeof(query), "SELECT `Telefon` FROM `oyuncular` WHERE `ID` = '%d'", sqlid);
	    new Cache:Radless = mysql_query(g_SQL, query);
	    new rows;
	    cache_get_row_count(rows);
	    if (rows)
	    {
			new numara;
			cache_get_value_name_int(0, "Telefon", numara);
			cache_delete(Radless);
			if (numara == -1) return 0;
			else return numara;
	    }
	    cache_delete(Radless);
	}
	return 0;
}
Dialog:AracBilgileri(playerid, response, listitem, inputtext[])
{
	if (!response || response) return cmd_arac(playerid);
	return 1;
}
stock Birlik_Sil(factionid)
{
	if (factionid != -1 && Birlikler[factionid][birlikExists])
	{
	    new
	        string[150];

		format(string, sizeof(string), "DELETE FROM `birlikler` WHERE `bid` = '%d'",Birlikler[factionid][birlikID]);
		mysql_query(g_SQL, string, false);

		format(string, sizeof(string), "UPDATE `oyuncular` SET `Birlik` = '-1',`BirlikRutbe` = '0',`BirlikDivizyon` = '0' WHERE `Birlik` = '%d'", factionid);
		mysql_query(g_SQL, string, false);

  foreach (new i : Player)
		{
			if (PlayerData[i][pFaction] == factionid) {
		    	PlayerData[i][pFaction] = -1;
		    	PlayerData[i][pFactionRutbe] = 0;
		    	PlayerData[i][pFactionDivizyon] = 0;
			}
		}
        if (IsValidDynamicPickup(Birlikler[factionid][reklamPickup])) DestroyDynamicPickup(Birlikler[factionid][reklamPickup]);
        if (IsValidDynamic3DTextLabel(Birlikler[factionid][reklamLabel])) DestroyDynamic3DTextLabel(Birlikler[factionid][reklamLabel]);
	    Birlikler[factionid][birlikExists] = false;
	    Birlikler[factionid][birlikTip] = 0;
	    Birlikler[factionid][birlikID] = 0;
	    Iter_Clear(CekilisKatilimcilar[factionid]);
	}
	return 1;
}
stock IsPlayerNearHood(playerid, vehicleid)
{
	static
		Float:fX,
		Float:fY,
		Float:fZ;

	GetVehicleHood(vehicleid, fX, fY, fZ);

	return (GetPlayerVirtualWorld(playerid) == GetVehicleVirtualWorld(vehicleid)) && IsPlayerInRangeOfPoint(playerid, 4.0, fX, fY, fZ);
}
stock GetHoodStatus(vehicleid)
{
	static
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

	if (bonnet != 1)
		return 0;

	return 1;
}
stock IsVehicleImpounded(vehicleid)
{
	new id = Car_GetID(vehicleid);
 	if (id != -1 && AracInfo[id][aracBaglandi] != 0 && AracInfo[id][aracBaglandi] > 0)
	    return 1;

	return 0;
}
stock GetVehicleHood(vehicleid, &Float:x, &Float:y, &Float:z)
{
    if (!GetVehicleModel(vehicleid) || vehicleid == INVALID_VEHICLE_ID)
	    return (x = 0.0, y = 0.0, z = 0.0), 0;

	static
	    Float:pos[7]
	;
	GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, pos[0], pos[1], pos[2]);
	GetVehiclePos(vehicleid, pos[3], pos[4], pos[5]);
	GetVehicleZAngle(vehicleid, pos[6]);

	x = pos[3] + (floatsqroot(pos[1] + pos[1]) * floatsin(-pos[6], degrees));
	y = pos[4] + (floatsqroot(pos[1] + pos[1]) * floatcos(-pos[6], degrees));
 	z = pos[5];

	return 1;
}
stock SetHoodStatus(vehicleid, status)
{
	static
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	return SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, status, boot, objective);
}
stock GetLightStatus(vehicleid)
{
	static
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

	if (lights != 1)
		return 0;

	return 1;
}
stock SetLightStatus(vehicleid, status)
{
	static
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	return SetVehicleParamsEx(vehicleid, engine, status, alarm, doors, bonnet, boot, objective);
}
stock GetFactionType(playerid)
{
	if (PlayerData[playerid][pFaction] == -1)
	    return 0;

	return (Birlikler[PlayerData[playerid][pFaction]][birlikTip]);
}
Car_IsOwner(playerid, carid)
{
	if (!OyundaDegil(playerid))
	    return 0;

    if ((AracInfo[carid][aracExists] && AracInfo[carid][aracSahip] > 0) && AracInfo[carid][aracSahip] == PlayerData[playerid][pID])
		return 1;

	return 0;
}
Car_Birlik(playerid, carid)
{
    if (PlayerData[playerid][pFaction] == -1 || carid == -1) return 0;
    if (AracInfo[carid][aracFaction] == Birlikler[PlayerData[playerid][pFaction]][birlikID] && AracInfo[carid][aracFactionType] != BIRLIK_LSPD && AracInfo[carid][aracFactionType] != BIRLIK_LSMD && AracInfo[carid][aracFactionType] != BIRLIK_FBI)
		return 1;

	return 0;
}
stock IsDoorVehicle(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
		case 400..424, 426..429, 431..440, 442..445, 451, 455, 456, 458, 459, 466, 467, 470, 474, 475:
		    return 1;

		case 477..480, 482, 483, 486, 489, 490..492, 494..496, 498..500, 502..508, 514..518, 524..529, 533..536:
		    return 1;

		case 540..547, 549..552, 554..562, 565..568, 573, 575, 576, 578..580, 582, 585, 587..589, 596..605, 609:
			return 1;
	}
	return 0;
}

Car_Nearest(playerid)
{
	static
	    Float:fX,
	    Float:fY,
	    Float:fZ;

	for (new i = 0; i != MAX_ARAC; i ++)
	{
		if (AracInfo[i][aracExists])
		{
			GetVehiclePos(AracInfo[i][aracVehicle], fX, fY, fZ);
			if (IsPlayerInRangeOfPoint(playerid, 4.0, fX, fY, fZ))
			{
			    return AracInfo[i][aracID];
			}
		}
	}
	return -1;
}

stock GetNearestVehicle(playerid)
{
	static
	    Float:fX,
	    Float:fY,
	    Float:fZ;

	for (new i = 1; i != MAX_VEHICLES; i ++) if (IsValidVehicle(i) && GetVehiclePos(i, fX, fY, fZ))
	{
	    if (IsPlayerInRangeOfPoint(playerid, 3.5, fX, fY, fZ)) return i;
	}
	return INVALID_VEHICLE_ID;
}

Dialog:AracimiBul(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new notreal[128], idx;
		notreal = strtok(inputtext, idx);
		new vehicleid = strval(notreal), carid = Car_GetID(vehicleid);
		if (!AracInfo[carid][aracDisplay]) return HataMesajGonder(playerid, "Bu araç pasif durumda. (/araclarim)");
		new Float:x,Float:y,Float:z;
		GetVehiclePos(vehicleid,x,y,z);
		cmd_cpsifirla(playerid);
	 	SetPlayerCheckpoint(playerid, x, y, z, 5.0);
	 	SunucuMesaji(playerid, "Aracýn son görüldüðü yer: %s (Haritada Ýþaretlendi.)",GetLocation(x,y,z));
	 	SetPVarInt(playerid, "AraciniBuluyor",1);
	}
	return 1;
}
Dialog:Araclarim(playerid, response, listitem, inputtext[]) {
	if (response)
	{
	    new notreal[128], idx;
		notreal = strtok(inputtext, idx);
		new vehicleid = strval(notreal), carid = Car_GetID(vehicleid);

		if (AracInfo[carid][aracDisplay])
		{
		    if (AracInfo[carid][aracGaraj] != -1) return HataMesajGonder(playerid, "Garajdaki araçlarý saklayamazsýn.");
			if (!IsPlayerInVehicle(playerid, AracInfo[carid][aracVehicle])) return HataMesajGonder(playerid, "Aracýnýzda deðilsiniz.");
			cmd_cpsifirla(playerid);
			SetPlayerCheckpoint(playerid, AracInfo[carid][aracPos][0], AracInfo[carid][aracPos][1], AracInfo[carid][aracPos][2], 5.0);
			MesajGonder(playerid, "Park alani haritada isaretlendi.");
			SetPVarInt(playerid, "AracSakliyor", carid);
		}
		else
		{
		    if (AracInfo[carid][aracBaglandi] == 1) return HataMesajGonder(playerid, "Araciniz baglanmis.");
		    if (AracInfo[carid][aracElKonuldu] == 1) return HataMesajGonder(playerid, "Araciniza el koyulmus.");
		    AracInfo[carid][aracDisplay] = true;
		    MesajGonder(playerid, "Araç en son park edilen yere spawn edildi. (/aracbul)");
      		SetVehicleVirtualWorld(vehicleid, AracInfo[carid][aracWorld]);
		    LinkVehicleToInteriorEx(vehicleid, AracInfo[carid][aracInterior]);
		}
	}
	return 1;
}
stock IsVehicleTowing(vehicleid)
{
	foreach (new i:Player)
	{
	    if (AracCekiyor[i] == vehicleid) return 1;
	}
	return 0;
}
stock GetLocation(Float:fX, Float:fY, Float:fZ)
{
	new
	    name[32] = "San Andreas";

	for (new i = 0; i != sizeof(g_arrZoneData); i ++) if ((fX >= g_arrZoneData[i][e_ZoneArea][0] && fX <= g_arrZoneData[i][e_ZoneArea][3]) && (fY >= g_arrZoneData[i][e_ZoneArea][1] && fY <= g_arrZoneData[i][e_ZoneArea][4]) && (fZ >= g_arrZoneData[i][e_ZoneArea][2] && fZ <= g_arrZoneData[i][e_ZoneArea][5])) {
    strunpack(name, g_arrZoneData[i][e_ZoneName]);

		break;
	}
	return name;
}
stock GetCityName(Float:fX, Float:fY, Float:fZ)
{
	new
	    name[32] = "San Andreas";

	for (new i = 356; i < sizeof(g_arrZoneData); i ++) if ((fX >= g_arrZoneData[i][e_ZoneArea][0] && fX <= g_arrZoneData[i][e_ZoneArea][3]) && (fY >= g_arrZoneData[i][e_ZoneArea][1] && fY <= g_arrZoneData[i][e_ZoneArea][4]) && (fZ >= g_arrZoneData[i][e_ZoneArea][2] && fZ <= g_arrZoneData[i][e_ZoneArea][5])) {
    strunpack(name, g_arrZoneData[i][e_ZoneName]);

		break;
	}
	return name;
}
stock Isyeri_Sil(bizid)
{
	if (bizid != -1 && Isyeri[bizid][isyeriExists])
	{
	    new
	        string[82];

		format(string, sizeof(string), "DELETE FROM `isyerleri` WHERE `ID` = '%d'", Isyeri[bizid][isyeriID]);
		mysql_query(g_SQL, string, false);

        if (IsValidDynamic3DTextLabel(Isyeri[bizid][bizText3D]))
		    DestroyDynamic3DTextLabel(Isyeri[bizid][bizText3D]);

		if (IsValidDynamicPickup(Isyeri[bizid][isyeriPickup]))
		    DestroyDynamicPickup(Isyeri[bizid][isyeriPickup]);

		Isyeri_AraclariSil(bizid);

	    Isyeri[bizid][isyeriExists] = false;
	    Isyeri[bizid][isyeriSahip] = -1;
	    Isyeri[bizid][isyeriID] = 0;
	}
	return 1;
}
Dialog:IsyeriDialog(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = GetPVarInt(playerid, "IsyeriID");
	    if (strfind(inputtext, "Kilit Durumu", true) != -1)
	    {
	        if (Isyeri[id][isyeriSahip] != PlayerData[playerid][pID] && (PlayerData[playerid][pAdmin] < 2 || PlayerData[playerid][pAdminDuty] != 1)) return 1;
	        if (!Isyeri[id][isyeriKilit])
	        {
	            Isyeri[id][isyeriKilit] = true;
	            cmd_isyeri(playerid);
	            Isyeri_Yenile(id);
	            Isyeri_Kaydet(id);
	        }
	        else
	        {
	            Isyeri[id][isyeriKilit] = false;
	            cmd_isyeri(playerid);
	            Isyeri_Yenile(id);
	            Isyeri_Kaydet(id);
	        }
	    }
	    if (strfind(inputtext, "Ýþyeri Adý", true) != -1)
	    {
	        if (Isyeri[id][isyeriSahip] != PlayerData[playerid][pID] && (PlayerData[playerid][pAdmin] < 2 || PlayerData[playerid][pAdminDuty] != 1)) return 1;
	        Dialog_Show(playerid,IsyeriAdDuzenleme,DIALOG_STYLE_INPUT, "{2ECC71}Ýþyeri - Ad Düzenleme", "Lütfen bu iþyeri için yeni bir ad girin;\nÞu anki ad: %s", "Deðiþtir", "Geri",Isyeri[id][isyeriName]);
		}
		if (strfind(inputtext, "Giris Ücreti", true) != -1)
		{
		    if (Isyeri[id][isyeriSahip] != PlayerData[playerid][pID] && (PlayerData[playerid][pAdmin] < 2 || PlayerData[playerid][pAdminDuty] != 1)) return 1;
		    Dialog_Show(playerid,IsyeriUcretDuzenleme,DIALOG_STYLE_INPUT, "{2ECC71}isyeri - Giris Ücreti", "{FFFFFF}Lütfen isyeriniz için yeni bir giris ücreti belirleyin;\n{FFFFFF}su anki ücret: {FF9900}%s", "Degistir", "Geri",FormatNumber(Isyeri[id][isyeriGirisUcret]));
		}
		if (strfind(inputtext, "isyeri Kasasi", true) != -1)
		{
		    if (Isyeri[id][isyeriSahip] != PlayerData[playerid][pID] && (PlayerData[playerid][pAdmin] < 2 || PlayerData[playerid][pAdminDuty] != 1)) return 1;
		    Dialog_Show(playerid,IsyeriKasa,DIALOG_STYLE_LIST, "{2ECC71}isyeri - Kasa", "Para Al\nPara Koy", "Seç", "Geri");
		}
		if (strfind(inputtext, "Satiliga Çikar",true) != -1)
		{
		    if (Isyeri[id][isyeriSahip] != PlayerData[playerid][pID] && (PlayerData[playerid][pAdmin] < 2 || PlayerData[playerid][pAdminDuty] != 1)) return 1;
		    Dialog_Show(playerid,IsyeriSatilik,DIALOG_STYLE_LIST, "{2ECC71}isyeri - Satiliga Çikar", "Satiliga Çikar\nSisteme Sat {2ECC71}(%s)\nisyerini Satmaktan Vazgeç", "Seç", "Geri",FormatNumber(Isyeri[id][isyeriKendiFiyati]/2));
		}
		if (strfind(inputtext, "Giris Mesaji",true) != -1)
		{
		    if (Isyeri[id][isyeriSahip] != PlayerData[playerid][pID] && (PlayerData[playerid][pAdmin] < 2 || PlayerData[playerid][pAdminDuty] != 1)) return 1;
		    Dialog_Show(playerid,IsyeriMesaj,DIALOG_STYLE_INPUT, "{2ECC71}isyeri - Giris Mesaji", "{FFFFFF}Lütfen isyeri giris mesaji yazin ('yok' yazarsaniz isyeri mesaji kaldirilir.)", "Degistir", "Geri");
		}
		if (strfind(inputtext, "Müzik Aç/Kapat", true) != -1)
		{
		    if (Isyeri[id][isyeriSahip] != PlayerData[playerid][pID] && (PlayerData[playerid][pAdmin] < 2 || PlayerData[playerid][pAdminDuty] != 1)) return 1;
		    Dialog_Show(playerid,IsyeriMuzik,DIALOG_STYLE_INPUT, "{2ECC71}isyeri - Müzik", "{FFFFFF}Lütfen müzigin URL adresini girin ('yok' yazarak müzigi kapatabilirsiniz.)\n{FFFFFF}su anki URL: %s", "Degistir", "Geri",Isyeri[id][isyeriMuzik]);
		}
		if (strfind(inputtext, "Ürün Al",true) != -1)
		{
		    if (Isyeri[id][isyeriSahip] != PlayerData[playerid][pID] && (PlayerData[playerid][pAdmin] < 2 || PlayerData[playerid][pAdminDuty] != 1)) return 1;
		    Isyeri_UrunAl(playerid,id);
		}
		if (strfind(inputtext, "Araç Ekle",true) != -1)
		{
		    if (Isyeri[id][isyeriSahip] != PlayerData[playerid][pID] && (PlayerData[playerid][pAdmin] < 2 || PlayerData[playerid][pAdminDuty] != 1)) return 1;
		    Dialog_Show(playerid,AracEkle,DIALOG_STYLE_INPUT, "{2ECC71}Araç Ekle", "Lütfen isyerine eklemek istediginiz aracin adini veya modelini girin:", "Devam", "Kapat");
		}
		if (strfind(inputtext, "Araç Düzenle",true) != -1)
		{
		    if (Isyeri[id][isyeriSahip] != PlayerData[playerid][pID] && (PlayerData[playerid][pAdmin] < 2 || PlayerData[playerid][pAdminDuty] != 1)) return 1;
		    Dialog_Show(playerid,AracDuzenle,DIALOG_STYLE_LIST, "{2ECC71}Araç Düzenle", "{FFFFFF}Araç Fiyat Degistir\n{FFFFFF}Araç Sil", "Seç", "Geri");
		}
		if (strfind(inputtext, "Ürün Fiyatlarini Degistir",true) != -1)
		{
		    HataMesajGonder(playerid, "Bu sistem pasif.");
		    /*if (Isyeri[id][isyeriSahip] != PlayerData[playerid][pID] && (PlayerData[playerid][pAdmin] < 2 || PlayerData[playerid][pAdminDuty] != 1)) return 1;
		    Isyeri_UrunFiyatDegistir(playerid,id);*/
		}
	}
	return 1;
}
Dialog:AracDuzenle(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_isyeri(playerid);
	if (response)
	{
	    new id;
	    if ((id = (Business_Inside(playerid) == -1) ? (Business_Nearest(playerid)) : (Business_Inside(playerid))) != -1)
	    {
		    if (listitem == 0)
		    {
		    	SetPVarInt(playerid, "AracDuzenle",1);
		        Isyeri_AracDuzenle(playerid,id);
		    }
		    if (listitem == 1)
		    {
		        SetPVarInt(playerid, "AracDuzenle",2);
		        Isyeri_AracDuzenle(playerid,id);
		    }
	    }
	}
	return 1;
}
stock Isyeri_AraclariSil(bizid)
{
	if (Isyeri[bizid][isyeriExists] && Isyeri[bizid][isyeriTip] == 4)
	{
	    static
	        string[50];

		for (new i = 0; i != MAX_DEALERSHIP_CARS; i ++)
		{
  			DealershipCars[bizid][i][vehModel] = 0;
    		DealershipCars[bizid][i][vehPrice] = 0;
		}
		format(string, sizeof(string), "DELETE FROM `galeriaraclar` WHERE `ID` = '%d'", Isyeri[bizid][isyeriID]);
		mysql_query(g_SQL, string, false);
	}
	return 1;
}
Isyeri_AracDuzenle(playerid, bizid)
{
	new string[2056];
	string[0] = 0;
    for (new i = 0; i != MAX_DEALERSHIP_CARS; i ++)
	{
		if (DealershipCars[bizid][i][vehModel]) {
			format(string, sizeof(string), "%s%d\t~g~%s\n", string, DealershipCars[bizid][i][vehModel], FormatNumber(DealershipCars[bizid][i][vehPrice]));
		}
	}
    ShowPlayerDialog(playerid, 58, DIALOG_STYLE_PREVMODEL, "Arac Sec", string, "Sec", "Iptal");
	return 1;
}
Dialog:AracEkle(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_isyeri(playerid);
	if (response)
	{
	    new id = -1;
	    if ((id = (Business_Inside(playerid) == -1) ? (Business_Nearest(playerid)) : (Business_Inside(playerid))) != -1)
	    {
	        if (Isyeri[id][isyeriTip] != 4 || !Isyeri[id][isyeriExists]) return 1;
	        if (isnull(inputtext)) return Dialog_Show(playerid,AracEkle,DIALOG_STYLE_INPUT, "{2ECC71}Araç Ekle", "Lütfen isyerine eklemek istediginiz aracin adini veya modelini girin:", "Devam", "Kapat");
	        new model = GetVehicleModelByName(inputtext);
	        if (!model)
	        {
	            HataMesajGonder(playerid, "Geçersiz araç modeli girdiniz.");
	            return Dialog_Show(playerid,AracEkle,DIALOG_STYLE_INPUT, "{2ECC71}Araç Ekle", "Lütfen isyerine eklemek istediginiz aracin adini veya modelini girin:", "Devam", "Kapat");
	        }
	        for (new i = 0; i != MAX_DEALERSHIP_CARS; i ++)
	        {
	            if (DealershipCars[id][i][vehModel] == model)
	            {
	                HataMesajGonder(playerid, "Bu araç zaten bu galeride satiliyor.");
	                return Dialog_Show(playerid,AracEkle,DIALOG_STYLE_INPUT, "{2ECC71}Araç Ekle", "Lütfen isyerine eklemek istediginiz aracin adini veya modelini girin:", "Devam", "Kapat");
	            }
	        }
	        SetPVarInt(playerid, "AracEkleModel",model);
	        Dialog_Show(playerid,AracEkleFiyat,DIALOG_STYLE_INPUT, "{2ECC71}Araç Fiyat", "Lütfen '%s' model araç için bir fiyat girin:", "Ekle", "Geri",ReturnVehicleModelName(model));
	    }
	}
	return 1;
}
Dialog:AracEkleFiyat(playerid, response, listitem, inputtext[])
{
	if (!response) return Dialog_Show(playerid,AracEkle,DIALOG_STYLE_INPUT, "{2ECC71}Araç Ekle", "Lütfen isyerine eklemek istediginiz aracin adini veya modelini girin:", "Devam", "Kapat"),DeletePVar(playerid, "AracEkleModel");
	if (response)
	{
	    new id = -1;
	    if ((id = (Business_Inside(playerid) == -1) ? (Business_Nearest(playerid)) : (Business_Inside(playerid))) != -1)
	    {
	        if (Isyeri[id][isyeriTip] != 4 || !Isyeri[id][isyeriExists]) return 1;
	        if (isnull(inputtext) || strval(inputtext) < 1)
	        {
	            HataMesajGonder(playerid, "Geçersiz fiyat.");
	            return Dialog_Show(playerid,AracEkleFiyat,DIALOG_STYLE_INPUT, "{2ECC71}Araç Fiyat", "Lütfen '%s' model araç için bir fiyat girin:", "Ekle", "Geri",ReturnVehicleModelName(GetPVarInt(playerid, "AracEkleModel")));
	        }
	        Isyeri_AracEkle(id,GetPVarInt(playerid, "AracEkleModel"),strval(inputtext));
	        SunucuMesaji(playerid, "Galerinize '%s' adli araç eklendi.",ReturnVehicleModelName(GetPVarInt(playerid, "AracEkleModel")));
	    }
	}
	return 1;
}

Isyeri_AracEkle(bizid, modelid, price)
{
	new query[256];

	for (new i = 0; i != MAX_DEALERSHIP_CARS; i ++) if (!DealershipCars[bizid][i][vehModel])
	{
	    DealershipCars[bizid][i][vehID] = i;
	    DealershipCars[bizid][i][vehModel] = modelid;
	    DealershipCars[bizid][i][vehPrice] = price;

	    mysql_format(g_SQL, query, sizeof query, "INSERT INTO `galeriaraclar` (`ID`, `vehID`, `vehModel`, `vehPrice`) VALUES ('%d', '%d', '%d', '%d')", Isyeri[bizid][isyeriID], DealershipCars[bizid][i][vehID], DealershipCars[bizid][i][vehModel], DealershipCars[bizid][i][vehPrice]);
	    mysql_query (g_SQL, query);

	    return DealershipCars[bizid][i][vehID];
	}
	return 0;
}

forward OnDealerCarCreated(bizid, slotid);
public OnDealerCarCreated(bizid, slotid)
{
	DealershipCars[bizid][slotid][vehID] = cache_insert_id();
	return 1;
}
stock GetVehicleModelByName(const name[])
{
	if (IsNumeric(name) && (strval(name) >= 400 && strval(name) <= 611))
	    return strval(name);

	for (new i = 0; i < sizeof(g_arrVehicleNames); i ++)
	{
	    if (strfind(g_arrVehicleNames[i], name, true) != -1)
	    {
	        return i + 400;
		}
	}
	return 0;
}
stock Isyeri_UrunFiyatDegistir(playerid,id)
{
	if (id == -1 || !Isyeri[id][isyeriExists]) return 0;

	new str[1000],string[550];
	strcat(str, "Ürün\tKalan\tFiyat\n");
	switch (Isyeri[id][isyeriTip])
	{
	    case 1:
	    {
	        format(string,sizeof(string), "Zar\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][0],FormatNumber(Isyeri[id][isyeriFiyatlar][0]));
	        strcat(str,string);
	        format(string,sizeof(string), "Sigara\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][1],FormatNumber(Isyeri[id][isyeriFiyatlar][1]));
	        strcat(str,string);
	        format(string,sizeof(string), "Ip\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][2],FormatNumber(Isyeri[id][isyeriFiyatlar][2]));
	        strcat(str,string);
	        format(string,sizeof(string), "Göz Bagi\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][3],FormatNumber(Isyeri[id][isyeriFiyatlar][3]));
	        strcat(str,string);
         format(string,sizeof(string), "Sprey\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][4],FormatNumber(Isyeri[id][isyeriFiyatlar][4]));
	        strcat(str,string);
	        format(string,sizeof(string), "Gazoz\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][5],FormatNumber(Isyeri[id][isyeriFiyatlar][5]));
	        strcat(str,string);
	        format(string,sizeof(string), "Beyzbol Sopasi\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][6],FormatNumber(Isyeri[id][isyeriFiyatlar][6]));
	        strcat(str,string);
	        format(string,sizeof(string), "Maske\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][7],FormatNumber(Isyeri[id][isyeriFiyatlar][7]));
	        strcat(str,string);
	        format(string,sizeof(string), "Benzin Kutusu\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][8],FormatNumber(Isyeri[id][isyeriFiyatlar][8]));
	        strcat(str,string);
	        format(string,sizeof(string), "Barbekü\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][9],FormatNumber(Isyeri[id][isyeriFiyatlar][9]));
	        strcat(str,string);
	        format(string,sizeof(string), "Köfte\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][10],FormatNumber(Isyeri[id][isyeriFiyatlar][10]));
	        strcat(str,string);
	        format(string,sizeof(string), "Tavuk Eti\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][11],FormatNumber(Isyeri[id][isyeriFiyatlar][11]));
	        strcat(str,string);
	        format(string,sizeof(string), "Dana Eti\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][12],FormatNumber(Isyeri[id][isyeriFiyatlar][12]));
	        strcat(str,string);
	        format(string,sizeof(string), "Tamir kiti\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][13],FormatNumber(Isyeri[id][isyeriFiyatlar][13]));
	        strcat(str,string);
	        format(string,sizeof(string), "Portatif Çadir\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][14],FormatNumber(Isyeri[id][isyeriFiyatlar][14]));
	        strcat(str,string);
	        format(string,sizeof(string), "Kamp Atesi\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][15],FormatNumber(Isyeri[id][isyeriFiyatlar][15]));
	        strcat(str,string);
	        /*format(string,sizeof(string), "Yan Keski\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][16],FormatNumber(Isyeri[id][isyeriFiyatlar][16]));
	        strcat(str,string);*/
	    }
	    case 2:
	    {
	        format(string,sizeof(string), "Normal Kiyafetler\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][0],FormatNumber(Isyeri[id][isyeriFiyatlar][0]));
	        strcat(str,string);
	        format(string,sizeof(string), "Özel Kiyafetler\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][1],FormatNumber(Isyeri[id][isyeriFiyatlar][1]));
	        strcat(str,string);
	        format(string,sizeof(string), "Aksesuarlar\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][2],FormatNumber(Isyeri[id][isyeriFiyatlar][2]));
	        strcat(str,string);
	    }
	    case 3:
	    {
	        format(string,sizeof(string), "Su\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][0],FormatNumber(Isyeri[id][isyeriFiyatlar][0]));
	        strcat(str,string);
	        format(string,sizeof(string), "Kola\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][1],FormatNumber(Isyeri[id][isyeriFiyatlar][1]));
	        strcat(str,string);
	        format(string,sizeof(string), "Salata\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][2],FormatNumber(Isyeri[id][isyeriFiyatlar][2]));
	        strcat(str,string);
	        format(string,sizeof(string), "Tavuk\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][3],FormatNumber(Isyeri[id][isyeriFiyatlar][3]));
	        strcat(str,string);
	        format(string,sizeof(string), "Patates Kizartmasi\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][4],FormatNumber(Isyeri[id][isyeriFiyatlar][4]));
	        strcat(str,string);
	        format(string,sizeof(string), "Hamburger\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][5],FormatNumber(Isyeri[id][isyeriFiyatlar][5]));
	        strcat(str,string);
	    }
	    case 5:
	    {
	        format(string,sizeof(string), "Telefon\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][0],FormatNumber(Isyeri[id][isyeriFiyatlar][0]));
	        strcat(str,string);
	        format(string,sizeof(string), "Portatif Radyo\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][1],FormatNumber(Isyeri[id][isyeriFiyatlar][1]));
	        strcat(str,string);
	        format(string,sizeof(string), "Boombox\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][2],FormatNumber(Isyeri[id][isyeriFiyatlar][2]));
	        strcat(str,string);
	        format(string,sizeof(string), "Kamera\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][3],FormatNumber(Isyeri[id][isyeriFiyatlar][3]));
	        strcat(str,string);
	    }
	    case 6:
	    {
	        format(string,sizeof(string), "Bira\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][0],FormatNumber(Isyeri[id][isyeriFiyatlar][0]));
	        strcat(str,string);
	        format(string,sizeof(string), "Viski\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][1],FormatNumber(Isyeri[id][isyeriFiyatlar][1]));
	        strcat(str,string);
	        format(string,sizeof(string), "Tekila\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][2],FormatNumber(Isyeri[id][isyeriFiyatlar][2]));
	        strcat(str,string);
	        format(string,sizeof(string), "sarap\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][3],FormatNumber(Isyeri[id][isyeriFiyatlar][3]));
	        strcat(str,string);
	        format(string,sizeof(string), "Votka\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][4],FormatNumber(Isyeri[id][isyeriFiyatlar][4]));
	        strcat(str,string);
	        format(string,sizeof(string), "sampanya\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][5],FormatNumber(Isyeri[id][isyeriFiyatlar][5]));
	        strcat(str,string);
	    }
	}
	Dialog_Show(playerid,UrunFiyat,DIALOG_STYLE_TABLIST_HEADERS, "{2ECC71}isyeri - Ürün Fiyat Degistir",str, "Seç", "Geri");
	return 1;
}
Dialog:UrunFiyat(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_isyeri(playerid);
	if (response)
	{
	     new id = GetPVarInt(playerid, "IsyeriID");
 		 SetPVarInt(playerid, "SectigiUrun",listitem);
 		 Dialog_Show(playerid,UrunFiyatDegistirme,DIALOG_STYLE_INPUT, "{2ECC71}isyeri - Ürün Fiyat Degistir", "{FFFFFF}Lütfen bu ürün için yeni bir fiyat girin;\n{FFFFFF}su anki fiyat: %s", "Degistir", "Geri",FormatNumber(Isyeri[id][isyeriFiyatlar][listitem]));
	}
	return 1;
}
stock Isyeri_UrunAl(playerid,id)
{
	if (id == -1 || !Isyeri[id][isyeriExists]) return 0;

	new str[1000],string[550];
	strcat(str, "Ürün\tKalan\tFiyat\n");
	switch (Isyeri[id][isyeriTip])
	{
	    case 1:
	    {
	        format(string,sizeof(string), "Zar\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][0],FormatNumber(Isyeri[id][isyeriFiyatlar][0]));
	        strcat(str,string);
	        format(string,sizeof(string), "Sigara\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][1],FormatNumber(Isyeri[id][isyeriFiyatlar][1]));
	        strcat(str,string);
	        format(string,sizeof(string), "Ip\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][2],FormatNumber(Isyeri[id][isyeriFiyatlar][2]));
	        strcat(str,string);
	        format(string,sizeof(string), "Göz Bagi\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][3],FormatNumber(Isyeri[id][isyeriFiyatlar][3]));
	        strcat(str,string);
	        format(string,sizeof(string), "Gazoz\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][5],FormatNumber(Isyeri[id][isyeriFiyatlar][5]));
	        strcat(str,string);
	        format(string,sizeof(string), "Beyzbol Sopasi\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][6],FormatNumber(Isyeri[id][isyeriFiyatlar][6]));
	        strcat(str,string);
	        format(string,sizeof(string), "Maske\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][7],FormatNumber(Isyeri[id][isyeriFiyatlar][7]));
	        strcat(str,string);
	        format(string,sizeof(string), "Benzin Kutusu\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][8],FormatNumber(Isyeri[id][isyeriFiyatlar][8]));
	        strcat(str,string);
	        format(string,sizeof(string), "Barbekü\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][9],FormatNumber(Isyeri[id][isyeriFiyatlar][9]));
	        strcat(str,string);
	        format(string,sizeof(string), "Köfte\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][10],FormatNumber(Isyeri[id][isyeriFiyatlar][10]));
	        strcat(str,string);
	        format(string,sizeof(string), "Tavuk Eti\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][11],FormatNumber(Isyeri[id][isyeriFiyatlar][11]));
	        strcat(str,string);
	        format(string,sizeof(string), "Dana Eti\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][12],FormatNumber(Isyeri[id][isyeriFiyatlar][12]));
	        strcat(str,string);
	        format(string,sizeof(string), "Tamir kiti\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][13],FormatNumber(Isyeri[id][isyeriFiyatlar][13]));
	        strcat(str,string);
	        format(string,sizeof(string), "Portatif Çadir\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][14],FormatNumber(Isyeri[id][isyeriFiyatlar][14]));
	        strcat(str,string);
	        format(string,sizeof(string), "Kamp Atesi\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][15],FormatNumber(Isyeri[id][isyeriFiyatlar][15]));
	        strcat(str,string);
	        /*format(string,sizeof(string), "Yan Keski\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][15],FormatNumber(Isyeri[id][isyeriFiyatlar][15]));
	        strcat(str,string);*/
	    }
	    case 2:
	    {
	        format(string,sizeof(string), "Normal Kiyafetler\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][0],FormatNumber(Isyeri[id][isyeriFiyatlar][0]));
	        strcat(str,string);
	        format(string,sizeof(string), "Özel Kiyafetler\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][1],FormatNumber(Isyeri[id][isyeriFiyatlar][1]));
	        strcat(str,string);
	        format(string,sizeof(string), "Aksesuarlar\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][2],FormatNumber(Isyeri[id][isyeriFiyatlar][2]));
	        strcat(str,string);
	    }
	    case 3:
	    {
	        format(string,sizeof(string), "Su\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][0],FormatNumber(Isyeri[id][isyeriFiyatlar][0]));
	        strcat(str,string);
	        format(string,sizeof(string), "Kola\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][1],FormatNumber(Isyeri[id][isyeriFiyatlar][1]));
	        strcat(str,string);
	        format(string,sizeof(string), "Salata\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][2],FormatNumber(Isyeri[id][isyeriFiyatlar][2]));
	        strcat(str,string);
	        format(string,sizeof(string), "Tavuk\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][3],FormatNumber(Isyeri[id][isyeriFiyatlar][3]));
	        strcat(str,string);
	        format(string,sizeof(string), "Patates Kizartmasi\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][4],FormatNumber(Isyeri[id][isyeriFiyatlar][4]));
	        strcat(str,string);
	        format(string,sizeof(string), "Hamburger\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][5],FormatNumber(Isyeri[id][isyeriFiyatlar][5]));
	        strcat(str,string);
	    }
	    case 5:
	    {
	        format(string,sizeof(string), "Telefon\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][0],FormatNumber(Isyeri[id][isyeriFiyatlar][0]));
	        strcat(str,string);
	        format(string,sizeof(string), "Portatif Radyo\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][1],FormatNumber(Isyeri[id][isyeriFiyatlar][1]));
	        strcat(str,string);
	        format(string,sizeof(string), "Boombox\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][2],FormatNumber(Isyeri[id][isyeriFiyatlar][2]));
	        strcat(str,string);
	        format(string,sizeof(string), "Kamera\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][3],FormatNumber(Isyeri[id][isyeriFiyatlar][3]));
	        strcat(str,string);
	    }
	    case 6:
	    {
	        format(string,sizeof(string), "Bira\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][0],FormatNumber(Isyeri[id][isyeriFiyatlar][0]));
	        strcat(str,string);
	        format(string,sizeof(string), "Viski\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][1],FormatNumber(Isyeri[id][isyeriFiyatlar][1]));
	        strcat(str,string);
	        format(string,sizeof(string), "Tekila\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][2],FormatNumber(Isyeri[id][isyeriFiyatlar][2]));
	        strcat(str,string);
	        format(string,sizeof(string), "sarap\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][3],FormatNumber(Isyeri[id][isyeriFiyatlar][3]));
	        strcat(str,string);
	        format(string,sizeof(string), "Votka\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][4],FormatNumber(Isyeri[id][isyeriFiyatlar][4]));
	        strcat(str,string);
	        format(string,sizeof(string), "sampanya\t%d adet\t{2ECC71}%s\n",Isyeri[id][isyeriUrunSayisi][5],FormatNumber(Isyeri[id][isyeriFiyatlar][5]));
	        strcat(str,string);
	    }
	}
	Dialog_Show(playerid,UrunlerDialog,DIALOG_STYLE_TABLIST_HEADERS, "{2ECC71}isyeri - Ürün Al",str, "Seç", "Geri");
	return 1;
}
Dialog:UrunlerDialog(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_isyeri(playerid);
	if (response)
	{
		    new id = GetPVarInt(playerid, "IsyeriID");

		    if(Isyeri[id][isyeriTip] == 1 && listitem >= 4)
		    	SetPVarInt(playerid, "SectigiUrun", listitem + 1);

		    else SetPVarInt(playerid, "SectigiUrun",listitem);

		    Dialog_Show(playerid,UrunAl,DIALOG_STYLE_INPUT, "{2ECC71}isyeri - Ürün Al", "{FFFFFF}Seçtiginiz üründen kaç adet almak istiyorsunuz? {2ECC71}(1 adet = %s)", "Al", "Geri",FormatNumber(GetUrunFiyat(id,listitem)));
	}
	return 1;
}
Dialog:UrunFiyatDegistirme(playerid, response, listitem, inputtext[])
{
    if (!response) return Isyeri_UrunFiyatDegistir(playerid,GetPVarInt(playerid, "IsyeriID"));
    if (response)
    {
        new id = GetPVarInt(playerid, "IsyeriID");
	    new urun = GetPVarInt(playerid, "SectigiUrun");
	    if (isnull(inputtext)) return Dialog_Show(playerid,UrunFiyatDegistirme,DIALOG_STYLE_INPUT, "{2ECC71}isyeri - Ürün Fiyat Degistir", "{FFFFFF}Lütfen bu ürün için yeni bir fiyat girin;\n{FFFFFF}su anki fiyat: %s", "Degistir", "Geri",FormatNumber(Isyeri[id][isyeriFiyatlar][urun]));
	    if (!IsNumeric(inputtext)) return Dialog_Show(playerid,UrunFiyatDegistirme,DIALOG_STYLE_INPUT, "{2ECC71}isyeri - Ürün Fiyat Degistir", "{FFFFFF}Lütfen bu ürün için yeni bir fiyat girin;\n{FFFFFF}su anki fiyat: %s", "Degistir", "Geri",FormatNumber(Isyeri[id][isyeriFiyatlar][urun]));
	    if (strval(inputtext) < 1 || strval(inputtext) > 100000)
	    {
	        HataMesajGonder(playerid, "En az $1, en fazla $100,000 girebilirsiniz.");
	        return Dialog_Show(playerid,UrunFiyatDegistirme,DIALOG_STYLE_INPUT, "{2ECC71}isyeri - Ürün Fiyat Degistir", "{FFFFFF}Lütfen bu ürün için yeni bir fiyat girin;\n{FFFFFF}su anki fiyat: %s", "Degistir", "Geri",FormatNumber(Isyeri[id][isyeriFiyatlar][urun]));
	    }
	    Isyeri[id][isyeriFiyatlar][urun] = strval(inputtext);
	    Isyeri_Kaydet(id);

	    SunucuMesaji(playerid, "Ürün fiyati {2ECC71}%s {FFFFFF}olarak degistirildi.",FormatNumber(strval(inputtext)));
	    Isyeri_UrunFiyatDegistir(playerid,id);
    }
	return 1;
}
Dialog:UrunAl(playerid, response, listitem, inputtext[])
{
	if (!response) return Isyeri_UrunAl(playerid,GetPVarInt(playerid, "IsyeriID"));
	if (response)
	{
	    new id = GetPVarInt(playerid, "IsyeriID");
	    new urun = GetPVarInt(playerid, "SectigiUrun");
	    if (isnull(inputtext)) return Dialog_Show(playerid,UrunAl,DIALOG_STYLE_INPUT, "{2ECC71}isyeri - Ürün Al", "{FFFFFF}Seçtiginiz üründen kaç adet almak istiyorsunuz? {2ECC71}(1 adet = %s)", "Al", "Geri",FormatNumber(GetUrunFiyat(id,urun)));
	    if (!IsNumeric(inputtext)) return Dialog_Show(playerid,UrunAl,DIALOG_STYLE_INPUT, "{2ECC71}isyeri - Ürün Al", "{FFFFFF}Seçtiginiz üründen kaç adet almak istiyorsunuz? {2ECC71}(1 adet = %s)", "Al", "Geri",FormatNumber(GetUrunFiyat(id,urun)));
	    if (strval(inputtext) < 1 || strval(inputtext)+Isyeri[id][isyeriUrunSayisi][urun] > 1000)
	    {
	        HataMesajGonder(playerid, "Adet 1'den küçük, veya 1000'den fazla olmamali.");
	        return Dialog_Show(playerid,UrunAl,DIALOG_STYLE_INPUT, "{2ECC71}isyeri - Ürün Al", "{FFFFFF}Seçtiginiz üründen kaç adet almak istiyorsunuz? {2ECC71}(1 adet = %s)", "Al", "Geri",FormatNumber(GetUrunFiyat(id,urun)));
	    }
	    if (Isyeri[id][isyeriKasa] < strval(inputtext)*GetUrunFiyat(id,urun))
	    {
	        HataMesajGonder(playerid, "isyeri kasasinda yeterli para yok.");
	        return Dialog_Show(playerid,UrunAl,DIALOG_STYLE_INPUT, "{2ECC71}isyeri - Ürün Al", "{FFFFFF}Seçtiginiz üründen kaç adet almak istiyorsunuz? {2ECC71}(1 adet = %s)", "Al", "Geri",FormatNumber(GetUrunFiyat(id,urun)));
	    }
	    Isyeri[id][isyeriUrunSayisi][urun] += strval(inputtext);
	    Isyeri[id][isyeriKasa] -= strval(inputtext)*GetUrunFiyat(id,urun);
	    SunucuMesaji(playerid, "%d adet ürün {2ECC71}%s {FFFFFF}karsiliginda satin alindi.",strval(inputtext),FormatNumber(strval(inputtext)*GetUrunFiyat(id,urun)));
	    Isyeri_UrunAl(playerid,id);
	}
	return 1;
}
stock GetUrunFiyat(id,urunid)
{
	return Isyeri[id][isyeriFiyatlar][urunid]/2;
}
Dialog:IsyeriMuzik(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_isyeri(playerid);
	if (response)
	{
	    new id = GetPVarInt(playerid, "IsyeriID");
	    if (!strcmp(inputtext, "yok", true))
	    {
	        Isyeri[id][isyeriMuzik][0] = '\0';
	        Isyeri_Kaydet(id);
	        foreach (new i : Player)
			{
				if (PlayerData[i][pIsyeri] == Isyeri[id][isyeriID])
				{
					StopAudioStreamForPlayer(i);
				}
			}
			SunucuMesaji(playerid, "isyeri müzigi kaldirildi.");
	    }
	    else
	    {
	        format(Isyeri[id][isyeriMuzik], 256, inputtext);
            foreach (new i : Player)
			{
				if (PlayerData[i][pIsyeri] == Isyeri[id][isyeriID])
				{
					PlayAudioStreamForPlayer(i, inputtext);
				}
			}
			Isyeri_Kaydet(id);
	    }
	    cmd_isyeri(playerid);
	}
	return 1;
}
Dialog:IsyeriMesaj(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_isyeri(playerid);
	if (response)
	{
	    new id = GetPVarInt(playerid, "IsyeriID");
	    if (!strcmp(inputtext, "yok", true))
		{
		    Isyeri[id][isyeriMesaj][0] = '\0';
			Isyeri_Kaydet(id);
			SunucuMesaji(playerid, "isyeri mesaji kaldirildi.");
		}
		else
		{
			format(Isyeri[id][isyeriMesaj], 100, inputtext);

			Isyeri_Kaydet(id);
		}
        cmd_isyeri(playerid);

	}
	return 1;
}
Dialog:IsyeriSatilik(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_isyeri(playerid);
	if (response)
	{
	    new id = GetPVarInt(playerid, "IsyeriID");
	    if (listitem == 0)
	    {
	        Dialog_Show(playerid,IsyeriSatiligaCikar,DIALOG_STYLE_INPUT, "{2ECC71}isyeri - Satiliga Çikar", "isyerinizi kaç dolara satiliga çikarmak istiyorsunuz?:", "Tamam", "Geri");
	    }
	    if (listitem == 1)
	    {
	        if (Isyeri[id][isyeriSatilik] == 1) return HataMesajGonder(playerid, "isyeriniz satilik.");
	        new fiyat = floatround(Isyeri[id][isyeriKendiFiyati]/2);
	        Dialog_Show(playerid,IsyeriSistemeSat,DIALOG_STYLE_MSGBOX, "{2ECC71}isyeri - Sisteme Sat", "isyerinizi %s karsiliginda sisteme satmak istediginize emin misiniz?\n{FF0000}UYARI: Kasadaki paralari almayi unutmayin!", "Sat", "Geri",FormatNumber(fiyat));
	    }
	    if (listitem == 2)
	    {
	        if (Isyeri[id][isyeriSatilik] == 0)
	        {
	            Dialog_Show(playerid,IsyeriSatilik,DIALOG_STYLE_LIST, "{2ECC71}isyeri - Satiliga Çikar", "{2ECC71}Satiliga Çikar\n{2ECC71}Sisteme Sat {FF0000}(%s)\n{2ECC71}isyerini Satmaktan Vazgeç", "Seç", "Geri",FormatNumber(Isyeri[id][isyeriKendiFiyati]/2));
				return HataMesajGonder(playerid, "isyeriniz satilik degil.");
			}
			Isyeri[id][isyeriSatilik] = 0;
			Isyeri[id][isyeriFiyat] = Isyeri[id][isyeriKendiFiyati];
			Isyeri_Yenile(id);
			Isyeri_Kaydet(id);
			cmd_isyeri(playerid);
	    }
	}
	return 1;
}
Dialog:IsyeriSatiligaCikar(playerid, response, listitem, inputtext[])
{
    new id = GetPVarInt(playerid, "IsyeriID");
	if (!response) return Dialog_Show(playerid,IsyeriSatilik,DIALOG_STYLE_LIST, "{2ECC71}isyeri - Satiliga Çikar", "Satiliga Çikar\nSisteme Sat {FF0000}(%s)\nisyerini Satmaktan Vazgeç", "Seç", "Geri",FormatNumber(Isyeri[id][isyeriKendiFiyati]/2));
	if (response)
	{
	    if (isnull(inputtext)) return Dialog_Show(playerid,IsyeriSatiligaCikar,DIALOG_STYLE_INPUT, "{2ECC71}isyeri - Satiliga Çikar", "isyerinizi kaç dolara satiliga çikarmak istiyorsunuz?:", "Tamam", "Geri");
	    if (!IsNumeric(inputtext)) return Dialog_Show(playerid,IsyeriSatiligaCikar,DIALOG_STYLE_INPUT, "{2ECC71}isyeri - Satiliga Çikar", "isyerinizi kaç dolara satiliga çikarmak istiyorsunuz?:", "Tamam", "Geri");
	    if (strval(inputtext) < 1)
	    {
	        HataMesajGonder(playerid, "Geçersiz fiyat girdiniz.");
	        return Dialog_Show(playerid,IsyeriSatiligaCikar,DIALOG_STYLE_INPUT, "{2ECC71}isyeri - Satiliga Çikar", "isyerinizi kaç dolara satiliga çikarmak istiyorsunuz?:", "Tamam", "Geri");
		}
		Isyeri[id][isyeriSatilik] = 1;
		Isyeri[id][isyeriFiyat] = strval(inputtext);
		Isyeri_Yenile(id);
		Isyeri_Kaydet(id);
		cmd_isyeri(playerid);
	}
	return 1;
}
Dialog:IsyeriSistemeSat(playerid, response, listitem, inputtext[])
{
	new id = GetPVarInt(playerid, "IsyeriID");
	if (!response) return Dialog_Show(playerid,IsyeriSatilik,DIALOG_STYLE_LIST, "{2ECC71}isyeri - Satiliga Çikar", "Satiliga Çikar\nSisteme Sat {FF0000}(%s)\nisyerini Satmaktan Vazgeç", "Seç", "Geri",FormatNumber(Isyeri[id][isyeriKendiFiyati]/2));
	if (response)
	{
	    Isyeri[id][isyeriSahip] = -1;
	    format(Isyeri[id][isyeriName],32, "Adsiz isyeri");
	    format(Isyeri[id][isyeriMuzik],256, "");
	    Isyeri[id][isyeriSatilik] = 0;
	    Isyeri[id][isyeriKilit] = 0;
	    Isyeri[id][isyeriKasa] = 0;
	    ParaVer(playerid,Isyeri[id][isyeriKendiFiyati]/2);
	    SunucuMesaji(playerid, "isyeriniz {2ECC71}%s {FFFFFF}miktar para karsiliginda satildi.",FormatNumber(Isyeri[id][isyeriKendiFiyati]/2));
	    Isyeri[id][isyeriFiyat] = Isyeri[id][isyeriKendiFiyati];
	    Isyeri_Yenile(id);
	    Isyeri_Kaydet(id);
	}
	return 1;
}
Dialog:IsyeriKasa(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_isyeri(playerid);
	if (response)
	{
	    if (listitem == 0)
	    {
	        new id = GetPVarInt(playerid, "IsyeriID");
			Dialog_Show(playerid,IsyeriKasaParaAl,DIALOG_STYLE_INPUT, "{2ECC71}isyeri - Para Al", "{FFFFFF}Lütfen isyeri kasasindan almak istediginiz para miktarini girin;\n{FFFFFF}Kasadaki para miktari: {2ECC71}%s ", "Al", "Geri",FormatNumber(Isyeri[id][isyeriKasa]));
		}
		if (listitem == 1)
		{
		    Dialog_Show(playerid,IsyeriKasaParaKoy,DIALOG_STYLE_INPUT, "{2ECC71}isyeri - Para Koy", "{FFFFFF}Lütfen isyeri kasasina koymak istediginiz para miktarini girin;", "Koy", "Geri");
		}
	}
	return 1;
}
Dialog:IsyeriKasaParaAl(playerid, response, listitem, inputtext[])
{
    if (!response) return Dialog_Show(playerid,IsyeriKasa,DIALOG_STYLE_LIST, "{2ECC71}isyeri - Kasa", "{2ECC71}Para Al\n{2ECC71}Para Koy", "Seç", "Geri");
    if (response)
    {
        new id = GetPVarInt(playerid, "IsyeriID");
        if (isnull(inputtext)) return Dialog_Show(playerid,IsyeriKasaParaAl,DIALOG_STYLE_INPUT, "{2ECC71}isyeri - Para Al", "{FFFFFF}Lütfen isyeri kasasindan almak istediginiz para miktarini girin;\n{FFFFFF}Kasadaki para miktari: {2ECC71}%s ", "Al", "Geri",FormatNumber(Isyeri[id][isyeriKasa]));
        if (!IsNumeric(inputtext)) return Dialog_Show(playerid,IsyeriKasaParaAl,DIALOG_STYLE_INPUT, "{2ECC71}isyeri - Para Al", "{FFFFFF}Lütfen isyeri kasasindan almak istediginiz para miktarini girin;\n{FFFFFF}Kasadaki para miktari: {2ECC71}%s ", "Al", "Geri",FormatNumber(Isyeri[id][isyeriKasa]));
        if (strval(inputtext) < 1)
        {
            HataMesajGonder(playerid, "Geçersiz miktar!");
            return Dialog_Show(playerid,IsyeriKasaParaAl,DIALOG_STYLE_INPUT, "{2ECC71}isyeri - Para Al", "{FFFFFF}Lütfen isyeri kasasindan almak istediginiz para miktarini girin;\n{FFFFFF}Kasadaki para miktari: {2ECC71}%s ", "Al", "Geri",FormatNumber(Isyeri[id][isyeriKasa]));
        }
        if (strval(inputtext) > Isyeri[id][isyeriKasa])
        {
            HataMesajGonder(playerid, "isyeri kasasinda yeterli para yok.");
            return Dialog_Show(playerid,IsyeriKasaParaAl,DIALOG_STYLE_INPUT, "{2ECC71}isyeri - Para Al", "{FFFFFF}Lütfen isyeri kasasindan almak istediginiz para miktarini girin;\n{FFFFFF}Kasadaki para miktari: {2ECC71}%s ", "Al", "Geri",FormatNumber(Isyeri[id][isyeriKasa]));
        }
        Isyeri[id][isyeriKasa] -= strval(inputtext);
        ParaVer(playerid,strval(inputtext));
        Isyeri_Kaydet(id);
        SunucuMesaji(playerid, "{FFFFFF}isyeri kasasindan {2ECC71}%s {FFFFFF}miktar para aldiniz.",FormatNumber(strval(inputtext)));
        Dialog_Show(playerid,IsyeriKasa,DIALOG_STYLE_LIST, "{2ECC71}isyeri - Kasa", "{2ECC71}Para Al\n{2ECC71}Para Koy", "Seç", "Geri");
    }
	return 1;
}
Dialog:IsyeriKasaParaKoy(playerid, response, listitem, inputtext[])
{
    if (!response) return Dialog_Show(playerid,IsyeriKasa,DIALOG_STYLE_LIST, "{2ECC71}isyeri - Kasa", "{2ECC71}Para Al\n{2ECC71}Para Koy", "Seç", "Geri");
    if (response)
    {
        new id = GetPVarInt(playerid, "IsyeriID");
        if (isnull(inputtext)) return Dialog_Show(playerid,IsyeriKasaParaKoy,DIALOG_STYLE_INPUT, "{2ECC71}isyeri - Para Koy", "{FFFFFF}Lütfen isyeri kasasina koymak istediginiz para miktarini girin;", "Koy", "Geri");
        if (!IsNumeric(inputtext)) return Dialog_Show(playerid,IsyeriKasaParaKoy,DIALOG_STYLE_INPUT, "{2ECC71}isyeri - Para Koy", "{FFFFFF}Lütfen isyeri kasasina koymak istediginiz para miktarini girin;", "Koy", "Geri");
        if (strval(inputtext) < 1)
        {
            HataMesajGonder(playerid, "Geçersiz miktar!");
            return Dialog_Show(playerid,IsyeriKasaParaKoy,DIALOG_STYLE_INPUT, "{2ECC71}isyeri - Para Koy", "{FFFFFF}Lütfen isyeri kasasina koymak istediginiz para miktarini girin;", "Koy", "Geri");
		}
		if (strval(inputtext) > PlayerData[playerid][pCash])
		{
		    HataMesajGonder(playerid, "Üzerinizde yeterli para yok.");
		    return Dialog_Show(playerid,IsyeriKasaParaKoy,DIALOG_STYLE_INPUT, "{2ECC71}isyeri - Para Koy", "{FFFFFF}Lütfen isyeri kasasina koymak istediginiz para miktarini girin;", "Koy", "Geri");
		}
		Isyeri[id][isyeriKasa] += strval(inputtext);
		ParaVer(playerid,-strval(inputtext));
        Isyeri_Kaydet(id);
        SunucuMesaji(playerid, "{FFFFFF}isyeri kasasina {2ECC71}%s {FFFFFF}miktar para koydunuz.",FormatNumber(strval(inputtext)));
        Dialog_Show(playerid,IsyeriKasa,DIALOG_STYLE_LIST, "{2ECC71}isyeri - Kasa", "{2ECC71}Para Al\n{2ECC71}Para Koy", "Seç", "Geri");
	}
	return 1;
}
Dialog:IsyeriUcretDuzenleme(playerid, response, listitem, inputtext[])
{
    if (!response) return cmd_isyeri(playerid);
    if (response)
    {
        new id = GetPVarInt(playerid, "IsyeriID");
        if (isnull(inputtext))
	    {
	        HataMesajGonder(playerid, "isyeri ücreti bos birakilamaz. Eger giris ücreti almasini istemiyorsan '0' yaz.");
	        return Dialog_Show(playerid,IsyeriUcretDuzenleme,DIALOG_STYLE_INPUT, "{2ECC71}isyeri - Giris Ücreti", "{FFFFFF}Lütfen isyeriniz için yeni bir giris ücreti belirleyin;\n{FFFFFF}su anki ücret: {FF9900}%s", "Degistir", "Geri",FormatNumber(Isyeri[id][isyeriGirisUcret]));
	    }
	    if (!IsNumeric(inputtext)) return Dialog_Show(playerid,IsyeriUcretDuzenleme,DIALOG_STYLE_INPUT, "{2ECC71}isyeri - Giris Ücreti", "{FFFFFF}Lütfen isyeriniz için yeni bir giris ücreti belirleyin;\n{FFFFFF}su anki ücret: {FF9900}%s", "Degistir", "Geri",FormatNumber(Isyeri[id][isyeriGirisUcret]));
	    if (strval(inputtext) < 0 || strval(inputtext) > 500)
	    {
	        HataMesajGonder(playerid, "isyeri giris ücreti 0'dan düsük, 500'den büyük olamaz.");
	        return Dialog_Show(playerid,IsyeriUcretDuzenleme,DIALOG_STYLE_INPUT, "{2ECC71}isyeri - Giris Ücreti", "{FFFFFF}Lütfen isyeriniz için yeni bir giris ücreti belirleyin;\n{FFFFFF}su anki ücret: {FF9900}%s", "Degistir", "Geri",FormatNumber(Isyeri[id][isyeriGirisUcret]));
	    }
	    Isyeri[id][isyeriGirisUcret] = strval(inputtext);
	    cmd_isyeri(playerid);
	    Isyeri_Yenile(id);
	    Isyeri_Kaydet(id);
    }
	return 1;
}
Dialog:IsyeriAdDuzenleme(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_isyeri(playerid);
	if (response)
	{
	    new id = GetPVarInt(playerid, "IsyeriID");
	    if (isnull(inputtext))
	    {
	        HataMesajGonder(playerid, "isyeri adi bos birakilamaz!");
	        return Dialog_Show(playerid,IsyeriAdDuzenleme,DIALOG_STYLE_INPUT, "{2ECC71}isyeri - Ad Düzenleme", "Lütfen bu isyeri için yeni bir ad girin;\nsu anki ad: %s", "Degistir", "Geri",Isyeri[id][isyeriName]);
	    }
	    if (strlen(inputtext) > 32)
	    {
	        HataMesajGonder(playerid, "isyeri adi 32 karakterden uzun olamaz!");
	        return Dialog_Show(playerid,IsyeriAdDuzenleme,DIALOG_STYLE_INPUT, "{2ECC71}isyeri - Ad Düzenleme", "Lütfen bu isyeri için yeni bir ad girin;\nsu anki ad: %s", "Degistir", "Geri",Isyeri[id][isyeriName]);
	    }
	    format(Isyeri[id][isyeriName], 32, inputtext);
	    Isyeri_Yenile(id);
	    Isyeri_Kaydet(id);
	    cmd_isyeri(playerid);
	}
	return 1;
}
Business_Inside(playerid, bool:option = false)
{
	if (PlayerData[playerid][pIsyeri] != -1)
	{
	    for (new i = 0; i != MAX_ISYERI; i ++)
	    {
			if (Isyeri[i][isyeriExists] && Isyeri[i][isyeriID] == PlayerData[playerid][pIsyeri] && GetPlayerInterior(playerid) == Isyeri[i][isyeriInterior] && GetPlayerVirtualWorld(playerid) > 0)
			{
			    if(!option)
			        return i;

				if(option)
				{
				    if(IsPlayerInRangeOfPoint(playerid, 2.5, Isyeri[i][isyeriInt][0], Isyeri[i][isyeriInt][1], Isyeri[i][isyeriInt][2]))
	  					return i;
				}
			}
		}
	}
	return -1;
}

stock Isyeri_Olustur(playerid,tip,fiyat)
{
    	static
	    Float:x,
	    Float:y,
	    Float:z,
		Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
	    for (new i = 0; i != MAX_ISYERI; i ++)
	    {
			if (!Isyeri[i][isyeriExists])
			{
			    Isyeri[i][isyeriExists] = true;
			    Isyeri[i][isyeriID] = i;

			    Isyeri[i][isyeriSahip] = -1;
			    Isyeri[i][isyeriFiyat] = fiyat;
			    Isyeri[i][isyeriKendiFiyati] = fiyat;
			    Isyeri[i][isyeriTip] = tip;
			    Isyeri[i][isyeriGirisUcret] = 0;
			    format(Isyeri[i][isyeriName],32, "Satýlýk Ýþyeri");
		     	format(Isyeri[i][isyeriMuzik],256, "");
		     	Isyeri[i][isyeriPos][0] = x;
		     	Isyeri[i][isyeriPos][1] = y;
		     	Isyeri[i][isyeriPos][2] = z;
		     	Isyeri[i][isyeriPos][3] = angle;
		     	Isyeri[i][isyeriSpawn][0] = x;
		     	Isyeri[i][isyeriSpawn][1] = y;
		     	Isyeri[i][isyeriSpawn][2] = z;
		     	Isyeri[i][isyeriSpawn][3] = angle;
		     	Isyeri[i][isyeriSatilik] = 0;
		     	Isyeri[i][isyeriVergiSure] = 0;

		     	switch (tip)
		     	{
		     		case 1: // Market
		     		{
		     		    Isyeri[i][isyeriInt][0] = -27.3074;
	                	Isyeri[i][isyeriInt][1] = -30.8741;
	                	Isyeri[i][isyeriInt][2] = 1003.5573;
	                	Isyeri[i][isyeriInt][3] = 0.0000;
						Isyeri[i][isyeriInterior] = 4;

						Isyeri[i][isyeriFiyatlar][0] = 5; // Zar
						Isyeri[i][isyeriFiyatlar][1] = 10; // Sigara
						Isyeri[i][isyeriFiyatlar][2] = 50; // Ip
						Isyeri[i][isyeriFiyatlar][3] = 50; // Goz bagi
						Isyeri[i][isyeriFiyatlar][4] = 60; // Sprey
						Isyeri[i][isyeriFiyatlar][5] = 5; // Gazoz
						Isyeri[i][isyeriFiyatlar][6] = 500; // Beyzbol Sopasi
						Isyeri[i][isyeriFiyatlar][7] = 500; // Maske
						Isyeri[i][isyeriFiyatlar][8] = 200; // Benzin Kutusu
						Isyeri[i][isyeriFiyatlar][9] = 1000; // Barbeku
						Isyeri[i][isyeriFiyatlar][10] = 20; // Köfte
						Isyeri[i][isyeriFiyatlar][11] = 25; // Tavuk Eti
						Isyeri[i][isyeriFiyatlar][12] = 30; // Dana Eti
						Isyeri[i][isyeriFiyatlar][13] = 200; // Tamir kiti
						Isyeri[i][isyeriFiyatlar][14] = 2000; // Çadir
						Isyeri[i][isyeriFiyatlar][15] = 500; // Kamp atesi
						//Isyeri[i][isyeriFiyatlar][16] = 1000; // Yan keski

						Isyeri[i][isyeriUrunSayisi][0] = 5;
						Isyeri[i][isyeriUrunSayisi][1] = 5;
						Isyeri[i][isyeriUrunSayisi][2] = 5;
						Isyeri[i][isyeriUrunSayisi][3] = 5;
						Isyeri[i][isyeriUrunSayisi][4] = 5;
						Isyeri[i][isyeriUrunSayisi][5] = 5;
						Isyeri[i][isyeriUrunSayisi][6] = 5;
						Isyeri[i][isyeriUrunSayisi][7] = 5;
						Isyeri[i][isyeriUrunSayisi][8] = 5;
						Isyeri[i][isyeriUrunSayisi][9] = 5;
						Isyeri[i][isyeriUrunSayisi][10] = 5;
						Isyeri[i][isyeriUrunSayisi][11] = 5;
						Isyeri[i][isyeriUrunSayisi][12] = 5;
						Isyeri[i][isyeriUrunSayisi][13] = 5;
						Isyeri[i][isyeriUrunSayisi][14] = 5;
						Isyeri[i][isyeriUrunSayisi][15] = 5;
						Isyeri[i][isyeriUrunSayisi][16] = 5;
		     		}
		     		case 2: // Kiyafet Magazasi
		     		{
		     		    Isyeri[i][isyeriInt][0] = 161.4801;
	                	Isyeri[i][isyeriInt][1] = -96.5368;
	                	Isyeri[i][isyeriInt][2] = 1001.8047;
	                	Isyeri[i][isyeriInt][3] = 0.0000;
						Isyeri[i][isyeriInterior] = 18;

						Isyeri[i][isyeriFiyatlar][0] = 100;
						Isyeri[i][isyeriFiyatlar][1] = 250;
						Isyeri[i][isyeriFiyatlar][2] = 50;

						Isyeri[i][isyeriUrunSayisi][0] = 5;
						Isyeri[i][isyeriUrunSayisi][1] = 5;
						Isyeri[i][isyeriUrunSayisi][2] = 5;
		     		}
		     		case 3: // Fast Food
		     		{
		     		    Isyeri[i][isyeriInt][0] = 363.3402; //
	                	Isyeri[i][isyeriInt][1] = -74.6679;
	                	Isyeri[i][isyeriInt][2] = 1001.5078;
	                	Isyeri[i][isyeriInt][3] = 315.0000;
						Isyeri[i][isyeriInterior] = 10;
						Isyeri[i][isyeriFiyatlar][0] = 3; // Su
						Isyeri[i][isyeriFiyatlar][1] = 8; // Kola
						Isyeri[i][isyeriFiyatlar][2] = 10; // Salata
						Isyeri[i][isyeriFiyatlar][3] = 12; // Tavuk
						Isyeri[i][isyeriFiyatlar][4] = 15; // Patates
						Isyeri[i][isyeriFiyatlar][5] = 20; // Hamburger

						Isyeri[i][isyeriUrunSayisi][0] = 5;
						Isyeri[i][isyeriUrunSayisi][1] = 5;
						Isyeri[i][isyeriUrunSayisi][2] = 5;
						Isyeri[i][isyeriUrunSayisi][3] = 5;
						Isyeri[i][isyeriUrunSayisi][4] = 5;
						Isyeri[i][isyeriUrunSayisi][5] = 5;
		     		}
		     		case 4: // Galeri
		     		{
		     		    Isyeri[i][isyeriInt][0] = 1494.5612;
		            	Isyeri[i][isyeriInt][1] = 1304.2061;
		            	Isyeri[i][isyeriInt][2] = 1093.2891;
		            	Isyeri[i][isyeriInt][3] = 0.0000;
						Isyeri[i][isyeriInterior] = 3;
		     		}
		     		case 5: // Elektronik
		     		{
		     		    Isyeri[i][isyeriInt][0] = 2310.3713;
	   					Isyeri[i][isyeriInt][1] = 997.7480;
				   		Isyeri[i][isyeriInt][2] = -53.9590;
	      				Isyeri[i][isyeriInt][3] = 271.6157;
						Isyeri[i][isyeriInterior] = 0;

						Isyeri[i][isyeriFiyatlar][0] = 500; // Telefon
						Isyeri[i][isyeriFiyatlar][1] = 200; // Portatif Radyo (TELSIZ)
						Isyeri[i][isyeriFiyatlar][2] = 1000; //  Boombox
						Isyeri[i][isyeriFiyatlar][3] = 50; // Kamera

						Isyeri[i][isyeriUrunSayisi][0] = 5;
						Isyeri[i][isyeriUrunSayisi][1] = 5;
						Isyeri[i][isyeriUrunSayisi][2] = 5;
						Isyeri[i][isyeriUrunSayisi][3] = 5;
		     		}
		     		case 6: // Bar/Pub
		     		{
		     		    Isyeri[i][isyeriInt][0] = 493.3361;
		   				Isyeri[i][isyeriInt][1] = -24.2685;
					   	Isyeri[i][isyeriInt][2] = 1000.6797;
		      			Isyeri[i][isyeriInt][3] = 3.3758;
						Isyeri[i][isyeriInterior] = 17;

						Isyeri[i][isyeriFiyatlar][0] = 10; // Bira
						Isyeri[i][isyeriFiyatlar][1] = 50; // Viski
						Isyeri[i][isyeriFiyatlar][2] = 15; // Tekila
						Isyeri[i][isyeriFiyatlar][3] = 30; // sarap
						Isyeri[i][isyeriFiyatlar][4] = 50; // Votka
						Isyeri[i][isyeriFiyatlar][5] = 100; // sampanya

						Isyeri[i][isyeriUrunSayisi][0] = 5;
						Isyeri[i][isyeriUrunSayisi][1] = 5;
						Isyeri[i][isyeriUrunSayisi][2] = 5;
						Isyeri[i][isyeriUrunSayisi][3] = 5;
						Isyeri[i][isyeriUrunSayisi][4] = 5;
						Isyeri[i][isyeriUrunSayisi][5] = 5;
		     		}
		     		case 7:
		     		{
			     		Isyeri[i][isyeriInt][0] = 1133.1000;
	  					Isyeri[i][isyeriInt][1] = -15.8102;
				   		Isyeri[i][isyeriInt][2] = 1000.6797;
	     				Isyeri[i][isyeriInt][3] = 3.0235;
	     				Isyeri[i][isyeriInterior] = 12;
		     		}
		 		}

		 		Isyeri[i][isyeriKilit] = 0;
   				Isyeri[i][isyeriKasa] = 0;

				new query[256];

				mysql_format(g_SQL, query, sizeof query, "INSERT INTO `isyerleri` (`ID`, `iSahip`) VALUES ('%d', '-1')", Isyeri[i][isyeriID]);
	     		mysql_query (g_SQL, query);

                Isyeri_Yenile(Isyeri[i][isyeriID]);
				Isyeri_Kaydet(Isyeri[i][isyeriID]);

				return Isyeri[i][isyeriID];
			}
	    }
	}
	return -1;
}

stock IsyerleriYukle()
{
	mysql_query(g_SQL, "SELECT * FROM `isyerleri`");

	new rows = cache_num_rows();
	printf("» Toplam %d is yeri yüklendi.", rows);

	if (rows)
	{
	    new isID, str[256];
		for (new i = 0; i < rows; i ++)
		{
		    cache_get_value_name_int(i, "ID", isID);

		    Isyeri[isID][isyeriExists] = true;
		    Isyeri[isID][isyeriID] = isID;

		    cache_get_value_name(i, "iIsim", Isyeri[isID][isyeriName],32);
		    cache_get_value_name(i, "iMessage", Isyeri[isID][isyeriMesaj],100);
		    cache_get_value_name_int(i, "iSahip", Isyeri[isID][isyeriSahip]);
		    cache_get_value_name_int(i, "iTip", Isyeri[isID][isyeriTip]);
		    cache_get_value_name_int(i, "iFiyat", Isyeri[isID][isyeriFiyat]);
		    cache_get_value_name_int(i, "iKendiFiyat", Isyeri[isID][isyeriKendiFiyati]);
		    cache_get_value_name_int(i, "iSatilik", Isyeri[isID][isyeriSatilik]);
		    cache_get_value_name_int(i, "iVergi", Isyeri[isID][isyeriVergi]);
		    cache_get_value_name_int(i, "iVergiSure", Isyeri[isID][isyeriVergiSure]);
		    cache_get_value_name_int(i, "iGirisUcret", Isyeri[isID][isyeriGirisUcret]);
		    cache_get_value_name(i, "iMuzik", Isyeri[isID][isyeriMuzik],256);
		    cache_get_value_name_float(i, "iPosX", Isyeri[isID][isyeriPos][0]);
		    cache_get_value_name_float(i, "iPosY", Isyeri[isID][isyeriPos][1]);
		    cache_get_value_name_float(i, "iPosZ", Isyeri[isID][isyeriPos][2]);
		    cache_get_value_name_float(i, "iPosA", Isyeri[isID][isyeriPos][3]);
		    cache_get_value_name_float(i, "iIntX", Isyeri[isID][isyeriInt][0]);
		    cache_get_value_name_float(i, "iIntY", Isyeri[isID][isyeriInt][1]);
		    cache_get_value_name_float(i, "iIntZ", Isyeri[isID][isyeriInt][2]);
		    cache_get_value_name_float(i, "iIntA", Isyeri[isID][isyeriInt][3]);
		    cache_get_value_name_float(i, "iSpawnX", Isyeri[isID][isyeriSpawn][0]);
		    cache_get_value_name_float(i, "iSpawnY", Isyeri[isID][isyeriSpawn][1]);
		    cache_get_value_name_float(i, "iSpawnZ", Isyeri[isID][isyeriSpawn][2]);
		    cache_get_value_name_float(i, "iSpawnA", Isyeri[isID][isyeriSpawn][3]);
		    cache_get_value_name_int(i, "iInterior", Isyeri[isID][isyeriInterior]);
		    cache_get_value_name_int(i, "iKilit", Isyeri[isID][isyeriKilit]);
		    cache_get_value_name_int(i, "iKasa", Isyeri[isID][isyeriKasa]);

		    for (new j = 0; j < 20; j ++)

			{
				format(str, 32, "iFiyat%d", j + 1);
				cache_get_value_name_int(i, str, Isyeri[isID][isyeriFiyatlar][j]);

				format(str,32, "iUrun%d",j+1);
				cache_get_value_name_int(i, str, Isyeri[isID][isyeriUrunSayisi][j]);
			}
		}

		for (new i; i < MAX_ISYERI; i++) if (Isyeri[i][isyeriExists])
		{
		    if (Isyeri[i][isyeriTip] == 4)
			{
				mysql_format(g_SQL, str, sizeof str, "SELECT * FROM `galeriaraclar` WHERE `ID` = '%d'", Isyeri[i][isyeriID]);
				mysql_tquery(g_SQL, str, "Business_LoadCars", "d", i);
			}
		    Isyeri_Yenile(Isyeri[i][isyeriID]);
		}
	}
}

forward Business_LoadCars(bizid);
public Business_LoadCars(bizid)
{
	new rows = cache_num_rows();

	if (rows)
	{
	    new lcID;
		for (new i = 0; i != rows; i ++)
		{
			cache_get_value_name_int(i, "vehID", lcID);

			DealershipCars[bizid][lcID][vehID] = lcID;

			cache_get_value_name_int(i, "vehModel", DealershipCars[bizid][lcID][vehModel]);
			cache_get_value_name_int(i, "vehPrice", DealershipCars[bizid][lcID][vehPrice]);
		}
	}
	return 1;
}

stock Isyeri_Urun(playerid,bizid)
{
    if (bizid == -1 || !Isyeri[bizid][isyeriExists])
	    return 0;

	new str[850],string[400];
	strcat(str, "Ürün Adi\tFiyat\n");
	switch (Isyeri[bizid][isyeriTip])
	{
	    case 1:
	    {
	        format(string,sizeof(string), "Zar\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][0]));
	        strcat(str,string);
	        format(string,sizeof(string), "Sigara\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][1]));
	        strcat(str,string);
	        format(string,sizeof(string), "Ip\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][2]));
	        strcat(str,string);
	        format(string,sizeof(string), "Göz Bagi\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][3]));
	        strcat(str,string);
         format(string,sizeof(string), "Sprey\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][4]));
	        strcat(str,string);
	        format(string,sizeof(string), "Gazoz\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][5]));
	        strcat(str,string);
	        format(string,sizeof(string), "Beyzbol Sopasi\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][6]));
	        strcat(str,string);
	        format(string,sizeof(string), "Maske\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][7]));
	        strcat(str,string);
	        format(string,sizeof(string), "Benzin Kutusu\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][8]));
	        strcat(str,string);
	        format(string,sizeof(string), "Barbekü\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][9]));
	        strcat(str,string);
	        format(string,sizeof(string), "Köfte\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][10]));
	        strcat(str,string);
	        format(string,sizeof(string), "Tavuk Eti\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][11]));
	        strcat(str,string);
	        format(string,sizeof(string), "Dana Eti\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][12]));
	        strcat(str,string);
            format(string,sizeof(string), "Tamir Kiti\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][13]));
	        strcat(str,string);
	        format(string,sizeof(string), "Portatif Çadir\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][14]));
	        strcat(str,string);
	        format(string,sizeof(string), "Kamp Atesi\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][15]));
	        strcat(str,string);
	        /*format(string,sizeof(string), "Yan Keski\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][16]));
	        strcat(str,string);*/
	    }
	    case 2:
	    {
	        format(string,sizeof(string), "Normal Kiyafetler\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][0]));
	        strcat(str,string);
	        format(string,sizeof(string), "Özel Kiyafetler\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][1]));
	        strcat(str,string);
	        format(string,sizeof(string), "Aksesuarlar\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][2]));
	        strcat(str,string);
	    }
	    case 3:
	    {
	        format(string,sizeof(string), "Su\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][0]));
	        strcat(str,string);
	        format(string,sizeof(string), "Kola\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][1]));
	        strcat(str,string);
	        format(string,sizeof(string), "Salata\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][2]));
	        strcat(str,string);
	        format(string,sizeof(string), "Tavuk\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][3]));
	        strcat(str,string);
	        format(string,sizeof(string), "Patates Kizartmasi\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][4]));
	        strcat(str,string);
	        format(string,sizeof(string), "Hamburger\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][5]));
	        strcat(str,string);
	    }
	    case 5:
	    {
	        format(string,sizeof(string), "Telefon\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][0]));
	        strcat(str,string);
	        format(string,sizeof(string), "Dijital Kamera\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][3]));
	        strcat(str,string);
	        format(string,sizeof(string), "Telsiz\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][1]));
	        strcat(str,string);
	        format(string,sizeof(string), "Boombox\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][2]));
	        strcat(str,string);
	    }
	    case 6:
	    {
	        format(string,sizeof(string), "Bira\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][0]));
	        strcat(str,string);
	        format(string,sizeof(string), "Viski\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][1]));
	        strcat(str,string);
	        format(string,sizeof(string), "Tekila\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][2]));
	        strcat(str,string);
	        format(string,sizeof(string), "sarap\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][3]));
	        strcat(str,string);
	        format(string,sizeof(string), "Votka\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][4]));
	        strcat(str,string);
	        format(string,sizeof(string), "sampanya\t{2ECC71}%s\n",FormatNumber(Isyeri[bizid][isyeriFiyatlar][5]));
	        strcat(str,string);
	    }
	}
	Dialog_Show(playerid,IsyeriUrunAl,DIALOG_STYLE_TABLIST_HEADERS, "Ürün Satin Al",str, "Satin Al", "{FF6347}Kapat");
	return 1;
}
stock Isyeri_AracMenu(playerid,bizid)
{
    new string[2056];
	string[0] = 0;
    for (new i = 0; i != MAX_DEALERSHIP_CARS; i ++)
	{
		if (DealershipCars[bizid][i][vehModel]) {
			format(string, sizeof(string), "%s%d\t~g~%s\n", string, DealershipCars[bizid][i][vehModel], FormatNumber(DealershipCars[bizid][i][vehPrice]));
		}
	}
    ShowPlayerDialog(playerid, 59, DIALOG_STYLE_PREVMODEL, "Araclar", string, "Sec", "Iptal");
    return 1;
}
Dialog:IsyeriUrunAl(playerid, response, listitem, inputtext[])
{
    static
	    bizid = -1,
		price;

	if ((bizid = Business_Inside(playerid)) != -1 && response)
	{
	    price = Isyeri[bizid][isyeriFiyatlar][listitem];

	   if (PlayerData[playerid][pCash] < price) return HataMesajGonder(playerid, "Bu ürünü almak için yeterli paraniz yok.");
	    if (Isyeri[bizid][isyeriUrunSayisi][listitem] <= 0) return HataMesajGonder(playerid, "Bu ürün bitmis.");
	    if (Isyeri[bizid][isyeriTip] == 2)
	    {
	        switch (listitem)
	        {
	            case 0:
	            {
					new yazi[1000];
					switch (PlayerData[playerid][pCinsiyet])
					{
                        case 1:
                        {
                            for (new i; i<sizeof(g_aMaleSkins); i++)
                            {
                                if (g_aMaleSkins[i] == 0) continue;
                                format(yazi,sizeof(yazi), "%s%d\n",yazi,g_aMaleSkins[i]);
                            }
                            ShowPlayerDialog(playerid, 51, DIALOG_STYLE_PREVMODEL, "Kiyafetler",yazi, "Sec", "Iptal");
                        }

						case 2:
						{
						    for (new i; i<sizeof(g_aFemaleSkins); i++)
                            {
                                format(yazi,sizeof(yazi), "%s%d\n",yazi,g_aFemaleSkins[i]);
                            }
                            ShowPlayerDialog(playerid, 51, DIALOG_STYLE_PREVMODEL, "Kiyafetler",yazi, "Sec", "Iptal");
						}
                    }
	            }
	            case 1:
	            {
	                new yazi[300];
	                switch (PlayerData[playerid][pCinsiyet])
	                {
	                    case 1:
	                    {
	                        for (new i; i<sizeof(OzelErkekKiyafetler); i++)
                            {
                                if (OzelErkekKiyafetler[i] == 0) continue;
                                format(yazi,sizeof(yazi), "%s%d\n",yazi,OzelErkekKiyafetler[i]);
                            }
                            ShowPlayerDialog(playerid, 52, DIALOG_STYLE_PREVMODEL, "Kiyafetler",yazi, "Sec", "Iptal");
	                    }
	                    case 2:
	                    {
	                        for (new i; i<sizeof(OzelBayanKiyafetler); i++)
                            {
                                if (OzelBayanKiyafetler[i] == 0) continue;
                                format(yazi,sizeof(yazi), "%s%d\n",yazi,OzelBayanKiyafetler[i]);
                            }
                            ShowPlayerDialog(playerid, 52, DIALOG_STYLE_PREVMODEL, "Kiyafetler",yazi, "Sec", "Iptal");
	                    }
	                }
	            }
	            case 2:
	            {
	                AksesuarlariGoster(playerid,1);
	            }
	        }
	    }
	    if (Isyeri[bizid][isyeriTip] == 3)
	    {
	        switch (listitem)
	        {
	            case 0:
	            {
					if (PlayerData[playerid][pSu] >= 5) return HataMesajGonder(playerid, "Daha fazla su alamazsin.");

					ParaVer(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s cüzdanindan %s çikarir ve kasiyere dogru uzatarak 'Su' satin alir.", ReturnName(playerid, 0), FormatNumber(price));
					PlayerData[playerid][pSu]++;
					MesajGonder(playerid, "Bir adet su satin aldiniz. Suyunuzu istediginiz zaman içebilirsiniz. {2ECC71}(/su)");
					if (Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1) Isyeri[bizid][isyeriUrunSayisi][listitem]--;
					Isyeri[bizid][isyeriKasa] += price;

					Isyeri_Kaydet(bizid);
				}
				case 1:
				{
                    if (ReturnHealth(playerid) <= 95) { SetPlayerHealth(playerid, ReturnHealth(playerid) + 5); }

					ParaVer(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s cüzdanindan %s çikarir ve kasiyere dogru uzatarak 'Kola' satin alir.", ReturnName(playerid, 0), FormatNumber(price));
					if (Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1) Isyeri[bizid][isyeriUrunSayisi][listitem]--;
					Isyeri[bizid][isyeriKasa] += price;

					Isyeri_Kaydet(bizid);
				}
				case 2:
				{
				    if (ReturnHealth(playerid) <= 90) { SetPlayerHealth(playerid, ReturnHealth(playerid) + 10); }
					ParaVer(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s cüzdanindan %s çikarir ve kasiyere dogru uzatarak 'Salata' satin alir.", ReturnName(playerid, 0), FormatNumber(price));

					if (Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1) Isyeri[bizid][isyeriUrunSayisi][listitem]--;
					Isyeri[bizid][isyeriKasa] += price;

					Isyeri_Kaydet(bizid);
				}
				case 3:
				{
				    if (ReturnHealth(playerid) <= 85) { SetPlayerHealth(playerid, ReturnHealth(playerid) + 15); }
					ParaVer(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s cüzdanindan %s çikarir ve kasiyere dogru uzatarak 'Tavuk Nuggets' satin alir.", ReturnName(playerid, 0), FormatNumber(price));

					if (Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1) Isyeri[bizid][isyeriUrunSayisi][listitem]--;
					Isyeri[bizid][isyeriKasa] += price;

					Isyeri_Kaydet(bizid);
				}
				case 4:
				{
				    if (ReturnHealth(playerid) <= 80) { SetPlayerHealth(playerid, ReturnHealth(playerid) + 20); }
					ParaVer(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s cüzdanindan %s çikarir ve kasiyere dogru uzatarak 'Patates Kizartmasi' satin alir.", ReturnName(playerid, 0), FormatNumber(price));

					if (Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1) Isyeri[bizid][isyeriUrunSayisi][listitem]--;
					Isyeri[bizid][isyeriKasa] += price;

					Isyeri_Kaydet(bizid);
				}
				case 5:
				{
				    if (ReturnHealth(playerid) <= 75) { SetPlayerHealth(playerid, ReturnHealth(playerid) + 25); }
					ParaVer(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s cüzdanindan %s çikarir ve kasiyere dogru uzatarak 'Hamburger' satin alir.", ReturnName(playerid, 0), FormatNumber(price));

					if (Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1) Isyeri[bizid][isyeriUrunSayisi][listitem]--;
					Isyeri[bizid][isyeriKasa] += price;

					Isyeri_Kaydet(bizid);
				}
	        }
	    }
	    if (Isyeri[bizid][isyeriTip] == 5)
	        {
	            switch (listitem)
	            {
	                case 0:
	                {
	                    if (PlayerData[playerid][pTelefon] != -1)
							return HataMesajGonder(playerid, "Zaten telefonunuz var.");

	                    PlayerData[playerid][pTelefon] = RandomEx(10000, 100000);
	                    ParaVer(playerid, -price);

	                    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s cüzdanindan %s çikarir ve kasiyere dogru uzatarak Telefon satin alir.", ReturnName(playerid, 0), FormatNumber(price));
	                    MesajGonder(playerid, "Telefon satin alindi. Numaraniz: %d", PlayerData[playerid][pTelefon]);
	                    MesajGonder(playerid, "Tarife satin almak isterseniz 555 numarasini arayabilirsiniz.");
	                    if (Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1) Isyeri[bizid][isyeriUrunSayisi][listitem]--;
	                    Isyeri[bizid][isyeriKasa] += price;
	                    Isyeri_Kaydet(bizid);
	                }
	                case 2:
					{
					    if (PlayerData[playerid][pRadyo] != 0) return HataMesajGonder(playerid, "Zaten portatif radyonuz var.");
					    PlayerData[playerid][pRadyo] = 1;
					    PlayerData[playerid][pFrekans] = 0;
					    ParaVer(playerid, -price);
					    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s cüzdanindan %s çikarir ve kasiyere dogru uzatarak Portatif Radyo satin alir.", ReturnName(playerid, 0), FormatNumber(price));
					    MesajGonder(playerid, "Portatif Radyo satin alindi. /frekans ile frekansinizi ayarlayabilirsiniz. /pr ile konusabilirsiniz.");
					    if (Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1) Isyeri[bizid][isyeriUrunSayisi][listitem]--;
	                    Isyeri[bizid][isyeriKasa] += price;
	                    Isyeri_Kaydet(bizid);
	                }
	                case 3:
	                {
	                    if (PlayerData[playerid][pBoombox] != 0) return HataMesajGonder(playerid, "Zaten Boombox satin almissiniz.");
	                    PlayerData[playerid][pBoombox] = 1;
	                    ParaVer(playerid, -price);
	                    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s cüzdanindan %s çikarir ve kasiyere dogru uzatarak Boombox satin alir.", ReturnName(playerid, 0), FormatNumber(price));
	                    MesajGonder(playerid, "Boombox satin aldiniz. (/boombox)");
	                    if (Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1) Isyeri[bizid][isyeriUrunSayisi][listitem]--;
	                    Isyeri[bizid][isyeriKasa] += price;
	                    Isyeri_Kaydet(bizid);
	                }
	                case 1:
	                {
	                    if (PlayerHasWeapon(playerid, 43)) return HataMesajGonder(playerid, "Zaten kameraniz var.");
	                    GiveWeaponToPlayer(playerid, 43, 50);
	                    ParaVer(playerid, -price);
	                    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s cüzdanindan %s çikarir ve kasiyere dogru uzatarak Kamera satin alir.", ReturnName(playerid, 0), FormatNumber(price));
	                    MesajGonder(playerid, "Kamera satin aldiniz.");
	                    if (Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1) Isyeri[bizid][isyeriUrunSayisi][listitem]--;
	                    Isyeri[bizid][isyeriKasa] += price;
	                    Isyeri_Kaydet(bizid);

	                }
	            }
			}
			if (Isyeri[bizid][isyeriTip] == 1)
			{
			    switch (listitem)
			    {
			        case 0:
			        {
			            if (PlayerData[playerid][pEsyalar][0] != 0) return HataMesajGonder(playerid, "Zaten zariniz var.");

			            PlayerData[playerid][pEsyalar][0] = 1;
			            ParaVer(playerid, -price);
			            SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s cüzdanindan %s çikarir ve kasiyere dogru uzatarak Zar satin alir.", ReturnName(playerid, 0), FormatNumber(price));
			            MesajGonder(playerid, "Zar satin aldiniz. (/zarat, /zarver, /zarcift)");
			            if (Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1) Isyeri[bizid][isyeriUrunSayisi][listitem]--;
	                    Isyeri[bizid][isyeriKasa] += price;
	                    Isyeri_Kaydet(bizid);
			        }
			        case 1:
			        {
			            if (PlayerData[playerid][pEsyalar][1] != 0) return HataMesajGonder(playerid, "Zaten sigaraniz var.");

			            PlayerData[playerid][pEsyalar][1] += 5;
			            ParaVer(playerid, -price);
			            SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s cüzdanindan %s çikarir ve kasiyere dogru uzatarak Sigara satin alir.", ReturnName(playerid, 0), FormatNumber(price));
			            MesajGonder(playerid, "5 adet sigara satin aldiniz. (/sigara)");
			            if (Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1)
			            {
			                Isyeri[bizid][isyeriUrunSayisi][listitem]--;
		                    Isyeri[bizid][isyeriKasa] += price;
		                    Isyeri_Kaydet(bizid);
	                    }
			        }
			        case 2:
			        {
                        if (PlayerData[playerid][pLevel] < 5) return HataMesajGonder(playerid, "Bu ürünü satin alabilmek için en az 5 seviye olmalisiniz.");
			            if (PlayerData[playerid][pEsyalar][2] >= 2) return HataMesajGonder(playerid, "En fazla 2 ip satin alabilirsin.");

			            PlayerData[playerid][pEsyalar][2]++;
			            ParaVer(playerid, -price);
			            SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s cüzdanindan %s çikarir ve kasiyere dogru uzatarak ip satin alir.", ReturnName(playerid, 0), FormatNumber(price));
			            MesajGonder(playerid, "Bir adet ip satin aldiniz. (/ipbagla)");
			            if (Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1)
			            {
			                Isyeri[bizid][isyeriUrunSayisi][listitem]--;
		                    Isyeri[bizid][isyeriKasa] += price;
		                    Isyeri_Kaydet(bizid);
	                    }
			        }
			        case 3:
			        {
						if (PlayerData[playerid][pLevel] < 5) return HataMesajGonder(playerid, "Bu ürünü satin alabilmek için en az 5 seviye olmalisiniz.");
			            if (PlayerData[playerid][pEsyalar][3] >= 2) return HataMesajGonder(playerid, "En fazla 2 göz bagi satin alabilirsin.");

			            PlayerData[playerid][pEsyalar][3]++;
			            ParaVer(playerid, -price);
			            SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s cüzdanindan %s çikarir ve kasiyere dogru uzatarak göz bagi satin alir.", ReturnName(playerid, 0), FormatNumber(price));
			            MesajGonder(playerid, "Bir adet göz bagi satin aldiniz. (/gozbagla)");
			            if (Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1)
			            {
			                Isyeri[bizid][isyeriUrunSayisi][listitem]--;
		                    Isyeri[bizid][isyeriKasa] += price;
		                    Isyeri_Kaydet(bizid);
	                    }
			        }
			        case 5:
			        {
			            CanAyarla(playerid, ReturnHealth(playerid)+20);
			            ParaVer(playerid, -price);
			            SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s cüzdanindan %s çikarir ve kasiyere dogru uzatarak Gazoz satin alir.", ReturnName(playerid, 0), FormatNumber(price));
			            MesajGonder(playerid, "Gazoz satin aldiniz. (+20 can)");
			            if (Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1)
			            {
			                Isyeri[bizid][isyeriUrunSayisi][listitem]--;
		                    Isyeri[bizid][isyeriKasa] += price;
		                    Isyeri_Kaydet(bizid);
	                    }
			        }
			        case 6:
			        {
			            if (PlayerHasWeapon(playerid, 5)) return HataMesajGonder(playerid, "Zaten Beyzbol sopaniz bulunmakta.");

			            GiveWeaponToPlayer(playerid, 5, 1);
			            ParaVer(playerid, -price);
			            SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s cüzdanindan %s çikarir ve kasiyere dogru uzatarak Beyzbol Sopasi satin alir.", ReturnName(playerid, 0), FormatNumber(price));
			            MesajGonder(playerid, "Beyzbol Sopasi satin aldiniz.");
			            if (Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1)
			            {
			                Isyeri[bizid][isyeriUrunSayisi][listitem]--;
		                    Isyeri[bizid][isyeriKasa] += price;
		                    Isyeri_Kaydet(bizid);
	                    }
			        }
			        case 7:
			        {
			            if (PlayerData[playerid][pEsyalar][4] != 0) return HataMesajGonder(playerid, "Zaten maskeniz bulunmakta.");

			            PlayerData[playerid][pEsyalar][4] = 1;
			            ParaVer(playerid, -price);
			            SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s cüzdanindan %s çikarir ve kasiyere dogru uzatarak Maske satin alir.", ReturnName(playerid, 0), FormatNumber(price));
			            MesajGonder(playerid, "Maske satin aldiniz. (/maske)");
			            SunucuMesaji(playerid, "Maskeyi kullanabilmek için maske kullanim hakkiniz olmalidir. (/oocmarket)");
			            if (Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1)
			            {
			                Isyeri[bizid][isyeriUrunSayisi][listitem]--;
		                    Isyeri[bizid][isyeriKasa] += price;
		                    Isyeri_Kaydet(bizid);
	                    }
			        }
			        case 8:
			        {
			            if (PlayerData[playerid][pEsyalar][5] >= 3) return HataMesajGonder(playerid, "En fazla 3 benzin bidonu alabilirsiniz.");

			            PlayerData[playerid][pEsyalar][5]++;
			            ParaVer(playerid, -price);
			            SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s cüzdanindan %s çikarir ve kasiyere dogru uzatarak Benzin Bidonu satin alir.", ReturnName(playerid, 0), FormatNumber(price));
			            MesajGonder(playerid, "Benzin Kutusu satin aldiniz. (/benzinkutusu)");
			            if (Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1)
			            {
			                Isyeri[bizid][isyeriUrunSayisi][listitem]--;
		                    Isyeri[bizid][isyeriKasa] += price;
		                    Isyeri_Kaydet(bizid);
	                    }
			        }
			        case 9:
			        {
			            if (PlayerData[playerid][pEsyalar][6] != 0) return HataMesajGonder(playerid, "Zaten Barbekünüz bulunmakta.");

			            PlayerData[playerid][pEsyalar][6] = 1;
			            ParaVer(playerid, -price);
			            SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s cüzdanindan %s çikarir ve kasiyere dogru uzatarak Barbekü satin alir.", ReturnName(playerid, 0), FormatNumber(price));
			            MesajGonder(playerid, "Barbekü satin aldiniz. (/barbeku)");
			            if (Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1)
			            {
			                Isyeri[bizid][isyeriUrunSayisi][listitem]--;
		                    Isyeri[bizid][isyeriKasa] += price;
		                    Isyeri_Kaydet(bizid);
	                    }
			        }
			        case 10:
			        {
			            if (PlayerData[playerid][pEsyalar][7] >= 5) return HataMesajGonder(playerid, "En fazla 5 köfte satin alabilirsiniz.");

			            PlayerData[playerid][pEsyalar][7]++;
			            ParaVer(playerid, -price);
			            SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s cüzdanindan %s çikarir ve kasiyere dogru uzatarak Köfte satin alir.", ReturnName(playerid, 0), FormatNumber(price));
			            MesajGonder(playerid, "Köfte satin aldiniz.");
			            if (Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1)
			            {
			                Isyeri[bizid][isyeriUrunSayisi][listitem]--;
		                    Isyeri[bizid][isyeriKasa] += price;
		                    Isyeri_Kaydet(bizid);
	                    }
			        }
			        case 11:
			        {
			            if (PlayerData[playerid][pEsyalar][8] >= 5) return HataMesajGonder(playerid, "En fazla 5 Tavuk eti satin alabilirsiniz.");

			            PlayerData[playerid][pEsyalar][8]++;
			            ParaVer(playerid, -price);
			            SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s cüzdanindan %s çikarir ve kasiyere dogru uzatarak Tavuk eti satin alir.", ReturnName(playerid, 0), FormatNumber(price));
			            MesajGonder(playerid, "Tavuk eti satin aldiniz.");
			            if (Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1)
			            {
			                Isyeri[bizid][isyeriUrunSayisi][listitem]--;
		                    Isyeri[bizid][isyeriKasa] += price;
		                    Isyeri_Kaydet(bizid);
	                    }
					}
					case 12:
					{
					    if (PlayerData[playerid][pEsyalar][9] >= 5) return HataMesajGonder(playerid, "En fazla 5 Dana eti satin alabilirsiniz.");

			            PlayerData[playerid][pEsyalar][9]++;
			            ParaVer(playerid, -price);
			            SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s cüzdanindan %s çikarir ve kasiyere dogru uzatarak Dana eti satin alir.", ReturnName(playerid, 0), FormatNumber(price));
			            MesajGonder(playerid, "Dana eti satin aldiniz.");
			            if (Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1)
			            {
			                Isyeri[bizid][isyeriUrunSayisi][listitem]--;
		                    Isyeri[bizid][isyeriKasa] += price;
		                    Isyeri_Kaydet(bizid);
	                    }
					}
					case 13:
					{
					    if (PlayerData[playerid][pEsyalar][10] >= 3) return HataMesajGonder(playerid, "En fazla 3 Tamir kiti satin alabilirsiniz.");

					    PlayerData[playerid][pEsyalar][10]++;
			            ParaVer(playerid, -price);
			            SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s cüzdanindan %s çikarir ve kasiyere dogru uzatarak Tamir Kiti satin alir.", ReturnName(playerid, 0), FormatNumber(price));
			            MesajGonder(playerid, "Tamir kiti satin aldiniz.");
			            if (Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1)
			            {
			                Isyeri[bizid][isyeriUrunSayisi][listitem]--;
		                    Isyeri[bizid][isyeriKasa] += price;
		                    Isyeri_Kaydet(bizid);
	                    }
					}
					case 14:
					{
					    if (PlayerData[playerid][pEsyalar][11] != 0) return HataMesajGonder(playerid, "Zaten Portatif Çadiriniz var.");

			            PlayerData[playerid][pEsyalar][11] = 1;
			            ParaVer(playerid, -price);
			            SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s cüzdanindan %s çikarir ve kasiyere dogru uzatarak Portatif Çadir satin alir.", ReturnName(playerid, 0), FormatNumber(price));
			            MesajGonder(playerid, "Portatif Çadir satin aldiniz. (/cadir)");
			            if (Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1)
			            {
			                Isyeri[bizid][isyeriUrunSayisi][listitem]--;
		                    Isyeri[bizid][isyeriKasa] += price;
		                    Isyeri_Kaydet(bizid);
	                    }
					}
					case 15:
					{
					    if (PlayerData[playerid][pEsyalar][12] != 0) return HataMesajGonder(playerid, "Zaten kamp atesiniz var.");

			            PlayerData[playerid][pEsyalar][12] = 1;
			            ParaVer(playerid, -price);
			            SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s cüzdanindan %s çikarir ve kasiyere dogru uzatarak Kamp Atesi satin alir.", ReturnName(playerid, 0), FormatNumber(price));
			            MesajGonder(playerid, "Kamp Atesi satin aldiniz. (/kampatesi)");
			            if (Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1)
			            {
			                Isyeri[bizid][isyeriUrunSayisi][listitem]--;
		                    Isyeri[bizid][isyeriKasa] += price;
		                    Isyeri_Kaydet(bizid);
	                    }
					}
					/*case 16:
					{
					    if (PlayerData[playerid][pEsyalar][14] != 0) return HataMesajGonder(playerid, "Zaten yan keskiniz var.");

			            PlayerData[playerid][pEsyalar][14] = 1;
			            ParaVer(playerid, -price);
			            SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s cüzdanindan %s çikarir ve kasiyere dogru uzatarak yan keski satin alir.", ReturnName(playerid, 0), FormatNumber(price));
			            MesajGonder(playerid, "Yan keski satin aldiniz.");
			            if (Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1)
			            {
			                Isyeri[bizid][isyeriUrunSayisi][listitem]--;
		                    Isyeri[bizid][isyeriKasa] += price;
		                    Isyeri_Kaydet(bizid);
	                    }
					}*/
			    }
			}
			if (Isyeri[bizid][isyeriTip] == 6)
			{
			    switch (listitem)
			    {
				    case 0:
					{
					    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_BEER);

						ParaVer(playerid, -price);
	    				SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s barmene %s ödedi ve bir bardak Bira aldi.", ReturnName(playerid, 0), FormatNumber(price));
	    				if (Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1)
			            {
			                Isyeri[bizid][isyeriUrunSayisi][listitem]--;
		                    Isyeri[bizid][isyeriKasa] += price;
		                    Isyeri_Kaydet(bizid);
	                    }
					}
					case 1:
					{
					    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_WINE);

                    	ParaVer(playerid, -price);
                    	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s barmene %s ödedi ve bir bardak Viski aldi.", ReturnName(playerid, 0), FormatNumber(price));
                    	if (Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1)
			            {
			                Isyeri[bizid][isyeriUrunSayisi][listitem]--;
		                    Isyeri[bizid][isyeriKasa] += price;
		                    Isyeri_Kaydet(bizid);
	                    }
					}
					case 2:
					{
					    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_WINE);

                    	ParaVer(playerid, -price);
                    	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s barmene %s ödedi ve bir bardak Tekila aldi.", ReturnName(playerid, 0), FormatNumber(price));
                    	if (Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1)
			            {
			                Isyeri[bizid][isyeriUrunSayisi][listitem]--;
		                    Isyeri[bizid][isyeriKasa] += price;
		                    Isyeri_Kaydet(bizid);
	                    }
					}
					case 3:
					{
					    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_WINE);

                    	ParaVer(playerid, -price);
                    	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s barmene %s ödedi ve bir bardak sarap aldi.", ReturnName(playerid, 0), FormatNumber(price));
                    	if (Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1)
			            {
			                Isyeri[bizid][isyeriUrunSayisi][listitem]--;
		                    Isyeri[bizid][isyeriKasa] += price;
		                    Isyeri_Kaydet(bizid);
	                    }
					}
					case 4:
					{
					    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_WINE);

                    	ParaVer(playerid, -price);
                    	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s barmene %s ödedi ve bir bardak Votka aldi.", ReturnName(playerid, 0), FormatNumber(price));
                    	if (Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1)
			            {
			                Isyeri[bizid][isyeriUrunSayisi][listitem]--;
		                    Isyeri[bizid][isyeriKasa] += price;
		                    Isyeri_Kaydet(bizid);
	                    }
					}
					case 5:
					{
					    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_WINE);

                    	ParaVer(playerid, -price);
                    	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s barmene %s ödedi ve bir bardak sampanya aldi.", ReturnName(playerid, 0), FormatNumber(price));
                    	if (Isyeri[bizid][isyeriSahip] != -99 && Isyeri[bizid][isyeriSahip] != -1)
			            {
			                Isyeri[bizid][isyeriUrunSayisi][listitem]--;
		                    Isyeri[bizid][isyeriKasa] += price;
		                    Isyeri_Kaydet(bizid);
	                    }
					}
    			}
			}

	}
	return 1;
}

stock AksesuarlariGoster(playerid,satinal=0)
{
    new str[1000],string[300];
    strcat(str, "Slot ID\tDurum\tModel ID\n");

	for (new i; i < 10; i++)
	{
		if (PlayerData[playerid][pASlot][i] != 0)
	    {
			if (PlayerData[playerid][pTSlot][i])
                format(string, sizeof string, "{FFFFFF}%d\t{FF0000}Kullaniliyor\t{FFFFFF}%d\n",i,PlayerData[playerid][pASlot][i]);

			if (!PlayerData[playerid][pTSlot][i])
                format(string, sizeof string, "{FFFFFF}%d\t{2ECC71}Kullanilmiyor\t{FFFFFF}%d\n",i,PlayerData[playerid][pASlot][i]);
		}
	    else
	    {
	        format(string, sizeof string, "{FFFFFF}%d\t{2ECC71}Kullanilmiyor\t{FFFFFF}-\n",i);
	    }
	    strcat(str,string);
	}

	if (satinal == 1) ShowPlayerDialog(playerid, 53, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}Aksesuar Slotlari", str, "Seç", "{FF6347}Iptal");
	if (satinal == 0) ShowPlayerDialog(playerid, 56, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}Aksesuar Slotlari", str, "Seç", "{FF6347}Iptal");
	if (satinal == 2) ShowPlayerDialog(playerid, 62, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}Aksesuar Slotlari", str, "Seç", "{FF6347}Iptal");
    return 1;
}
stock SQL_AksesuarKaydet(playerid)
{
	if (GetPVarInt(playerid, "Logged") == 0) return 0;
	new
	    query[2224];
    	format(query, sizeof(query), "UPDATE `oyuncular` SET `ASlot1` = '%d|%d|%d|%d'",
        PlayerData[playerid][pASlot][0],
		PlayerData[playerid][pABone][0],
		PlayerData[playerid][pTSlot][0],
		PlayerData[playerid][pARenk][0]
	);
	format(query, sizeof(query), "%s, `ASlot2` = '%d|%d|%d|%d'",
		query,
        PlayerData[playerid][pASlot][1],
		PlayerData[playerid][pABone][1],
		PlayerData[playerid][pTSlot][1],
		PlayerData[playerid][pARenk][1]
	);
	format(query, sizeof(query), "%s, `ASlot3` = '%d|%d|%d|%d'",
		query,
        PlayerData[playerid][pASlot][2],
		PlayerData[playerid][pABone][2],
		PlayerData[playerid][pTSlot][2],
		PlayerData[playerid][pARenk][2]
	);
	format(query, sizeof(query), "%s, `ASlot4` = '%d|%d|%d|%d'",
		query,
        PlayerData[playerid][pASlot][3],
		PlayerData[playerid][pABone][3],
		PlayerData[playerid][pTSlot][3],
		PlayerData[playerid][pARenk][3]
	);
	format(query, sizeof(query), "%s, `ASlot5` = '%d|%d|%d|%d'",
		query,
        PlayerData[playerid][pASlot][4],
		PlayerData[playerid][pABone][4],
		PlayerData[playerid][pTSlot][4],
		PlayerData[playerid][pARenk][4]
	);
	format(query, sizeof(query), "%s, `ASlot6` = '%d|%d|%d|%d'",
		query,
        PlayerData[playerid][pASlot][5],
		PlayerData[playerid][pABone][5],
		PlayerData[playerid][pTSlot][5],
		PlayerData[playerid][pARenk][5]
	);
	format(query, sizeof(query), "%s, `ASlot7` = '%d|%d|%d|%d'",
		query,
        PlayerData[playerid][pASlot][6],
		PlayerData[playerid][pABone][6],
		PlayerData[playerid][pTSlot][6],
		PlayerData[playerid][pARenk][6]
	);
	format(query, sizeof(query), "%s, `ASlot8` = '%d|%d|%d|%d'",
		query,
        PlayerData[playerid][pASlot][7],
		PlayerData[playerid][pABone][7],
		PlayerData[playerid][pTSlot][7],
		PlayerData[playerid][pARenk][7]
	);
	format(query, sizeof(query), "%s, `ASlot9` = '%d|%d|%d|%d'",
		query,
        PlayerData[playerid][pASlot][8],
		PlayerData[playerid][pABone][8],
		PlayerData[playerid][pTSlot][8],
		PlayerData[playerid][pARenk][8]
	);
	format(query, sizeof(query), "%s, `ASlot10` = '%d|%d|%d|%d'",
		query,
        PlayerData[playerid][pASlot][9],
		PlayerData[playerid][pABone][9],
		PlayerData[playerid][pTSlot][9],
		PlayerData[playerid][pARenk][9]
	);

    format(query, sizeof(query), "%s, `ASlot1Pos` = '%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f'",
		query,
		AksesuarData[playerid][0][0],
		AksesuarData[playerid][0][1],
        AksesuarData[playerid][0][2],
        AksesuarData[playerid][0][3],
        AksesuarData[playerid][0][4],
        AksesuarData[playerid][0][5],
        AksesuarData[playerid][0][6],
        AksesuarData[playerid][0][7],
		AksesuarData[playerid][0][8]
	);
    format(query, sizeof(query), "%s, `ASlot2Pos` = '%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f'",
        query,
		AksesuarData[playerid][1][0],
        AksesuarData[playerid][1][1],
        AksesuarData[playerid][1][2],
        AksesuarData[playerid][1][3],
        AksesuarData[playerid][1][4],
        AksesuarData[playerid][1][5],
        AksesuarData[playerid][1][6],
        AksesuarData[playerid][1][7],
        AksesuarData[playerid][1][8]
	);
	format(query, sizeof(query), "%s, `ASlot3Pos` = '%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f'",
	    query,
		AksesuarData[playerid][2][0],
        AksesuarData[playerid][2][1],
        AksesuarData[playerid][2][2],
        AksesuarData[playerid][2][3],
        AksesuarData[playerid][2][4],
        AksesuarData[playerid][2][5],
        AksesuarData[playerid][2][6],
        AksesuarData[playerid][2][7],
        AksesuarData[playerid][2][8]
	);
	format(query, sizeof(query), "%s, `ASlot4Pos` = '%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f'",
	    query,
		AksesuarData[playerid][3][0],
        AksesuarData[playerid][3][1],
        AksesuarData[playerid][3][2],
        AksesuarData[playerid][3][3],
        AksesuarData[playerid][3][4],
        AksesuarData[playerid][3][5],
        AksesuarData[playerid][3][6],
        AksesuarData[playerid][3][7],
        AksesuarData[playerid][3][8],
        AksesuarData[playerid][3][9]
	);
	format(query, sizeof(query), "%s, `ASlot5Pos` = '%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f'",
	    query,
		AksesuarData[playerid][4][0],
        AksesuarData[playerid][4][1],
        AksesuarData[playerid][4][2],
        AksesuarData[playerid][4][3],
        AksesuarData[playerid][4][4],
        AksesuarData[playerid][4][5],
        AksesuarData[playerid][4][6],
        AksesuarData[playerid][4][7],
        AksesuarData[playerid][4][8]
	);
	format(query, sizeof(query), "%s, `ASlot6Pos` = '%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f'",
	    query,
		AksesuarData[playerid][5][0],
        AksesuarData[playerid][5][1],
        AksesuarData[playerid][5][2],
        AksesuarData[playerid][5][3],
        AksesuarData[playerid][5][4],
        AksesuarData[playerid][5][5],
        AksesuarData[playerid][5][6],
        AksesuarData[playerid][5][7],
        AksesuarData[playerid][5][8]
	);
	format(query, sizeof(query), "%s, `ASlot7Pos` = '%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f'",
	    query,
		AksesuarData[playerid][6][0],
        AksesuarData[playerid][6][1],
        AksesuarData[playerid][6][2],
        AksesuarData[playerid][6][3],
        AksesuarData[playerid][6][4],
        AksesuarData[playerid][6][5],
        AksesuarData[playerid][6][6],
        AksesuarData[playerid][6][7],
        AksesuarData[playerid][6][8]
	);
	format(query, sizeof(query), "%s, `ASlot8Pos` = '%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f'",
	    query,
		AksesuarData[playerid][7][0],
        AksesuarData[playerid][7][1],
        AksesuarData[playerid][7][2],
        AksesuarData[playerid][7][3],
        AksesuarData[playerid][7][4],
        AksesuarData[playerid][7][5],
        AksesuarData[playerid][7][6],
        AksesuarData[playerid][7][7],
        AksesuarData[playerid][7][8]
	);
	format(query, sizeof(query), "%s, `ASlot9Pos` = '%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f'",
	    query,
		AksesuarData[playerid][8][0],
        AksesuarData[playerid][8][1],
        AksesuarData[playerid][8][2],
        AksesuarData[playerid][8][3],
        AksesuarData[playerid][8][4],
        AksesuarData[playerid][8][5],
        AksesuarData[playerid][8][6],
        AksesuarData[playerid][8][7],
        AksesuarData[playerid][8][8]
	);
	format(query, sizeof(query), "%s, `ASlot10Pos` = '%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f' WHERE `ID` = '%d'",
	    query,
		AksesuarData[playerid][9][0],
        AksesuarData[playerid][9][1],
        AksesuarData[playerid][9][2],
        AksesuarData[playerid][9][3],
        AksesuarData[playerid][9][4],
        AksesuarData[playerid][9][5],
        AksesuarData[playerid][9][6],
        AksesuarData[playerid][9][7],
        AksesuarData[playerid][9][8],
        PlayerData[playerid][pID]
	);
	mysql_query(g_SQL,query, false);
	return 1;
}


stock AksesuarAyarla(playerid)
{
    for (new i = 0; i < 5; i ++)
	{
		if (!PlayerData[playerid][pTSlot][i])
		{
			RemovePlayerAttachedObject(playerid, i);
		}
		else
		{
		    AksesuarTak(playerid, i);
		}
	}
	return 1;
}

stock Isyeri_Yenile(id)
{
	if (id != -1 && Isyeri[id][isyeriExists])
	{
	    if (IsValidDynamic3DTextLabel(Isyeri[id][bizText3D]))
		    DestroyDynamic3DTextLabel(Isyeri[id][bizText3D]);

		if (IsValidDynamicPickup(Isyeri[id][isyeriPickup]))
		    DestroyDynamicPickup(Isyeri[id][isyeriPickup]);

		new string[500], durum[24], pickup, sahip[24], tip[30];

		if (!Isyeri[id][isyeriKilit]) durum = "{007fff}Açýk";
		else durum = "{FF0000}Kapalý";

		if (Isyeri[id][isyeriSahip] == -99)
		{
			    format(sahip, 24, "Devlet");
		} else format(sahip, 24, "%s", SQLName(Isyeri[id][isyeriSahip],0));

		switch (Isyeri[id][isyeriTip])
		{
		    case 1: pickup = 1239, tip = "Market";
		    case 2: pickup = 1239, tip = "Kiyafet Magazasi";
		    case 3: pickup = 1239, tip = "Fast Food";
		    case 4: pickup = 2485, tip = "Galeri";
		    case 5: pickup = 1239, tip = "Elektronik Magazasi";
		    case 6: pickup = 1239, tip = "Bar/Pub";
		    case 7: pickup = 1938, tip = "Kumarhane";
		    case 8: pickup = 1239, tip = "Diger";
		}

  if (Isyeri[id][isyeriSahip] == -1)
		{
            format(string,sizeof(string), "{00bf5f}Satilik Ýþyeri (ID: %d)",id,tip,FormatNumber(Isyeri[id][isyeriFiyat]));
		    Isyeri[id][bizText3D] = CreateDynamic3DTextLabel(string,-1,Isyeri[id][isyeriPos][0],Isyeri[id][isyeriPos][1],Isyeri[id][isyeriPos][2],7.0,INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0,0,0);

			if (Isyeri[id][isyeriTip] != 1)
				Isyeri[id][isyeriPickup] = CreateDynamicPickup(pickup, 1239,Isyeri[id][isyeriPos][0],Isyeri[id][isyeriPos][1],Isyeri[id][isyeriPos][2],0,0);

            if (Isyeri[id][isyeriTip] == 1)
				Isyeri[id][isyeriPickup] = CreateDynamicPickup(pickup, 1239,Isyeri[id][isyeriPos][0],Isyeri[id][isyeriPos][1],Isyeri[id][isyeriPos][2]-0.0,0,0);
		}

		else if (Isyeri[id][isyeriSahip] != -1 && Isyeri[id][isyeriSatilik] == 0)
		{
		    format(string,sizeof(string), "{ffb672}Ýþyeri (ID: %d)",id,Isyeri[id][isyeriName],tip,durum);
		    if (Isyeri[id][isyeriGirisUcret] > 0)
			{
			    new girisucret[150];
				format(girisucret, 150, "\n{ffffff}Giris: {00bf5f}%s", FormatNumber(Isyeri[id][isyeriGirisUcret]));
				strcat(string, girisucret);
			}
		    Isyeri[id][bizText3D] = CreateDynamic3DTextLabel(string,-1,Isyeri[id][isyeriPos][0],Isyeri[id][isyeriPos][1],Isyeri[id][isyeriPos][2],7.0,INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0,0,0);

            if (Isyeri[id][isyeriTip] != 1)
				Isyeri[id][isyeriPickup] = CreateDynamicPickup(pickup, 1239,Isyeri[id][isyeriPos][0],Isyeri[id][isyeriPos][1],Isyeri[id][isyeriPos][2],0,0);

            if (Isyeri[id][isyeriTip] == 1)
                Isyeri[id][isyeriPickup] = CreateDynamicPickup(pickup, 1239,Isyeri[id][isyeriPos][0],Isyeri[id][isyeriPos][1],Isyeri[id][isyeriPos][2],0,0);
		}
		else if (Isyeri[id][isyeriSahip] != -1 && Isyeri[id][isyeriSatilik] == 1)
		{
		    format(string,sizeof(string), "{A9C4E4}isyeri Durumu: Satilik!\n{A9C4E4}Kapi Numarasi: %d\n{A9C4E4}Ücret: %s\n{A9C4E4}Tip: %s",id,FormatNumber(Isyeri[id][isyeriFiyat]), tip);
		    if (Isyeri[id][isyeriGirisUcret] > 0)
			{
			    new girisucret[150];
				format(girisucret, 150, "\n{A9C4E4}Giris Ücreti: {00bf5f}%s", FormatNumber(Isyeri[id][isyeriGirisUcret]));
				strcat(string, girisucret);
			}
		 	Isyeri[id][bizText3D] = CreateDynamic3DTextLabel(string,-1,Isyeri[id][isyeriPos][0],Isyeri[id][isyeriPos][1],Isyeri[id][isyeriPos][2],7.0,INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0,0,0);
		    Isyeri[id][isyeriPickup] = CreateDynamicPickup(pickup, 1239,Isyeri[id][isyeriPos][0],Isyeri[id][isyeriPos][1],Isyeri[id][isyeriPos][2],0,0);
		}

	}
}
stock GetPlayerSkinEx(playerid)
{
	return (GetPlayerCustomSkin(playerid) >= 20001) ? (GetPlayerCustomSkin(playerid)) : (GetPlayerSkin(playerid));
}
stock Isyeri_Kaydet(id)
{
	static query[4000];
	format(query,sizeof(query), "UPDATE `isyerleri` SET `iIsim` = '%s',`iMessage` = '%s',`iSahip` = '%d',`iTip` = '%d',`iFiyat` = '%d',`iKendiFiyat` = '%d',`iSatilik` = '%d',`iVergi` = '%d', `iVergiSure` = '%d', `iGirisUcret` = '%d',`iMuzik` = '%s'",
	SQL_ReturnEscaped(Isyeri[id][isyeriName]),
	SQL_ReturnEscaped(Isyeri[id][isyeriMesaj]),
	Isyeri[id][isyeriSahip],
	Isyeri[id][isyeriTip],
	Isyeri[id][isyeriFiyat],
	Isyeri[id][isyeriKendiFiyati],
	Isyeri[id][isyeriSatilik],
	Isyeri[id][isyeriVergi],
	Isyeri[id][isyeriVergiSure],
	Isyeri[id][isyeriGirisUcret],
	SQL_ReturnEscaped(Isyeri[id][isyeriMuzik])
	);
	format(query,sizeof(query), "%s, `iPosX` = '%.4f',`iPosY` = '%.4f',`iPosZ` = '%.4f',`iPosA` = '%.4f',`iIntX` = '%.4f',`iIntY` = '%.4f',`iIntZ` = '%.4f',`iIntA` = '%.4f',`iSpawnX` = '%.4f',`iSpawnY` = '%.4f',`iSpawnZ` = '%.4f',`iSpawnA` = '%.4f'",
	query,
	Isyeri[id][isyeriPos][0],
	Isyeri[id][isyeriPos][1],
	Isyeri[id][isyeriPos][2],
	Isyeri[id][isyeriPos][3],
	Isyeri[id][isyeriInt][0],
	Isyeri[id][isyeriInt][1],
	Isyeri[id][isyeriInt][2],
	Isyeri[id][isyeriInt][3],
	Isyeri[id][isyeriSpawn][0],
	Isyeri[id][isyeriSpawn][1],
	Isyeri[id][isyeriSpawn][2],
	Isyeri[id][isyeriSpawn][3]
	);
	format(query,sizeof(query), "%s, `iInterior` = '%d',`iKilit` = '%d',`iKasa` = '%d',`iFiyat1` = '%d',`iFiyat2` = '%d',`iFiyat3` = '%d',`iFiyat4` = '%d',`iFiyat5` = '%d',`iFiyat6` = '%d',`iFiyat7` = '%d',`iFiyat8` = '%d',`iFiyat9` = '%d',`iFiyat10` = '%d'",
	query,
	Isyeri[id][isyeriInterior],
	Isyeri[id][isyeriKilit],
	Isyeri[id][isyeriKasa],
	Isyeri[id][isyeriFiyatlar][0],
	Isyeri[id][isyeriFiyatlar][1],
	Isyeri[id][isyeriFiyatlar][2],
	Isyeri[id][isyeriFiyatlar][3],
	Isyeri[id][isyeriFiyatlar][4],
	Isyeri[id][isyeriFiyatlar][5],
	Isyeri[id][isyeriFiyatlar][6],
	Isyeri[id][isyeriFiyatlar][7],
	Isyeri[id][isyeriFiyatlar][8],
	Isyeri[id][isyeriFiyatlar][9]
	);
	format(query,sizeof(query), "%s, `iFiyat11` = '%d',`iFiyat12` = '%d',`iFiyat13` = '%d',`iFiyat14` = '%d',`iFiyat15` = '%d',`iFiyat16` = '%d',`iFiyat17` = '%d',`iFiyat18` = '%d',`iFiyat19` = '%d',`iFiyat20` = '%d'",
	query,
	Isyeri[id][isyeriFiyatlar][10],
	Isyeri[id][isyeriFiyatlar][11],
	Isyeri[id][isyeriFiyatlar][12],
	Isyeri[id][isyeriFiyatlar][13],
	Isyeri[id][isyeriFiyatlar][14],
	Isyeri[id][isyeriFiyatlar][15],
	Isyeri[id][isyeriFiyatlar][16],
	Isyeri[id][isyeriFiyatlar][17],
	Isyeri[id][isyeriFiyatlar][18],
	Isyeri[id][isyeriFiyatlar][19]
	);
	format(query,sizeof(query), "%s, `iUrun1` = '%d',`iUrun2` = '%d',`iUrun3` = '%d',`iUrun4` = '%d',`iUrun5` = '%d',`iUrun6` = '%d',`iUrun7` = '%d',`iUrun8` = '%d',`iUrun9` = '%d',`iUrun10` = '%d',`iUrun11` = '%d',`iUrun12` = '%d',`iUrun13` = '%d',`iUrun14` = '%d',`iUrun15` = '%d',`iUrun16` = '%d',`iUrun17` = '%d',`iUrun18` = '%d',`iUrun19` = '%d',`iUrun20` = '%d' WHERE `ID` = '%d'",
	query,
	Isyeri[id][isyeriUrunSayisi][0],
	Isyeri[id][isyeriUrunSayisi][1],
	Isyeri[id][isyeriUrunSayisi][2],
	Isyeri[id][isyeriUrunSayisi][3],
	Isyeri[id][isyeriUrunSayisi][4],
	Isyeri[id][isyeriUrunSayisi][5],
	Isyeri[id][isyeriUrunSayisi][6],
	Isyeri[id][isyeriUrunSayisi][7],
	Isyeri[id][isyeriUrunSayisi][8],
	Isyeri[id][isyeriUrunSayisi][9],
	Isyeri[id][isyeriUrunSayisi][10],
	Isyeri[id][isyeriUrunSayisi][11],
	Isyeri[id][isyeriUrunSayisi][12],
	Isyeri[id][isyeriUrunSayisi][13],
	Isyeri[id][isyeriUrunSayisi][14],
	Isyeri[id][isyeriUrunSayisi][15],
	Isyeri[id][isyeriUrunSayisi][16],
	Isyeri[id][isyeriUrunSayisi][17],
	Isyeri[id][isyeriUrunSayisi][18],
	Isyeri[id][isyeriUrunSayisi][19],
	Isyeri[id][isyeriID]
	);
	mysql_query(g_SQL,query, false);
	return 1;
}
stock ClearPlayerAnim(playerid)
{
	new skin;
	skin = GetPlayerSkin(playerid);
	SetPlayerSkin(playerid, skin);
	return 1;
}
stock BildirimEkle(sqlid,mesaj[],gonderen[])
{
	new query[680];
	format(query,sizeof(query), "INSERT INTO `bildirimler` (`sqlid`,`Tarih`,`Mesaj`,`Gonderen`,`Durum`) VALUES ('%d','%s','%s','%s','0')",sqlid,ReturnDate(),mesaj,gonderen);
	mysql_query(g_SQL,query, false);
	return 1;
}
stock Bildirim_OkunmamisBildirimler(sqlid)
{
	new query[200];
	format(query,sizeof(query), "SELECT * FROM `bildirimler` WHERE `sqlid` = '%d' AND `Durum` = '0'",sqlid);
	new Cache:Radless = mysql_query(g_SQL,query);
	new rows;
	cache_get_row_count(rows);
	cache_delete(Radless);
	return rows;
}
stock Bildirim_SayiCek(sqlid)
{
	new query[200];
	format(query,sizeof(query), "SELECT * FROM `bildirimler` WHERE `sqlid` = '%d'",sqlid);
	new Cache:Radless = mysql_query(g_SQL,query);
	new rows;
	cache_get_row_count(rows);
	cache_delete(Radless);
	return rows;
}
stock Bildirim_Sil(bildirimid)
{
	new query[122];
	format(query,sizeof(query), "DELETE FROM `bildirimler` WHERE `id` = '%d'",bildirimid);
	mysql_query(g_SQL,query, false);
	return 1;
}
stock BildirimleriSil(sqlid)
{
	new query[150];
	format(query,sizeof(query), "DELETE FROM `bildirimler` WHERE `sqlid` = '%d'",sqlid);
	mysql_query(g_SQL,query, false);
	return 1;
}
Business_Nearest(playerid, Float:radius = 2.5)
{
    for (new i = 0; i != MAX_ISYERI; i ++) if (Isyeri[i][isyeriExists] && IsPlayerInRangeOfPoint(playerid, radius, Isyeri[i][isyeriPos][0], Isyeri[i][isyeriPos][1], Isyeri[i][isyeriPos][2]))
	{
			return i;
	}
	return -1;
}
stock BildirimlerDialog(playerid)
{
	if (!OyundaDegil(playerid)) return 1;
	new str[1024],string[500],query[200];
	strcat(str, "ID\tGönderen\tTarih\tDurum\n");
	if (Bildirim_OkunmamisBildirimler(PlayerData[playerid][pID]) > 0)
	{
		format(query,sizeof(query), "SELECT `id`,`Gonderen`,`Tarih` FROM `bildirimler` WHERE `sqlid` = '%d' AND `Durum` = '0'",PlayerData[playerid][pID]);
		mysql_query(g_SQL,query);
		new rows;
		cache_get_row_count(rows);
		new bid,gonderen[24],tarih[22];
		if (rows)
		{
			for (new i; i<rows; i++)
			{
				cache_get_value_name_int(i, "id",bid);
				cache_get_value_name(i, "Gonderen",gonderen,24);
				cache_get_value_name(i, "Tarih",tarih,22);
				format(string,sizeof(string), "%d\t%s\t%s\t{38c5f7}Yeni\n",bid,gonderen,tarih);
				strcat(str,string);
			}
			format(query,sizeof(query), "SELECT `id`,`Gonderen`,`Tarih` FROM `bildirimler` WHERE `sqlid` = '%d' AND `Durum` = '1'",PlayerData[playerid][pID]);
   			mysql_query(g_SQL,query);
			cache_get_row_count(rows);
			if (rows)
			{
			    for (new i; i<rows; i++)
			    {
			        cache_get_value_name_int(i, "id",bid);
					cache_get_value_name(i, "Gonderen",gonderen,24);
					cache_get_value_name(i, "Tarih",tarih,30);
					format(string,sizeof(string), "%d\t%s\t%s\t{FF0000}Okundu\n",bid,gonderen,tarih);
					strcat(str,string);
			    }
			}
		}

	}
	else
	{
	    if (Bildirim_SayiCek(PlayerData[playerid][pID]) < 1) return HataMesajGonder(playerid, "Hiç bildiriminiz yok.");
	    new bid,gonderen[24],tarih[22];
	    format(query,sizeof(query), "SELECT `id`,`Gonderen`,`Tarih` FROM `bildirimler` WHERE `sqlid` = '%d' AND `Durum` = '1'",PlayerData[playerid][pID]);
		mysql_query(g_SQL,query);
		new rows;
		cache_get_row_count(rows);
		if (rows)
		{
  			for (new i; i<rows; i++)
	    	{
      			cache_get_value_name_int(i, "id",bid);
				cache_get_value_name(i, "Gonderen",gonderen,24);
				cache_get_value_name(i, "Tarih",tarih,22);
				format(string,sizeof(string), "%d\t%s\t%s\t{FF0000}Okundu\n",bid,gonderen,tarih);
				strcat(str,string);
	    	}
		}
	}
	ShowPlayerDialog(playerid,BILDIRIM_DIALOG,DIALOG_STYLE_TABLIST_HEADERS, "Bildirimleriniz",str, "Görüntüle", "Kapat");
	return 1;
}
stock OlusumAksesuariSil(iTargetID)
{
	for (new iToyIter; iToyIter < 5; ++iToyIter) {
		for (new LoopRapist; LoopRapist < sizeof(AttachCops); ++LoopRapist) {
			if (AttachCops[LoopRapist][olusumamodel] == PlayerData[iTargetID][pASlot][iToyIter]) {
                RemovePlayerAttachedObject(iTargetID, iToyIter);
                PlayerData[iTargetID][pASlot][iToyIter] = 0;
				AksesuarAyarla(iTargetID);
			}
		}
	}
	SunucuMesaji(iTargetID, "Oluþuma ait olan tüm aksesuarlar kaldýrýldý.");
	return 1;
}
BirliktenAt(playerid)
{
	if (PlayerData[playerid][pFaction] == -1) return 1;
	if (Birlikler[PlayerData[playerid][pFaction]][birlikTip] != BIRLIK_CETE && Birlikler[PlayerData[playerid][pFaction]][birlikTip] != BIRLIK_MAFYA && Birlikler[PlayerData[playerid][pFaction]][birlikTip] != BIRLIK_LEGAL)
	{
	    SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);
		SetPlayerColor(playerid, 0xFFFFFFFF);
		PlayerData[playerid][pOnDuty] = 0;
		PlayerData[playerid][pOnDutySkin] = 0;
		PlayerData[playerid][pTazer] = 0;
		PlayerData[playerid][pBeanbag] = 0;
		OlusumAksesuariSil(playerid);
		ResetWeapons(playerid);
	}
	Birlik_Kaydet(PlayerData[playerid][pFaction]);
    PlayerData[playerid][pFaction] = -1;
    PlayerData[playerid][pFactionRutbe] = 0;
    PlayerData[playerid][pFactionDivizyon] = 0;
   	for (new i = 0; i < MAX_ARAC; i ++) if (AracInfo[i][aracExists] && AracInfo[i][aracSahip] == PlayerData[playerid][pID])
	{
	    AracInfo[i][aracFactionType] = 0;
		AracInfo[i][aracFaction] = -1;
	}
	return 1;
}
Birlik_Update(factionid)
{
	if (factionid != -1 || Birlikler[factionid][birlikExists])
	{
	    foreach (new i : Player) if (PlayerData[i][pFaction] == factionid)
		{
			 	SetFactionColor(i);
		}
	}
	return 1;
}

SetFactionColor(playerid)
{
	new factionid = PlayerData[playerid][pFaction];

	if (factionid != -1)
	{
		SetPlayerColor(playerid, RemoveAlpha(Birlikler[factionid][birlikColor]));
	} else {
	    SetPlayerColor(playerid, 0xFFFFFF00);
	}
	return 0;
}

stock RemoveAlpha(color) {
    return (color & ~0xFF);
}

stock Birlik_Olustur(birlikisim[],tip)
{
    for (new i = 0; i != MAX_BIRLIK; i ++) if (!Birlikler[i][birlikExists])
    {
        Birlikler[i][birlikExists] = true;
        Birlikler[i][birlikID] = i;

        format(Birlikler[i][birlikAd], 32, birlikisim);
        Birlikler[i][birlikDuyuru][0] = '\0';
        if (tip != 3) Birlikler[i][birlikColor] = 0xFFFFFF00;
        else Birlikler[i][birlikColor] = 0x9ACD32FF;
        Birlikler[i][birlikTip] = tip;
        switch (tip)
        {
            case 1..4: Birlikler[i][birlikRutbeler] = 6;
            default: Birlikler[i][birlikRutbeler] = 12;
        }
        Birlikler[i][birlikKasaPara] = 0;
        Birlikler[i][birlikOnaylar][0] = 0;
        Birlikler[i][birlikOnaylar][1] = 0;
        Birlikler[i][birlikOnaylar][2] = 0;
        Birlikler[i][birlikOnaylar][3] = 0;
        Birlikler[i][birlikOnaylar][4] = 0;
        Birlikler[i][OOCDurum] = 1;

        Birlikler[i][birlikYetkilendirme][0] = Birlikler[i][birlikRutbeler]-1; // Üye Alma
        Birlikler[i][birlikYetkilendirme][1] = Birlikler[i][birlikRutbeler]-1; // Üye Atma
        Birlikler[i][birlikYetkilendirme][2] = Birlikler[i][birlikRutbeler]-2; // Rütbe Deðiþtirme
        Birlikler[i][birlikYetkilendirme][3] = Birlikler[i][birlikRutbeler]-2; // Divizyon Deðiþtirme
        Birlikler[i][birlikYetkilendirme][4] = Birlikler[i][birlikRutbeler]-3; // Araçlarý Spawnlama
        Birlikler[i][birlikYetkilendirme][5] = Birlikler[i][birlikRutbeler]-3; // Birlik OOC Chat Kapatma
        Birlikler[i][birlikYetkilendirme][6] = Birlikler[i][birlikRutbeler]; // Birlik Kasasýndan Para Alma
        Birlikler[i][birlikYetkilendirme][7] = 1; // Ajans Ayarlarý Seviyesi

        Birlikler[i][yayinDurum] = 1;
        Birlikler[i][yayinTipi] = 0;
        Birlikler[i][ReklamAlimi] = 0;
        Birlikler[i][ReklamUcreti] = 0;
        Birlikler[i][ReklamSayisi] = 0;
        Birlikler[i][CekilisBasladi] = false;
        Birlikler[i][cekilisOdul] = 0;
        Birlikler[i][reklamPos][0] = 0.0;
        Birlikler[i][reklamPos][1] = 0.0;
        Birlikler[i][reklamPos][2] = 0.0;
        if (IsValidDynamicPickup(Birlikler[i][reklamPickup])) DestroyDynamicPickup(Birlikler[i][reklamPickup]);
        if (IsValidDynamic3DTextLabel(Birlikler[i][reklamLabel])) DestroyDynamic3DTextLabel(Birlikler[i][reklamLabel]);
        for (new j = 0; j < 15; j ++)
        {
            if (j < 5)
            {
                format(BirlikDivizyon[i][j],20, "Birim %d",j+1);
            }
            format(BirlikRutbe[i][j],32, "Rutbe %d",j+1);
        }

        new query[256];

        mysql_format(g_SQL, query, sizeof query, "INSERT INTO `birlikler` (`bid`) VALUES ('%d')", Birlikler[i][birlikID]);
        mysql_query (g_SQL, query);

		Birlik_Kaydet(Birlikler[i][birlikID]);

		return Birlikler[i][birlikID];
    }
    return -1;
}

stock GetFactionByID(sqlid)
{
	for (new i = 0; i != MAX_BIRLIK; i ++) if (Birlikler[i][birlikExists] && Birlikler[i][birlikID] == sqlid)
	    return i;

	return -1;
}

stock Ev_Sil(playerid, evid) // Degisti
{
    if (evid != -1 && HouseInfo[evid][evExists])
    {
        new sorgu[100];

		format(sorgu, sizeof(sorgu), "DELETE FROM `evler` WHERE `evid` = '%d'", HouseInfo[evid][evID]);
		mysql_query(g_SQL, sorgu, false);
		if (Ev_GetKeyCount(evid) > 0)
		{
			format(sorgu, sizeof(sorgu), "DELETE FROM `anahtarlar` WHERE `sqlid` = '%d' AND `tip` = '1'",HouseInfo[evid][evID]);
			mysql_query(g_SQL, sorgu, false);
		}
		if (IsValidDynamic3DTextLabel(HouseInfo[evid][houseText]))
		    DestroyDynamic3DTextLabel(HouseInfo[evid][houseText]);

		if (IsValidDynamicPickup(HouseInfo[evid][evPickup]))
		    DestroyDynamicPickup(HouseInfo[evid][evPickup]);

		if (HouseInfo[evid][evSahip] != -1)
		{
		    format(sorgu, sizeof(sorgu), "%s adli yetkili tarafindan eviniz silindi.", PlayerData[playerid][pAdminName]);
		    BildirimEkle(HouseInfo[evid][evSahip],sorgu, "Sistem");
		}
		HouseInfo[evid][evExists] = false;
		HouseInfo[evid][evSahip] = -1;
		HouseInfo[evid][evID] = 0;
		HouseInfo[evid][evKiralayan] = -1;
		House_RemoveFurniture(evid);
    }
}
Dialog:BirlikDialog(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new factionid = PlayerData[playerid][pFaction];
	    if (listitem == 0)
	    {
	        if (factionid == -1) return HataMesajGonder(playerid, "Bir birliðiniz yok.");
	        new str[1024],string[300],sayi;
	        strcat(str, "ID\tAd\tRütbe\tDivizyon\n");
	        foreach (new i:Player) if (PlayerData[i][pFaction] == factionid)
	        {
	            format(string,sizeof(string), "%d\t%s\t%s\t%s\n",i,ReturnName(i,0),Birlik_GetRutbe(i),Birlik_GetDivizyon(i));
	            strcat(str,string);
	            sayi++;
	        }
	        if (sayi == 0)
	        {
	            HataMesajGonder(playerid, "Aktif birlik üyesi bulunmamaktadýr.");
	            cmd_birlik(playerid);
	        }
	        Dialog_Show(playerid, BirlikGeriTusu, DIALOG_STYLE_TABLIST_HEADERS, "Çevrimiçi Üyeler", str, "Tamam", "Geri");
	    }
	    if (listitem == 1)
	    {
	        if (factionid == -1) return HataMesajGonder(playerid, "Bir birliðiniz yok.");
	        new str[1000],string[224],durum[30];
	        format(string,sizeof(string), "Birlik Adý: {FFF5EE}%s\n",Birlikler[factionid][birlikAd]);
	        strcat(str,string);
	        switch (Birlikler[factionid][birlikTip])
	        {
	            case 0: durum = "Belirlenmiyor";
	            case 1: durum = "Çete";
	            case 2: durum = "Mafya";
	            case 3: durum = "Yayýn Ajansý";
	            case 4: durum = "Legal";
	            default: durum = "Özel Kurum";
	        }
	        format(string,sizeof(string), "Birlik Tipi: {FFF5EE}%s{FFFFFF}\n",durum);
	        strcat(str,string);
         	format(string,sizeof(string), "Sistemsel Onay: %s{FFFFFF}\n",(Birlikler[factionid][birlikOnaylar][0] == 1) ? ("{21ff00}Var") : ("{ff0000}Yok"));
         	strcat(str,string);
         	format(string,sizeof(string), "Silah Onayý: %s{FFFFFF}\n",(Birlikler[factionid][birlikOnaylar][1] == 1) ? ("{21ff00}Var") : ("{ff0000}Yok"));
         	strcat(str,string);
         	format(string,sizeof(string), "Uyuþturucu Onayý: %s{FFFFFF}\n",(Birlikler[factionid][birlikOnaylar][2] == 1) ? ("{21ff00}Var") : ("{ff0000}Yok"));
         	strcat(str,string);
         	format(string,sizeof(string), "Graffiti Onayý: %s{FFFFFF}\n",(Birlikler[factionid][birlikOnaylar][3] == 1) ? ("{21ff00}Var") : ("{ff0000}Yok"));
         	strcat(str,string);
         	format(string,sizeof(string), "Hood Onayý: %s{FFFFFF}\n",(Birlikler[factionid][birlikOnaylar][4] == 1) ? ("{21ff00}Var") : ("{ff0000}Yok"));
         	strcat(str,string);
	        format(string,sizeof(string), "Birlik Üye Sayýsý: {FFF5EE}%d{FFFFFF}\n",BirlikUyeSayisi(factionid));
	        strcat(str,string);
	        format(string,sizeof(string), "Toplam Rütbe Sayýsý: {FFF5EE}%d{FFFFFF}\n",Birlikler[factionid][birlikRutbeler]);
	        strcat(str,string);
	        if (Birlikler[factionid][OOCDurum] == 1) durum = "{38c5f7}Açýk";
			else durum = "{AA3333}Kapalý";
		 	format(string,sizeof(string), "OOC Chat Durum: %s\n",durum);
	        strcat(str,string);
	        format(string,sizeof(string), "Birlik Duyurusu: {FFF5EE}%s{FFFFFF}\n",Birlikler[factionid][birlikDuyuru]);
	        strcat(str,string);
	        Dialog_Show(playerid, BirlikGeriTusu, DIALOG_STYLE_MSGBOX, "{72C425}Birlik Bilgileri", str, "Tamam", "Geri");
	    }
	    if (listitem == 2) // Birlikten Çýkma
	    {
	        Dialog_Show(playerid,BirliktenCik,DIALOG_STYLE_MSGBOX, "{72C425}Birlikten Çýk", "{FFFFFF}Gerçekten de birlikten çýkmak istediðinize emin misiniz?", "Evet", "Hayýr");
	    }
        if (strfind(inputtext, "Birlik Kasa", true) != -1)
        {
            if (factionid == -1) return HataMesajGonder(playerid, "Bir birliðiniz yok.");
            if (Birlikler[factionid][birlikTip] != BIRLIK_CETE && Birlikler[factionid][birlikTip] != BIRLIK_MAFYA  && Birlikler[factionid][birlikTip] != BIRLIK_LEGAL && Birlikler[factionid][birlikTip] != BIRLIK_HABER) return HataMesajGonder(playerid, "Bu birlik türü kasa kullanamaz.");
            Dialog_Show(playerid,birlikKasa,DIALOG_STYLE_LIST, "Birlik Kasasý", "{2ECC71}Kasadan Al\n{2ECC71}Kasaya Koy", "Seç", "Geri");
        }
        if (strfind(inputtext, "Üye Al", true) != -1)
        {
            if (PlayerData[playerid][pFaction] == -1) return HataMesajGonder(playerid, "Bir birlik üyesi deðilsiniz.");
            if (GetPVarInt(playerid, "davet") == 0)
            {
            	SunucuMesaji(playerid, "Birliðe davet etmek istediðiniz oyuncuya TAB'dan (skor tablosu) üstüne iki kez týkla!");
            	SunucuMesaji(playerid, "Birliðe davet modunu kapatmak için /birlik » Üye Al (Birisini davet ettiðinizde oto kapatýlýr.)");
            	SetPVarInt(playerid, "davet",1);
            }
            else
            {
                DeletePVar(playerid, "davet");
                MesajGonder(playerid, "Davet etme modu kapatýlmýþtýr.");
            }
        }
        if (strfind(inputtext, "Üye At", true) != -1)
        {
            if (PlayerData[playerid][pFaction] == -1) return HataMesajGonder(playerid, "Bir birlik üyesi deðilsiniz.");
            Dialog_Show(playerid,BirliktenAt,DIALOG_STYLE_INPUT, "{72C425}Üye At", "{FFFFFF}Lütfen birlikten atmak istediðiniz kiþinin ID'sini girin.", "Devam", "Geri");
        }
        if (strfind(inputtext, "Çevrimdýþý Üyeler", true) != -1)
        {
            if (PlayerData[playerid][pFaction] == -1) return HataMesajGonder(playerid, "Bir birlik üyesi deðilsiniz.");
            Birlik_OfflineUyeler(playerid,factionid);
        }
        if (strfind(inputtext, "Üye Rütbe Deðiþtir", true) != -1)
        {
            if (PlayerData[playerid][pFaction] == -1) return HataMesajGonder(playerid, "Bir birlik üyesi deðilsiniz.");
           	new str[1024],string[300],sayi;
           	strcat(str, "ID\tAd\tRütbe\tDivizyon\n");
            foreach (new i:Player) if (PlayerData[i][pFaction] == factionid)
	        {
	            format(string,sizeof(string), "{59DC1C}%d\t{59DC1C}%s\t{59DC1C}%s\t{59DC1C}%s\n",i,ReturnName(i,0),Birlik_GetRutbe(i),Birlik_GetDivizyon(i));
	            strcat(str,string);
	            sayi++;
	        }
	        Dialog_Show(playerid, RutbeDegistir, DIALOG_STYLE_TABLIST_HEADERS, "{72C425} Rütbe Deðiþtir", str, "Deðiþtir", "{FF6347}Iptal");
	        if (sayi == 0) HataMesajGonder(playerid, "Aktif birlik üyesi bulunmamaktadýr."),cmd_birlik(playerid);
        }
        if (strfind(inputtext, "Üye Divizyon Deðiþtir", true) != -1)
        {
        	DeletePVar(playerid, "OffDiviz");
            if (PlayerData[playerid][pFaction] == -1) return HataMesajGonder(playerid, "Bir birlik üyesi deðilsiniz.");
            new str[1024],string[300],sayi;
           	strcat(str, "ID\tAd\tRütbe\tDivizyon\n");
            foreach (new i:Player) if (PlayerData[i][pFaction] == factionid)
	        {
	            format(string,sizeof(string), "%d\t%s\t%s\t%s\n",i,ReturnName(i,0),Birlik_GetRutbe(i),Birlik_GetDivizyon(i));
	            strcat(str,string);
	            sayi++;
	        }
	        Dialog_Show(playerid,DivizyonDegistir,DIALOG_STYLE_TABLIST_HEADERS, "{72C425}Divizyon Deðiþtir",str, "Deðiþtir", "{FF6347}Iptal");
	        if (sayi == 0) HataMesajGonder(playerid, "Aktif birlik üyesi bulunmamaktadýr."),cmd_birlik(playerid);
        }
        if (strfind(inputtext, "Rütbe Adlarýný Düzenle", true) != -1)
        {
            if (PlayerData[playerid][pFaction] == -1) return HataMesajGonder(playerid, "Bir birlik üyesi deðilsiniz.");
            Birlik_RutbeleriGoster(playerid,PlayerData[playerid][pFaction]);
        }
        if (strfind(inputtext, "Divizyon Adlarýný Düzenle", true) != -1)
        {
            if (PlayerData[playerid][pFaction] == -1) return HataMesajGonder(playerid, "Bir birlik üyesi deðilsiniz.");
            Birlik_DivizyonlariGoster(playerid,PlayerData[playerid][pFaction]);
        }
        if(strfind(inputtext, "Birlik Araçlarýný Spawnla", true) != -1) // Modun Ýçinde Arat Bunun Parantezinin için þu þekilde olacak
		{
			if(PlayerData[playerid][pFaction] == -1) return HataMesajGonder(playerid,"Bir birlik üyesi deðilsiniz.");

			Dialog_Show(playerid, BirlikAracSpawnTip, DIALOG_STYLE_LIST, "{FFFFFF}Birlik Araç Spawn Tercih", "{FFFFFF}> Araçlarý Listele\n{FFFFFF}> Bütün Araçlarý Spawnla", "{FFFFFF}Seç", "{FFFFFF}Kapat");
		}
        if (strfind(inputtext, "Birlik OOC Chat", true) != -1)
        {
            if (PlayerData[playerid][pFaction] == -1) return HataMesajGonder(playerid, "Bir birlik üyesi deðilsiniz.");
            if (Birlikler[factionid][OOCDurum] == 1)
            {
                Birlikler[factionid][OOCDurum] = 0;
                Birlik_Kaydet(factionid);
                cmd_birlik(playerid);
                MesajGonder(playerid, "Birlik OOC Chat kapatýldý.");
            }
            else
            {
                Birlikler[factionid][OOCDurum] = 1;
                Birlik_Kaydet(factionid);
                cmd_birlik(playerid);
                MesajGonder(playerid, "Birlik OOC Chat açýldý.");
            }
        }
        if (strfind(inputtext, "Rütbe Yetkilendirmeleri", true) != -1)
        {
			if (PlayerData[playerid][pFaction] == -1) return HataMesajGonder(playerid, "Bir birlik üyesi deðilsiniz.");
			Dialog_Show(playerid,RutbeYetkilendirme,DIALOG_STYLE_LIST, "{72C425} Rütbe Yetkilendirmeleri", "{59DC1C}Üye Alma Seviyesi\n{59DC1C}Üye Atma Seviyesi\n{59DC1C}Rütbe Deðiþtirme Seviyesi\n{59DC1C}Divizyon Deðiþtirme Seviyesi\n{59DC1C}Araçlarý Spawnlama Seviyesi\n{59DC1C}OOC Chat Kapat/Aç Seviyesi\n{59DC1C}Birlik Kasasýndan Para Alma\n{59DC1C}Ajans Ayarlarý Seviyesi", "Seç", "Geri");
        }
        if (strfind(inputtext, "Maksimum Rütbe", true) != -1)
        {
            if (PlayerData[playerid][pFaction] == -1) return HataMesajGonder(playerid, "Bir birlik üyesi deðilsiniz.");
            Dialog_Show(playerid, MaksRutbe, DIALOG_STYLE_INPUT, "{72C425}Maksimum Rütbe Deðiþtir", "Rütbe sayýsý: %d\n\nMaksimum rütbe sayýsýný girin:", "Ayarla", "Geri", Birlikler[factionid][birlikRutbeler]);
        }
        if (strfind(inputtext, "Birlik Duyurusu Deðiþtir", true) != -1)
        {
            if (PlayerData[playerid][pFaction] == -1) return HataMesajGonder(playerid, "Bir birlik üyesi deðilsiniz.");
            Dialog_Show(playerid, BirlikDuyuruChange, DIALOG_STYLE_INPUT, "{72C425}Birlik Duyurusunu Deðiþtir", "Lütfen yeni bir birlik duyurusu giriniz:\nÞu anki duyuru: %s", "Deðiþtir", "Geri",Birlikler[factionid][birlikDuyuru]);
        }
        if (strfind(inputtext, "Ajans Ayarlarý", true) != -1)
        {
            if (PlayerData[playerid][pFaction] == -1) return HataMesajGonder(playerid, "Bir birlik üyesi deðilsiniz.");
            AjansAyarlari(playerid);
        }
	}
	return 1;
}


Dialog:BirlikAracSpawnTip(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new sayi = 0, str[2048];
		switch (listitem)
		{
			case 0:
			{
				strcat(str, "{FFFFFF}Araç ID\t{FFFFFF}Araç Model\n");

				for (new i = 0; i < MAX_ARAC; i++) if (AracInfo[i][aracExists] && AracInfo[i][aracTip] == 1 && GetVehicleDriver(AracInfo[i][aracVehicle]) == INVALID_PLAYER_ID && AracInfo[i][aracFaction] == Birlikler[PlayerData[playerid][pFaction]][birlikID])
				{
					format(str, sizeof str, "%s{FFFFFF}%d\t{FFFFFF}%s\n", str, AracInfo[i][aracVehicle], ReturnVehicleModelName(GetVehicleModel(AracInfo[i][aracVehicle])));
					sayi++;
				}

				if(!sayi) return HataMesajGonder(playerid,"Birliðe ait araç yok.");
				else
				{
					Dialog_Show(playerid, BirlikAracListe, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}Birlik Araç Listesi", str, "{FFFFFF}Spawnla", "{FFFFFF}Iptal");
				}
			}
			case 1:
			{
				for (new i = 0; i < MAX_ARAC; i++) if (AracInfo[i][aracExists] && AracInfo[i][aracTip] == 1 && GetVehicleDriver(AracInfo[i][aracVehicle]) == INVALID_PLAYER_ID && AracInfo[i][aracFaction] == Birlikler[PlayerData[playerid][pFaction]][birlikID])
				{
					DestroyDynamic3DTextLabel(Vehicle3DText[AracInfo[i][aracVehicle]]);
					VehicleCallSign[AracInfo[i][aracVehicle]] = 0;
					format(VehicleText[i], 24, "");
					Arac_Spawn(AracInfo[i][aracVehicle]);
					sayi++;
				}

				if (!sayi) return HataMesajGonder(playerid, "Birliðe ait araç yok.");
				else return SunucuMesaji(playerid, "%d adet birlik aracý respawn edildi.", sayi);
			}
		}
	}
	return true;
}

Dialog:BirlikAracListe(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new id = 0, aidsi = -1;

		for (new i = 0; i < MAX_ARAC; i++) if (AracInfo[i][aracExists] && AracInfo[i][aracTip] == 1 && GetVehicleDriver(AracInfo[i][aracVehicle]) == INVALID_PLAYER_ID && AracInfo[i][aracFaction] == Birlikler[PlayerData[playerid][pFaction]][birlikID])
		{
			if (listitem == id)
			{
				aidsi = i;
				break;
			}
			else id++;
		}

		if (aidsi != -1)
		{
			DestroyDynamic3DTextLabel(Vehicle3DText[AracInfo[aidsi][aracVehicle]]);
			VehicleCallSign[AracInfo[aidsi][aracVehicle]] = 0;
			format(VehicleText[aidsi], 24, "");
			Arac_Spawn(AracInfo[aidsi][aracVehicle]);

			SunucuMesaji(playerid, "%d id araç respawn edildi.", AracInfo[aidsi][aracVehicle]);
		}
		else return HataMesajGonder(playerid, "Seçilen araç bulunamadý.");
	}
	return true;
}

stock AjansAyarlari(playerid)
{
	new id = PlayerData[playerid][pFaction];
    Dialog_Show(playerid, AjansAyarlari, DIALOG_STYLE_TABLIST, "{38c5f7}Ajans Ayarlarý", "{38c5f7}» {FFFFFF}Yayýn Durumunu Deðiþtir\t%s\n{38c5f7}» {FFFFFF}Dinleyici Sayýsý\t%d\n{38c5f7}» {FFFFFF}Yayýn Tipini Deðiþtir\t%s\n{38c5f7}» {FFFFFF}Reklam Alýmý\t%s\n{38c5f7}» {FFFFFF}Reklam Ücreti\t{38c5f7}%s\n{38c5f7}» {FFFFFF}Alýnan Reklam Sayýsý\t%d\n \n{38c5f7}» Çekiliþ \n", "Seç", "Geri",
	(Birlikler[id][yayinDurum] == 1) ? ("{38c5f7}Açýk") : ("{FF0000}Kapalý"), Dinleyici_Sayisi(id),(Birlikler[id][yayinTipi] == 0) ? ("Haber") : ("Müzik"), (Birlikler[id][ReklamAlimi] == 1) ? ("{38c5f7}Alýnýyor") : ("{FF0000}Alýnmýyor"), FormatNumber(Birlikler[id][ReklamUcreti]), Birlikler[id][ReklamSayisi]);
	return 1;
}
stock Dinleyici_Sayisi(birlikid)
{
	new sayi = 0;
	foreach (new i:Player)
	{
	    if (PlayerData[i][pDinle] == birlikid)
	    {
	        sayi++;
		}
	}
	return sayi;
}
Dialog:MaksRutbe(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_birlik(playerid);
	if (response)
	{
	    if (isnull(inputtext)) return Dialog_Show(playerid, MaksRutbe, DIALOG_STYLE_INPUT, "{72C425}Maksimum Rütbe Deðiþtir", "Rütbe sayýsý: %d\n\nMaksimum rütbe sayýsýný girin:", "Ayarla", "Geri", Birlikler[PlayerData[playerid][pFaction]][birlikRutbeler]);
	    if (!IsNumeric(inputtext)) return Dialog_Show(playerid, MaksRutbe, DIALOG_STYLE_INPUT, "{72C425}Maksimum Rütbe Deðiþtir", "Rütbe sayýsý: %d\n\nMaksimum rütbe sayýsýný girin:", "Ayarla", "Geri", Birlikler[PlayerData[playerid][pFaction]][birlikRutbeler]);
	    if (strval(inputtext) < 4 || strval(inputtext) > 15)
	    {
	        HataMesajGonder(playerid, "Minimum 3, maksimum 15 girebilirsiniz.");
	        return Dialog_Show(playerid, MaksRutbe, DIALOG_STYLE_INPUT, "{72C425}Maksimum Rütbe Deðiþtir", "Rütbe sayýsý: %d\n\nMaksimum rütbe sayýsýný girin:", "Ayarla", "Geri", Birlikler[PlayerData[playerid][pFaction]][birlikRutbeler]);
	    }
	    Birlikler[PlayerData[playerid][pFaction]][birlikRutbeler] = strval(inputtext);
	    PlayerData[playerid][pFactionRutbe] = strval(inputtext);
	    MesajGonder(playerid, "Maksimum Rütbe sayýsý %d olarak deðiþtirildi.", strval(inputtext));
	}
	return 1;
}
Dialog:AjansAyarlari(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_birlik(playerid);
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
	            if (Birlikler[PlayerData[playerid][pFaction]][yayinDurum] == 1) Birlikler[PlayerData[playerid][pFaction]][yayinDurum] = 0;
	            else Birlikler[PlayerData[playerid][pFaction]][yayinDurum] = 1;
	            AjansAyarlari(playerid);
	            Birlik_Kaydet(PlayerData[playerid][pFaction]);
	        }
	        case 2:
	        {
	            if (Birlikler[PlayerData[playerid][pFaction]][yayinTipi] == 1) Birlikler[PlayerData[playerid][pFaction]][yayinTipi] = 0;
	            else Birlikler[PlayerData[playerid][pFaction]][yayinTipi] = 1;
	            AjansAyarlari(playerid);
	            Birlik_Kaydet(PlayerData[playerid][pFaction]);
	        }
	        case 3:
	        {
	            if (Birlikler[PlayerData[playerid][pFaction]][ReklamAlimi] == 1) Birlikler[PlayerData[playerid][pFaction]][ReklamAlimi] = 0;
	            else Birlikler[PlayerData[playerid][pFaction]][ReklamAlimi] = 1;
	            AjansAyarlari(playerid);
	            Birlik_Kaydet(PlayerData[playerid][pFaction]);
	        }
	        case 4:
	        {
	            Dialog_Show(playerid, ReklamUcreti, DIALOG_STYLE_INPUT, "{38c5f7}Reklam Ücreti", "Lütfen yeni bir reklam ücreti girin:", "Devam", "Geri");
	        }
	        case 7:
	        {
	            Dialog_Show(playerid, Cekilis, DIALOG_STYLE_TABLIST, "{38c5f7}Çekiliþ", "{FF0000}» {FFFFFF}Çekiliþ Durumu\t%s\n{FF0000}» {FFFFFF}Çekiliþ Ödül\t{38c5f7}%s\n{FF0000}» {FFFFFF}Katýlýmcý Sayýsý\t%d\n{38c5f7}» {FFFFFF}Çekiliþi Bitir", "Seç", "Geri",
	            (Birlikler[PlayerData[playerid][pFaction]][CekilisBasladi] == false) ? ("{ff0000}Kapalý") : ("{00ff2a}Açýk"), FormatNumber(Birlikler[PlayerData[playerid][pFaction]][cekilisOdul]), Iter_Count(CekilisKatilimcilar[PlayerData[playerid][pFaction]]));
	        }
	    }
	}
	return 1;
}
stock Reklam_Nearest(playerid, Float:radius)
{
	for (new i; i<MAX_BIRLIK; i++) if (IsValidDynamicPickup(Birlikler[i][reklamPickup]) && IsPlayerInRangeOfPoint(playerid, radius, Birlikler[i][reklamPos][0], Birlikler[i][reklamPos][1], Birlikler[i][reklamPos][2]))
	{
	    return i;
	}
	return -1;
}
Dialog:Cekilis(playerid, response, listitem, inputtext[])
{
	if (!response) return AjansAyarlari(playerid);
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
	            if (Birlikler[PlayerData[playerid][pFaction]][CekilisBasladi] == false)
	            {
	                Dialog_Show(playerid, CekilisBaslat, DIALOG_STYLE_INPUT, "{38c5f7}Çekilis Baslat", "Lütfen çekilis ödülünü girin ($5,000 ile &200,000 arasinda olmalidir):", "Baslat", "Kapat");
	            }
	            else
	            {
	                Birlikler[PlayerData[playerid][pFaction]][CekilisBasladi] = false;
	                Iter_Clear(CekilisKatilimcilar[PlayerData[playerid][pFaction]]);
	                Birlikler[PlayerData[playerid][pFaction]][cekilisOdul] = 0;
	                Dialog_Show(playerid, Cekilis, DIALOG_STYLE_TABLIST, "{38c5f7}Çekilis", "{FF0000}» {FFFFFF}Çekilis Durumu\t%s\n{FF0000}» {FFFFFF}Çekilis Ödül\t{38c5f7}%s\n{FF0000}» {FFFFFF}Katilimci Sayisi\t%d\n{38c5f7}» {FFFFFF}Çekilisi Bitir", "Seç", "Geri",
                    (Birlikler[PlayerData[playerid][pFaction]][CekilisBasladi] == false) ? ("{ff0000}Kapalý") : ("{00ff2a}Açýk"), FormatNumber(Birlikler[PlayerData[playerid][pFaction]][cekilisOdul]), Iter_Count(CekilisKatilimcilar[PlayerData[playerid][pFaction]]));
	            }
	        }
	        case 1:
	        {
	            Dialog_Show(playerid, CekilisOdul, DIALOG_STYLE_INPUT, "{38c5f7}Çekilis Ödül", "Lütfen çekilis ödülünü girin ($5,000 ile &200,000 arasinda olmalidir):", "Degistir", "Geri");
	        }
	        case 3:
	        {
                if (Birlikler[PlayerData[playerid][pFaction]][CekilisBasladi] == false) return HataMesajGonder(playerid, "Çekilis baslatilmamis.");
                if (Birlikler[PlayerData[playerid][pFaction]][cekilisOdul] < 5000 || Birlikler[PlayerData[playerid][pFaction]][birlikKasaPara] < Birlikler[PlayerData[playerid][pFaction]][cekilisOdul])
                {
                    HataMesajGonder(playerid, "Çekilis ödülü $5,000'den az veya birlik kasasinda yeterli para yok.");
                    Dialog_Show(playerid, Cekilis, DIALOG_STYLE_TABLIST, "{38c5f7}Çekilis", "{FF0000}» {FFFFFF}Çekilis Durumu\t%s\n{FF0000}» {FFFFFF}Çekilis Ödül\t{38c5f7}%s\n{FF0000}» {FFFFFF}Katilimci Sayisi\t%d\n{38c5f7}» {FFFFFF}Çekilisi Bitir", "Seç", "Geri",
                    (Birlikler[PlayerData[playerid][pFaction]][CekilisBasladi] == false) ? ("{ff0000}Kapalý") : ("{00ff2a}Açýk"), FormatNumber(Birlikler[PlayerData[playerid][pFaction]][cekilisOdul]), Iter_Count(CekilisKatilimcilar[PlayerData[playerid][pFaction]]));
                    return 1;
                }
                /*if (Iter_Count(CekilisKatilimcilar[PlayerData[playerid][pFaction]]) < 10)
                {
                    HataMesajGonder(playerid, "En az 10 kisi katilmadan çekilis sonuçlanamaz.");
                    Dialog_Show(playerid, Cekilis, DIALOG_STYLE_TABLIST, "{38c5f7}Çekilis", "{FF0000}» {FFFFFF}Çekilis Durumu\t%s\n{FF0000}» {FFFFFF}Çekilis Ödül\t{38c5f7}%s\n{FF0000}» {FFFFFF}Katilimci Sayisi\t%d\n{38c5f7}» {FFFFFF}Çekilisi Bitir", "Seç", "Geri",
                    (Birlikler[PlayerData[playerid][pFaction]][CekilisBasladi] == false) ? ("{ff0000}Kapalý") : ("{00ff2a}Açik"), FormatNumber(Birlikler[PlayerData[playerid][pFaction]][cekilisOdul]), Iter_Count(CekilisKatilimcilar[PlayerData[playerid][pFaction]]));
                    return 1;
                }*/
                new sqlid = Iter_Random(CekilisKatilimcilar[PlayerData[playerid][pFaction]]);
                new oyuncuID = GetPlayerIDWithSQLID(sqlid);
                if (oyuncuID != -1 && OyundaDegil(oyuncuID))
                {
                    ParaVer(oyuncuID, Birlikler[PlayerData[playerid][pFaction]][cekilisOdul]);
                    MesajGonder(oyuncuID, "%s adli yayin ajansinin yaptigi %s degerindeki çekilisi kazandiniz!", Birlikler[PlayerData[playerid][pFaction]][birlikAd], FormatNumber(Birlikler[PlayerData[playerid][pFaction]][cekilisOdul]));
                }
                else
                {
                    new str[100];
                    format(str, sizeof(str), "%s adli yayin ajansinin yaptigi %s degerindeki çekilisi kazandiniz!",Birlikler[PlayerData[playerid][pFaction]][birlikAd], FormatNumber(Birlikler[PlayerData[playerid][pFaction]][cekilisOdul]));
                    BildirimEkle(sqlid, str, "Sistem");
                    OfflineParaVer(sqlid, Birlikler[PlayerData[playerid][pFaction]][cekilisOdul]);
                }
                foreach (new i:Player) if ((PlayerData[i][pDinle] == PlayerData[playerid][pFaction] || i == playerid) && PlayerData[i][pAyarlar][2] == 0)
    			{
        			SendClientMessageEx(i, 0x42f445FF, "[%s] %s, %s degerindeki çekilisi kazandi!", Birlikler[PlayerData[playerid][pFaction]][birlikAd], SQLName(sqlid, 0), FormatNumber(Birlikler[PlayerData[playerid][pFaction]][cekilisOdul]));
    			}
                Birlikler[PlayerData[playerid][pFaction]][birlikKasaPara] -= Birlikler[PlayerData[playerid][pFaction]][cekilisOdul];
                Birlikler[PlayerData[playerid][pFaction]][CekilisBasladi] = false;
                Birlikler[PlayerData[playerid][pFaction]][cekilisOdul] = 0;
                Iter_Clear(CekilisKatilimcilar[PlayerData[playerid][pFaction]]);
	        }
	    }
	}
	return 1;
}
Dialog:CekilisOdul(playerid, response, listitem, inputtext[])
{
	if (!response)
	{
	    Dialog_Show(playerid, Cekilis, DIALOG_STYLE_TABLIST, "{38c5f7}Çekilis", "{FF0000}» {FFFFFF}Çekilis Durumu\t%s\n{FF0000}» {FFFFFF}Çekilis Ödül\t{38c5f7}%s\n{FF0000}» {FFFFFF}Katilimci Sayisi\t%d\n{38c5f7}» {FFFFFF}Çekilisi Bitir", "Seç", "Geri",
        (Birlikler[PlayerData[playerid][pFaction]][CekilisBasladi] == false) ? ("{ff0000}Kapalý") : ("{00ff2a}Açýk"), FormatNumber(Birlikler[PlayerData[playerid][pFaction]][cekilisOdul]), Iter_Count(CekilisKatilimcilar[PlayerData[playerid][pFaction]]));
	}
	if (response)
	{
	    if (isnull(inputtext)) return Dialog_Show(playerid, CekilisOdul, DIALOG_STYLE_INPUT, "{38c5f7}Çekilis Ödül", "Lütfen çekilis ödülünü girin ($5,000 ile &200,000 arasinda olmalidir):", "Degistir", "Geri");
	    if (!IsNumeric(inputtext)) return Dialog_Show(playerid, CekilisOdul, DIALOG_STYLE_INPUT, "{38c5f7}Çekilis Ödül", "Lütfen çekilis ödülünü girin ($5,000 ile &200,000 arasinda olmalidir):", "Degistir", "Geri");
	    if (strval(inputtext) < 5000 || strval(inputtext) > 200000) return Dialog_Show(playerid, CekilisOdul, DIALOG_STYLE_INPUT, "{38c5f7}Çekilis Ödül", "Lütfen çekilis ödülünü girin ($5,000 ile &200,000 arasinda olmalidir):", "Degistir", "Geri");
	    if (Birlikler[PlayerData[playerid][pFaction]][birlikKasaPara] < strval(inputtext))
	    {
            HataMesajGonder(playerid, "Birlik kasasinda o kadar para yok!");
            return Dialog_Show(playerid, CekilisOdul, DIALOG_STYLE_INPUT, "{38c5f7}Çekilis Ödül", "Lütfen çekilis ödülünü girin ($5,000 ile &200,000 arasinda olmalidir):", "Degistir", "Geri");
	    }
	    Birlikler[PlayerData[playerid][pFaction]][cekilisOdul] = strval(inputtext);
	    Dialog_Show(playerid, Cekilis, DIALOG_STYLE_TABLIST, "{38c5f7}Çekilis", "{FF0000}» {FFFFFF}Çekilis Durumu\t%s\n{FF0000}» {FFFFFF}Çekilis Ödül\t{38c5f7}%s\n{FF0000}» {FFFFFF}Katilimci Sayisi\t%d\n{38c5f7}» {FFFFFF}Çekilisi Bitir", "Seç", "Geri",
        (Birlikler[PlayerData[playerid][pFaction]][CekilisBasladi] == false) ? ("{ff0000}Kapalý") : ("{00ff2a}Açýk"), FormatNumber(Birlikler[PlayerData[playerid][pFaction]][cekilisOdul]), Iter_Count(CekilisKatilimcilar[PlayerData[playerid][pFaction]]));
	}
	return 1;
}
Dialog:CekilisBaslat(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (isnull(inputtext)) return Dialog_Show(playerid, CekilisBaslat, DIALOG_STYLE_INPUT, "{38c5f7}Çekilis Baslat", "Lütfen çekilis ödülünü girin ($5,000 ile &200,000 arasinda olmalidir):", "Baslat", "Kapat");
	    if (!IsNumeric(inputtext)) return Dialog_Show(playerid, CekilisBaslat, DIALOG_STYLE_INPUT, "{38c5f7}Çekilis Baslat", "Lütfen çekilis ödülünü girin ($5,000 ile &200,000 arasinda olmalidir):", "Baslat", "Kapat");
	    if (strval(inputtext) < 5000 || strval(inputtext) > 200000) return Dialog_Show(playerid, CekilisBaslat, DIALOG_STYLE_INPUT, "{38c5f7}Çekilis Baslat", "Lütfen çekilis ödülünü girin ($5,000 ile &200,000 arasinda olmalidir):", "Baslat", "Kapat");
	    if (Birlikler[PlayerData[playerid][pFaction]][birlikKasaPara] < strval(inputtext))
	    {
	        HataMesajGonder(playerid, "Birlik kasasinda o kadar para yok!");
	        return Dialog_Show(playerid, CekilisBaslat, DIALOG_STYLE_INPUT, "{38c5f7}Çekilis Baslat", "Lütfen çekilis ödülünü girin ($5,000 ile &200,000 arasinda olmalidir):", "Baslat", "Kapat");
	    }
	    Birlikler[PlayerData[playerid][pFaction]][CekilisBasladi] = true;
        Iter_Clear(CekilisKatilimcilar[PlayerData[playerid][pFaction]]);
        Birlikler[PlayerData[playerid][pFaction]][cekilisOdul] = strval(inputtext);
        foreach (new i:Player) if ((PlayerData[i][pDinle] == PlayerData[playerid][pFaction] || i == playerid) && PlayerData[i][pAyarlar][2] == 0)
    	{
        	SendClientMessageEx(i, 0x42f445FF, "[%s] %s %s degerinde çekilis baslatti. (/cekiliskatil)", Birlikler[PlayerData[playerid][pFaction]][birlikAd], ReturnName(playerid, 0), FormatNumber(strval(inputtext)));
    	}
    	MesajGonder(playerid, "Çekilis baslatildi, çekilis ayarlarindan \"Çekilisi Bitir\" seçenegine tiklayarak çekilisi sonuçlandirabilirsiniz.");
	}
	return 1;
}
Dialog:ReklamUcreti(playerid, response, listitem, inputtext[])
{
	if (!response) return AjansAyarlari(playerid);
	if (response)
	{
	    if (isnull(inputtext)) return Dialog_Show(playerid, ReklamUcreti, DIALOG_STYLE_INPUT, "{38c5f7}Reklam Ücreti", "Lütfen yeni bir reklam ücreti girin:", "Devam", "Geri");
	    if (!IsNumeric(inputtext)) return Dialog_Show(playerid, ReklamUcreti, DIALOG_STYLE_INPUT, "{38c5f7}Reklam Ücreti", "Lütfen yeni bir reklam ücreti girin:", "Devam", "Geri");
	    if (strval(inputtext) < 0) return Dialog_Show(playerid, ReklamUcreti, DIALOG_STYLE_INPUT, "{38c5f7}Reklam Ücreti", "Lütfen yeni bir reklam ücreti girin:", "Devam", "Geri");

	    Birlikler[PlayerData[playerid][pFaction]][ReklamUcreti] = strval(inputtext);
	    if (IsValidDynamicPickup(Birlikler[PlayerData[playerid][pFaction]][reklamPickup])) DestroyDynamicPickup(Birlikler[PlayerData[playerid][pFaction]][reklamPickup]);
     	if (IsValidDynamic3DTextLabel(Birlikler[PlayerData[playerid][pFaction]][reklamLabel])) DestroyDynamic3DTextLabel(Birlikler[PlayerData[playerid][pFaction]][reklamLabel]);
      	Birlikler[PlayerData[playerid][pFaction]][reklamPickup] = CreateDynamicPickup(1239, 23, Birlikler[PlayerData[playerid][pFaction]][reklamPos][0], Birlikler[PlayerData[playerid][pFaction]][reklamPos][1], Birlikler[PlayerData[playerid][pFaction]][reklamPos][2]);
       	new str[124];
        format(str, sizeof(str), "{E74C3C}[Reklam Noktasi]\n{E74C3C}Ajans: {FFFFFF}%s\n{E74C3C}Ücret: {FFFFFF}%s\n{E74C3C}(/reklamver)", Birlikler[PlayerData[playerid][pFaction]][birlikAd], FormatNumber(Birlikler[PlayerData[playerid][pFaction]][ReklamUcreti]));
        Birlikler[PlayerData[playerid][pFaction]][reklamLabel] = CreateDynamic3DTextLabel(str, -1, Birlikler[PlayerData[playerid][pFaction]][reklamPos][0], Birlikler[PlayerData[playerid][pFaction]][reklamPos][1], Birlikler[PlayerData[playerid][pFaction]][reklamPos][2], 10.0);
	    Birlik_Kaydet(PlayerData[playerid][pFaction]);
	    AjansAyarlari(playerid);
	}
	return 1;
}
Dialog:BirliktenAt(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_birlik(playerid);
	if (response)
	{
	    if (isnull(inputtext)) return Dialog_Show(playerid,BirliktenAt,DIALOG_STYLE_INPUT, "{72C425}Üye At", "{FFFFFF}Lütfen birlikten atmak istediðiniz kiþinin ID'sini girin.", "Devam", "Geri");
		if (!IsNumeric(inputtext)) return Dialog_Show(playerid,BirliktenAt,DIALOG_STYLE_INPUT, "{72C425}Üye At", "{FFFFFF}Lütfen birlikten atmak istediðiniz kiþinin ID'sini girin.", "Devam", "Geri");
		if (!OyundaDegil(strval(inputtext)))
		{
		    HataMesajGonder(playerid, "Böyle bir kiþi yok.");
		    return Dialog_Show(playerid,BirliktenAt,DIALOG_STYLE_INPUT, "{72C425}Üye At", "{FFFFFF}Lütfen birlikten atmak istediðiniz kiþinin ID'sini girin.", "Devam", "Geri");
		}
		new targetid = strval(inputtext), id;
		if (PlayerData[playerid][pFaction] != PlayerData[targetid][pFaction])
		{
		    HataMesajGonder(playerid, "Bu kiþi sizin birliðinizden deðil.");
		    return Dialog_Show(playerid,BirliktenAt,DIALOG_STYLE_INPUT, "{72C425}Üye At", "{FFFFFF}Lütfen birlikten atmak istediðiniz kiþinin ID'sini girin.", "Devam", "Geri");
		}
		if (targetid == playerid)
		{
		    HataMesajGonder(playerid, "Kendi kendini birlikten atamazsýn.");
		    return 1;
		}
		if (GetFactionType(targetid) == BIRLIK_LSPD || GetFactionType(targetid) == BIRLIK_FBI)
		{
		    ZirhAyarla(targetid,0);
		    ResetWeapons(targetid);
		}
		SendBirlikMessage(PlayerData[playerid][pFaction],-1, "{ff7c4d}BÝRLÝK: {FFFFFF}%s adlý kiþi, %s isimli oyuncuyu birlikten attý.", ReturnName(playerid,0), ReturnName(id, 0));
		BirliktenAt(targetid);
		Oyuncu_Kaydet(targetid);
	}
	return 1;
}
Dialog:BirliktenCik(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new factionid = PlayerData[playerid][pFaction];
	    if (factionid == -1) return HataMesajGonder(playerid, "Birlik üyesi deðilsin.");
	    if (GetFactionType(playerid) == BIRLIK_LSPD || GetFactionType(playerid) == BIRLIK_FBI)
		{
			ZirhAyarla(playerid, 0);
			ResetWeapons(playerid);
		}
		SendBirlikMessage(factionid,-1, "{ff7c4d}BiRLiK: {FFFFFF}%s adlý kiþi birlikten ayrýldý.",ReturnName(playerid,0));
		BirliktenAt(playerid);
		Oyuncu_Kaydet(playerid);
	}
	return 1;
}
ResetWeapon(playerid, weaponid)
{
	ResetPlayerWeapons(playerid);

	for (new i = 0; i < 13; i ++) {
	    if (PlayerData[playerid][pSilahlar][i] != weaponid) {
	        GivePlayerWeapon(playerid, PlayerData[playerid][pSilahlar][i], PlayerData[playerid][pMermiler][i]);
		}
		else {
            PlayerData[playerid][pSilahlar][i] = 0;
            PlayerData[playerid][pMermiler][i] = 0;
	    }
	}
	return 1;
}
stock Birlik_OfflineUyeler(playerid,factionid)
{
	new query[128];
	format(query,sizeof(query), "SELECT * FROM `oyuncular` WHERE `Birlik` = '%d'",factionid);
	new Cache:Radless = mysql_query(g_SQL,query);
	new rows;
	cache_get_row_count(rows);
	if (!rows) return HataMesajGonder(playerid, "Çevrimdýþý üye bulunamadý.");
	new string[2000],name[24],rutbe,songiris[23],id,sayi;
	strcat(string, "ID\tAd\tRütbe\tSon Giriþ\n");
	for (new i = 0; i < rows; i ++)
	{
	    if (sayi < 75)
	    {
	        cache_get_value_name(i, "Isim",name,24);
	        new pid = GetPlayerID(name);
	        if (pid == -1)
	        {
	            sayi++;
	            cache_get_value_name_int(i, "ID",id);
	            cache_get_value_name_int(i, "BirlikRutbe",rutbe);
	            cache_get_value_name(i, "SonGiris",songiris,23);
	            format(string,sizeof(string), "%s{59DC1C}%d\t{59DC1C}%s\t{59DC1C}%s\t{59DC1C}%s\n",string,id,name,BirlikRutbe[factionid][rutbe-1],songiris);
	        }
		}
	}
	cache_delete(Radless);
	if (sayi == 0) return HataMesajGonder(playerid, "Hiç çevrimdýþý üye yok.");
	Dialog_Show(playerid, OfflineUyeler, DIALOG_STYLE_TABLIST_HEADERS, "{72C425}Çevrimdýþý Üyeler",string, "Ayarla", "{FF6347}Iptal");
	return 1;
}
Dialog:OfflineUyeler(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_birlik(playerid);
	if (response)
	{
	    new notreal[128],idx;
	    notreal = strtok(inputtext,idx);
	    SetPVarInt(playerid, "OfflineSQLID",strval(notreal));
	    if (Birlikler[PlayerData[playerid][pFaction]][birlikTip] >= 1 && Birlikler[PlayerData[playerid][pFaction]][birlikTip] <= 3 && Birlikler[PlayerData[playerid][pFaction]][birlikTip] != 4)
	    {
	        Dialog_Show(playerid,OfflineUyeDuzenle,DIALOG_STYLE_LIST, "{72C425}Üye Ýþlem", "{ED4D18}» Birlikten At\n{ED4D18}» Rütbe Deðiþtir", "Seç", "Geri");
	    }
	    else
	    {
	        Dialog_Show(playerid,OfflineUyeDuzenle,DIALOG_STYLE_LIST, "{72C425}Üye Ýþlem", "{ED4D18}» Birlikten At\n{ED4D18}» Rütbe Deðiþtir\n{ED4D18}» Divizyon Deðiþtir", "Seç", "Geri");
	    }
	}
	return 1;
}
Dialog:OfflineUyeDuzenle(playerid, response, listitem, inputtext[])
{
	if (!response) return Birlik_OfflineUyeler(playerid,PlayerData[playerid][pFaction]);
	if (response)
	{
	    new sqlid = GetPVarInt(playerid, "OfflineSQLID");
     	if (listitem == 0)
     	{
     	    new query[300];
     	    format(query,sizeof(query), "UPDATE `oyuncular` SET `Birlik` = '-1',`BirlikRutbe` = '0',`BirlikDivizyon` = '0' WHERE `ID` = '%d'",sqlid);
     	    mysql_query(g_SQL,query, false);
     	    format(query,sizeof(query), "%s tarafýndan birlikten atýldýn.",ReturnName(playerid,0));
     	    BildirimEkle(sqlid,query, "Birlik");
	     	SendBirlikMessage(PlayerData[playerid][pFaction],-1, "{ff7c4d}BÝRLÝK: {FFFFFF}%s adlý kiþi, %s tarafýndan birlikten atýldý.",SQLName(sqlid,0),ReturnName(playerid,0));
			Birlik_OfflineUyeler(playerid,PlayerData[playerid][pFaction]);
			return 1;
 		}
 		if (listitem == 1)
 		{
 		    SetPVarInt(playerid, "OffRank",1);
 		    RutbeDegistirmeDialog(playerid,PlayerData[playerid][pFaction]);
 		    return 1;
 		}
 		if (listitem == 2)
 		{
 		    SetPVarInt(playerid, "OffDiviz",1);
 		    Birlik_DivizyonDegistir(playerid,PlayerData[playerid][pFaction]);
 		}
	}
	return 1;
}
GetVehicleDriver(vehicleid) {
	foreach (new i : Player) {
		if (GetPlayerState(i) == PLAYER_STATE_DRIVER && GetPlayerVehicleID(i) == vehicleid) return i;
	}
	return INVALID_PLAYER_ID;
}
Dialog:RutbeYetkilendirme(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new factionid = PlayerData[playerid][pFaction];
	    if (listitem == 0) // Üye Alma
	    {
	        Dialog_Show(playerid,UAS,DIALOG_STYLE_INPUT, "{72C425}Üye Alma Seviyesi", "{FFFFFF}Birliðinizde hangi seviyenin üye alabileceðini girin;\nÞu Anki Seviye: {72C425}%d", "Deðiþtir", "Geri",Birlikler[factionid][birlikYetkilendirme][0]);
	    }
	    if (listitem == 1) // Üye Atma
	    {
	        Dialog_Show(playerid,BUAS,DIALOG_STYLE_INPUT, "{72C425}Üye Atma Seviyesi", "{FFFFFF}Birliðinizde hangi seviyenin üye atabileceðini girin;\nÞu Anki Seviye: {72C425}%d", "Deðiþtir", "Geri",Birlikler[factionid][birlikYetkilendirme][1]);
	    }
	    if (listitem == 2) // Rütbe Deðiþtirme
	    {
	        Dialog_Show(playerid,RDS,DIALOG_STYLE_INPUT, "{72C425}Rütbe Deðiþtirme Seviyesi", "{FFFFFF}Birliðinizde hangi seviyenin rütbe deðiþtirebileceðini girin;\nÞu Anki Seviye: {72C425}%d", "Deðiþtir", "Geri",Birlikler[factionid][birlikYetkilendirme][2]);
	    }
	    if (listitem == 3) // Divizyon Deðiþtirme Seviyesi
	    {
	        Dialog_Show(playerid,DDS,DIALOG_STYLE_INPUT, "{72C425}Divizyon Deðiþtirme Seviyesi", "{FFFFFF}Birliðinizde hangi seviyenin divizyon deðiþtirebileceðini girin;\nÞu Anki Seviye: {72C425}%d", "Deðiþtir", "Geri",Birlikler[factionid][birlikYetkilendirme][3]);
	    }
	    if (listitem == 4) // Araçlarý Spawnlama
	    {
	        Dialog_Show(playerid,ASS,DIALOG_STYLE_INPUT, "{72C425}Araçlarý Spawnlama Seviyesi", "{FFFFFF}Birliðinizde hangi seviyenin birlik araçlarýný spawnlayabileceðini girin;\nÞu Anki Seviye: {72C425}%d", "Deðiþtir", "Geri",Birlikler[factionid][birlikYetkilendirme][4]);
	    }
	    if (listitem == 5) // OOC Chat Kapatma Seviyesi
	    {
	        Dialog_Show(playerid,OCKS,DIALOG_STYLE_INPUT, "{72C425}OOC Chat Kapatma Seviyesi", "{FFFFFF}Birliðinizde hangi seviyenin OOC Chat Kapatabileceðini girin;\nÞu Anki Seviye: {72C425}%d", "Deðiþtir", "Geri",Birlikler[factionid][birlikYetkilendirme][5]);
	    }
	    if (listitem == 6) // Birlik Kasasýndan Para Alma
	    {
	        Dialog_Show(playerid,BKPA,DIALOG_STYLE_INPUT, "{72C425}Birlik Kasasýndan Para Alma", "{FFFFFF}Birliðinizde hangi seviyenin Birlik Kasasýndan Para Alabileceðini girin;\nÞu Anki Seviye: {72C425}%d", "Deðiþtir", "Geri",Birlikler[factionid][birlikYetkilendirme][6]);
	    }
	    if (listitem == 7) // Ajans Ayarlari
	    {
	        Dialog_Show(playerid, AjansAyarlariSeviye, DIALOG_STYLE_INPUT, "{72C425}Ajans Ayarlarý Seviyesi", "{FFFFFF}Birliðinizde hangi seviyenin Ajans ayarlarýna eriþebileceðini girin;\nÞu Anki Seviye: {72C425}%d", "Deðiþtir", "Geri",Birlikler[factionid][birlikYetkilendirme][7]);
	    }
	}
	if (!response) return cmd_birlik(playerid);
	return 1;
}
Dialog:UAS(playerid, response, listitem, inputtext[])
{
	if (!response) return Dialog_Show(playerid,RutbeYetkilendirme,DIALOG_STYLE_LIST, "{72C425} Rütbe Yetkilendirmeleri", "{59DC1C}Üye Alma Seviyesi\n{59DC1C}Üye Atma Seviyesi\n{59DC1C}Rütbe Deðiþtirme Seviyesi\n{59DC1C}Divizyon Deðiþtirme Seviyesi\n{59DC1C}Araçlarý Spawnlama Seviyesi\n{59DC1C}OOC Chat Kapat/Aç Seviyesi\n{59DC1C}Birlik Kasasýndan Para Alma\n{59DC1C}Ajans Ayarlarý Seviyesi", "Seç", "Geri");
	if (response)
	{
	    new factionid = PlayerData[playerid][pFaction];
	    if (isnull(inputtext)) return Dialog_Show(playerid,UAS,DIALOG_STYLE_INPUT, "{72C425}Üye Alma Seviyesi", "{FFFFFF}Birliðinizde hangi seviyenin üye alabileceðini girin;\nÞu Anki Seviye: {72C425}%d", "Deðiþtir", "Geri",Birlikler[factionid][birlikYetkilendirme][0]);
	    if (!IsNumeric(inputtext)) return Dialog_Show(playerid,UAS,DIALOG_STYLE_INPUT, "{72C425}Üye Alma Seviyesi", "{FFFFFF}Birliðinizde hangi seviyenin üye alabileceðini girin;\nÞu Anki Seviye: {72C425}%d", "Deðiþtir", "Geri",Birlikler[factionid][birlikYetkilendirme][0]);
	    if (strval(inputtext) > Birlikler[PlayerData[playerid][pFaction]][birlikRutbeler]) return Dialog_Show(playerid,UAS,DIALOG_STYLE_INPUT, "{72C425}Üye Alma Seviyesi", "{FFFFFF}Birliðinizde hangi seviyenin üye alabileceðini girin;\nÞu Anki Seviye: {72C425}%d", "Deðiþtir", "Geri",Birlikler[factionid][birlikYetkilendirme][0]);
	    Birlikler[PlayerData[playerid][pFaction]][birlikYetkilendirme][0] = strval(inputtext);
	    Birlik_Kaydet(PlayerData[playerid][pFaction]);
	    SunucuMesaji(playerid, "Üye Alma seviyesi {72C425}%d {FFFFFF}olarak deðiþtirildi.",strval(inputtext));
	    Dialog_Show(playerid,RutbeYetkilendirme,DIALOG_STYLE_LIST, "{72C425} Rütbe Yetkilendirmeleri", "{59DC1C}Üye Alma Seviyesi\n{59DC1C}Üye Atma Seviyesi\n{59DC1C}Rütbe Deðiþtirme Seviyesi\n{59DC1C}Divizyon Deðiþtirme Seviyesi\n{59DC1C}Araçlarý Spawnlama Seviyesi\n{59DC1C}OOC Chat Kapat/Aç Seviyesi\n{59DC1C}Birlik Kasasýndan Para Alma\n{59DC1C}Ajans Ayarlarý Seviyesi", "Seç", "Geri");

	}
	return 1;
}
Dialog:BUAS(playerid, response, listitem, inputtext[])
{
    if (!response) return Dialog_Show(playerid,RutbeYetkilendirme,DIALOG_STYLE_LIST, "{72C425} Rütbe Yetkilendirmeleri", "{59DC1C}Üye Alma Seviyesi\n{59DC1C}Üye Atma Seviyesi\n{59DC1C}Rütbe Deðiþtirme Seviyesi\n{59DC1C}Divizyon Deðiþtirme Seviyesi\n{59DC1C}Araçlarý Spawnlama Seviyesi\n{59DC1C}OOC Chat Kapat/Aç Seviyesi\n{59DC1C}Birlik Kasasýndan Para Alma\n{59DC1C}Ajans Ayarlarý Seviyesi", "Seç", "Geri");
    if (response)
    {
        new factionid = PlayerData[playerid][pFaction];
		if (isnull(inputtext)) return Dialog_Show(playerid,BUAS,DIALOG_STYLE_INPUT, "{72C425}Üye Atma Seviyesi", "{FFFFFF}Birliðinizde hangi seviyenin üye atabileceðini girin;\nÞu Anki Seviye: {72C425}%d", "Deðiþtir", "Geri",Birlikler[factionid][birlikYetkilendirme][1]);
	 	if (!IsNumeric(inputtext)) return Dialog_Show(playerid,BUAS,DIALOG_STYLE_INPUT, "{72C425}Üye Atma Seviyesi", "{FFFFFF}Birliðinizde hangi seviyenin üye atabileceðini girin;\nÞu Anki Seviye: {72C425}%d", "Deðiþtir", "Geri",Birlikler[factionid][birlikYetkilendirme][1]);
	 	if (strval(inputtext) > Birlikler[PlayerData[playerid][pFaction]][birlikRutbeler]) return Dialog_Show(playerid,BUAS,DIALOG_STYLE_INPUT, "{72C425}Üye Atma Seviyesi", "{FFFFFF}Birliðinizde hangi seviyenin üye atabileceðini girin;\nÞu Anki Seviye: {72C425}%d", "Deðiþtir", "Geri",Birlikler[factionid][birlikYetkilendirme][1]);
	 	Birlikler[PlayerData[playerid][pFaction]][birlikYetkilendirme][1] = strval(inputtext);
	    Birlik_Kaydet(PlayerData[playerid][pFaction]);
	    SunucuMesaji(playerid, "Üye Atma seviyesi {72C425}%d {FFFFFF}olarak deðiþtirildi.",strval(inputtext));
	    Dialog_Show(playerid,RutbeYetkilendirme,DIALOG_STYLE_LIST, "{72C425} Rütbe Yetkilendirmeleri", "{59DC1C}Üye Alma Seviyesi\n{59DC1C}Üye Atma Seviyesi\n{59DC1C}Rütbe Deðiþtirme Seviyesi\n{59DC1C}Divizyon Deðiþtirme Seviyesi\n{59DC1C}Araçlarý Spawnlama Seviyesi\n{59DC1C}OOC Chat Kapat/Aç Seviyesi\n{59DC1C}Birlik Kasasýndan Para Alma\n{59DC1C}Ajans Ayarlarý Seviyesi", "Seç", "Geri");
    }
	return 1;
}
Dialog:RDS(playerid, response, listitem, inputtext[])
{
    if (!response) return Dialog_Show(playerid,RutbeYetkilendirme,DIALOG_STYLE_LIST, "{72C425} Rütbe Yetkilendirmeleri", "{59DC1C}Üye Alma Seviyesi\n{59DC1C}Üye Atma Seviyesi\n{59DC1C}Rütbe Deðiþtirme Seviyesi\n{59DC1C}Divizyon Deðiþtirme Seviyesi\n{59DC1C}Araçlarý Spawnlama Seviyesi\n{59DC1C}OOC Chat Kapat/Aç Seviyesi\n{59DC1C}Birlik Kasasýndan Para Alma\n{59DC1C}Ajans Ayarlarý Seviyesi", "Seç", "Geri");
    if (response)
    {
        new factionid = PlayerData[playerid][pFaction];
		if (isnull(inputtext)) return Dialog_Show(playerid,RDS,DIALOG_STYLE_INPUT, "{72C425}Rütbe Deðiþtirme Seviyesi", "{FFFFFF}Birliðinizde hangi seviyenin rütbe deðiþtirebileceðini girin;\nÞu Anki Seviye: {72C425}%d", "Deðiþtir", "Geri",Birlikler[factionid][birlikYetkilendirme][2]);
	 	if (!IsNumeric(inputtext)) return Dialog_Show(playerid,RDS,DIALOG_STYLE_INPUT, "{72C425}Rütbe Deðiþtirme Seviyesi", "{FFFFFF}Birliðinizde hangi seviyenin rütbe deðiþtirebileceðini girin;\nÞu Anki Seviye: {72C425}%d", "Deðiþtir", "Geri",Birlikler[factionid][birlikYetkilendirme][2]);
	 	if (strval(inputtext) > Birlikler[PlayerData[playerid][pFaction]][birlikRutbeler]) return Dialog_Show(playerid,RDS,DIALOG_STYLE_INPUT, "{72C425}Rütbe Deðiþtirme Seviyesi", "{FFFFFF}Birliðinizde hangi seviyenin rütbe deðiþtirebileceðini girin;\nÞu Anki Seviye: {72C425}%d", "Deðiþtir", "Geri",Birlikler[factionid][birlikYetkilendirme][2]);
	 	Birlikler[PlayerData[playerid][pFaction]][birlikYetkilendirme][2] = strval(inputtext);
	    Birlik_Kaydet(PlayerData[playerid][pFaction]);
	    SunucuMesaji(playerid, "Rütbe Deðiþtirme Seviyesi {72C425}%d {FFFFFF}olarak deðiþtirildi.",strval(inputtext));
	    Dialog_Show(playerid,RutbeYetkilendirme,DIALOG_STYLE_LIST, "{72C425} Rütbe Yetkilendirmeleri", "{59DC1C}Üye Alma Seviyesi\n{59DC1C}Üye Atma Seviyesi\n{59DC1C}Rütbe Deðiþtirme Seviyesi\n{59DC1C}Divizyon Deðiþtirme Seviyesi\n{59DC1C}Araçlarý Spawnlama Seviyesi\n{59DC1C}OOC Chat Kapat/Aç Seviyesi\n{59DC1C}Birlik Kasasýndan Para Alma\n{59DC1C}Ajans Ayarlarý Seviyesi", "Seç", "Geri");
    }
	return 1;
}
Dialog:DDS(playerid, response, listitem, inputtext[])
{
    if (!response) return  Dialog_Show(playerid,RutbeYetkilendirme,DIALOG_STYLE_LIST, "{72C425} Rütbe Yetkilendirmeleri", "{59DC1C}Üye Alma Seviyesi\n{59DC1C}Üye Atma Seviyesi\n{59DC1C}Rütbe Deðiþtirme Seviyesi\n{59DC1C}Divizyon Deðiþtirme Seviyesi\n{59DC1C}Araçlarý Spawnlama Seviyesi\n{59DC1C}OOC Chat Kapat/Aç Seviyesi\n{59DC1C}Birlik Kasasýndan Para Alma\n{59DC1C}Ajans Ayarlarý Seviyesi", "Seç", "Geri");
    if (response)
    {
        new factionid = PlayerData[playerid][pFaction];
		if (isnull(inputtext)) return  Dialog_Show(playerid,DDS,DIALOG_STYLE_INPUT, "{72C425}Divizyon Deðiþtirme Seviyesi", "{FFFFFF}Birliðinizde hangi seviyenin divizyon deðiþtirebileceðini girin;\nÞu Anki Seviye: {72C425}%d", "Deðiþtir", "Geri",Birlikler[factionid][birlikYetkilendirme][3]);
	 	if (!IsNumeric(inputtext))  return Dialog_Show(playerid,DDS,DIALOG_STYLE_INPUT, "{72C425}Divizyon Deðiþtirme Seviyesi", "{FFFFFF}Birliðinizde hangi seviyenin divizyon deðiþtirebileceðini girin;\nÞu Anki Seviye: {72C425}%d", "Deðiþtir", "Geri",Birlikler[factionid][birlikYetkilendirme][3]);
	 	if (strval(inputtext) > Birlikler[PlayerData[playerid][pFaction]][birlikRutbeler]) return  Dialog_Show(playerid,DDS,DIALOG_STYLE_INPUT, "{72C425}Divizyon Deðiþtirme Seviyesi", "{FFFFFF}Birliðinizde hangi seviyenin divizyon deðiþtirebileceðini girin;\nÞu Anki Seviye: {72C425}%d", "Deðiþtir", "Geri",Birlikler[factionid][birlikYetkilendirme][3]);
	 	Birlikler[PlayerData[playerid][pFaction]][birlikYetkilendirme][3] = strval(inputtext);
	    Birlik_Kaydet(PlayerData[playerid][pFaction]);
	    SunucuMesaji(playerid, "Divizyon Deðiþtirme Seviyesi {72C425}%d {FFFFFF}olarak deðiþtirildi.",strval(inputtext));
	    Dialog_Show(playerid,RutbeYetkilendirme,DIALOG_STYLE_LIST, "{72C425} Rütbe Yetkilendirmeleri", "{59DC1C}Üye Alma Seviyesi\n{59DC1C}Üye Atma Seviyesi\n{59DC1C}Rütbe Deðiþtirme Seviyesi\n{59DC1C}Divizyon Deðiþtirme Seviyesi\n{59DC1C}Araçlarý Spawnlama Seviyesi\n{59DC1C}OOC Chat Kapat/Aç Seviyesi\n{59DC1C}Birlik Kasasýndan Para Alma\n{59DC1C}Ajans Ayarlarý Seviyesi", "Seç", "Geri");
    }
	return 1;
}
Dialog:ASS(playerid, response, listitem, inputtext[])
{
    if (!response) return Dialog_Show(playerid,RutbeYetkilendirme,DIALOG_STYLE_LIST, "{72C425} Rütbe Yetkilendirmeleri", "{59DC1C}Üye Alma Seviyesi\n{59DC1C}Üye Atma Seviyesi\n{59DC1C}Rütbe Deðiþtirme Seviyesi\n{59DC1C}Divizyon Deðiþtirme Seviyesi\n{59DC1C}Araçlarý Spawnlama Seviyesi\n{59DC1C}OOC Chat Kapat/Aç Seviyesi\n{59DC1C}Birlik Kasasýndan Para Alma\n{59DC1C}Ajans Ayarlarý Seviyesi", "Seç", "Geri");
    if (response)
    {
        new factionid = PlayerData[playerid][pFaction];
		if (isnull(inputtext)) return  Dialog_Show(playerid,ASS,DIALOG_STYLE_INPUT, "{72C425}Araçlarý Spawnlama Seviyesi", "{FFFFFF}Birliðinizde hangi seviyenin birlik araçlarýný spawnlayabileceðini girin;\nÞu Anki Seviye: {72C425}%d", "Deðiþtir", "Geri",Birlikler[factionid][birlikYetkilendirme][4]);
	 	if (!IsNumeric(inputtext))  return Dialog_Show(playerid,ASS,DIALOG_STYLE_INPUT, "{72C425}Araçlarý Spawnlama Seviyesi", "{FFFFFF}Birliðinizde hangi seviyenin birlik araçlarýný spawnlayabileceðini girin;\nÞu Anki Seviye: {72C425}%d", "Deðiþtir", "Geri",Birlikler[factionid][birlikYetkilendirme][4]);
	 	if (strval(inputtext) > Birlikler[PlayerData[playerid][pFaction]][birlikRutbeler]) return  Dialog_Show(playerid,ASS,DIALOG_STYLE_INPUT, "{72C425}Araçlarý Spawnlama Seviyesi", "{FFFFFF}Birliðinizde hangi seviyenin birlik araçlarýný spawnlayabileceðini girin;\nÞu Anki Seviye: {72C425}%d", "Deðiþtir", "Geri",Birlikler[factionid][birlikYetkilendirme][4]);
	 	Birlikler[PlayerData[playerid][pFaction]][birlikYetkilendirme][4] = strval(inputtext);
	    Birlik_Kaydet(PlayerData[playerid][pFaction]);
	    SunucuMesaji(playerid, "Araçlarý Spawnlama Seviyesi {72C425}%d {FFFFFF}olarak deðiþtirildi.",strval(inputtext));
	    Dialog_Show(playerid,RutbeYetkilendirme,DIALOG_STYLE_LIST, "{72C425} Rütbe Yetkilendirmeleri", "{59DC1C}Üye Alma Seviyesi\n{59DC1C}Üye Atma Seviyesi\n{59DC1C}Rütbe Deðiþtirme Seviyesi\n{59DC1C}Divizyon Deðiþtirme Seviyesi\n{59DC1C}Araçlarý Spawnlama Seviyesi\n{59DC1C}OOC Chat Kapat/Aç Seviyesi\n{59DC1C}Birlik Kasasýndan Para Alma\n{59DC1C}Ajans Ayarlarý Seviyesi", "Seç", "Geri");
    }
	return 1;
}
Dialog:OCKS(playerid, response, listitem, inputtext[])
{
    if (!response) return Dialog_Show(playerid,RutbeYetkilendirme,DIALOG_STYLE_LIST, "{72C425} Rütbe Yetkilendirmeleri", "{59DC1C}Üye Alma Seviyesi\n{59DC1C}Üye Atma Seviyesi\n{59DC1C}Rütbe Deðiþtirme Seviyesi\n{59DC1C}Divizyon Deðiþtirme Seviyesi\n{59DC1C}Araçlarý Spawnlama Seviyesi\n{59DC1C}OOC Chat Kapat/Aç Seviyesi\n{59DC1C}Birlik Kasasýndan Para Alma\n{59DC1C}Ajans Ayarlarý Seviyesi", "Seç", "Geri");
    if (response)
    {
        new factionid = PlayerData[playerid][pFaction];
		if (isnull(inputtext)) return  Dialog_Show(playerid,OCKS,DIALOG_STYLE_INPUT, "{72C425}OOC Chat Kapatma Seviyesi", "{FFFFFF}Birliðinizde hangi seviyenin OOC Chat Kapatabileceðini girin;\nÞu Anki Seviye: {72C425}%d", "Deðiþtir", "Geri",Birlikler[factionid][birlikYetkilendirme][5]);
	 	if (!IsNumeric(inputtext))  return Dialog_Show(playerid,OCKS,DIALOG_STYLE_INPUT, "{72C425}OOC Chat Kapatma Seviyesi", "{FFFFFF}Birliðinizde hangi seviyenin OOC Chat Kapatabileceðini girin;\nÞu Anki Seviye: {72C425}%d", "Deðiþtir", "Geri",Birlikler[factionid][birlikYetkilendirme][5]);
	 	if (strval(inputtext) > Birlikler[PlayerData[playerid][pFaction]][birlikRutbeler]) return  Dialog_Show(playerid,OCKS,DIALOG_STYLE_INPUT, "{72C425}OOC Chat Kapatma Seviyesi", "{FFFFFF}Birliðinizde hangi seviyenin OOC Chat Kapatabileceðini girin;\nÞu Anki Seviye: {72C425}%d", "Deðiþtir", "Geri",Birlikler[factionid][birlikYetkilendirme][5]);
	 	Birlikler[PlayerData[playerid][pFaction]][birlikYetkilendirme][5] = strval(inputtext);
	    Birlik_Kaydet(PlayerData[playerid][pFaction]);
	    SunucuMesaji(playerid, "OOC Chat Kapatma Seviyesi {72C425}%d {FFFFFF}olarak deðiþtirildi.",strval(inputtext));
	    Dialog_Show(playerid,RutbeYetkilendirme,DIALOG_STYLE_LIST, "{72C425} Rütbe Yetkilendirmeleri", "{59DC1C}Üye Alma Seviyesi\n{59DC1C}Üye Atma Seviyesi\n{59DC1C}Rütbe Deðiþtirme Seviyesi\n{59DC1C}Divizyon Deðiþtirme Seviyesi\n{59DC1C}Araçlarý Spawnlama Seviyesi\n{59DC1C}OOC Chat Kapat/Aç Seviyesi\n{59DC1C}Birlik Kasasýndan Para Alma\n{59DC1C}Ajans Ayarlarý Seviyesi", "Seç", "Geri");
    }
	return 1;
}
Dialog:BKPA(playerid, response, listitem, inputtext[])
{
    if (!response) return Dialog_Show(playerid,RutbeYetkilendirme,DIALOG_STYLE_LIST, "{72C425} Rütbe Yetkilendirmeleri", "{59DC1C}Üye Alma Seviyesi\n{59DC1C}Üye Atma Seviyesi\n{59DC1C}Rütbe Deðiþtirme Seviyesi\n{59DC1C}Divizyon Deðiþtirme Seviyesi\n{59DC1C}Araçlarý Spawnlama Seviyesi\n{59DC1C}OOC Chat Kapat/Aç Seviyesi\n{59DC1C}Birlik Kasasýndan Para Alma\n{59DC1C}Ajans Ayarlarý Seviyesi", "Seç", "Geri");
    if (response)
    {
        new factionid = PlayerData[playerid][pFaction];
		if (isnull(inputtext)) return  Dialog_Show(playerid,BKPA,DIALOG_STYLE_INPUT, "{72C425}Birlik Kasasýndan Para Alma", "{FFFFFF}Birliðinizde hangi seviyenin Birlik Kasasýndan Para Alabileceðini girin;\nÞu Anki Seviye: {72C425}%d", "Deðiþtir", "Geri",Birlikler[factionid][birlikYetkilendirme][6]);
	 	if (!IsNumeric(inputtext))  return Dialog_Show(playerid,BKPA,DIALOG_STYLE_INPUT, "{72C425}Birlik Kasasýndan Para Alma", "{FFFFFF}Birliðinizde hangi seviyenin Birlik Kasasýndan Para Alabileceðini girin;\nÞu Anki Seviye: {72C425}%d", "Deðiþtir", "Geri",Birlikler[factionid][birlikYetkilendirme][6]);
	 	if (strval(inputtext) > Birlikler[PlayerData[playerid][pFaction]][birlikRutbeler]) return  Dialog_Show(playerid,BKPA,DIALOG_STYLE_INPUT, "{72C425}Birlik Kasasýndan Para Alma", "{FFFFFF}Birliðinizde hangi seviyenin Birlik Kasasýndan Para Alabileceðini girin;\nÞu Anki Seviye: {72C425}%d", "Deðiþtir", "Geri",Birlikler[factionid][birlikYetkilendirme][6]);
	 	Birlikler[PlayerData[playerid][pFaction]][birlikYetkilendirme][6] = strval(inputtext);
	    Birlik_Kaydet(PlayerData[playerid][pFaction]);
	    SunucuMesaji(playerid, "Birlik Kasasýndan Para Alma Seviyesi {72C425}%d {FFFFFF}olarak deðiþtirildi.",strval(inputtext));
	    Dialog_Show(playerid,RutbeYetkilendirme,DIALOG_STYLE_LIST, "{72C425} Rütbe Yetkilendirmeleri", "{59DC1C}Üye Alma Seviyesi\n{59DC1C}Üye Atma Seviyesi\n{59DC1C}Rütbe Deðiþtirme Seviyesi\n{59DC1C}Divizyon Deðiþtirme Seviyesi\n{59DC1C}Araçlarý Spawnlama Seviyesi\n{59DC1C}OOC Chat Kapat/Aç Seviyesi\n{59DC1C}Birlik Kasasýndan Para Alma\n{59DC1C}Ajans Ayarlarý Seviyesi", "Seç", "Geri");
    }
	return 1;
}
Dialog:AjansAyarlariSeviye(playerid, response, listitem, inputtext[])
{
    if (!response) return Dialog_Show(playerid,RutbeYetkilendirme,DIALOG_STYLE_LIST, "{72C425} Rütbe Yetkilendirmeleri", "{59DC1C}Üye Alma Seviyesi\n{59DC1C}Üye Atma Seviyesi\n{59DC1C}Rütbe Deðiþtirme Seviyesi\n{59DC1C}Divizyon Deðiþtirme Seviyesi\n{59DC1C}Araçlarý Spawnlama Seviyesi\n{59DC1C}OOC Chat Kapat/Aç Seviyesi\n{59DC1C}Birlik Kasasýndan Para Alma\n{59DC1C}Ajans Ayarlarý Seviyesi", "Seç", "Geri");
    if (response)
    {
        new factionid = PlayerData[playerid][pFaction];
		if (isnull(inputtext)) return  Dialog_Show(playerid, AjansAyarlariSeviye, DIALOG_STYLE_INPUT, "{72C425}Ajans Ayarlarý Seviyesi", "{FFFFFF}Birliðinizde hangi seviyenin Ajans ayarlarýna eriþebileceðini girin;\nÞu Anki Seviye: {72C425}%d", "Deðiþtir", "Geri",Birlikler[factionid][birlikYetkilendirme][7]);
	 	if (!IsNumeric(inputtext))  return Dialog_Show(playerid, AjansAyarlariSeviye, DIALOG_STYLE_INPUT, "{72C425}Ajans Ayarlarý Seviyesi", "{FFFFFF}Birliðinizde hangi seviyenin Ajans ayarlarýna eriþebileceðini girin;\nÞu Anki Seviye: {72C425}%d", "Deðiþtir", "Geri",Birlikler[factionid][birlikYetkilendirme][7]);
	 	if (strval(inputtext) > Birlikler[PlayerData[playerid][pFaction]][birlikRutbeler]) return  Dialog_Show(playerid, AjansAyarlariSeviye, DIALOG_STYLE_INPUT, "{72C425}Ajans Ayarlarý Seviyesi", "{FFFFFF}Birliðinizde hangi seviyenin Ajans ayarlarýna eriþebileceðini girin;\nÞu Anki Seviye: {72C425}%d", "Deðiþtir", "Geri",Birlikler[factionid][birlikYetkilendirme][7]);
	 	Birlikler[PlayerData[playerid][pFaction]][birlikYetkilendirme][7] = strval(inputtext);
	    Birlik_Kaydet(PlayerData[playerid][pFaction]);
	    SunucuMesaji(playerid, "Ajans ayarlarý seviyesi {72C425}%d {FFFFFF}olarak deðiþtirildi.",strval(inputtext));
	    Dialog_Show(playerid,RutbeYetkilendirme,DIALOG_STYLE_LIST, "{72C425} Rütbe Yetkilendirmeleri", "{59DC1C}Üye Alma Seviyesi\n{59DC1C}Üye Atma Seviyesi\n{59DC1C}Rütbe Deðiþtirme Seviyesi\n{59DC1C}Divizyon Deðiþtirme Seviyesi\n{59DC1C}Araçlarý Spawnlama Seviyesi\n{59DC1C}OOC Chat Kapat/Aç Seviyesi\n{59DC1C}Birlik Kasasýndan Para Alma\n{59DC1C}Ajans Ayarlarý Seviyesi", "Seç", "Geri");
    }
	return 1;
}
Birlik_DivizyonlariGoster(playerid, factionid)
{
    if (factionid != -1 && Birlikler[factionid][birlikExists])
	{
		static
		    string[640];

		string[0] = 0;

		for (new i = 0; i < 5; i ++)
		    format(string, sizeof(string), "%s{72C425}%d: {FFFFFF}%s\n", string, i + 1, BirlikDivizyon[factionid][i]);

		PlayerData[playerid][pFactionEdit] = factionid;
		Dialog_Show(playerid, DivizyonDuzenle, DIALOG_STYLE_LIST, "{72C425}Divizyon Adlarýný Düzenle", string, "Düzenle", "{FF6347}Iptal");
	}
	return 1;
}
Birlik_RutbeleriGoster(playerid, factionid)
{
    if (factionid != -1 && Birlikler[factionid][birlikExists])
	{
		static
		    string[640];

		string[0] = 0;

		for (new i = 0; i < Birlikler[factionid][birlikRutbeler]; i ++)
		    format(string, sizeof(string), "%s{72C425}%d: {FFFFFF}%s\n", string, i + 1, BirlikRutbe[factionid][i]);

		PlayerData[playerid][pFactionEdit] = factionid;
		Dialog_Show(playerid, EditRanks, DIALOG_STYLE_LIST, "Rütbe Adlarýný Düzenle", string, "Düzenle", "{FF6347}Iptal");
	}
	return 1;
}
Dialog:EditRanks(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (!Birlikler[PlayerData[playerid][pFactionEdit]][birlikExists])
			return 0;

		PlayerData[playerid][pSelectedSlot] = listitem;
		Dialog_Show(playerid, SetRankName, DIALOG_STYLE_INPUT, "Rütbe Düzenle", "%d. Rütbe için lütfen yeni bir ad girin:\nÞu anki ad: %s", "Tamam", "{FF6347}Iptal", PlayerData[playerid][pSelectedSlot] + 1, BirlikRutbe[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]]);
	}
	if (!response)
	{
	    PlayerData[playerid][pFactionEdit] = -1;
	    PlayerData[playerid][pSelectedSlot] = -1;
	    cmd_birlik(playerid);

	}
	return 1;
}
Dialog:DivizyonDuzenle(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (!Birlikler[PlayerData[playerid][pFactionEdit]][birlikExists])
			return 0;

		PlayerData[playerid][pSelectedSlot] = listitem;
		Dialog_Show(playerid, DivizyonAdiDuzenle, DIALOG_STYLE_INPUT, "Divizyon Düzenle", "%d. Divizyon için lütfen yeni bir ad girin:\nÞu anki ad: %s", "Tamam", "{FF6347}Iptal", PlayerData[playerid][pSelectedSlot]+1, BirlikDivizyon[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]]);
	}
	return 1;
}
Dialog:DivizyonAdiDuzenle(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (isnull(inputtext))
			return Dialog_Show(playerid, DivizyonAdiDuzenle, DIALOG_STYLE_INPUT, "Divizyon Düzenle", "%d. Divizyon için lütfen yeni bir ad girin:\nÞu anki ad: %s", "Tamam", "{FF6347}Iptal", PlayerData[playerid][pSelectedSlot]+1, BirlikDivizyon[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]]);

	    if (strlen(inputtext) > 20)
	        return Dialog_Show(playerid, DivizyonAdiDuzenle, DIALOG_STYLE_INPUT, "Divizyon Düzenle", "{FF0000}HATA: en fazla 20 karakterden oluþabilir.\n%d. Divizyon için lütfen yeni bir ad girin:\nÞu anki ad: %s", "Tamam", "{FF6347}Iptal", PlayerData[playerid][pSelectedSlot]+1, BirlikDivizyon[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]]);

		format(BirlikDivizyon[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]], 20, inputtext);
		Birlik_Kaydet(PlayerData[playerid][pFactionEdit]);

		Birlik_DivizyonlariGoster(playerid, PlayerData[playerid][pFactionEdit]);
		SunucuMesaji(playerid, "%d. divizyon adý \"%s\" olarak deðiþtirildi.", PlayerData[playerid][pSelectedSlot] + 1, inputtext);
	}
	else Birlik_DivizyonlariGoster(playerid, PlayerData[playerid][pFactionEdit]);
	return 1;
}
Dialog:SetRankName(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (isnull(inputtext))
			return Dialog_Show(playerid, SetRankName, DIALOG_STYLE_INPUT, "Rütbe Düzenle", "%d. Rütbe için lütfen yeni bir ad girin:\nÞu anki ad: %s", "Tamam", "{FF6347}Iptal", PlayerData[playerid][pSelectedSlot] + 1, BirlikRutbe[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]]);

	    if (strlen(inputtext) > 32)
	        return Dialog_Show(playerid, SetRankName, DIALOG_STYLE_INPUT, "Rütbe Düzenle", "%d. Rütbe için lütfen yeni bir ad girin:\nÞu anki ad: %s", "Tamam", "{FF6347}Iptal", PlayerData[playerid][pSelectedSlot] + 1, BirlikRutbe[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]]);

		format(BirlikRutbe[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]], 32, inputtext);
		Birlik_Kaydet(PlayerData[playerid][pFactionEdit]);

		Birlik_RutbeleriGoster(playerid, PlayerData[playerid][pFactionEdit]);
		SunucuMesaji(playerid, "%d. rütbenin adý \"%s\" olarak deðiþtirildi.", PlayerData[playerid][pSelectedSlot] + 1, inputtext);
	}
	else Birlik_RutbeleriGoster(playerid, PlayerData[playerid][pFactionEdit]);
	return 1;
}
Dialog:RutbeDegistir(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_birlik(playerid);
	if (response)
	{
	    new userid, notreal[128], idx;
		notreal = strtok(inputtext, idx);
		userid = strval(notreal);
		SetPVarInt(playerid, "RutbeChange",userid);
		//if (userid == playerid) return HataMesajGonder(playerid, "Kendi rütbeni deðiþtiremezsin.");
		if (PlayerData[userid][pFactionRutbe] > PlayerData[playerid][pFactionRutbe]) return HataMesajGonder(playerid, "Kendinden yüksek rütbeli kiþinin rütbesini deðiþtiremezsin.");
		SetPVarInt(playerid, "OffRank",0);
		RutbeDegistirmeDialog(playerid,PlayerData[playerid][pFaction]);
	}
	return 1;
}
Dialog:DivizyonDegistir(playerid, response, listitem, inputtext[])
{
    if (response)
	{
		new userid, notreal[128], idx;
		notreal = strtok(inputtext, idx);
		userid = strval(notreal);
		SetPVarInt(playerid, "DivizyonChange", userid);
		Birlik_DivizyonDegistir(playerid, PlayerData[playerid][pFaction]);
 	}
	return 1;
}
Birlik_DivizyonDegistir(playerid, factionid)
{
    if (factionid != -1 && Birlikler[factionid][birlikExists])
	{
		static
		    string[640];

		string[0] = 0;
		strcat(string, "Divizyondan Çýkar\n");
		for (new i = 0; i < 5; i ++)
		    format(string, sizeof(string), "%s{72C425}%d: {FFFFFF}%s\n", string, i + 1, BirlikDivizyon[factionid][i]);

		Dialog_Show(playerid, DivizyonSec, DIALOG_STYLE_LIST, "Divizyon Düzenleme", string, "Deðiþtir", "{FF6347}Iptal");
	}
	return 1;
}
Dialog:DivizyonSec(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (!Birlikler[PlayerData[playerid][pFaction]][birlikExists])
				return 0;
	    if (GetPVarInt(playerid, "OffDiviz") == 1)
	    {
	        new sqlid = GetPVarInt(playerid, "OfflineSQLID"), query[256];
            if (listitem == 0)
			{
			    format(query, sizeof(query), "UPDATE `oyuncular` SET `BirlikDivizyon` = '0' WHERE `ID` = '%d'", sqlid);
				mysql_query(g_SQL, query, false);
			    SunucuMesaji(playerid, "%s adlý oyuncuyu divizyonundan çýkardýnýz. ", SQLName(sqlid));
			    DeletePVar(playerid, "OffDiviz");
			    DeletePVar(playerid, "OfflineSQLID");
			    return 1;
			}


	    	format(query, sizeof(query), "UPDATE `oyuncular` SET `BirlikDivizyon` = '%d' WHERE `ID` = '%d'", listitem, sqlid);
			mysql_query(g_SQL, query, false);

	        cmd_birlik(playerid);
		    SunucuMesaji(playerid, "%s adlý oyuncunun divizyonunu %s olarak deðiþtirdin. ", SQLName(sqlid), BirlikDivizyon[PlayerData[playerid][pFaction]][(listitem+1) - 1]);
		    DeletePVar(playerid, "OffDiviz");
		    DeletePVar(playerid, "OfflineSQLID");
		}
		else {

	        new userid = GetPVarInt(playerid, "DivizyonChange");
			if (listitem == 0)
			{
			    PlayerData[userid][pFactionDivizyon] = 0;
			    SunucuMesaji(playerid, "%s adlý oyuncuyu divizyondan çýkardýnýz. ", ReturnName(userid, 0));
		    	SunucuMesaji(userid, "%s tarafýndan divizyonunuzdan çýkarýldýnýz.", ReturnName(playerid, 0));
		    	DeletePVar(playerid, "OffDiviz");
			    DeletePVar(playerid, "DivizyonChange");
			    return 1;
			}

			if (PlayerData[userid][pFaction] != PlayerData[playerid][pFaction])
			    return HataMesajGonder(playerid, "Bu oyuncu senin birliðinde deðil.");

			PlayerData[userid][pFactionDivizyon] = listitem;
	        cmd_birlik(playerid);
		    SunucuMesaji(playerid, "%s adlý oyuncunun divizyonunu %s olarak deðiþtirdin. ", ReturnName(userid, 0), Birlik_GetDivizyon(userid));
		    SunucuMesaji(userid, "%s adlý kiþi divizyonunu %s olarak deðiþtirdi.", ReturnName(playerid, 0), Birlik_GetDivizyon(userid));
		    DeletePVar(playerid, "OffDiviz");
		    DeletePVar(playerid, "DivizyonChange");
		}
	}
	return 1;
}
Dialog:RutbeSec(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new bid = PlayerData[playerid][pFaction];
	    if (bid == -1) return 1;
	    if (!Birlikler[bid][birlikExists]) return 0;
	    if (GetPVarInt(playerid, "OffRank") == 1)
	    {
	        new sqlid = GetPVarInt(playerid, "OfflineSQLID"), query[256];
	        format(query,sizeof(query), "UPDATE `oyuncular` SET `BirlikRutbe` = '%d' WHERE `ID` = '%d'",listitem+1,sqlid);
	        mysql_query(g_SQL,query, false);
	        SunucuMesaji(playerid, "%s adlý kiþinin rütbesi %s olarak deðiþtirildi.",SQLName(sqlid,0),BirlikRutbe[PlayerData[playerid][pFaction]][(listitem+1) - 1]);
	        DeletePVar(playerid, "OffRank");
	        cmd_birlik(playerid);
	    }
	    else
	    {
	        new id = GetPVarInt(playerid, "RutbeChange");
	        if (!OyundaDegil(id))
	        {
	            HataMesajGonder(playerid, "Böyle bir oyuncu yok.");
	            DeletePVar(playerid, "RutbeChange");
	            cmd_birlik(playerid);
	            return 1;
	        }
	        if (PlayerData[id][pFaction] != PlayerData[playerid][pFaction])
	        {
	            HataMesajGonder(playerid, "Bu oyuncu bu birlikte deðil.");
	            DeletePVar(playerid, "RutbeChange");
	            cmd_birlik(playerid);
	            return 1;
	        }
	        PlayerData[id][pFactionRutbe] = listitem+1;
	        cmd_birlik(playerid);
	        SunucuMesaji(id, "%s tarafýndan rütbeniz %s olarak ayarlandý.",ReturnName(playerid,0),Birlik_GetRutbe(id));
	        SunucuMesaji(playerid, "%s adlý kiþinin rütbesi %s olarak ayarlandý.",ReturnName(id,0),Birlik_GetRutbe(id));
	        DeletePVar(playerid, "RutbeChange");
	    }
	}
	return 1;
}


/*IsPlayerNearWater(playerid)
{
	 new Float:angle;

	GetPlayerFacingAngle(playerid, angle);
	for (new i; i<sizeof(BalikciPoslar); i++)
	{
	    if (IsPlayerInRangeOfPoint(playerid,2.0,BalikciPoslar[i][0],BalikciPoslar[i][1],BalikciPoslar[i][2])) return 1;
	}
	return 0;
}*/

stock RutbeDegistirmeDialog(playerid,factionid)
{
    if (factionid != -1 && Birlikler[factionid][birlikExists])
    {
        static
		    string[640];

		string[0] = 0;
		for (new i = 0; i < Birlikler[factionid][birlikRutbeler]; i ++)
		{
		     format(string, sizeof(string), "%s{72C425}%d: {FFFFFF}%s\n", string, i + 1, BirlikRutbe[factionid][i]);
		}
		Dialog_Show(playerid, RutbeSec, DIALOG_STYLE_LIST, "Rütbe Düzenleme", string, "Deðiþtir", "{FF6347}Iptal");
    }
}
stock preloadanim_mine(playerid)
{
    PreloadAnimLib(playerid, "CARRY");
    PreloadAnimLib(playerid, "GHANDS");
    PreloadAnimLib(playerid, "BASEBALL");
	return 1;
}
stock PreloadAnimLib(playerid, animlib[])
{
	ApplyAnimation(playerid, animlib, "null", 0.0, 0, 0, 0, 0, 0);
	return 1;
}
strtok(const string[], &index)
{
	new length = strlen(string);
	while ((index < length) && (string[index] <= ' '))
	{
		index++;
	}

	new offset = index;
	new result[20];
	while ((index < length) && (string[index] > ' ') && ((index - offset) < (sizeof(result) - 1)))
	{
		result[index - offset] = string[index];
		index++;
	}
	result[index - offset] = EOS;
	return result;
}
Dialog:BirlikDuyuruChange(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_birlik(playerid);
	if (response)
	{
	    new id = PlayerData[playerid][pFaction];
	    if (isnull(inputtext))
	    {
	        Birlikler[id][birlikDuyuru][0] = '\0';

			Birlik_Kaydet(id);
			MesajGonder(playerid, "Birlik duyurusu kaldýrýldý.");
	    }
	    else
	    {
	        format(Birlikler[id][birlikDuyuru], 128, inputtext);

			Birlik_Kaydet(id);
			MesajGonder(playerid, "Birlik duyurusu deðiþtirildi.");
	    }
	}
	return 1;
}
Dialog:birlikKasa(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_birlik(playerid);
	if (response)
	{
	    if (listitem == 0)
	    {
	        if (PlayerData[playerid][pFaction] == -1) return HataMesajGonder(playerid, "Bir birliðiniz yok.");
	        if (PlayerData[playerid][pFactionRutbe] < Birlikler[PlayerData[playerid][pFaction]][birlikYetkilendirme][6])
	        {
	            HataMesajGonder(playerid, "Kasadan Para almak için yeterli yetkiniz yok.");
	            return cmd_birlik(playerid);
	        }
	        Dialog_Show(playerid,birlikKasaParaAl,DIALOG_STYLE_INPUT, "Birlik Kasasý - Para Al", "{FFFFFF}Birlik kasasýnda {2ECC71}%s {FFFFFF}miktar para bulunmaktadýr.\n{FFFFFF}Lütfen kasadan almak istediðiniz para miktarýný girin:", "Devam", "Geri",FormatNumber(Birlikler[PlayerData[playerid][pFaction]][birlikKasaPara]));
	    }
	    if (listitem == 1)
	    {
	        if (PlayerData[playerid][pFaction] == -1) return HataMesajGonder(playerid, "Bir birliðiniz yok.");
	        Dialog_Show(playerid,birlikKasaParaKoy,DIALOG_STYLE_INPUT, "Birlik Kasasý - Para Koy", "{FFFFFF}Lütfen birlik kasasýna koymak istediðiniz para miktarýný bakiyenize uygun olarak giriniz:", "Devam", "Geri");
	    }
	}
	return 1;
}
Dialog:birlikKasaParaAl(playerid, response, listitem, inputtext[])
{
    if (!response) return Dialog_Show(playerid,birlikKasa,DIALOG_STYLE_LIST, "Birlik Kasasý", "{2ECC71}Kasadan Al\n{2ECC71}Kasaya Koy", "Seç", "Geri");
    if (response)
    {
        if (PlayerData[playerid][pFaction] == -1) return HataMesajGonder(playerid, "Bir birliðiniz yok.");
        if (isnull(inputtext)) return Dialog_Show(playerid,birlikKasaParaAl,DIALOG_STYLE_INPUT, "Birlik Kasasý - Para Al", "{FFFFFF}Birlik kasasýnda {2ECC71}%s {FFFFFF}miktar para bulunmaktadýr.\n{FFFFFF}Lütfen kasadan almak istediðiniz para miktarýný girin:", "Devam", "Geri",FormatNumber(Birlikler[PlayerData[playerid][pFaction]][birlikKasaPara]));
        if (!IsNumeric(inputtext)) return Dialog_Show(playerid,birlikKasaParaAl,DIALOG_STYLE_INPUT, "Birlik Kasasý - Para Al", "{FFFFFF}Birlik kasasýnda {2ECC71}%s {FFFFFF}miktar para bulunmaktadýr.\n{FFFFFF}Lütfen kasadan almak istediðiniz para miktarýný girin:", "Devam", "Geri",FormatNumber(Birlikler[PlayerData[playerid][pFaction]][birlikKasaPara]));
        if (strval(inputtext) <= 0)
        {
            HataMesajGonder(playerid, "Geçersiz miktar girdiniz.");
            return Dialog_Show(playerid,birlikKasaParaAl,DIALOG_STYLE_INPUT, "Birlik Kasasý - Para Al", "{FFFFFF}Birlik kasasýnda {2ECC71}%s {FFFFFF}miktar para bulunmaktadýr.\n{FFFFFF}Lütfen kasadan almak istediðiniz para miktarýný girin:", "Devam", "Geri",FormatNumber(Birlikler[PlayerData[playerid][pFaction]][birlikKasaPara]));
        }
        if (strval(inputtext) > Birlikler[PlayerData[playerid][pFaction]][birlikKasaPara])
        {
            HataMesajGonder(playerid, "Birlik kasasýnda yeterli para yok.");
            return Dialog_Show(playerid,birlikKasaParaAl,DIALOG_STYLE_INPUT, "Birlik Kasasý - Para Al", "{FFFFFF}Birlik kasasýnda {2ECC71}%s {FFFFFF}miktar para bulunmaktadýr.\n{FFFFFF}Lütfen kasadan almak istediðiniz para miktarýný girin:", "Devam", "Geri",FormatNumber(Birlikler[PlayerData[playerid][pFaction]][birlikKasaPara]));
        }
        Birlikler[PlayerData[playerid][pFaction]][birlikKasaPara] -= strval(inputtext);
        ParaVer(playerid,strval(inputtext));
        SendBirlikMessage(PlayerData[playerid][pFaction],-1, "{ff7c4d}BÝRLÝK: {FFFFFF}%s Adlý birlik üyesi birlik kasasýndan {2ECC71}%s {FFFFFF}miktar para aldý.",ReturnName(playerid,0),FormatNumber(strval(inputtext)));
        Dialog_Show(playerid,birlikKasa,DIALOG_STYLE_LIST, "Birlik Kasasý", "{2ECC71}Kasadan Al\n{2ECC71}Kasaya Koy", "Seç", "Geri");
        Birlik_Kaydet(PlayerData[playerid][pFaction]);
    }
    return 1;
}
Dialog:birlikKasaParaKoy(playerid, response, listitem, inputtext[])
{
     if (!response) return Dialog_Show(playerid,birlikKasa,DIALOG_STYLE_LIST, "Birlik Kasasý", "{2ECC71}Kasadan Al\n{2ECC71}Kasaya Koy", "Seç", "Geri");
     if (response)
     {
        if (PlayerData[playerid][pFaction] == -1) return HataMesajGonder(playerid, "Bir birliðiniz yok.");
        if (isnull(inputtext)) return Dialog_Show(playerid,birlikKasaParaKoy,DIALOG_STYLE_INPUT, "Birlik Kasasý - Para Koy", "{FFFFFF}Lütfen birlik kasasýna koymak istediðiniz para miktarýný bakiyenize uygun olarak giriniz:", "Devam", "Geri");
        if (!IsNumeric(inputtext)) return Dialog_Show(playerid,birlikKasaParaKoy,DIALOG_STYLE_INPUT, "Birlik Kasasý - Para Koy", "{FFFFFF}Lütfen birlik kasasýna koymak istediðiniz para miktarýný bakiyenize uygun olarak giriniz:", "Devam", "Geri");
        if (strval(inputtext) <= 0)
        {
            HataMesajGonder(playerid, "Geçersiz miktar girdiniz.");
            return Dialog_Show(playerid,birlikKasaParaKoy,DIALOG_STYLE_INPUT, "Birlik Kasasý - Para Koy", "{FFFFFF}Lütfen birlik kasasýna koymak istediðiniz para miktarýný bakiyenize uygun olarak giriniz:", "Devam", "Geri");
        }
        if (strval(inputtext) > PlayerData[playerid][pCash])
        {
            HataMesajGonder(playerid, "Üzerinizde yeterli para yok.");
            return Dialog_Show(playerid,birlikKasaParaKoy,DIALOG_STYLE_INPUT, "Birlik Kasasý - Para Koy", "{FFFFFF}Lütfen birlik kasasýna koymak istediðiniz para miktarýný bakiyenize uygun olarak giriniz:", "Devam", "Geri");

        }
        Birlikler[PlayerData[playerid][pFaction]][birlikKasaPara] += strval(inputtext);
        ParaVer(playerid,-strval(inputtext));
        SendBirlikMessage(PlayerData[playerid][pFaction],-1, "{ff7c4d}BÝRLÝK: {FFFFFF}%s Adlý birlik üyesi birlik kasasýna {2ECC71}%s {FFFFFF}miktar para koydu.",ReturnName(playerid,0),FormatNumber(strval(inputtext)));
        Dialog_Show(playerid,birlikKasa,DIALOG_STYLE_LIST, "Birlik Kasasý", "{2ECC71}Kasadan Al\n{2ECC71}Kasaya Koy", "Seç", "Geri");
        Birlik_Kaydet(PlayerData[playerid][pFaction]);
     }
     return 1;
}
Dialog:BirlikDaveti(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new
	        id = PlayerData[playerid][pFactionDavetEden],
	        factionid = PlayerData[playerid][pFactionDavet];

		PlayerData[playerid][pFaction] = factionid;
		PlayerData[playerid][pFactionRutbe] = 1;
		PlayerData[playerid][pFactionDivizyon] = 0;
		SendBirlikMessage(factionid,-1, "{ff7c4d}BÝRLÝK: {FFFFFF}%s adlý kiþi, %s adlý kiþiyi birliðe aldý.",ReturnName(id,0),ReturnName(playerid,0));
		PlayerData[playerid][pFactionDavetEden] = -1;
		PlayerData[playerid][pFactionDavet] = -1;
		Birlik_Kaydet(factionid);
		Oyuncu_Kaydet(playerid);
	}
	else
	{
	    SunucuMesaji(PlayerData[playerid][pFactionDavetEden], "%s adlý kiþi gönderdiðiniz birlik davetini reddetdi.",ReturnName(playerid,0));
	    PlayerData[playerid][pFactionDavetEden] = -1;
     	PlayerData[playerid][pFactionDavet] = -1;
	}
}
stock SendBirlikMessage(factionid, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) if (PlayerData[i][pFaction] == factionid && PlayerData[i][pAyarlar][0] == 0) {
		    SendClientMessage(i, color, string);
		}
		return 1;
	}
	foreach (new i : Player) if (PlayerData[i][pFaction] == factionid && PlayerData[i][pAyarlar][0] == 0) {
 		SendClientMessage(i, color, str);
	}
	return 1;
}
stock BirlikUyeSayisi(birlikid)
{
	new query[100],Cache: _query;
	format(query,sizeof(query), "SELECT null FROM `oyuncular` WHERE `Birlik` = '%d'",birlikid);
	_query = mysql_query(g_SQL,query);
	new rows;
	cache_get_row_count(rows);
	cache_delete(_query);
	return rows;
}
Dialog:BirlikGeriTusu(playerid, response, listitem, inputtext[]) {

	if (!response) return cmd_birlik(playerid);
	return 1;
}
Birlik_GetName(playerid)
{
    new
		factionid = PlayerData[playerid][pFaction],
		name[32] = "Yok";

 	if (factionid == -1)
	    return name;

	format(name, 32, Birlikler[factionid][birlikAd]);
	return name;
}
Birlik_GetDivizyon(playerid)
{
    new
		factionid = PlayerData[playerid][pFaction],
		diviz[32] = "Yok";

 	if (factionid == -1)
	    return diviz;

    if (PlayerData[playerid][pFactionDivizyon] == 0)
	    return diviz;

	format(diviz, 32, BirlikDivizyon[factionid][PlayerData[playerid][pFactionDivizyon] - 1]);
	return diviz;
}
Birlik_GetRutbe(playerid)
{
    new
		factionid = PlayerData[playerid][pFaction],
		rank[32] = "Yok";

 	if (factionid == -1)
	    return rank;

	format(rank, 32, BirlikRutbe[factionid][PlayerData[playerid][pFactionRutbe] - 1]);
	return rank;
}

stock Birlik_Kaydet(bid)
{
	static query[2700];
	format(query,sizeof(query), "UPDATE `birlikler` SET `bisim` = '%s',`brenk` = '%d',`btip` = '%d',`bRutbeler` = '%d',`bduyuru` = '%s',`bkasacash` = '%d',`oocdurum` = '%d', `sistemselonay` = '%d', `silahonay` = '%d', `uyusturucuonay` = '%d', `graffitionay` = '%d', `hoodonay` = '%d'",
	SQL_ReturnEscaped(Birlikler[bid][birlikAd]),
	Birlikler[bid][birlikColor],
	Birlikler[bid][birlikTip],
	Birlikler[bid][birlikRutbeler],
	SQL_ReturnEscaped(Birlikler[bid][birlikDuyuru]),
	Birlikler[bid][birlikKasaPara],
	Birlikler[bid][OOCDurum],
	Birlikler[bid][birlikOnaylar][0],
	Birlikler[bid][birlikOnaylar][1],
	Birlikler[bid][birlikOnaylar][2],
	Birlikler[bid][birlikOnaylar][3],
	Birlikler[bid][birlikOnaylar][4]
	);
	format(query,sizeof(query), "%s, `byetki1` = '%d',`byetki2` = '%d',`byetki3` = '%d',`byetki4` = '%d',`byetki5` = '%d',`byetki6` = '%d',`byetki7` = '%d',`byetki8` = '%d',`bdivizyon1` = '%s',`bdivizyon2` = '%s',`bdivizyon3` = '%s',`bdivizyon4` = '%s',`bdivizyon5` = '%s'",
	query,
	Birlikler[bid][birlikYetkilendirme][0],
	Birlikler[bid][birlikYetkilendirme][1],
	Birlikler[bid][birlikYetkilendirme][2],
	Birlikler[bid][birlikYetkilendirme][3],
	Birlikler[bid][birlikYetkilendirme][4],
	Birlikler[bid][birlikYetkilendirme][5],
	Birlikler[bid][birlikYetkilendirme][6],
	Birlikler[bid][birlikYetkilendirme][7],
	SQL_ReturnEscaped(BirlikDivizyon[bid][0]),
	SQL_ReturnEscaped(BirlikDivizyon[bid][1]),
	SQL_ReturnEscaped(BirlikDivizyon[bid][2]),
	SQL_ReturnEscaped(BirlikDivizyon[bid][3]),
	SQL_ReturnEscaped(BirlikDivizyon[bid][4])
	);
	format(query, sizeof(query), "%s, `yayindurum` = '%d', `yayintipi` = '%d', `reklamalimi` = '%d', `reklamucreti` = '%d', `reklamsayisi` = '%d', `aktifdinleyici` = '%d', `BirlikUyeSayisi` = '%d', `reklamx` = '%f', `reklamy` = '%f', `reklamz` = '%f'",query,Birlikler[bid][yayinDurum], Birlikler[bid][yayinTipi],Birlikler[bid][ReklamAlimi],Birlikler[bid][ReklamUcreti], Birlikler[bid][ReklamSayisi], Dinleyici_Sayisi(bid), BirlikUyeSayisi(bid),
	Birlikler[bid][reklamPos][0], Birlikler[bid][reklamPos][1], Birlikler[bid][reklamPos][2]);
	format(query, sizeof(query), "%s, `brutbe1` = '%s', `brutbe2` = '%s', `brutbe3` = '%s', `brutbe4` = '%s', `brutbe5` = '%s', `brutbe6` = '%s', `brutbe7` = '%s', `brutbe8` = '%s', `brutbe9` = '%s', `brutbe10` = '%s', `brutbe11` = '%s', `brutbe12` = '%s', `brutbe13` = '%s', `brutbe14` = '%s', `brutbe15` = '%s' WHERE `bid` = '%d'",
	query,
	BirlikRutbe[bid][0],
 	BirlikRutbe[bid][1],
  	BirlikRutbe[bid][2],
   	BirlikRutbe[bid][3],
    BirlikRutbe[bid][4],
    BirlikRutbe[bid][5],
    BirlikRutbe[bid][6],
    BirlikRutbe[bid][7],
    BirlikRutbe[bid][8],
    BirlikRutbe[bid][9],
    BirlikRutbe[bid][10],
    BirlikRutbe[bid][11],
    BirlikRutbe[bid][12],
    BirlikRutbe[bid][13],
    BirlikRutbe[bid][14],
    Birlikler[bid][birlikID]
    );
    mysql_query(g_SQL,query, false);
    return 1;
}
stock House_RemoveFurniture(houseid)
{
	if (HouseInfo[houseid][evExists])
	{
	    static
	        string[64];

	    foreach (new i: Mobilyalar[houseid])
	    {
	        FurnitureData[houseid][i][furnitureModel] = 0;

	        DestroyDynamicObject(FurnitureData[houseid][i][furnitureObject]);

	        Iter_SafeRemove(Mobilyalar[houseid], i, i);
		}

		format(string, sizeof(string), "DELETE FROM `furniture` WHERE `ID` = '%d'", HouseInfo[houseid][evID]);
		mysql_query(g_SQL, string, false);
	}
	return 1;
}
stock Ev_GetID(house)
{
	for (new i; i<MAX_EV; i++) if (HouseInfo[i][evExists] && HouseInfo[i][evID] == house)
	{
	    return i;
	}
	return -1;
}

stock EvKiraID(playerid)
{
	for (new i; i < MAX_EV; i++) if (HouseInfo[i][evExists])
	{
	    if (HouseInfo[i][evKiralayan] == PlayerData[playerid][pID])
	    {
	        return i;
	    }
	}
	return -1;
}
stock OfflineParaVer(sqlid, para)
{
    new query[256];
    format(query, sizeof(query), "UPDATE `oyuncular` SET `Cash` = `Cash`+%d WHERE `ID` = '%d'", para, sqlid);
    mysql_query(g_SQL,query, false);
    return 1;
}
stock GetPlayerSQLIDWithName(name[])
{
	new query[150];
	format(query,sizeof(query), "SELECT `ID` FROM `oyuncular` WHERE `Isim` = '%s'",name);
	new Cache:Radless = mysql_query(g_SQL,query);
	new rows;
	cache_get_row_count(rows);
	if (rows)
	{
	    new id;
	    cache_get_value_name_int(0, "ID",id);
	    cache_delete(Radless);
	    return id;
	}
	cache_delete(Radless);
	return -1;
}
stock GetPlayerIDWithSQLID(sqlid)
{
	foreach (new i:Player)
	{
	    if (PlayerData[i][pID] == sqlid)
	    {
	        return i;
	    }
	}
	return -1;
}
stock Ev_GetWeaponCount(evid)
{
	new count = 0;
	if (evid != -1 && HouseInfo[evid][evExists])
	{
	    for (new i; i<10; i++)
	    {
	        if (HouseInfo[evid][evSilahlar][i] > 0)
	        {
	            count++;
	        }
	    }
	}
	return count;
}
stock Isyeri_GetCount(playerid)
{
	new
		count = 0;

	for (new i = 0; i != MAX_ISYERI; i ++)
	{
		if (Isyeri[i][isyeriExists] && Isyeri[i][isyeriSahip] == PlayerData[playerid][pID])
   		{
   		    count++;
		}
	}
	return count;
}
Ev_GetCount(playerid)
{
	new
		count = 0;

	for (new i = 0; i != MAX_EV; i ++)
	{
		if (HouseInfo[i][evExists] && HouseInfo[i][evSahip] == PlayerData[playerid][pID])
   		{
   		    count++;
		}
	}
	return count;
}

stock Ev_Olustur(Float:x,Float:y,Float:z,fiyat, interiorid, mobilya)
{
    for (new i = 0; i != MAX_EV; i ++)
    {
        if (!HouseInfo[i][evExists])
        {
            HouseInfo[i][evExists] = true;
            HouseInfo[i][evID] = i;

            HouseInfo[i][evSahip] = -1;
            HouseInfo[i][evFiyat] = fiyat;
            HouseInfo[i][evKendiFiyati] = fiyat;
            format(HouseInfo[i][evIsim], 30, "Satilik Mülk");
            HouseInfo[i][evSatilik] = 0;
            HouseInfo[i][evPos][0] = x;
            HouseInfo[i][evPos][1] = y;
            HouseInfo[i][evPos][2] = z;
            HouseInfo[i][evInterior] = interiorid;
            HouseInfo[i][evKilit] = 0;
            HouseInfo[i][evCash] = 0;
            HouseInfo[i][evVergi] = 0;
            HouseInfo[i][evVergiSure] = 0;
            HouseInfo[i][evKiralik] = 0;
            HouseInfo[i][evKiraUcret] = 0;
            HouseInfo[i][evKiralayan] = -1;
            HouseInfo[i][evUyusturucu] = 0;
            HouseInfo[i][evMaksMobilya] = mobilya;
            HouseInfo[i][MobilyaYetki] = -1;

			for (new j; j < 10; j++)
            {
                if (j < 5)
                {
                    HouseInfo[i][evKiyafetler][j] = 0;
                }
                HouseInfo[i][evSilahlar][j] = 0;
                HouseInfo[i][evMermiler][j] = 0;
            }

			new query[256];

			mysql_format(g_SQL, query, sizeof query, "INSERT INTO `evler` (`evid`, `evOwner`) VALUES ('%d', '-1')", HouseInfo[i][evID]);
			mysql_query (g_SQL, query);

            Ev_Yenile(HouseInfo[i][evID]);
            Ev_Kaydet(HouseInfo[i][evID]);
            return HouseInfo[i][evID];
        }
    }
    return -1;
}

stock trcar(car[]) {
  new tmp[300];
  set(tmp,car);
  tmp=strreplace("g", "g",tmp);
  tmp=strreplace("|", "",tmp);
  tmp=strreplace("g", "G",tmp);
  tmp=strreplace("s", "s",tmp);
  tmp=strreplace("s", "S",tmp);
  tmp=strreplace("i", "i",tmp);
  tmp=strreplace("I", "I",tmp);
  tmp=strreplace("i", "I",tmp);
  tmp=strreplace("ö", "o",tmp);
  tmp=strreplace("Ö", "O",tmp);
  tmp=strreplace("ç", "c",tmp);
  tmp=strreplace("Ç", "C",tmp);
  tmp=strreplace("ü", "u",tmp);
  tmp=strreplace("Ü", "U",tmp);
  return tmp;
}
stock set(dest[],source[]) {
	new count = strlen(source);
	new i=0;
	for (i=0;i<count;i++) {
		dest[i]=source[i];
	}
	dest[count]=0;
}
stock strreplace(trg[],newstr[],src[]) {
    new f=0;
    new s1[256];
    new tmp[256];
    format(s1,sizeof(s1), "%s",src);
    f = strfind(s1,trg);
    tmp[0]=0;
    while (f>=0) {
        strcat(tmp,ret_memcpy(s1, 0, f));
        strcat(tmp,newstr);
        format(s1,sizeof(s1), "%s",ret_memcpy(s1, f+strlen(trg), strlen(s1)-f));
        f = strfind(s1,trg);
    }
    strcat(tmp,s1);
    return tmp;
}
ret_memcpy(source[],index=0,numbytes) {
	new tmp[256];
	new i=0;
	tmp[0]=0;
	if (index>=strlen(source)) return tmp;
	if (numbytes+index>=strlen(source)) numbytes=strlen(source)-index;
	if (numbytes<=0) return tmp;
	for (i=index;i<numbytes+index;i++) {
		tmp[i-index]=source[i];
		if (source[i]==0) return tmp;
	}
	tmp[numbytes]=0;
	return tmp;
}

stock IsSpeedoVehicle(vehicleid)
{
	if (GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510 || GetVehicleModel(vehicleid) == 481 || !IsEngineVehicle(vehicleid)) {
	    return 0;
	}
	return 1;
}
stock GetWeapon(playerid)
{
	new weaponid = GetPlayerWeapon(playerid);

	if (1 <= weaponid <= 46 && PlayerData[playerid][pSilahlar][g_aWeaponSlots[weaponid]] == weaponid)
 		return weaponid;

	return 0;
}
/*stock GetWeaponModel(weaponid) {
    new const g_aWeaponModels[] = {
		0, 331, 333, 334, 335, 336, 337, 338, 339, 341, 321, 322, 323, 324,
		325, 326, 342, 343, 344, 0, 0, 0, 346, 347, 348, 349, 350, 351, 352,
		353, 355, 356, 372, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366,
		367, 368, 368, 371
    };
    if (1 <= weaponid <= 46)
        return g_aWeaponModels[weaponid];

	return 0;
}*/
stock Garaj_Sil(id)
{
	if (id != -1 && GarageData[id][gExists] == true)
	{
	    new query[70];
	    format(query, sizeof(query), "DELETE FROM `garajlar` WHERE `ID` = '%d'", GarageData[id][gID]);
	    mysql_query(g_SQL, query, false);
	    for (new i; i<MAX_ARAC; i++) if (AracInfo[i][aracExists] && AracInfo[i][aracGaraj] == id)
	    {
	        AracInfo[i][aracGaraj] = -1;
	    }
	    DestroyDynamicPickup(GarageData[id][gPickup]);
	    DestroyDynamic3DTextLabel(GarageData[id][gText]);

	    GarageData[id][gExists] = false;
	    GarageData[id][gID] = 0;
	}
	return 1;
}
stock Gate_Sil(gateid)
{
	if (gateid != -1 && GateData[gateid][gateExists])
	{
		new
		    query[64];

		format(query, sizeof(query), "DELETE FROM `gates` WHERE `gateID` = '%d'", GateData[gateid][gateID]);
		mysql_tquery(g_SQL, query);

		if (IsValidDynamicObject(GateData[gateid][gateObject]))
		    DestroyDynamicObject(GateData[gateid][gateObject]);

		for (new i = 0; i != MAX_GATES; i ++) if (GateData[i][gateExists] && GateData[i][gateLinkID] == GateData[gateid][gateID]) {
		    GateData[i][gateLinkID] = -1;
		    Gate_Save(i);
		}
		if (GateData[gateid][gateOpened] && GateData[gateid][gateTime] > 0) {
		    KillTimer(GateData[gateid][gateTimer]);
		}
	    GateData[gateid][gateExists] = false;
	    GateData[gateid][gateID] = 0;
	    GateData[gateid][gateOpened] = 0;
	}
	return 1;
}

forward CloseGate(gateid, linkid, Float:fX, Float:fY, Float:fZ, Float:speed, Float:fRotX, Float:fRotY, Float:fRotZ);
public CloseGate(gateid, linkid, Float:fX, Float:fY, Float:fZ, Float:speed, Float:fRotX, Float:fRotY, Float:fRotZ)
{
	new id = -1;

	if (GateData[gateid][gateExists] && GateData[gateid][gateOpened])
 	{
	 	MoveDynamicObject(GateData[gateid][gateObject], fX, fY, fZ, speed, fRotX, fRotY, fRotZ);

	 	if ((id = GetGateByID(linkid)) != -1)
            MoveDynamicObject(GateData[id][gateObject], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], speed, GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5]);

		GateData[id][gateOpened] = 0;
		return 1;
	}
	return 0;
}

stock Gate_Operate(gateid)
{
	if (gateid != -1 && GateData[gateid][gateExists])
	{
	    new id = -1;

		if (!GateData[gateid][gateOpened])
		{
		    GateData[gateid][gateOpened] = true;
		    MoveDynamicObject(GateData[gateid][gateObject], GateData[gateid][gateMove][0], GateData[gateid][gateMove][1], GateData[gateid][gateMove][2], GateData[gateid][gateSpeed], GateData[gateid][gateMove][3], GateData[gateid][gateMove][4], GateData[gateid][gateMove][5]);

            if (GateData[gateid][gateTime] > 0) {
				GateData[gateid][gateTimer] = SetTimerEx("CloseGate", GateData[gateid][gateTime], false, "ddfffffff", gateid, GateData[gateid][gateLinkID], GateData[gateid][gatePos][0], GateData[gateid][gatePos][1], GateData[gateid][gatePos][2], GateData[gateid][gateSpeed], GateData[gateid][gatePos][3], GateData[gateid][gatePos][4], GateData[gateid][gatePos][5]);
			}
			if (GateData[gateid][gateLinkID] != -1 && (id = GetGateByID(GateData[gateid][gateLinkID])) != -1)
			{
			    GateData[id][gateOpened] = true;
			    MoveDynamicObject(GateData[id][gateObject], GateData[id][gateMove][0], GateData[id][gateMove][1], GateData[id][gateMove][2], GateData[id][gateSpeed], GateData[id][gateMove][3], GateData[id][gateMove][4], GateData[id][gateMove][5]);
			}
		}
		else if (GateData[gateid][gateOpened])
		{
		    GateData[gateid][gateOpened] = false;
		    MoveDynamicObject(GateData[gateid][gateObject], GateData[gateid][gatePos][0], GateData[gateid][gatePos][1], GateData[gateid][gatePos][2], GateData[gateid][gateSpeed], GateData[gateid][gatePos][3], GateData[gateid][gatePos][4], GateData[gateid][gatePos][5]);

            if (GateData[gateid][gateTime] > 0) {
				KillTimer(GateData[gateid][gateTimer]);
		    }
			if (GateData[gateid][gateLinkID] != -1 && (id = GetGateByID(GateData[gateid][gateLinkID])) != -1)
			{
			    GateData[id][gateOpened] = false;
			    MoveDynamicObject(GateData[id][gateObject], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], GateData[id][gateSpeed], GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5]);
			}
		}
	}
	return 1;
}
stock GetGateByID(sqlid)
{
	for (new i = 0; i != MAX_GATES; i ++) if (GateData[i][gateExists] && GateData[i][gateID] == sqlid)
	    return i;

	return -1;
}

Gate_Nearest(playerid)
{
    for (new i = 0; i != MAX_GATES; i ++) if (GateData[i][gateExists] && IsPlayerInRangeOfPoint(playerid, GateData[i][gateRadius], GateData[i][gatePos][0], GateData[i][gatePos][1], GateData[i][gatePos][2]))
	{
		if (GetPlayerInterior(playerid) == GateData[i][gateInterior] && GetPlayerVirtualWorld(playerid) == GateData[i][gateWorld])
			return i;
	}
	return -1;
}

ReturnVehicleModelName(model)
{
	new
	    name[32] = "None";

    if (model < 400 || model > 611)
	    return name;

	format(name, sizeof(name), g_arrVehicleNames[model - 400]);
	return name;
}
stock IsValidObjectModel(input) {

switch (input) {
case 615..661: {
return true;
}
case 664: {
return true;
}
case 669..698: {
return true;
}
case 700..792: {
return true;
}
case 800..906: {
return true;
}
case 910..964: {
return true;
}
case 966..998: {
return true;
}
case 1000..1193: {
return true;
}
case 1207..1325: {
return true;
}
case 1327..1572: {
return true;
}
case 1574..1698: {
return true;
}
case 1700..2882: {
return true;
}
case 2885..3135: {
return true;
}
case 3167..3175: {
return true;
}
case 3178: {
return true;
}
case 3187: {
return true;
}
case 3193: {
return true;
}
case 3214: {
return true;
}
case 3221: {
return true;
}
case 3241..3244: {
return true;
}
case 3246: {
return true;
}
case 3249..3250: {
return true;
}
case 3252..3253: {
return true;
}
case 3255..3265: {
return true;
}
case 3267..3347: {
return true;
}
case 3350..3415: {
return true;
}
case 3417..3428: {
return true;
}
case 3430..3609: {
return true;
}
case 3612..3783: {
return true;
}
case 3785..3869: {
return true;
}
case 3872..3882: {
return true;
}
case 3884..3888: {
return true;
}
case 3890..3973: {
return true;
}
case 3975..4541: {
return true;
}
case 4550..4762: {
return true;
}
case 4806..5084: {
return true;
}
case 5086..5089: {
return true;
}
case 5105..5375: {
return true;
}
case 5390..5682: {
return true;
}
case 5703..6010: {
return true;
}
case 6035..6253: {
return true;
}
case 6255..6257: {
return true;
}
case 6280..6347: {
return true;
}
case 6349..6525: {
return true;
}
case 6863..7392: {
return true;
}
case 7415..7973: {
return true;
}
case 7978..9193: {
return true;
}
case 9205..9267: {
return true;
}
case 9269..9478: {
return true;
}
case 9482..10310: {
return true;
}
case 10315..10744: {
return true;
}
case 10750..11417: {
return true;
}
case 11420..11753: {
return true;
}
case 12800..13563: {
return true;
}
case 13590..13667: {
return true;
}
case 13672..13890: {
return true;
}
case 14383..14528: {
return true;
}
case 14530..14554: {
return true;
}
case 14556: {
return true;
}
case 14558..14643: {
return true;
}
case 14650..14657: {
return true;
}
case 14660..14695: {
return true;
}
case 14699..14728: {
return true;
}
case 14735..14765: {
return true;
}
case 14770..14856: {
return true;
}
case 14858..14883: {
return true;
}
case 14885..14898: {
return true;
}
case 14900..14903: {
return true;
}
case 15025..15064: {
return true;
}
case 16000..16790: {
return true;
}
case 17000..17474: {
return true;
}
case 17500..17974: {
return true;
}
case 17976: {
return true;
}
case 17978: {
return true;
}
case 18000..18036: {
return true;
}
case 18038..18102: {
return true;
}
case 18104..18105: {
return true;
}
case 18109: {
return true;
}
case 18112: {
return true;
}
case 18200..18859: {
return true;
}
case 18862..19198: {
return true;
}
case 19200..19274: {
return true;
}
case 19277..19595: {
return true;
}
case 19597..19999: {
return true;
}
}

return false;

}

stock Gate_Create(Float:x,Float:y,Float:z,Float:angle,interior,world)
{
    for (new i = 0; i < MAX_GATES; i ++) if (!GateData[i][gateExists])
    {
   		GateData[i][gateExists] = true;
    	GateData[i][gateID] = i;

		GateData[i][gateModel] = 980;
		GateData[i][gateSpeed] = 3.0;
		GateData[i][gateRadius] = 5.0;
		GateData[i][gateOpened] = 0;
		GateData[i][gateTime] = 0;

		GateData[i][gatePos][0] = x + (3.0 * floatsin(-angle, degrees));
		GateData[i][gatePos][1] = y + (3.0 * floatcos(-angle, degrees));
		GateData[i][gatePos][2] = z;
		GateData[i][gatePos][3] = 0.0;
		GateData[i][gatePos][4] = 0.0;
		GateData[i][gatePos][5] = angle;

		GateData[i][gateMove][0] = x + (3.0 * floatsin(-angle, degrees));
		GateData[i][gateMove][1] = y + (3.0 * floatcos(-angle, degrees));
		GateData[i][gateMove][2] = z - 10.0;
		GateData[i][gateMove][3] = -1000.0;
		GateData[i][gateMove][4] = -1000.0;
		GateData[i][gateMove][5] = -1000.0;

		GateData[i][gateInterior] = interior;
  		GateData[i][gateWorld] = world;

		GateData[i][gateLinkID] = -1;
  		GateData[i][gateOwner] = -1;
  		GateData[i][gateFaction] = -1;
		GateData[i][gateVip] = 0;

		GateData[i][gatePass][0] = '\0';
  		GateData[i][gateObject] = CreateDynamicObject(GateData[i][gateModel], GateData[i][gatePos][0], GateData[i][gatePos][1], GateData[i][gatePos][2], GateData[i][gatePos][3], GateData[i][gatePos][4], GateData[i][gatePos][5], GateData[i][gateWorld], GateData[i][gateInterior]);

		new query[256];

		mysql_format(g_SQL, query, sizeof query, "INSERT INTO `gates` (`gateID`, `gateModel`) VALUES ('%d', '980')", GateData[i][gateID]);
		mysql_query (g_SQL, query);

		Gate_Save(GateData[i][gateID]);
		return i;
    }
    return -1;
}
stock Garage_Nearest(playerid)
{
	for (new i = 0; i != MAX_GARAGE; i++) if (GarageData[i][gExists] && IsPlayerInRangeOfPoint(playerid, 3.0, GarageData[i][gPos][0], GarageData[i][gPos][1], GarageData[i][gPos][2]))
	{
	    return i;
	}
	return -1;
}
stock Garage_Inside(playerid, bool:option = false)
{
	if (PlayerData[playerid][pGarage] != -1)
	{
	    for (new i = 0; i < MAX_GARAGE; i++) if (GarageData[i][gExists] && PlayerData[playerid][pGarage] == i)
	    {
	        if(!option)
	            return i;

			if(option)
			{
		        if(IsPlayerInRangeOfPoint(playerid, 3.0, GarageInteriors[GarageData[i][gInterior]][intX], GarageInteriors[GarageData[i][gInterior]][intY], GarageInteriors[GarageData[i][gInterior]][intZ]))
		        	return i;
			}
	    }
	}
	return -1;
}

stock House_Nearest(playerid)
{
    for (new i = 0; i != MAX_EV; i ++) if (HouseInfo[i][evExists] && GetPlayerVirtualWorld(playerid) == 0 && IsPlayerInRangeOfPoint(playerid, 2.5, HouseInfo[i][evPos][0], HouseInfo[i][evPos][1],HouseInfo[i][evPos][2]))
	{
			return i;
	}
	return -1;
}

stock House_Inside(playerid, bool:option = false)
{
	if (PlayerData[playerid][pHouse] != -1)
	{
	    for (new i = 0; i < MAX_EV; i ++)
	    {
			if (HouseInfo[i][evExists] && HouseInfo[i][evID] == PlayerData[playerid][pHouse] && GetPlayerInterior(playerid) == HouseInteriors[HouseInfo[i][evInterior]][intID] && GetPlayerVirtualWorld(playerid) > 0)
			{
			    if(!option)
			        return i;

				if(option)
				{
				    if(IsPlayerInRangeOfPoint(playerid, 2.5, HouseInteriors[HouseInfo[i][evInterior] ][intX], HouseInteriors[HouseInfo[i][evInterior] ][intY], HouseInteriors[HouseInfo[i][evInterior] ][intZ]))
			        	return i;
				}
			}
		}
	}
	return -1;
}

forward OnGarageCreated(id);
public OnGarageCreated(id)
{
    if (id == -1 || !GarageData[id][gExists])
	    return 0;

	GarageData[id][gID] = cache_insert_id();
	Garaj_Kaydet(id);
	return 1;
}
forward OnGateCreated(gateid);
public OnGateCreated(gateid)
{
	if (gateid == -1 || !GateData[gateid][gateExists])
	    return 0;

	GateData[gateid][gateID] = cache_insert_id();
	Gate_Save(gateid);

	return 1;
}
stock OzelKarakter(yazi[])
{
    for (new i = 0; i < strlen(yazi); i++)
	{
		switch (yazi[i])
		{
			case '!', '@', '#', '$','%','^','&','*','(',')','_','+','=','|','[',']','{','}','-','.','`','~','<','>','?',',','/': return 1;
			default: continue;
		}
	}
	return 0;
}
stock Obje_Kaydet(objeid)
{
	static query[1280];
	format(query, sizeof(query), "UPDATE `objeler` SET `objeModel` = '%d', `objeX` = '%.4f', `objeY` = '%.4f', `objeZ` = '%.4f', `objeRX` = '%.4f', `objeRY` = '%.4f', `objeRZ` = '%.4f', `objeData` = '%d' WHERE `objeID` = '%d'",
		Obje[objeid][objeModelID],
	    Obje[objeid][objePos][0],
	    Obje[objeid][objePos][1],
	    Obje[objeid][objePos][2],
	    Obje[objeid][objePos][3],
	    Obje[objeid][objePos][4],
	    Obje[objeid][objePos][5],
	    Obje[objeid][objeData],
	    Obje[objeid][objeID]
	);
	return mysql_tquery(g_SQL, query);
}

Gate_Save(gateid)
{
	new
	    query[1024];

	format(query, sizeof(query), "UPDATE `gates` SET `gateModel` = '%d', `gateSpeed` = '%.4f', `gateRadius` = '%.4f', `gateFaction` = '%d',  `gateTime` = '%d', `gateX` = '%.4f', `gateY` = '%.4f', `gateZ` = '%.4f', `gateRX` = '%.4f', `gateRY` = '%.4f', `gateRZ` = '%.4f', `gateInterior` = '%d', `gateWorld` = '%d', `gateMoveX` = '%.4f', `gateMoveY` = '%.4f', `gateMoveZ` = '%.4f', `gateMoveRX` = '%.4f', `gateMoveRY` = '%.4f', `gateMoveRZ` = '%.4f', `gateLinkID` = '%d'",
	    GateData[gateid][gateModel],
	    GateData[gateid][gateSpeed],
	    GateData[gateid][gateRadius],
	    GateData[gateid][gateFaction],
	    GateData[gateid][gateTime],
	    GateData[gateid][gatePos][0],
	    GateData[gateid][gatePos][1],
	    GateData[gateid][gatePos][2],
	    GateData[gateid][gatePos][3],
	    GateData[gateid][gatePos][4],
	    GateData[gateid][gatePos][5],
	    GateData[gateid][gateInterior],
	    GateData[gateid][gateWorld],
	    GateData[gateid][gateMove][0],
	    GateData[gateid][gateMove][1],
	    GateData[gateid][gateMove][2],
	    GateData[gateid][gateMove][3],
	    GateData[gateid][gateMove][4],
	    GateData[gateid][gateMove][5],
	    GateData[gateid][gateLinkID]
	);
	format(query, sizeof(query), "%s, `gateOwner` = '%d', `gatePass` = '%s' WHERE `gateID` = '%d'",
	    query,
	    GateData[gateid][gateOwner],
	    SQL_ReturnEscaped(GateData[gateid][gatePass]),
	    GateData[gateid][gateID]
	);
	 mysql_query(g_SQL, query, false);

	mysql_format(g_SQL, query, sizeof query, "UPDATE `gates` SET `VIP` = '%d' WHERE `gateID` = '%d'", GateData[gateid][gateVip], GateData[gateid][gateID]);
	mysql_query (g_SQL, query);
}

stock DestekGuncelle(playerid)
{
	if (PlayerData[playerid][pDestek] > 0)
	{
	    new Float:pos[3];
 		GetPlayerPos(playerid, pos[0], pos[1], pos[2]);

		foreach (new i : Player)
 		{
 		    if (GetFactionType(i) == BIRLIK_LSPD || GetFactionType(i) == BIRLIK_FBI)
 		    {
 		        if (i != playerid)
 		        {
 		        	cmd_cpsifirla(i);
					SetPlayerCheckpoint(i, pos[0], pos[1], pos[2], 2.5);
 		            SetPlayerMarkerForPlayer(i, playerid, 0xFF0000FF);
 		        }
 		    }
 		}
	}
}

stock DestekKapat(playerid, calledbytimer)
{
	if (OyundaDegil(playerid))
	{
	    foreach (new i:Player)
	    {
	        if (GetFactionType(i) == BIRLIK_LSPD || GetFactionType(i) == BIRLIK_FBI)
	        {
	            SetPlayerMarkerForPlayer(i, playerid, COLOR_RADIO);
				DisablePlayerCheckpoint(i);
	        }
	    }
	    PlayerData[playerid][pDestek] = 0;
	    if (calledbytimer != 1) MesajGonder(playerid, "Destek istegi kapatýldý.");
	    else MesajGonder(playerid, "Destek istegi otomatik olarak kapatýldý.");
	}
}

stock ToplamOnlineOyuncu()
{
	return Iter_Count(Player);
}

stock getDate()
{
	new Tarih[3], m[256];
	getdate(Tarih[0], Tarih[1], Tarih[2]);

	format(m, sizeof m, "%d/%d/%d", Tarih[2], Tarih[1], Tarih[0]);
	return m;
}

stock getTime()
{
	new Saat[3], m[256];
	gettime(Saat[0], Saat[1], Saat[2]);

	format(m, sizeof m, "%02d:%02d", Saat[0], Saat[1]);
	return m;
}

forward EhliyetUpdate();
public EhliyetUpdate()
{
	foreach (new i : Player)
	{
 		if(PlayerData[i][pEhliyetSinavinda] != 0 && GetPlayerState(i) == PLAYER_STATE_DRIVER)
 		{
 			if(GetPlayerSpeed(GetPlayerVehicleID(i)) > 90)
 			{
 				PlayerData[i][pEhliyetUyari]++;

 				if(PlayerData[i][pEhliyetUyari] == 3)
 				{
					DisablePlayerCheckpoint(i);
				    EhliyetAracCP[GetPlayerVehicleID(i)] = 0;
				    AracCP[GetPlayerVehicleID(i)] = -1;

				    Arac_Spawn(Car_GetID(GetPlayerVehicleID(i)));

				    SetPlayerPos(i, EhliyetX, EhliyetY, EhliyetZ);
				    PlayerData[i][pEhliyetSinavinda] = 0;
				    PlayerData[i][pEhliyetUyari] = 0;
 					HataMesajGonder(i, "Hiz limitini üçüncü kez astiginiz için sinav iptal edildi!");
 				}else{
 					HataMesajGonder(i, "Hiz limitini(90) astiniz! %d kez daha asarsaniz sinav iptal edilecek.", 3 - PlayerData[i][pEhliyetUyari]);
 				}
 			}
 		}
	}
	return 1;
}

forward TarihUpdate(playerid);
public TarihUpdate(playerid)
{
    new Tarih[3], Saat[3];
    new bojnak[70];
	getdate(Tarih[0], Tarih[1], Tarih[2]);
	gettime(Saat[0], Saat[1], Saat[2]);
	format(bojnak, sizeof(bojnak), "%02d:%02d - %d/%d/%d", Saat[0], Saat[1], Tarih[2], Tarih[1], Tarih[0]);
	TextDrawSetString(OyuncuHUD_0, bojnak);
	PlayerTextDrawDestroy(playerid, CapacityText[playerid]);
	return 1;
}

forward SecondUpdate();
public SecondUpdate()
{
	new string[256], saat, dakika;
	gettime(saat, dakika);
	SetWorldTime(saat);
	foreach (new i:Player)
	{
	    if (GetPVarInt(i, "Logged") == 0) continue;
   		if (GetPVarInt(i, "CCTVKontrol") < gettime())
		{
		    new id = GetNearestCCTV(i);
		    SetPVarInt(i, "CCTVKontrol", gettime()+10);
		    if (id != -1 && CCTVInfo[id][cctvBildirim] < gettime())
		    {
	         	if (PlayerData[i][pAranma] > 0)
	         	{
	    	        CCTVInfo[id][cctvBildirim] = gettime()+100;
		        	SendBirlikMessageEx(BIRLIK_LSPD, COLOR_RED, "** DEPARTMAN: %s adlý aranan %s adlý CCTV'de görüldü.",ReturnName(i, 0), CCTVInfo[id][cctv_Name]);
	         	}

		    }
		}
	    SetPlayerTime(i, saat, dakika);

	    if (PlayerData[i][pHUD] == false)
	    {
	        for (new d = 0; d < 5; d++)
	            PlayerTextDrawHide(i, AracHUD[i][d]);
	    }
	    if (PlayerData[i][pDuzkontakEdiyor] == 1)
	    {
   			new vehicleid = GetPlayerVehicleID(i);
	 		new id = Car_GetID(vehicleid);
    		if (GetPlayerState(i) == PLAYER_STATE_DRIVER)
    		{
				new str[258];
				format(str, 24, "[Düzkontak... (%d/sn)]", PlayerData[i][pDuzkontakTimer]);
	      		SetPlayerChatBubble(i, str, COLOR_RED, 10.0, 1500);
				format(str, sizeof str, "~r~DUZKONTAK: %d SANIYE", PlayerData[i][pDuzkontakTimer]);
				GameTextForPlayer(i, str, 2000, 4);
				PlayerData[i][pDuzkontakTimer]--;
				if (PlayerData[i][pDuzkontakTimer] < 1)
				{
					SunucuMesaji(i, "Düzkontak tamam! Þimdi bunu hurdaya götürmelisin.");
	    			SetEngineStatus(vehicleid, true);
   					AracInfo[id][aracDuzkontakEden] = i;
	    			PlayerData[i][pDuzkontakEdiyor] = 0;
	    			PlayerData[i][pDuzkontakTimer] = 0;
				}
    		}
    		else
			{
   				PlayerData[i][pDuzkontakEttiZtn] = 0;
			    HataMesajGonder(i, "Araçta olmadýðýnýz için düzkontak iptal edildi.");
			    PlayerData[i][pDuzkontakEdiyor] = 0;
			    AracInfo[id][aracDuzkontakEden] = 999;

			}
	    }
	    if (PlayerData[i][pTarife] != -1 && PlayerData[i][pTarifeSure] < gettime())
	    {
	        PlayerData[i][pTarife] = -1;
	        PlayerData[i][pTarifeKalan][0] = 0;
	        PlayerData[i][pTarifeKalan][1] = 0;
	        PlayerData[i][pTarifeKalan][2] = 0;
	        PlayerData[i][pTarifeSure] = 0;
	        MesajGonder(i, "Tarifenizin abonelik süresi doldu, 555 numarasini arayarak tarifenizi yenileyebilirsiniz.");
	    }
		new playerid;
   		/* if (PlayerData[playerid][whitelist] == 1)
		{
			new query[300];
			mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM whitelist WHERE `Sqlid` = '%d'", PlayerData[i][pID]);
			mysql_tquery(g_SQL, query, "WhitelistKontrol", "d", i);
		} */
	    SetPlayerTime(i, saat, dakika);
	    GetPlayerHealth(i, PlayerData[i][pHealth]);
//	    SetPlayerProgressBarValue(i, PlayerProgressBar[i][0], PlayerData[i][pHealth]);
	 	if (PlayerData[i][pSoklandi] > 0)
		{
            PlayerData[i][pSoklandi]--;

			if (GetPlayerAnimationIndex(i) != 388)
            	ApplyAnimation(i, "CRACK", "crckdeth4", 4.0, 0, 0, 0, 1, 0, 1);

            if (!PlayerData[i][pSoklandi])
            {
                if (PlayerData[i][pKelepce] == 0) TogglePlayerControllable(i, 1);
                ClearAnimations(i);
			}
		}
		if (PlayerData[i][pSilahAlmaSayisi] >= 2 && PlayerData[i][pSilahAlma] < gettime())
		{
		    PlayerData[i][pSilahAlmaSayisi] = 0;
		    PlayerData[i][pSilahAlma] = 0;
		}
		if (PlayerData[i][pHapisSure] > 0 && PlayerData[i][pCK] == 0)
		{
		    new str[70];
		    static
		        hours,
		        minutes,
		        seconds;

		    PlayerData[i][pHapisSure]--;
		    GetElapsedTime(PlayerData[i][pHapisSure], hours, minutes, seconds);
		    format(str, sizeof(str), "~g~Kalan Sure:~w~ %02d:%02d:%02d", hours, minutes, seconds);
			PlayerTextDrawSetString(i, HapisTD[i], str);
			if (!PlayerData[i][pHapisSure])
		    {
		        PlayerData[i][pHapis] = 0;

		        SetPlayerPos(i, 631.3418,-571.8346,16.3359);
		        SetPlayerInterior(i, 0);
		        SetPlayerVirtualWorld(i, 0);
		        SetCameraBehindPlayer(i);
		        ObjelerYukleniyor(i);
				MesajGonder(i, "Hapis süreniz doldu.");
		        PlayerTextDrawHide(i, HapisTD[i]);
			}
		}
		if (PlayerData[i][pEXPBoost] < gettime() && PlayerData[i][pEXPBoost] != 0)
		{
		    PlayerData[i][pEXPBoost] = 0;
		    SunucuMesaji(i, "EXP Boost adli ürününüz bitti, (/oocmarket) komutunu kullanarak tekrar satin alabilirsiniz.");
		}
		if (PlayerData[i][pBalikOrani] < gettime() && PlayerData[i][pBalikOrani] != 0)
		{
		    PlayerData[i][pBalikOrani] = 0;
		    SunucuMesaji(i, "Balik orani arttirma adli ürününüz bitti, (/oocmarket) komutunu kullanarak tekrar satin alabilirsiniz.");
		}
		if (PlayerData[i][pVip] > 0 && PlayerData[i][pVipSure] < gettime())
		{
		    PlayerData[i][pVip] = 0;
		    PlayerData[i][pVipSure] = 0;
		    PlayerData[i][pDovusStili] = 4;
		    SetPlayerFightingStyle(i, FIGHT_STYLE_NORMAL);
		    Oyuncu_Kaydet(i);
		    Dialog_Show(i, VIPBitti, DIALOG_STYLE_MSGBOX, "VIP Paketiniz Bitti!", "{FFFFFF}VIP Paketinizin süresi doldu, (/oocmarket) komutunu kullanarak tekrar satin alabilirsiniz.\n\n{FFFFFF}Desteginiz için ekip adina tesekkür ederiz :)", "Tamam", "");
		}
		if (PlayerData[i][pMaasSure] < 3600 && PlayerData[i][pHapisSure] < 2)
		{
		    PlayerData[i][pMaasSure]++;
		    if (PlayerData[i][pMaasSure] >= 3600)
		    {
		        PlayerData[i][pMaasSure] = 0;
		        if (GetServerBilgi("2xpayday") == 1) PlayerData[i][pEXP] += 2;
		        else PlayerData[i][pEXP]++;
		        if (PlayerData[i][pEXPBoost] > gettime()) PlayerData[i][pEXP]++;
		        if (GetServerBilgi("2xpayday") == 1) PlayerData[i][pOynamaSaati] += 2;
		        else PlayerData[i][pOynamaSaati]++;
		        switch (PlayerData[i][pVip])
		        {
		            case 1: PlayerData[i][pEXP] += 2;
		            case 2: PlayerData[i][pEXP] += 4;
		            case 3: PlayerData[i][pEXP] += 6;
		        }
		        if (PlayerData[i][pEXP] >= PlayerData[i][pLevel]*5)
				{
				    new kalanexp = 0;
				    if (PlayerData[i][pEXP] > PlayerData[i][pLevel]*5)
				    {
				        kalanexp = PlayerData[i][pEXP] - PlayerData[i][pLevel]*5;
				    }
				    PlayerData[i][pEXP] = kalanexp;
					PlayerData[i][pLevel]++;
					SetPlayerScore(i, PlayerData[i][pLevel]);
					MesajGonder(i, "Seviye atladiniz!");
					if(PlayerData[i][pLevel] == 5){
						format(PlayerData[i][pBasari5Tarih],25,ReturnDate());
						PlayerData[i][pBasari5] = 1;
					}
					if(PlayerData[i][pLevel] == 10){
						format(PlayerData[i][pBasari10Tarih],25,ReturnDate());
						PlayerData[i][pBasari10] = 1;
					}
				}
				if (PlayerData[i][pHediye] < 1)
				{
				    PlayerData[i][pHediyeSaat]++;
				    if (PlayerData[i][pHediyeSaat] == 5)
					{
					    PlayerData[i][pHediye] = 1;
					    PlayerData[i][pHediyeSaat] = 0;
					}
				}
				PayDay(i);
				if (GetServerBilgi("2xpayday") == 1)
				{
				    if (PlayerData[i][pHediye] < 1)
					{
					    PlayerData[i][pHediyeSaat]++;
					    if (PlayerData[i][pHediyeSaat] == 5)
						{
						    PlayerData[i][pHediye] = 1;
						    PlayerData[i][pHediyeSaat] = 0;
						}
					}
				    PayDay(i);
				}
		    }
		}
		if (PlayerData[i][pYereYatirildi] > 0)
		{
		   PlayerData[i][pYereYatirildi]--;

			if (GetPlayerAnimationIndex(i) != 388)
            	ApplyAnimation(i, "CRACK", "crckdeth4", 4.0, 0, 0, 0, 1, 0, 1);

            if (!PlayerData[i][pYereYatirildi])
            {
                if (PlayerData[i][pKelepce] == 0) TogglePlayerControllable(i, 1);
                ClearAnimations(i);
			}
		}
		if (PlayerData[i][pDestek] > 0)
		{
		    PlayerData[i][pDestek]--;
		    if (PlayerData[i][pDestek] == 0)
		    {
		        DestekKapat(i, 1);
		    }
		}
		if (PlayerData[i][pBagimlilik] > 0 && PlayerData[i][pBagimlilikSayac][1] == 0)
		{
		    PlayerData[i][pBagimlilikSayac][0]++;
		    if (PlayerData[i][pBagimlilikSayac][0] >= 1200)
		    {
		        PlayerData[i][pBagimlilikSayac][1] = 1;
		        PlayerData[i][pBagimlilikSayac][0] = 0;
		        SetPlayerHealth(i, ReturnHealth(i) - 5);
		        SetPlayerDrunkLevel(i, 4999);
		        SetPlayerWeather(i, 234);
		        EffectTimer[i] = SetTimerEx("RemoveEffects", (2 * 7) * 1000, false, "i", i);
		        SunucuMesaji(i, "Kendinizi halsiz hissediyorsunuz, uyusturucu kullanmaniz gerekiyor.");
		    }
		}
		if (PlayerData[i][pBaygin] == 1)
		{
  			if (GetPVarInt(i, "AracaBindi") == 0 && GetPVarInt(i, "Iyilestiriliyor") == 0) PlayerData[i][pBayginSure]++;
	    	new str[256];
	    	new Float: x, Float: y, Float: z;

	        format(string, sizeof(string), "(( Bu karakter yaralý. [/hasarlar %d] ))", i);
	        SetPlayerChatBubble(i, string, COLOR_LIGHTRED, 20.0, 1000);

      		DestroyDynamic3DTextLabel(Rozet[i]);

        	format(str, sizeof(str), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~~r~Yaralanma: ~y~%d~n~", 180 - PlayerData[i][pBayginSure]);
			GameTextForPlayer(i, str, 1000, 3);

			if (GetPlayerAnimationIndex(i) != 1701 && GetPVarInt(i, "AracaBindi") == 0 && GetPVarInt(i, "CPsineGelindi") != 1 && PlayerData[i][pDragged] == 0)
    			ApplyAnimation(i, "SWAT", "gnstwall_injurd", 4.0, 1, 0, 0, 0, 0, 1);

			GetPlayerPos(i, x, y, z);

			if (PlayerData[i][pBayginSure] <= 2)
			{
   				PlayerData[i][pCikisPos][0] = x;
	        	PlayerData[i][pCikisPos][1] = y;
	        	PlayerData[i][pCikisPos][2] = z;
			}
			if (GetPlayerWeapon(i) != 0) SetPlayerArmedWeapon(i, 0);
			if (PlayerData[i][pBayginSure] >= 180)
			{
   				PlayerData[i][pBaygin] = 0;
       			PlayerData[i][pBayginSure] = 0;
       			TogglePlayerControllable(i, true);
          		SetCameraBehindPlayer(i);
				ClearAnimations(i);
				StopLoopingAnim(i);
				CanAyarla(i, 100);
				SetWeapons(i);
	    	}

			if (GetPVarInt(i, "CPsineGelindi") == 1 && PlayerData[i][pDragged] == 0)
			    ApplyAnimation(i, "SWAT", "gnstwall_injurd", 4.1, 1, 0, 0, 0, 0, 1);

			//if (PlayerData[i][pDragged] == 1 && GetFactionType(PlayerData[i][pDraggedBy]) == BIRLIK_LSMD)
			//    ApplyAnimation(i, "SWAT", "gnstwall_injurd", 4.1, 1, 0, 0, 0, 0, 1);
		}
		if (PlayerData[i][pBaygin] == 2)
		{
  			if (GetPVarInt(i, "AracaBindi") == 0 && GetPVarInt(i, "Iyilestiriliyor") == 0) PlayerData[i][pBayginSure]++;
	    	new str[256];
	    	new Float: x, Float: y, Float: z;

	        format(string, sizeof(string), "(( Bu karakter aðýr yaralý. [/hasarlar %d] ))", i);
	        SetPlayerChatBubble(i, string, COLOR_LIGHTRED, 20.0, 1000);

      		DestroyDynamic3DTextLabel(Rozet[i]);

        	format(str, sizeof(str), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~~r~Yaralanma: ~y~%d~n~", 180 - PlayerData[i][pBayginSure]);
			GameTextForPlayer(i, str, 1000, 3);

if (GetPlayerAnimationIndex(i))
            {

                if(!IsPlayerInAnyVehicle(i))
                {
                    if (GetPlayerAnimationIndex(i) != 1701)
                    {
                        ApplyAnimation(i, "WUZI", "CS_Dead_Guy", 4.1, 1, 0, 0, 0, 0, 1);
                    }
                }
                else
                {
                    if (GetPlayerAnimationIndex(i) != 1019)
                    {
                        ApplyAnimation(i, "PED", "CAR_DEAD_RHS", 4.1, 1, 0, 0, 0, 0, 1);
                    }
                }

            }

			GetPlayerPos(i, x, y, z);

			if (PlayerData[i][pBayginSure] <= 2)
			{
   				PlayerData[i][pCikisPos][0] = x;
	        	PlayerData[i][pCikisPos][1] = y;
	        	PlayerData[i][pCikisPos][2] = z;
			}
			if (GetPlayerWeapon(i) != 0) SetPlayerArmedWeapon(i, 0);
			if (PlayerData[i][pBayginSure] >= 150)
			{
   				PlayerData[i][pBaygin] = 0;
       			PlayerData[i][pBayginSure] = 0;
       			TogglePlayerControllable(i, true);
          		SetCameraBehindPlayer(i);
				ClearAnimations(i);
				StopLoopingAnim(i);
				CanAyarla(i, 100);
				SetWeapons(i);
	    	}

			if (GetPVarInt(i, "CPsineGelindi") == 1 && PlayerData[i][pDragged] == 0)
			    ApplyAnimation(i, "SWAT", "gnstwall_injurd", 4.1, 1, 0, 0, 0, 0, 1);

			//if (PlayerData[i][pDragged] == 1 && GetFactionType(PlayerData[i][pDraggedBy]) == BIRLIK_LSMD)
			//    ApplyAnimation(i, "SWAT", "gnstwall_injurd", 4.1, 1, 0, 0, 0, 0, 1);
		}
		if (PlayerData[i][pIyilestiriyor] != -1)
		{
		    new Float:pos[3];
		    GetPlayerPos(PlayerData[i][pIyilestiriyor], pos[0], pos[1], pos[2]);
		    if (!OyundaDegil(PlayerData[i][pIyilestiriyor]) || PlayerData[PlayerData[i][pIyilestiriyor]][pBaygin] != 1 || !IsPlayerInRangeOfPoint(i, 5.0, pos[0], pos[1], pos[2]))
		    {
		        SetPVarInt(PlayerData[i][pIyilestiriyor], "Iyilestiriliyor", 0);
		        PlayerData[i][pIyilestiriyor] = -1;
		        PlayerData[i][pIyilestirmeSure] = 0;
		        ClearAnimations(i);
		        StopLoopingAnim(i);
		        TogglePlayerControllable(i, true);
		    }
		    else
		    {
		        PlayerData[i][pIyilestirmeSure]++;
		        new str[65];
		        format(str, sizeof(str), "~g~~h~%d", 15 - PlayerData[i][pIyilestirmeSure]);
				GameTextForPlayer(i, str, 100, 4);
				if (GetPlayerAnimationIndex(i) != 168) ApplyAnimation(i, "BOMBER", "BOM_Plant_Loop", 4.1, 1, 1, 1, 0, 0, 1);
				if (GetPlayerWeapon(i) != 0) SetPlayerArmedWeapon(i, 0);
				if (PlayerData[i][pIyilestirmeSure] >= 15)
				{
				    PlayerData[PlayerData[i][pIyilestiriyor]][pBaygin] = 0;
				    PlayerData[PlayerData[i][pIyilestiriyor]][pBayginSure] = 0;
				    SetCameraBehindPlayer(PlayerData[i][pIyilestiriyor]);
					ClearAnimations(PlayerData[i][pIyilestiriyor]);
					StopLoopingAnim(PlayerData[i][pIyilestiriyor]);
					SetPlayerHealth(PlayerData[i][pIyilestiriyor], 100);
					SetPVarInt(PlayerData[i][pIyilestiriyor], "Iyilestiriliyor", 0);
					MesajGonder(PlayerData[i][pIyilestiriyor], "%s adli kisi tarafindan iyilestirildin.", ReturnName(i, 0));
					MesajGonder(i, "%s adli kisiyi iyilestirdiniz.", ReturnName(PlayerData[i][pIyilestiriyor], 0));
					PlayerData[i][pIyilestiriyor] = -1;
					PlayerData[i][pIyilestirmeSure] = 0;
					ClearAnimations(i);
					StopLoopingAnim(i);
					TogglePlayerControllable(i, true);
				}
		    }
		}
		if (PlayerData[i][pTopallama] == true)
		{
			PlayerData[i][pTopallamaSayac]++;
   			if (PlayerData[i][pTopallamaSayac] >= 120)
      		{
        		PlayerData[i][pTopallama] = false;
          		PlayerData[i][pTopallamaSayac] = 0;
        	}
		}
		if (PlayerData[i][pAramada] == ARAMA_KONUSUYOR && GetPVarInt(i, "Arayan") == 1)
		{
		    PlayerData[i][pKonusmaSure]++;
		    if (PlayerData[i][pKonusmaSure] >= 59)
		    {
		        PlayerData[i][pKonusmaSure] = 0;
		        PlayerData[i][pTarifeKalan][0]--;
		        if (PlayerData[i][pTarifeKalan][0] == 0)
		        {
		            SunucuMesaji(i, "Tarifeniz bitti, 555 numarasini arayarak tarifenizi yenileyebilirsiniz.");
		            SunucuMesaji(PlayerData[i][pCallLine], "Çagri zaman asimina ugradi. ");
		            DeletePVar(i, "Arayan");
		            DeletePVar(PlayerData[i][pCallLine], "Arayan");
		            PlayerData[i][pAramada] = 0;
		            PlayerData[PlayerData[i][pCallLine]][pAramada] = 0;
		            PlayerData[PlayerData[i][pCallLine]][pCallLine] = -1;
		            PlayerData[i][pCallLine] = -1;
				}
		    }
		}
		static id = -1;
		if ((id = Boombox_Nearest(i)) != INVALID_PLAYER_ID && PlayerData[i][pMuzikKutusu] != id && strlen(BoomboxData[id][boomboxURL]) && !IsPlayerInAnyVehicle(i))
		{
		    PlayerData[i][pMuzikKutusu] = id;

		    StopAudioStreamForPlayer(i);
		    PlayAudioStreamForPlayer(i, BoomboxData[id][boomboxURL], BoomboxData[id][boomboxPos][0], BoomboxData[id][boomboxPos][1], BoomboxData[id][boomboxPos][2], 30.0, 1);
		}
		else if (PlayerData[i][pMuzikKutusu] != INVALID_PLAYER_ID && !IsPlayerInRangeOfPoint(i, 30.0, BoomboxData[PlayerData[i][pMuzikKutusu]][boomboxPos][0], BoomboxData[PlayerData[i][pMuzikKutusu]][boomboxPos][1], BoomboxData[PlayerData[i][pMuzikKutusu]][boomboxPos][2]))
		{
		    PlayerData[i][pMuzikKutusu] = INVALID_PLAYER_ID;
		    StopAudioStreamForPlayer(i);
		}
		/*if (strlen(PlayerData[i][pIhbar]) > 0)
		{
		    PlayerData[i][pIhbarSayac]--;
		    if (PlayerData[i][pIhbarSayac] <= 0)
		    {
		        format(PlayerData[i][pIhbar], 128, "");
		        PlayerData[i][pIhbarSayac] = 0;
		    }
		}*/
		if (strlen(PlayerData[i][pIhbar]) > 0)
		{
		    PlayerData[i][pIhbarSayac]--;
		    if (PlayerData[i][pIhbarSayac] == 0)
		    {
		        format(PlayerData[i][pIhbar], 128, "");
		        PlayerData[i][pIhbarSayac] = 0;
       			if ((GetFactionType(i) == 4 || GetFactionType(i) >= 6) && PlayerData[i][pOnDuty])
					SetFactionColor(i);
				else SetPlayerColor(i, 0xFFFFFFFF);
		    }
		}
		if (PlayerData[i][pMangalKuruldu] == true)
		{
		    if (PlayerData[i][pYemekPisiriliyor] > 1 && PlayerData[i][pPisirilenYemek] > 0)
		    {
		        PlayerData[i][pYemekPisiriliyor]--;
		        new str[100], yemek[10];
		        if (PlayerData[i][pPisirilenYemek] == 1) yemek = "Köfte";
		        if (PlayerData[i][pPisirilenYemek] == 2) yemek = "Tavuk Eti";
		        if (PlayerData[i][pPisirilenYemek] == 3) yemek = "Dana Eti";
		        format(str, sizeof(str), "{FF9900}[Barbekü]\n\n{FFFFFF}Olusturan: %s\n\n{9ACD32}%s Pisiriliyor...(%d saniye)", ReturnName(i, 0), yemek, PlayerData[i][pYemekPisiriliyor]);
		        UpdateDynamic3DTextLabelText(PlayerData[i][MangalText], -1, str);
			}
			if (PlayerData[i][pYemekPisiriliyor] == 1 && PlayerData[i][pPisirilenYemek] > 0)
			{
			    new str[100], yemek[10];
			    if (PlayerData[i][pPisirilenYemek] == 1) yemek = "Köfte";
		        if (PlayerData[i][pPisirilenYemek] == 2) yemek = "Tavuk Eti";
		        if (PlayerData[i][pPisirilenYemek] == 3) yemek = "Dana Eti";
			    format(str, sizeof(str), "{FF9900}[Barbekü]\n\n{FFFFFF}Olusturan: %s\n\n{9ACD32}%s Pisti! (N ile alabilirsiniz)", ReturnName(i, 0), yemek);
			    UpdateDynamic3DTextLabelText(PlayerData[i][MangalText], -1, str);
			}
			if (PlayerData[i][pYemekPisiriliyor] == 0 && PlayerData[i][pPisirilenYemek] == 0)
			{
			    new str[100];
	    		format(str, sizeof(str), "{FF9900}[Barbekü]\n\n{FFFFFF}Olusturan: %s", ReturnName(i, 0));
	    		UpdateDynamic3DTextLabelText(PlayerData[i][MangalText], -1, str);
			}
		}
		if (GetPlayerState(i) == PLAYER_STATE_DRIVER)
		{
		    id = Car_GetID(GetPlayerVehicleID(i));
		    if (id != -1 && AracInfo[id][aracZirh] > 0)
	    	{
		        new Float:health;
		        GetVehicleHealth(GetPlayerVehicleID(i), health);
		        if (health < 999)
		        {
		            AracInfo[id][aracZirh] -= 10;
		            if (AracInfo[id][aracZirh] <= 5) AracInfo[id][aracZirh] = 0;
		            RepairVehicle(GetPlayerVehicleID(i));
		            SetVehicleHealth(GetPlayerVehicleID(i), 999);
		        }
	    	}
		}
		if (AracCekiyor[i] != INVALID_VEHICLE_ID)
		{
		    if (!IsTrailerAttachedToVehicle(GetPlayerVehicleID(i))) AracCekiyor[i] = INVALID_VEHICLE_ID;
		}
	}
	new str[75];
	for (new i; i < MAX_ODA; i++) if (Paintball[i][odaExists])
	{
	    if (Paintball[i][odaDurum] == ODA_BASLADI)
	    {
	        Paintball[i][odaSayac]--;
	        foreach (new p:Player)
	        {
	            if (IsPlayerConnected(p) && pbOda[p] == i && pbTakim[p] > 0)
	            {
	                if (GetLiderOyuncu(i) == -1)
	                {
						format(str, sizeof(str), "N/A");
					}
					else
					{
					    format(str, sizeof(str), "%s (%d kill)", ReturnName(GetLiderOyuncu(i), 0), pbOldurme[GetLiderOyuncu(i)]);
					}
					PlayerTextDrawSetString(p, PaintballTD[p][5], str);
					format(str, sizeof(str), "%d", Paintball[i][odaPuan][0]);
					PlayerTextDrawSetString(p, PaintballTD[p][3], str);
					format(str, sizeof(str), "%d", Paintball[i][odaPuan][1]);
					PlayerTextDrawSetString(p, PaintballTD[p][4], str);
				 	format(str, sizeof(str), "%s", trcar(Paintball[i][odaTakim1Ad]));
				 	PlayerTextDrawSetString(p, PaintballTD[p][1], str);
					format(str, sizeof(str), "%s", trcar(Paintball[i][odaTakim2Ad]));
				 	PlayerTextDrawSetString(p, PaintballTD[p][2], str);
				 	format(str, sizeof(str), "%s", TimeConvert(Paintball[i][odaSayac]));
				 	PlayerTextDrawSetString(p, PaintballTD[p][6], str);
				 	format(str, sizeof(str), "%d", pbOldurme[p]);
				 	PlayerTextDrawSetString(p, PaintballTD[p][7], str);
				 	format(str, sizeof(str), "%d", pbOlme[p]);
				 	PlayerTextDrawSetString(p, PaintballTD[p][8], str);

	            }
	        }
	        if (Paintball[i][odaSayac] == 0)
	        {
	            MacBitir(i);
	        }
	    }
	}
	TollUpdate();
	return 1;
}

forward AddTolls();
public AddTolls() // Needs to be called in the OnGameModeInit function!
{ // Thanks to Nexus for mapping!
    /* Richman */
    CreateDynamicObject( 8168, 612.73895263672, -1191.4602050781, 20.294105529785, 0.000000, 5, 318.31237792969, -1 );
    CreateDynamicObject( 8168, 620.47265625, -1188.49609375, 20.044105529785, 0.000000, 352.99621582031, 138.94409179688, -1 );
    CreateDynamicObject( 966, 613.97229003906, -1197.7174072266, 17.475030899048, 0.000000, 0.000000, 23.81982421875, -1 );
    CreateDynamicObject( 997, 614.33209228516, -1194.3870849609, 17.709369659424, 0.000000, 0.000000, 266.70568847656, -1 );
    CreateDynamicObject( 973, 602.98425292969, -1202.1643066406, 18.000516891479, 0.000000, 0.000000, 19.849853515625, -1 );

	L_a_TollObject[0] = CreateDynamicObject( 968, 613.8935546875, -1197.7329101563, 18.109180450439, 0.000000, -90.000000, 23.81982421875, -1 );

	new str[256];

	CreateDynamicObject( 966, 619.42913818359, -1181.6597900391, 18.725030899048, 0.000000, 0.000000, 214.37744140625, -1 );
    CreateDynamicObject( 973, 629.68823242188, -1176.0551757813, 19.500516891479, 0.000000, 0.000000, 21.831787109375, -1 );
    CreateDynamicObject( 997, 619.26574707031, -1181.6518554688, 18.709369659424, 0.000000, 0.000000, 268.68908691406, -1 );

	/* End of Richman */

    /* Flint */
    CreateDynamicObject( 8168, 61.256042480469, -1533.3946533203, 6.1042537689209, 0.000000, 0.000000, 9.9252624511719, -1 );
    CreateDynamicObject( 8168, 40.966598510742, -1529.5725097656, 6.1042537689209, 0.000000, 0.000000, 188.5712890625, -1 );
    L_a_TollObject[2] = CreateDynamicObject( 968, 35.838928222656, -1525.9034423828, 5.0012145042419, 0.000000, -90.000000, 270.67565917969, -1 );

    L_a_TollObject[3] = CreateDynamicObject( 968, 67.116600036621, -1536.8218994141, 4.7504549026489, 0.000000, -90.000000, 87.337799072266, -1 );

	CreateDynamicObject( 973, 52.9794921875, -1531.9252929688, 5.090488910675, 0.000000, 0.000000, 352.06005859375, -1 );
    CreateDynamicObject( 973, 49.042072296143, -1531.5065917969, 5.1758694648743, 0.000000, 0.000000, 352.05688476563, -1 );
    CreateDynamicObject( 997, 68.289916992188, -1546.6020507813, 4.0626411437988, 0.000000, 0.000000, 119.09942626953, -1 );
    CreateDynamicObject( 997, 34.5198097229, -1516.1402587891, 4.0626411437988, 0.000000, 0.000000, 292.50622558594, -1 );
    CreateDynamicObject( 997, 35.903915405273, -1525.8717041016, 4.0626411437988, 0.000000, 0.000000, 342.13012695313, -1 );
    CreateDynamicObject( 997, 63.914081573486, -1535.7126464844, 4.0626411437988, 0.000000, 0.000000, 342.130859375, -1 );
    /* End of Flint */

    /* LV */
    CreateDynamicObject( 8168, 1789.83203125, 703.189453125, 15.846367835999, 0.000000, 3, 99.24951171875, -1 );
    CreateDynamicObject( 8168, 1784.8334960938, 703.94799804688, 16.070636749268, 0.000000, 357, 278.61096191406, -1 );
    CreateDynamicObject( 966, 1781.4122314453, 697.32531738281, 14.636913299561, 0.000000, 0.000000, 348.09008789063, -1 );
    CreateDynamicObject( 996, 1767.3087158203, 700.50506591797, 15.281567573547, 0.000000, 0.000000, 346.10510253906, -1 );
    CreateDynamicObject( 997, 1781.6832275391, 697.34796142578, 14.698781013489, 0.000000, 3, 77.41455078125, -1 );
    CreateDynamicObject( 997, 1792.7745361328, 706.38543701172, 13.948781013489, 0.000000, 2.999267578125, 81.379638671875, -1 );
    CreateDynamicObject( 966, 1793.4289550781, 709.87982177734, 13.636913299561, 0.000000, 0.000000, 169.43664550781, -1 );
    CreateDynamicObject( 996, 1800.8060302734, 708.38299560547, 14.281567573547, 0.000000, 0.000000, 346.10229492188, -1 );
    L_a_TollObject[4] = CreateDynamicObject( 968, 1781.4133300781, 697.31750488281, 15.420023918152, 0.000000, -90.000000, 348.10229492188, -1 );
    L_a_TollObject[5] = CreateDynamicObject( 968, 1793.6700439453, 709.84631347656, 14.405718803406, 0.000000, -90.000000, 169.43664550781, -1 );

    format(str, sizeof str, "{2F80C1}«« Gise »»\n{FFFFFF}/gise komutunu kullanarak giseyi açabilirsiniz.");
	CreateDynamic3DTextLabel(str, -1, 1781.4133300781, 697.31750488281, 15.420023918152, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, STREAMER_3D_TEXT_LABEL_SD, -1, 0);

	format(str, sizeof str, "{2F80C1}«« Gise »»\n{FFFFFF}/gise komutunu kullanarak giseyi açabilirsiniz.");
	CreateDynamic3DTextLabel(str, -1, 1793.6700439453, 709.84631347656, 14.405718803406, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, STREAMER_3D_TEXT_LABEL_SD, -1, 0);
    /* End of LV */

    /* Blueberry right */
    CreateDynamicObject(966, 614.42188, 350.81711, 17.92480,   0.00000, 0.00000, 35.00000);
    CreateDynamicObject(966, 602.91162, 342.59781, 17.92480,   0.00000, 0.00000, 215.92000);
    L_a_TollObject[6] = CreateDynamicObject(968, 614.42188, 350.81711, 18.66520,   0.00000, -90.00000, 35.00000);
    L_a_TollObject[7] = CreateDynamicObject(968, 602.91162, 342.59781, 18.66520,   0.00000, -90.00000, 215.92000);

    format(str, sizeof str, "{2F80C1}«« Gise »»\n{FFFFFF}/gise komutunu kullanarak giseyi açabilirsiniz.");
	CreateDynamic3DTextLabel(str, -1, 614.42188, 350.81711, 18.66520, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, STREAMER_3D_TEXT_LABEL_SD, -1, 0);

	format(str, sizeof str, "{2F80C1}«« Gise »»\n{FFFFFF}/gise komutunu kullanarak giseyi açabilirsiniz.");
	CreateDynamic3DTextLabel(str, -1, 602.91162, 342.59781, 18.66520, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, STREAMER_3D_TEXT_LABEL_SD, -1, 0);
    /* Blueberry right */

    /* Blueberry left */
    CreateDynamicObject(966, -190.35580, 254.64290, 11.07090,   0.00000, 0.00000, 345.00000);
    CreateDynamicObject(966, -204.00880, 258.30411, 11.07090,   0.00000, 0.00000, -195.00000);
    L_a_TollObject[8] = CreateDynamicObject(968, -190.24850, 254.62019, 11.89360,   0.00000, -90.00000, -14.94000);
    L_a_TollObject[9] = CreateDynamicObject(968, -204.10410, 258.34149, 11.89360,   0.00000, -90.00000, -195.00000);

    format(str, sizeof str, "{2F80C1}«« Gise »»\n{FFFFFF}/gise komutunu kullanarak giseyi açabilirsiniz.");
	CreateDynamic3DTextLabel(str, -1, -190.24850, 254.62019, 11.89360, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, STREAMER_3D_TEXT_LABEL_SD, -1, 0);

	format(str, sizeof str, "{2F80C1}«« Gise »»\n{FFFFFF}/gise komutunu kullanarak giseyi açabilirsiniz.");
	CreateDynamic3DTextLabel(str, -1, -204.10410, 258.34149, 11.89360, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, STREAMER_3D_TEXT_LABEL_SD, -1, 0);
    /* Blueberry right */
    return 1;
}
forward TollUpdate();
public TollUpdate()
{
    for (new i = 0; i < MAX_TOLLS; i++)
    {
        if (aTolls[i][E_tOpenTime] > 0)
        {
            aTolls[i][E_tOpenTime]--;
            if (aTolls[i][E_tOpenTime] == 0)
            {
                Toll_CloseToll(i);
            }
        }
    }
}

StopLoopingAnim(playerid)
{
	PlayerData[playerid][pLoopAnim] = false;
    ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 1);
    ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 1);
    return 1;
}

stock GetElapsedTime(time, &hours, &minutes, &seconds)
{
	hours = 0;
	minutes = 0;
	seconds = 0;

	if (time >= 3600)
	{
		hours = (time / 3600);
		time -= (hours * 3600);
	}
	while (time >= 60)
	{
	    minutes++;
	    time -= 60;
	}
	return (seconds = time);
}

stock SQL_ReturnEscaped(const string[])
{
	new
	    entry[256];

	mysql_escape_string(string, entry, sizeof(entry) , g_SQL);
	return entry;
}
static GetHealthDots(playerid)
{
    new
        dots[64], Float: HP;

    GetPlayerHealth(playerid, HP);

    if(HP >= 100)
        dots = "";
    else if(HP >= 90)
        dots = "{660000}";
    else if(HP >= 80)
        dots = "{660000}";
    else if(HP >= 70)
        dots = "{660000}";
    else if(HP >= 60)
        dots = "{660000}";
    else if(HP >= 50)
        dots = "{660000}";
    else if(HP >= 40)
        dots = "{660000}";
    else if(HP >= 30)
        dots = "{660000}";
    else if(HP >= 20)
        dots = "{660000}";
    else if(HP >= 10)
        dots = "{660000}";
    else if(HP >= 0)
        dots = "{660000}";

    return dots;
}

static GetArmorDots(playerid)
{
    new
        dots[64], Float: AR;
    GetPlayerArmour(playerid, AR);
	if (AR < 1)
	{
	}
	else
	{
    if(AR >= 100)
        dots = "{a6a6a6}";
    else if(AR >= 90)
        dots = "{a6a6a6}{666666}";
    else if(AR >= 80)
        dots = "{a6a6a6}{666666}";
    else if(AR >= 70)
        dots = "{a6a6a6}{666666}";
    else if(AR >= 60)
        dots = "{a6a6a6}{666666}";
    else if(AR >= 50)
        dots = "{a6a6a6}{666666}";
    else if(AR >= 40)
        dots = "{a6a6a6}{666666}";
    else if(AR >= 30)
        dots = "{a6a6a6}{666666}";
    else if(AR >= 20)
        dots = "{a6a6a6}{666666}";
    else if(AR >= 10)
        dots = "{a6a6a6}{666666}";
    else if(AR >= 0)
        dots = "{666666}";
	}
    return dots;
}

forward NT_Update(playerid);
public NT_Update(playerid)
{
    new str[256], oyuncuAdi[24], hpcolor[10], admincolor[10], hours, minutes, seconds;

    if (!IsValidDynamic3DTextLabel(NameTag[playerid]))
	{
	    NameTag[playerid] = Text3D: -1;
		NameTag[playerid] = CreateDynamic3DTextLabel("-", -1, 0.0, 0.0, 0.1, 10.0, playerid, INVALID_VEHICLE_ID, 0, -1, -1, -1, STREAMER_3D_TEXT_LABEL_SD, -1, 0);
	}

	switch (PlayerData[playerid][pMaske])
	{
	    case false:
	    {
	        format(oyuncuAdi, sizeof oyuncuAdi, "%s", ReturnName(playerid, 0, 1));
	    }
	    case true:
	    {
	        format(oyuncuAdi, sizeof oyuncuAdi, "Maskeli");
	    }
	}

	switch (ReturnHealth(playerid))
	{
		case 60..100: hpcolor = "4CFF00";
		case 30..59: hpcolor = "FFE500";
		case 0..29: hpcolor = "FF0000";
	}

	switch (PlayerData[playerid][pAdmin])
	{
		case 1: admincolor = "e60707";
		case 2: admincolor = "e60707";
		case 3: admincolor = "e60707";
		case 4: admincolor = "e60707";
        case 5: admincolor = "e60707";
	}

	if (IsPlayerPause(playerid))
		GetElapsedTime(TimeSincePaused(playerid), hours, minutes, seconds);

	if (PetKontrol[playerid] != -1)
	{
		if (IsPlayerPause(playerid))
		{
			format(str, sizeof(str), "%s{ff5300}AFK (%02d:%02d:%02d)\n{FFFFFF}%s (%d)\n\n{FFFFFF}HP: {%s}%d",(PlayerData[playerid][pGOD] == true) ? ("{FFA500}[GODMODE]\n") : (""), hours, minutes, seconds, PetBilgi[PetKontrol[playerid]][petAdi], playerid, hpcolor, ReturnHealth(playerid));
		}
		else
		{
			format(str, sizeof(str), "%s{FFFFFF}%s (%d)\n\n{FFFFFF}HP: {%s}%d",(PlayerData[playerid][pGOD] == true) ? ("{FFA500}[GODMODE]\n") : (""), PetBilgi[PetKontrol[playerid]][petAdi], playerid, hpcolor, ReturnHealth(playerid));
		}
		Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, NameTag[playerid], E_STREAMER_Z, 0.1);
	}

	else if (PlayerData[playerid][pAdmin] > 0 && PlayerData[playerid][pAdminDuty] == 1)
	{
		if (IsPlayerPause(playerid))
		{
			format(str, sizeof(str), "%s{ff0000}AFK (%02d:%02d:%02d)\n{%s}%s\n{%s}%s",(PlayerData[playerid][pGOD] == true) ? ("{FFA500}[GODMODE]\n") : (""), hours, minutes, seconds, admincolor, PlayerData[playerid][pAdminName], admincolor, GetAdminRank(playerid));
		}
		else
		{
			format(str, sizeof(str), "%s{%s}%s\n\n{%s}%s",(PlayerData[playerid][pGOD] == true) ? ("{FFA500}[GODMODE]\n") : (""), admincolor, PlayerData[playerid][pAdminName], admincolor, GetAdminRank(playerid));
		}
		Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, NameTag[playerid], E_STREAMER_Z, 0.2);
	}

	else if (PlayerData[playerid][pOnDuty])
	{
		if (GetFactionType(playerid) == BIRLIK_LSPD)
		{
			if (IsPlayerPause(playerid))
			{
				format(str, sizeof(str), "{ff0000}AFK (%02d:%02d:%02d)\n{8D8DFF}[ %s ]\n{8D8DFF}%s (%s%d)\n{FF0000}%s\n%s\n%s", hours, minutes, seconds, Birlik_GetRutbe(playerid), oyuncuAdi, (PlayerData[playerid][pMaske] == true) ? ("#") : (""), (PlayerData[playerid][pMaske] == true) ? (PlayerData[playerid][pMaskeID]) : (playerid), GetHealthDots(playerid), GetArmorDots(playerid));
			}
			else
			{
				format(str, sizeof(str), "{8D8DFF}[%s]\n{8D8DFF}%s (%s%d)\n{FF0000}%s\n%s\n%s", Birlik_GetRutbe(playerid),oyuncuAdi, (PlayerData[playerid][pMaske] == true) ? ("#") : (""), (PlayerData[playerid][pMaske] == true) ? (PlayerData[playerid][pMaskeID]) : (playerid), GetHealthDots(playerid), GetArmorDots(playerid));
			}
		}
		if (GetFactionType(playerid) == BIRLIK_LSMD)
		{
			if (IsPlayerPause(playerid))
			{
				format(str, sizeof(str), "{ff0000}AFK (%02d:%02d:%02d)\n{FF8282}[ %s ]\n{FF8282}%s (%s%d)\n{FF0000}%s\n%s\n%s", hours, minutes, seconds, Birlik_GetRutbe(playerid), oyuncuAdi, (PlayerData[playerid][pMaske] == true) ? ("#") : (""), (PlayerData[playerid][pMaske] == true) ? (PlayerData[playerid][pMaskeID]) : (playerid), GetHealthDots(playerid), GetArmorDots(playerid));
			}
			else
			{
				format(str, sizeof(str), "{FF8282}[%s]\n{FF8282}%s (%s%d)\n{FF0000}%s\n%s\n%s", Birlik_GetRutbe(playerid), oyuncuAdi, (PlayerData[playerid][pMaske] == true) ? ("#") : (""), (PlayerData[playerid][pMaske] == true) ? (PlayerData[playerid][pMaskeID]) : (playerid), GetHealthDots(playerid), GetArmorDots(playerid));
			}
		}
		if (GetFactionType(playerid) == BIRLIK_HABER)
		{
			if (IsPlayerPause(playerid))
			{
				format(str, sizeof(str), "{ff0000}AFK (%02d:%02d:%02d)\n{9ACD32}[ %s ]\n{9ACD32}%s (%s%d)\n{FF0000}%s\n%s\n%s", hours, minutes, seconds, Birlikler[PlayerData[playerid][pFaction]][birlikAd], oyuncuAdi, (PlayerData[playerid][pMaske] == true) ? ("#") : (""), (PlayerData[playerid][pMaske] == true) ? (PlayerData[playerid][pMaskeID]) : (playerid), GetHealthDots(playerid), GetArmorDots(playerid));
			}
			else
			{
				format(str, sizeof(str), "{9ACD32}[%s]\n{9ACD32}%s (%s%d)\n{FF0000}%s\n%s\n%s", Birlikler[PlayerData[playerid][pFaction]][birlikAd], oyuncuAdi, (PlayerData[playerid][pMaske] == true) ? ("#") : (""), (PlayerData[playerid][pMaske] == true) ? (PlayerData[playerid][pMaskeID]) : (playerid), GetHealthDots(playerid), GetArmorDots(playerid));
   			}
		}
		if (GetFactionType(playerid) == BIRLIK_GOV)
		{
			if (IsPlayerPause(playerid))
			{
				format(str, sizeof(str), "{ff0000}AFK (%02d:%02d:%02d)\n{AFAFAF}[ %s ]\n{AFAFAF}%s (%s%d)\n{FF0000}%s\n%s\n%s", hours, minutes, seconds, Birlikler[PlayerData[playerid][pFaction]][birlikAd], oyuncuAdi, (PlayerData[playerid][pMaske] == true) ? ("#") : (""), (PlayerData[playerid][pMaske] == true) ? (PlayerData[playerid][pMaskeID]) : (playerid), GetHealthDots(playerid), GetArmorDots(playerid));
			}
			else
			{
		 		format(str, sizeof(str), "{AFAFAF}[%s]\n{AFAFAF}%s (%s%d)\n{FF0000}%s\n%s\n%s", Birlikler[PlayerData[playerid][pFaction]][birlikAd], oyuncuAdi, (PlayerData[playerid][pMaske] == true) ? ("#") : (""), (PlayerData[playerid][pMaske] == true) ? (PlayerData[playerid][pMaskeID]) : (playerid), GetHealthDots(playerid), GetArmorDots(playerid));
			}
		}
		if (GetFactionType(playerid) == BIRLIK_FBI)
		{
			if (IsPlayerPause(playerid))
			{
				format(str, sizeof(str), "{ff0000}AFK (%02d:%02d:%02d)\n{0000BB}[ %s ]\n{0000BB}%s (%s%d)\n{FF0000}%s\n%s\n%s", hours, minutes, seconds, Birlik_GetRutbe(playerid), oyuncuAdi, (PlayerData[playerid][pMaske] == true) ? ("#") : (""), (PlayerData[playerid][pMaske] == true) ? (PlayerData[playerid][pMaskeID]) : (playerid), GetHealthDots(playerid), GetArmorDots(playerid));
			}
			else
			{
				format(str, sizeof(str), "{0000BB}[%s]\n{0000BB}%s (%s%d)\n{FF0000}%s\n%s\n%s", Birlik_GetRutbe(playerid),oyuncuAdi, (PlayerData[playerid][pMaske] == true) ? ("#") : (""), (PlayerData[playerid][pMaske] == true) ? (PlayerData[playerid][pMaskeID]) : (playerid), GetHealthDots(playerid), GetArmorDots(playerid));
			}
		}
		Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, NameTag[playerid], E_STREAMER_Z, 0.3);
	}

	else
	{
		if (IsPlayerPause(playerid))
		{
			if (PlayerData[playerid][pVipRenk] == 1)
			{
				format(str, sizeof(str), "{ff0000}AFK (%02d:%02d:%02d)\n%s\n{D0AEEB}%s (%s%d)\n{FF0000}%s\n%s\n%s", hours, minutes, seconds, (PlayerData[playerid][pYoutuberTag] == true) ? ("{f72020}[Youtuber & Streamer]") : (""), oyuncuAdi, (PlayerData[playerid][pMaske] == true) ? ("#") : (""), (PlayerData[playerid][pMaske] == true) ? (PlayerData[playerid][pMaskeID]) : (playerid), GetHealthDots(playerid), GetArmorDots(playerid));
			}
			else
			{
				format(str, sizeof(str), "{ff0000}AFK (%02d:%02d:%02d)\n%s\n{FFFFFF}%s (%s%d)\n{FF0000}%s\n%s\n%s", hours, minutes, seconds, (PlayerData[playerid][pYoutuberTag] == true) ? ("{f72020}[Youtuber & Streamer]") : (""), oyuncuAdi, (PlayerData[playerid][pMaske] == true) ? ("#") : (""), (PlayerData[playerid][pMaske] == true) ? (PlayerData[playerid][pMaskeID]) : (playerid), GetHealthDots(playerid), GetArmorDots(playerid));
			}
			Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, NameTag[playerid], E_STREAMER_Z, 0.4);
		}
		else
		{
			if (PlayerData[playerid][pVipRenk] == 1)
			{
				if (PlayerData[playerid][pYoutuberTag] == true)
				{
					format(str, sizeof(str), "{f72020}[Youtuber & Streamer]\n\n{FFFFFF}%s (%s%d)\n{FF0000}%s\n%s\n%s",oyuncuAdi, (PlayerData[playerid][pMaske] == true) ? ("#") : (""), (PlayerData[playerid][pMaske] == true) ? (PlayerData[playerid][pMaskeID]) : (playerid), GetHealthDots(playerid), GetArmorDots(playerid));
				}
				else
				{
					format(str, sizeof(str), "{D0AEEB}%s (%s%d)\n{FF0000}%s\n%s\n%s",oyuncuAdi, (PlayerData[playerid][pMaske] == true) ? ("#") : (""), (PlayerData[playerid][pMaske] == true) ? (PlayerData[playerid][pMaskeID]) : (playerid), GetHealthDots(playerid), GetArmorDots(playerid));
				}
			}
			else
			{
				if (PlayerData[playerid][pYoutuberTag] == true)
				{
			 		format(str, sizeof(str), "{f72020}[Youtuber & Streamer]\n\n{FFFFFF}%s (%s%d)\n{FF0000}%s\n%s\n%s", oyuncuAdi, (PlayerData[playerid][pMaske] == true) ? ("#") : (""), (PlayerData[playerid][pMaske] == true) ? (PlayerData[playerid][pMaskeID]) : (playerid), GetHealthDots(playerid), GetArmorDots(playerid));
				}
				else
				{
					format(str, sizeof(str), "{FFFFFF}%s (%s%d)\n{FF0000}%s\n%s\n%s", oyuncuAdi, (PlayerData[playerid][pMaske] == true) ? ("#") : (""), (PlayerData[playerid][pMaske] == true) ? (PlayerData[playerid][pMaskeID]) : (playerid), GetHealthDots(playerid), GetArmorDots(playerid));
				}
			}
			Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, NameTag[playerid], E_STREAMER_Z, 0.2);
		}
	}

	UpdateDynamic3DTextLabelText(NameTag[playerid], -1, str);
    return 1;
}
stock GetAdminRank(playerid)
{
	new rank[20];

	if(PlayerData[playerid][pAdmin] > 0)
	{
		switch (PlayerData[playerid][pAdmin])
		{
		    case 1: rank = "Game Admin I";
		    case 2: rank = "Game Admin II";
		    case 3: rank = "Game Admin IIII";
		    case 4: rank = "Lead Admin";
		    case 5: rank = "Lead Admin+";
		    default: rank = "Yok";
		}
	}

	else if(PlayerData[playerid][pOyunGorevlisi] > 0)
		rank = "Oyun Görevlisi";

	else if(PlayerData[playerid][pForumGorevlisi] > 0)
		rank = "Forum Görevlisi";

	else rank = "Yok";

	return rank;
}

forward ConsumeFuel();
public ConsumeFuel()
{
    new Float: mass, Float: speed, Float: dist;
    new panelsx,doorsx,lightsx,tiresx;
    new id;
    for (new i = 1, ps = GetVehiclePoolSize(); i <= ps; i++)
    {
        if (!IsValidVehicle(i)) continue;

		new Float:hp;

		GetVehicleHealth(i, hp);

		if(hp <= 150.0)
		{
			SetVehicleToRespawn(i);
			SetVehicleHealth(i, 1000.0);
		}

		if(hp >= 151.0 && hp <= 249.0)
		{
			if(IsPlayerConnected(GetVehicleDriver(i)))
			{
				SunucuMesaji(GetVehicleDriver(i), "Araç motoru kapandi, kullanilamaz durumda.");
			}

			SetVehicleHealth(i, 250.0);
			SetEngineStatus(i, false);
		}

        if (Flasher[i] == 1)
        {
        	if (FlasherState[i] == 1)
         	{
          		GetVehicleDamageStatus(i,panelsx,doorsx,lightsx,tiresx);
            	UpdateVehicleDamageStatus(i, panelsx, doorsx, 4, tiresx);
             	FlasherState[i] = 0;
          	}
            else
            {
            	GetVehicleDamageStatus(i,panelsx,doorsx,lightsx,tiresx);
             	UpdateVehicleDamageStatus(i, panelsx, doorsx, 1, tiresx);
              	FlasherState[i] = 1;
            }
        }
        if (Vehicle_IsANoFuelVehicle( GetVehicleModel(i) )) continue;
        if (!GetEngineStatus(i)) continue;
        id = Car_GetID(i);
        if (AracInfo[id][aracTip] != 4) continue;
        dist = GetVehicleDistanceFromPoint(i, VehicleLastCoords[i][0], VehicleLastCoords[i][1], VehicleLastCoords[i][2]);
        mass = GetVehicleModelInfoAsFloat(GetVehicleModel(i), "fMass");
        speed = Vehicle_GetSpeed(i) + 0.001;
        AracInfo[id][aracBenzin] -= ((mass / (mass * 4.5)) * ((speed / 60) + 0.015) / 30) * ((dist / 10) + 0.001);

		if (GetVehicleModel(AracInfo[id][aracVehicle]) != 481 && GetVehicleModel(AracInfo[id][aracVehicle]) != 509 && GetVehicleModel(AracInfo[id][aracVehicle]) != 510)
		{
            if (AracInfo[id][aracBenzin] < 0.1)
				SetEngineStatus(i, false);
		}

		GetVehiclePos(i, VehicleLastCoords[i][0], VehicleLastCoords[i][1], VehicleLastCoords[i][2]);
    }

    return 1;
}

forward MinuteUpdate();
public MinuteUpdate()
{
	saatlikTimer--;

	for (new i; i<3; i++)
	{

		if (IsValidActor(DealerData[i][dealerActorID]))
		{
  			SetActorPos(DealerData[i][dealerActorID], DealerData[i][dealerX], DealerData[i][dealerY], DealerData[i][dealerZ]);
 		}
	    if (IsValidActor(BankerData[i][bankerActorID]))
	    {
	        SetActorPos(BankerData[i][bankerActorID], BankerData[i][bankerX], BankerData[i][bankerY], BankerData[i][bankerZ]);
	    }
	}
	for (new i; i<MAX_ARSA; i++) if (ArsaBilgi[i][arsaSahip] != -1 && ArsaBilgi[i][arsaTip] == 2)
	{
	    if (ArsaBilgi[i][KiraSure] <= gettime())
	    {
	        ArsaBilgi[i][arsaSahip] = -1;
	        ArsaBilgi[i][KiraSure] = 0;
	        ArsaUpdate(i);
	        for (new t; t<MAX_TOHUM; t++) if (Tohumlar[t][tohumArsa] == i)
	        {
	            DestroyDynamicObject(Tohumlar[t][tohumObject]);
				DestroyDynamic3DTextLabel(Tohumlar[t][tohumLabel]);
				Tohumlar[t][tohumArsa] = -1;
			    Tohumlar[t][tohumTip] = 0;
			    Tohumlar[t][tohumBuyume] = 0;
			    Tohumlar[t][tohumPos][0] = Tohumlar[t][tohumPos][1] = Tohumlar[t][tohumPos][2] = 0.0;
	        }
	    }
	}
	for (new i; i<MAX_TOHUM; i++) if (Tohumlar[i][tohumArsa] != -1)
	{
	    if (Tohumlar[i][tohumBuyume] < 60)
	    {
	        Tohumlar[i][tohumBuyume]++;
	        if (Tohumlar[i][tohumBuyume] == 20)
	        {
	            DestroyDynamicObject(Tohumlar[i][tohumObject]);
		        DestroyDynamic3DTextLabel(Tohumlar[i][tohumLabel]);
	        }
	        if (Tohumlar[i][tohumBuyume] == 40)
	        {
	            DestroyDynamicObject(Tohumlar[i][tohumObject]);
		        DestroyDynamic3DTextLabel(Tohumlar[i][tohumLabel]);
	        }
	        if (Tohumlar[i][tohumBuyume] >= 60)
	    	{
		        DestroyDynamicObject(Tohumlar[i][tohumObject]);
		        DestroyDynamic3DTextLabel(Tohumlar[i][tohumLabel]);
		        Tohumlar[i][tohumSayi] = RandomEx(5, 11);
	    	}
	        TohumUpdate(i);
	    }
	}
    vergitime++;
    for (new i = 0; i < MAX_ARAC; i++)
    {
    	if (AracInfo[i][aracExists] && AracInfo[i][aracModel] != 509)
        {
            if (vergitime >= 60) AracVergiArttir(i);

			if (AracInfo[i][aracTip] == 3 && AracInfo[i][aracKira] > 0 && AracInfo[i][aracKiralayan] != -1)
            {
                if (AracInfo[i][aracKiraZaman] <= 1)
                {
                    AracInfo[i][aracKiralayan] = -1;
                    AracInfo[i][aracKiraZaman] = 0;
                    AracInfo[i][aracKilit] = false;
                    Arac_Spawn(i);
                }
                else if (AracInfo[i][aracKiraZaman] > 1)
                {
                    AracInfo[i][aracKiraZaman]--;

                    if(AracInfo[i][aracKiraZaman] <= 10)
                    {
                    	if(IsPlayerConnected(GetPlayerIDWithSQLID(AracInfo[i][aracKiralayan])))
                    	{
                    		SunucuMesaji(GetPlayerIDWithSQLID(AracInfo[i][aracKiralayan]), "Araç kira süresinin bitmesine %d dakika kaldi.", AracInfo[i][aracKiraZaman]);
                    	}
                    }
                }
            }

			if (AracInfo[i][aracTip] == 4 && AracInfo[i][aracSahip] > 0 && AracInfo[i][aracTicket] > 0 && AracInfo[i][aracTicketTime] < gettime() && AracInfo[i][aracElKonuldu] == 0)
            {
                AracInfo[i][aracElKonuldu] = 1;
                AracInfo[i][aracTicketTime] = 0;
                AracInfo[i][aracDisplay] = false;
                SetVehicleVirtualWorld(AracInfo[i][aracVehicle], 1000);
                Arac_Kaydet(i);
                new oyuncuID = GetPlayerIDWithSQLID(AracInfo[i][aracSahip]);
                if (oyuncuID != -1)
                {
                    SunucuMesaji(oyuncuID, "%s model aracinizin cezasini ödemediginiz için devlet tarafindan el koyuldu.");
                }
                else
                {
                    new str[50];
                    format(str, sizeof(str), "%s model aracinizin cezasini ödemediginiz için devlet tarafindan el koyuldu.",ReturnVehicleModelName(AracInfo[i][aracModel]));
                    BildirimEkle(AracInfo[i][aracSahip], str, "Sistem");
                }
            }
        }
    }
	if (vergitime >= 60)
	{
			for (new i = 0; i < MAX_EV; i++)
		    	{
		    	    if (HouseInfo[i][evExists] && HouseInfo[i][evSahip] > 0)
		    	    {
		    	        if (HouseInfo[i][evVergi] < Ev_MaksVergi(i))
		    	        {
		    	            HouseInfo[i][evVergi] += GetHouseVergi(i);
		    	            Ev_Kaydet(i);
		    	        }
	    	         	if (HouseInfo[i][evVergi] >= Ev_MaksVergi(i) && HouseInfo[i][evVergiSure] < 1)
		    	        {
		    	            HouseInfo[i][evVergiSure] += gettime()+VERGI_GUN*86400;
		    	            Ev_Kaydet(i);
		    	            if (GetPlayerIDWithSQLID(HouseInfo[i][evSahip]) != -1)
			            	{
			                	SunucuMesaji(GetPlayerIDWithSQLID(HouseInfo[i][evSahip]), "%s adli evinizin vergisi doldu, %d gün içerisinde ödemezseniz ev satilacak.", HouseInfo[i][evIsim], VERGI_GUN);
			            	}
			            	else
			            	{
				                new str[100];
		                  		format(str, sizeof(str), "%s adli evinizin vergisi doldu, %d gün içerisinde ödemezseniz ev satilacak.",HouseInfo[i][evIsim], VERGI_GUN);
		                    	BildirimEkle(HouseInfo[i][evSahip], str, "Sistem");
			            	}
		    	        }
		    	        if (HouseInfo[i][evVergi] >= Ev_MaksVergi(i) && HouseInfo[i][evVergiSure] < gettime())
		    	        {
		    	            if (GetPlayerIDWithSQLID(HouseInfo[i][evSahip]) != -1)
		    	            {
		    	                SunucuMesaji(GetPlayerIDWithSQLID(HouseInfo[i][evSahip]), "Evinizin vergisini %d gün içerisinde ödemediginiz için satildi.", VERGI_GUN);
		    	            }
		    	            else
		    	            {
		    	                BildirimEkle(HouseInfo[i][evSahip], "Evinizin vergisini ödemediginiz için satildi.", "Sistem");
		    	            }
		    	            HouseInfo[i][evSahip] = -1;
		    	            HouseInfo[i][evFiyat] = HouseInfo[i][evKendiFiyati];
		    	            format(HouseInfo[i][evIsim], 30, "");
		    	            HouseInfo[i][evVergi] = 0;
		    	            HouseInfo[i][evVergiSure] = 0;
		    	            HouseInfo[i][evKilit] = 0;
		    	            HouseInfo[i][evCash] = 0;
		    	            HouseInfo[i][evSatilik] = 0;
		    	            HouseInfo[i][evKiralik] = 0;
		    	            HouseInfo[i][evKiraUcret] = 0;
		    	            HouseInfo[i][evKiralayan] = -1;
		    	            HouseInfo[i][MobilyaYetki] = -1;
		    	            for (new k; k<10; k++)
		    	            {
		    	                if (k < 5) HouseInfo[i][evKiyafetler][k] = 0;
		    	                HouseInfo[i][evSilahlar][k] = 0;
		    	                HouseInfo[i][evMermiler][k] = 0;
		    	            }
		    	            House_RemoveFurniture(i);
		    	        }
					}
			}
	}
    if (vergitime >= 60)
    {
 			vergitime = 0;
            for (new j; j < MAX_ISYERI; j++)
			{
			    if (Isyeri[j][isyeriExists] && Isyeri[j][isyeriSahip] > 0)
			    {
			        if (Isyeri[j][isyeriVergi] < IsyeriMaksVergi(j))
			        {
				        Isyeri[j][isyeriVergi] += GetIsyeriVergi(j);
				        Isyeri_Kaydet(j);
			        }
			        if (Isyeri[j][isyeriVergi] >= IsyeriMaksVergi(j) && Isyeri[j][isyeriVergiSure] < 1)
			        {
			            Isyeri[j][isyeriVergiSure] = gettime()+VERGI_GUN*86400;
			            Isyeri[j][isyeriKilit] = true;
			            Isyeri_Yenile(j);
	            		Isyeri_Kaydet(j);
			            if (GetPlayerIDWithSQLID(Isyeri[j][isyeriSahip]) != -1)
			            {
			                SunucuMesaji(GetPlayerIDWithSQLID(Isyeri[j][isyeriSahip]), "%s adli isyerinizin vergisi doldu, %d gün içerisinde ödemezseniz isyeri satilacak.", Isyeri[j][isyeriName], VERGI_GUN);
			            }
			            else
			            {
			                new str[100];
	                  		format(str, sizeof(str), "%s adli isyerinizin vergisi doldu, %d gün içerisinde ödemezseniz isyeri satilacak.",Isyeri[j][isyeriName], VERGI_GUN);
	                    	BildirimEkle(Isyeri[j][isyeriSahip], str, "Sistem");
			            }
			        }
			        if (Isyeri[j][isyeriVergi] >= IsyeriMaksVergi(j) && Isyeri[j][isyeriVergiSure] < gettime())
			        {
			            if (GetPlayerIDWithSQLID(Isyeri[j][isyeriSahip]) != -1)
			            {
			                if (Isyeri[j][isyeriKasa] > 0)
							{
							    ParaVer(GetPlayerIDWithSQLID(Isyeri[j][isyeriSahip]), Isyeri[j][isyeriKasa]);
							    MesajGonder(GetPlayerIDWithSQLID(Isyeri[j][isyeriSahip]), "isyerinizin vergisini %d gün içerisinde ödemediginiz için satildi. (Kasadaki %s miktar para geri verildi)", VERGI_GUN, FormatNumber(Isyeri[j][isyeriKasa]));
							}
							else
							{
							    MesajGonder(GetPlayerIDWithSQLID(Isyeri[j][isyeriSahip]), "isyerinizin vergisini %d gün içerisinde ödemediginiz için satildi.", VERGI_GUN);
							}
			            }
			            else
			            {
			                if (Isyeri[j][isyeriKasa] > 0)
			                {
			                    OfflineParaVer(Isyeri[j][isyeriSahip], Isyeri[j][isyeriKasa]);
			                	BildirimEkle(Isyeri[j][isyeriSahip], "isyerinizin vergisini ödemediginiz için satildi. (Kasadaki para verildi)", "Sistem");
							}
							else BildirimEkle(Isyeri[j][isyeriSahip], "isyerinizin vergisini ödemediginiz için satildi.", "Sistem");
			            }
			            format(Isyeri[j][isyeriName], 32, "Satilik isyeri");
			            format(Isyeri[j][isyeriMesaj], 100, "");
			            Isyeri[j][isyeriSahip] = -1;
			            Isyeri[j][isyeriFiyat] = Isyeri[j][isyeriKendiFiyati];
			            Isyeri[j][isyeriSatilik] = 0;
			            Isyeri[j][isyeriVergi] = 0;
			            Isyeri[j][isyeriVergiSure] = 0;
			            Isyeri[j][isyeriGirisUcret] = 0;
			            format(Isyeri[j][isyeriMuzik], 256, "");
			            Isyeri[j][isyeriKilit] = 0;
			            Isyeri[j][isyeriKasa] = 0;
			            Isyeri_Kaydet(j);
			            Isyeri_Yenile(j);

		        	}
		    	}
			}
    }
    //PanelUpdate();
	return 1;
}
stock PanelUpdate()
{
	new Cache:Radless = mysql_query(g_SQL, "SELECT * FROM `panelislemleri`");
	new rows;
	cache_get_row_count(rows);
	if (rows)
	{
	    new uygulayan[24], sebep[50], oyuncuadi[24], sure, islemturu;
	    for (new i; i<rows; i++)
	    {
	        cache_get_value_name(i, "Uygulayan", uygulayan, 24);
	        cache_get_value_name(i, "Sebep", sebep, 50);
	        cache_get_value_name(i, "Oyuncu", oyuncuadi, 24);
	        cache_get_value_name_int(i, "Sure", sure);
	        cache_get_value_name_int(i, "islemturu", islemturu);
	        new id = GetPlayerID(oyuncuadi);
	        if (islemturu == 1)
	        {
				if (id != -1)
				{
				    new pip[20];
				    GetPlayerIp(id, pip, sizeof(pip));
				    foreach (new p: Player)
					{
				        new ipp[15];
				        GetPlayerIp(p, ipp, sizeof(ipp));
				        if (!strcmp(pip, ipp) && p != id)
				        {
				            Kick(p);
				        }
				    }
				    new suree[10];
				    if (sure == 0) suree = "Sinirsiz";
				    else format(suree, sizeof(suree), "%d gün", sure);
				    Dialog_Show(id, Banli, DIALOG_STYLE_MSGBOX, "Yasaklandiniz!", "Hesabiniz panelden yasaklanmistir. Detaylar;\n\nKarakter Adi: %s\nSebep: %s\nYasaklayan: %s\nSüre: %s\nF8 tusuna basin ve bir ekran görüntüsü alin, bu ekran görüntüsü ile forumumuzdan yasaklanmaniza itiraz edebilirsiniz.", "Kapat", "", Player_GetName(id), sebep, uygulayan, suree);
				    new query[300];
				    format(query, sizeof(query), "INSERT INTO `oocsicil` (`ID`, `Tarih`, `Sebep`, `Uygulayan`, `Tur`) VALUES('%d', '%s', '%s', '%s', '2')",  PlayerData[id][pID], ReturnDate(), sebep, uygulayan);
				    mysql_tquery(g_SQL, query);
				    foreach (new pl:Player) if (PlayerData[pl][pAyarlar][3] == 0)
				    {
				    	if (sure == 0) SendClientMessageEx(pl, COLOR_LIGHTRED, "(%s) - (( %s adli oyuncu %s tarafindan panelden %s sebebiyle sinirsiz yasaklandi. ))", ReturnDate(), ReturnName(id, 0),  uygulayan, sebep);
				    	else SendClientMessageEx(pl, COLOR_LIGHTRED, "(%s) - (( %s adli oyuncu %s tarafindan %s sebebiyle panelden %d gün yasaklandi. ))", ReturnDate(), ReturnName(id, 0),  uygulayan, sebep, sure);
				    }
				    Log_Write("logs/ban_log.txt", "[%s] %s, %s tarafindan panelden %d gun yasaklandi. sebep: %s.", ReturnDate(), ReturnName(id, 0), uygulayan, sure, sebep);
				    AddBan(pip, Player_GetName(id), "", uygulayan, (sure < 1) ? (0) : (gettime()+sure*86400), sebep);
    				Kick(id);
				}
				else
				{
				    new query[124];
    				format(query, sizeof(query), "SELECT * FROM `oyuncular` WHERE `Isim` = '%s'", oyuncuadi);
    				mysql_tquery(g_SQL, query, "OnPanelBanAccount", "ssis", uygulayan, oyuncuadi, sure, sebep);
				}
	        }
	        else if (islemturu == 2)
	        {
	            if (id != -1)
	            {
	                ResetPlayer(id);
				    ResetWeapons(id);
				    ClearAnimations(id);
					PlayerTextDrawShow(id, HapisTD[id]);
					SetPlayerPos(id, 197.6346, 175.3765, 1003.0234);
				    SetPlayerInterior(id, 3);

				    SetPlayerVirtualWorld(id, (id + 100));
				    SetPlayerFacingAngle(id, 0.0);

				    SetCameraBehindPlayer(id);
				    PlayerData[id][pHapisSure] = sure * 60;
				    format(PlayerData[id][pHapisSebep], 50, sebep);
				    format(PlayerData[id][pHapiseAtan], 24, uygulayan);
				    PlayerData[id][pHapis] = 0;
				    new query[500];
				    format(query, sizeof(query), "INSERT INTO `oocsicil` (`ID`, `Tarih`, `Sebep`, `Uygulayan`, `Tur`) VALUES('%d', '%s', '%s', '%s', '3')",  PlayerData[id][pID], ReturnDate(), sebep, uygulayan);
				    mysql_query(g_SQL, query, false);
				    SunucuMesaji(id, "%s adli yetkili seni panelden %d dakika hapse atti. (%s).", uygulayan, sure, sebep);
					foreach (new pla:Player) if (PlayerData[pla][pAyarlar][3] == 0 || pla == id)
					{
				    	SendClientMessageEx(pla, COLOR_LIGHTRED, "(%s)  - (( %s adli oyuncu %s tarafindan %s sebebiyle panelden %d dakika cezalandirildi. ))", ReturnDate(), ReturnName(id, 0), uygulayan, sebep, sure);
				    }
				    Log_Write("logs/jail_log.txt", "[%s] %s adli yetkili %s adli oyuncuyu panelden %d dakika cezalandirdi,  sebep: %s.", ReturnDate(), uygulayan, ReturnName(id, 0), sure, sebep);
	            }
	            else
	            {
	                new query[800];
	                format(query, sizeof(query), "UPDATE `oyuncular` SET `HapisSure` = '%d', `HapisSebep` = '%s', `HapiseAtan` = '%s'", sure*60, sebep, uygulayan);
	    			for (new i; i<13; i++)
	    			{
	        			format(query, sizeof(query), "%s, `Silah%d` = '0', `Mermi%d` = '0'", query, i+1, i+1);
	    			}
	    			format(query, sizeof(query), "%s WHERE `Isim` = '%s'", query, oyuncuadi);
	    			mysql_query(g_SQL, query, false);
	    			format(query, sizeof(query), "INSERT INTO `oocsicil` (`ID`, `Tarih`, `Sebep`, `Uygulayan`, `Tur`) VALUES('%d', '%s', '%s', '%s', '3')",  GetPlayerSQLIDWithName(oyuncuadi), ReturnDate(), sebep, uygulayan);
   	 				mysql_query(g_SQL, query, false);
	            }
	        }
	    }
	}
	cache_delete(Radless);
	mysql_query(g_SQL, "TRUNCATE `panelislemleri`", false);
	return 1;
}
stock GetHouseVergi(id)
{
	new vergi;
	vergi = floatround(HouseInfo[id][evKendiFiyati]/1000*0.2);
	return vergi;
}
stock Ev_MaksVergi(id)
{
	new vergi;
	vergi = floatround(HouseInfo[id][evKendiFiyati]/3);
	return vergi;
}
stock AracVergiArttir(i)
{
    if (AracInfo[i][aracExists] && AracInfo[i][aracTip] == 4 && AracInfo[i][aracSahip] > 0)
    {
       if (AracInfo[i][aracVergi] < GetAracMaksVergi(AracInfo[i][aracModel]))
       {
            AracInfo[i][aracVergi] += GetAracVergi(AracInfo[i][aracModel]);
            Arac_Kaydet(i);
            if (AracInfo[i][aracVergi] >= GetAracMaksVergi(AracInfo[i][aracModel]))
            {
            	AracInfo[i][aracVergiSure] = gettime()+VERGI_GUN*86400;
             	if (GetPlayerIDWithSQLID(AracInfo[i][aracSahip]) != -1)
              	{
               		SunucuMesaji(GetPlayerIDWithSQLID(AracInfo[i][aracSahip]), "%s model aracinizin vergisi doldu, %d gün içerisinde vergiyi ödemezseniz araciniz silinecek.", ReturnVehicleModelName(AracInfo[i][aracModel]), VERGI_GUN);
               	}
                else
                {
                	new str[100];
                 	format(str, sizeof(str), "%s model aracinizin vergisi doldu, %d gün içerisinde vergiyi ödemezseniz araciniz silinecek.",ReturnVehicleModelName(AracInfo[i][aracModel]), VERGI_GUN);
                  	BildirimEkle(AracInfo[i][aracSahip], str, "Sistem");
				}
			}
        }
        if (AracInfo[i][aracVergi] >= GetAracMaksVergi(AracInfo[i][aracModel]) && AracInfo[i][aracVergiSure] != 0 && AracInfo[i][aracVergiSure] < gettime())
		{
		    new para = 0;
		    if (AracInfo[i][aracVergi] < GetGaleriFiyat(AracInfo[i][aracModel]))
		    {
				para = GetGaleriFiyat(AracInfo[i][aracModel]) - AracInfo[i][aracVergi];
		    }
		    if (GetPlayerIDWithSQLID(AracInfo[i][aracSahip]) != -1)
		    {
				if (para > 0)
				{
				    ParaVer(GetPlayerIDWithSQLID(AracInfo[i][aracSahip]), para);
				    SunucuMesaji(GetPlayerIDWithSQLID(AracInfo[i][aracSahip]), "%s model aracinizin vergisini ödemediginiz için araç silindi. Sistem size %s para iadesinde bulundu.", ReturnVehicleModelName(AracInfo[i][aracModel]), FormatNumber(para));
				}
		        else
		        {
		            SunucuMesaji(GetPlayerIDWithSQLID(AracInfo[i][aracSahip]), "%s model aracinizin vergisini ödemediginiz için araç silindi.", ReturnVehicleModelName(AracInfo[i][aracModel]));
		        }
		    }
		    else
		    {

		        new str[100];
		        if (para > 0) format(str, sizeof(str), "%s model aracinizin vergisini ödemediginiz için araç silindi. Sistem size %s para iadesinde bulundu.", ReturnVehicleModelName(AracInfo[i][aracModel]), FormatNumber(para));
		        else format(str, sizeof(str), "%s model aracinizin vergisini ödemediginiz için araç silindi.", ReturnVehicleModelName(AracInfo[i][aracModel]));
		        BildirimEkle(AracInfo[i][aracSahip], str, "Sistem");
		        OfflineParaVer(AracInfo[i][aracSahip], para);
		    }
		    Arac_Sil(i);
		}
    }
    return 1;
}

forward MotorCalistir(playerid, vehicleid);
public MotorCalistir(playerid, vehicleid)
{
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
	SetEngineStatus(vehicleid, true);
	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* Motor çalýþtýrýldý. (( %s ))",ReturnName(playerid, 0));
	return 1;
}

stock SetEngineStatus(vehicleid, status)
{
	static
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	return SetVehicleParamsEx(vehicleid, status, lights, alarm, doors, bonnet, boot, objective);
}

stock GetEngineStatus(vehicleid)
{
	static
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

	if (engine != 1)
		return 0;

	return 1;
}
stock AracHasar(vehicleid)
{
	if (!IsValidVehicle(vehicleid))
	    return 0;

	static
	    Float:amount;

	GetVehicleHealth(vehicleid, amount);
	return floatround(amount, floatround_round);
}
stock IsEngineVehicle(vehicleid)
{
	static const g_aEngineStatus[] = {
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0
	};
    new modelid = GetVehicleModel(vehicleid);

    if (modelid < 400 || modelid > 611)
        return 0;

    return (g_aEngineStatus[modelid - 400]);
}
stock Arac_Sil(carid)
{
    if (carid != -1 && AracInfo[carid][aracExists])
    {
        new query[100];
        format(query,sizeof(query), "DELETE FROM `araclar` WHERE `aracid` = '%d'",AracInfo[carid][aracID]);
        mysql_query(g_SQL,query, false);
        if (Arac_GetKeyCount(carid) > 0)
		{
			format(query, sizeof(query), "DELETE FROM `anahtarlar` WHERE `sqlid` = '%d' AND `tip` = '2'",AracInfo[carid][aracID]);
			mysql_query(g_SQL, query, false);
		}
        if (IsValidVehicle(AracInfo[carid][aracVehicle]))
			DestroyVehicle(AracInfo[carid][aracVehicle]);
		AracInfo[carid][aracExists] = false;
		AracInfo[carid][aracID] = 0;
		AracInfo[carid][aracSahip] = -1;
		AracInfo[carid][aracVehicle] = 0;
    }
}

stock Arac_Olustur(owner, modelid, interior, world, garaj, Float:x,Float:y,Float:z,Float:angle,color1,color2,tip,id)
{
     for (new i = 0; i != MAX_ARAC; i ++)
     {
   		if (!AracInfo[i][aracExists])
   		{
   		    if (color1 == -1)
   		        color1 = random(255);

			if (color2 == -1)
			    color2 = random(255);

			AracInfo[i][aracExists] = true;
			AracInfo[i][aracID] = i;

			AracInfo[i][aracModel] = modelid;
			AracInfo[i][aracSahip] = owner;
			AracInfo[i][aracPos][0] = x;
			AracInfo[i][aracPos][1] = y;
			AracInfo[i][aracPos][2] = z;
			AracInfo[i][aracPos][3] = angle;
			AracInfo[i][aracRenkler][0] = color1;
			AracInfo[i][aracRenkler][1] = color2;
			AracInfo[i][aracPaintjob] = -1;
			AracInfo[i][aracKilit] = false;
			AracInfo[i][aracBaglandi] = 0;
			AracInfo[i][aracBaglandiCeza] = 0;
			AracInfo[i][aracTicket] = 0;
			AracInfo[i][aracTicketTime] = 0;
			AracInfo[i][aracKiralayan] = -1;
			AracInfo[i][aracKM] = 0.0;
			AracInfo[i][aracBenzin] = 100.0;
			AracInfo[i][aracTicket] = 0;
			AracInfo[i][aracTicketTime] = 0;
			AracInfo[i][aracElKonuldu] = 0;
			AracInfo[i][aracZirh] = 0;
			AracInfo[i][aracZirhVarMi] = 0;
			AracInfo[i][aracGaraj] = garaj;
			AracInfo[i][aracInterior] = interior;
			AracInfo[i][aracWorld] = world;
			AracInfo[i][aracVergi] = 0;
			AracInfo[i][aracVergiSure] = 0;
			AracInfo[i][TaksiPlaka] = 0;
			AracInfo[i][Taksimetre] = false;
			AracInfo[i][Taksimetre] = 0;
			AracInfo[i][OturumKazanci] = 0;
			AracInfo[i][aracUyusturucu] = 0;
			if (IsValidDynamic3DTextLabel(AracInfo[i][aracLabel]))
			{
			    UpdateDynamic3DTextLabelText(AracInfo[i][aracLabel], -1, " ");
			    DestroyDynamic3DTextLabel(AracInfo[i][aracLabel]);
			}
			switch (tip)
			{
			    case 1:
			    {
			        AracInfo[i][aracFaction] = id;
			        AracInfo[i][aracFactionType] = Birlikler[Birlik_GetID(id)][birlikTip];
			        AracInfo[i][aracKira] = -1;
			        AracInfo[i][aracFiyat] = 0;
			        AracInfo[i][aracSatilik] = 0;
			    }
			    case 2:
			    {
			        AracInfo[i][aracFaction] = -1;
			        AracInfo[i][aracKira] = -1;
			        AracInfo[i][aracSahip] = -1;
			        AracInfo[i][aracFiyat] = 0;
			        AracInfo[i][aracSatilik] = 0;
			    }
			    case 3:
			    {
			        AracInfo[i][aracKira] = id;
			        AracInfo[i][aracFaction] = -1;
			        AracInfo[i][aracFiyat] = 0;
			        AracInfo[i][aracSatilik] = 0;
			    }
			    case 4:
			    {
			        AracInfo[i][aracFiyat] = id;
			        AracInfo[i][aracKira] = -1;
			        AracInfo[i][aracFaction] = -1;
			        if (id > 0) AracInfo[i][aracSatilik] = 1;
			    }
			    case 5:
			    {
			        AracInfo[i][aracFaction] = -1;
			        AracInfo[i][aracKira] = -1;
			        AracInfo[i][aracSahip] = -1;
			        AracInfo[i][aracFiyat] = 0;
			        AracInfo[i][aracSatilik] = 0;
			    }
			    case 6:
			    {
			        AracInfo[i][aracFaction] = -1;
			        AracInfo[i][aracKira] = -1;
			        AracInfo[i][aracSahip] = -1;
			        AracInfo[i][aracFiyat] = 0;
			        AracInfo[i][aracSatilik] = 0;
			    }
			}
			AracInfo[i][aracTip] = tip;

			PlakaOlustur(AracInfo[i][aracID]);
			for (new j = 0; j < 14; j ++)
			{
                if (j < 5)
				{
                    AracInfo[i][aracSilahlar][j] = 0;
                    AracInfo[i][aracMermiler][j] = 0;
                }
                AracInfo[i][aracMods][j] = 0;
            }

            AracInfo[i][aracVehicle] = CreateVehicle(modelid, x, y, z, angle, color1, color2, -1);

            if(tip == 6)
                AracInfo[id][aracLabel] = CreateDynamic3DTextLabel("[SÜRÜCÜ ADAYI]", COLOR_YELLOW, 0.0, 0.0, 1.0, 30.0, INVALID_PLAYER_ID, AracInfo[i][aracVehicle], 1);

			for (new ob; ob<5; ob++)
			{
	    		if (IsValidDynamicObject(AracTohumObjeler[AracInfo[i][aracVehicle]][ob])) DestroyDynamicObject(AracTohumObjeler[AracInfo[i][aracVehicle]][ob]);
			}

			AracTohumlar[AracInfo[i][aracVehicle]][0] = 0;
			AracTohumlar[AracInfo[i][aracVehicle]][1] = 0;
			AracTohumlar[AracInfo[i][aracVehicle]][2] = 0;

			Arac_Spawn(AracInfo[i][aracID], 1);

            new query[256];

            mysql_format(g_SQL, query, sizeof query, "INSERT INTO `araclar` (`aracid`, `aracmodel`) VALUES ('%d', '%d')", AracInfo[i][aracID], AracInfo[i][aracModel]);
            mysql_query (g_SQL, query);

            Arac_Kaydet(AracInfo[i][aracID]);
            return AracInfo[i][aracID];
   		}
     }
     return -1;
}
stock Birlik_GetID(bid)
{
	for (new i; i<MAX_BIRLIK; i++)
	{
	    if (Birlikler[i][birlikExists] && Birlikler[i][birlikID] == bid) return i;
	}
	return -1;
}

stock Arac_Kaydet(carid)
{
    static
	    query[5000];
	if (AracInfo[carid][aracVehicle] != INVALID_VEHICLE_ID)
	{
	    for (new i = 0; i < 14; i ++) {
			AracInfo[carid][aracMods][i] = GetVehicleComponentInSlot(AracInfo[carid][aracVehicle], i);
	    }
	}

	format(query, sizeof(query), "UPDATE `araclar` SET `aracmodel` = '%d', `aracowner` = '%d',`aracbenzin` = '%.2f',`aracPosX` = '%.4f', `aracPosY` = '%.4f', `aracPosZ` = '%.4f', `aracPosR` = '%.4f', `aracrenk1` = '%d', `aracrenk2` = '%d', `aracpaintjob` = '%d', `aracseviye` = '%d'",
	AracInfo[carid][aracModel],
	AracInfo[carid][aracSahip],
	AracInfo[carid][aracBenzin],
	AracInfo[carid][aracPos][0],
	AracInfo[carid][aracPos][1],
	AracInfo[carid][aracPos][2],
	AracInfo[carid][aracPos][3],
	AracInfo[carid][aracRenkler][0],
	AracInfo[carid][aracRenkler][1],
	AracInfo[carid][aracPaintjob],
	AracInfo[carid][aracSeviye]
	);

	format(query, sizeof(query), "%s, `aracbaglandiceza` = '%d', `aracMod1` = '%d', `aracMod2` = '%d', `aracMod3` = '%d', `aracMod4` = '%d', `aracMod5` = '%d', `aracMod6` = '%d', `aracMod7` = '%d', `aracMod8` = '%d', `aracMod9` = '%d', `aracMod10` = '%d', `aracMod11` = '%d', `aracMod12` = '%d', `aracMod13` = '%d', `aracMod14` = '%d',`aracVergi` = '%d', `VergiSure` = '%d',`aracsatilik` = '%d'",
	query,
	AracInfo[carid][aracBaglandiCeza],
	AracInfo[carid][aracMods][0],
	AracInfo[carid][aracMods][1],
	AracInfo[carid][aracMods][2],
	AracInfo[carid][aracMods][3],
	AracInfo[carid][aracMods][4],
	AracInfo[carid][aracMods][5],
	AracInfo[carid][aracMods][6],
	AracInfo[carid][aracMods][7],
	AracInfo[carid][aracMods][8],
	AracInfo[carid][aracMods][9],
	AracInfo[carid][aracMods][10],
	AracInfo[carid][aracMods][11],
	AracInfo[carid][aracMods][12],
	AracInfo[carid][aracMods][13],
	AracInfo[carid][aracVergi],
	AracInfo[carid][aracVergiSure],
	AracInfo[carid][aracSatilik]
	);
	format(query, sizeof(query), "%s, `aracBaglandi` = '%d', `Ceza` = '%d', `CezaSure` = '%d',  `aracfaction` = '%d',`aracfactiontype` = '%d', `aracSilah1` = '%d', `aracSilah2` = '%d', `aracSilah3` = '%d', `aracSilah4` = '%d', `aracSilah5` = '%d', `aracMermi1` = '%d', `aracMermi2` = '%d', `aracMermi3` = '%d', `aracMermi4` = '%d', `aracMermi5` = '%d', `arackira` = '%d', `aracfiyat` = '%d',`aractip` = '%d' ,`aracplaka` = '%s', `arackm` = '%.1f'",
	query,
	AracInfo[carid][aracBaglandi],
	AracInfo[carid][aracTicket],
	AracInfo[carid][aracTicketTime],
	AracInfo[carid][aracFaction],
	AracInfo[carid][aracFactionType],
	AracInfo[carid][aracSilahlar][0],
	AracInfo[carid][aracSilahlar][1],
	AracInfo[carid][aracSilahlar][2],
	AracInfo[carid][aracSilahlar][3],
	AracInfo[carid][aracSilahlar][4],
	AracInfo[carid][aracMermiler][0],
	AracInfo[carid][aracMermiler][1],
	AracInfo[carid][aracMermiler][2],
	AracInfo[carid][aracMermiler][3],
	AracInfo[carid][aracMermiler][4],
	AracInfo[carid][aracKira],
	AracInfo[carid][aracFiyat],
	AracInfo[carid][aracTip],
	AracInfo[carid][aracPlaka],
	AracInfo[carid][aracKM]
	);
	format(query, sizeof(query), "%s, `ElKonuldu` = '%d', `Zirh` = '%d', `ZirhVarMi` = '%d', `Garaj` = '%d', `Interior` = '%d', `World` = '%d', `TaksiPlaka` = '%d', `uyusturucu` = %d WHERE `aracid` = %d",
	query,
	AracInfo[carid][aracElKonuldu],
	AracInfo[carid][aracZirh],
	AracInfo[carid][aracZirhVarMi],
	AracInfo[carid][aracGaraj],
	AracInfo[carid][aracInterior],
	AracInfo[carid][aracWorld],
	AracInfo[carid][TaksiPlaka],
	AracInfo[carid][aracUyusturucu],
	AracInfo[carid][aracID]);

	mysql_query(g_SQL,query, false);

	mysql_format(g_SQL, query, sizeof query, "UPDATE `araclar` SET `aracpaintjob` = '%d' WHERE `aracid` = '%d'", AracInfo[carid][aracPaintjob], AracInfo[carid][aracID]);
	mysql_query (g_SQL, query);

	if(AracInfo[carid][aracTip] != 3)
	{
		mysql_format(g_SQL, query, sizeof query, "UPDATE `araclar` SET `arackilit` = '%d' WHERE `aracid` = '%d'", AracInfo[carid][aracKilit], AracInfo[carid][aracID]);
		mysql_query (g_SQL, query);
	}
	if(AracInfo[carid][aracTip] == 3)
	{
		mysql_format(g_SQL, query, sizeof query, "UPDATE `araclar` SET `arackilit` = '0' WHERE `aracid` = '%d'", AracInfo[carid][aracID]);
		mysql_query (g_SQL, query);
	}
	return 1;
}
stock SQLName(id, underscore = 1)
{
	new owner[MAX_PLAYER_NAME], query[512];
	mysql_format(g_SQL, query, sizeof(query), "SELECT `Isim` FROM `oyuncular` WHERE `ID` = '%d'", id);
 	new Cache:sqlname = mysql_query(g_SQL, query);
	new rows;
	cache_get_row_count(rows);
	if (rows) cache_get_value_name(0, "Isim", owner, 24);
	cache_delete(sqlname);
	if (!underscore) {
	    for (new i = 0, len = strlen(owner); i < len; i ++) {
	        if (owner[i] == '_') owner[i] = ' ';
		}
	}
	return owner;
}
stock Ev_Yenile(houseid)
{
    if (houseid != -1 && HouseInfo[houseid][evExists])
    {
        if (IsValidDynamic3DTextLabel(HouseInfo[houseid][houseText]))
            DestroyDynamic3DTextLabel(HouseInfo[houseid][houseText]);

        if (IsValidDynamicPickup(HouseInfo[houseid][evPickup]))
		    DestroyDynamicPickup(HouseInfo[houseid][evPickup]);

		new string[850];
		new durum[24];
		if (HouseInfo[houseid][evKilit] == 0) durum = "{08d342}Kilitli Degil";
		else durum = "{FF0000}Sadece Sahibi";
		if (HouseInfo[houseid][evSahip] == -1 && HouseInfo[houseid][evKiralik] == 0 && HouseInfo[houseid][evSatilik] == 0)
		{
		    format(string,sizeof(string), "{FF9900}Satilik Mülk (ID: %d)\n\n{FFFFFF}Interior %d\n{2ECC71}%s\n{2ECC71}%s\n{FFFFFF}%d, %s, %s",
			houseid,HouseInfo[houseid][evInterior],FormatNumber(HouseInfo[houseid][evFiyat]),durum,houseid, GetLocation(HouseInfo[houseid][evPos][0], HouseInfo[houseid][evPos][1], HouseInfo[houseid][evPos][2]), GetCityName(HouseInfo[houseid][evPos][0], HouseInfo[houseid][evPos][1], HouseInfo[houseid][evPos][2]));
		    HouseInfo[houseid][houseText] = CreateDynamic3DTextLabel(string,-1,HouseInfo[houseid][evPos][0],HouseInfo[houseid][evPos][1],HouseInfo[houseid][evPos][2],5.0,INVALID_PLAYER_ID, INVALID_VEHICLE_ID,0,0);
		    HouseInfo[houseid][evPickup] = CreateDynamicPickup(1273,23,HouseInfo[houseid][evPos][0],HouseInfo[houseid][evPos][1],HouseInfo[houseid][evPos][2],0);
		    return 1;
		}
		if (HouseInfo[houseid][evSahip] == -1 && HouseInfo[houseid][evKiralik] == 1 && HouseInfo[houseid][evKiralayan] == -1 && HouseInfo[houseid][evSatilik] == 0)
		{
		    format(string,sizeof(string), "{FF9900}Kiralik Mülk (ID: %d)\n\n{9F9F9F}%s\n{AFAFAF}Kira Ücret: {2ECC71}%s\n{AFAFAF}Durum: {2ECC71}%s\n{FFFFFF}%d, %s, %s",
			houseid,HouseInfo[houseid][evIsim],FormatNumber(HouseInfo[houseid][evKiraUcret]),durum, houseid, GetLocation(HouseInfo[houseid][evPos][0], HouseInfo[houseid][evPos][1], HouseInfo[houseid][evPos][2]), GetCityName(HouseInfo[houseid][evPos][0], HouseInfo[houseid][evPos][1], HouseInfo[houseid][evPos][2]));
		    HouseInfo[houseid][houseText] = CreateDynamic3DTextLabel(string,-1,HouseInfo[houseid][evPos][0],HouseInfo[houseid][evPos][1],HouseInfo[houseid][evPos][2],5.0,INVALID_PLAYER_ID, INVALID_VEHICLE_ID,0,0);
		    HouseInfo[houseid][evPickup] = CreateDynamicPickup(1273,23,HouseInfo[houseid][evPos][0],HouseInfo[houseid][evPos][1],HouseInfo[houseid][evPos][2],0);
		}
	 	if (HouseInfo[houseid][evSahip] == -1 && HouseInfo[houseid][evKiralik] == 1 && HouseInfo[houseid][evKiralayan] != -1 && HouseInfo[houseid][evSatilik] == 0)
		{
		    format(string,sizeof(string), "{FF9900}Kiralik Mülk (ID: %d)\n\n{9F9F9F}%s\n{AFAFAF}Kiralayan: {2ECC71}%s\n{AFAFAF}Durum: {2ECC71}%s\n{FFFFFF}%d, %s, %s",
			houseid,HouseInfo[houseid][evIsim],SQLName(HouseInfo[houseid][evKiralayan],0),durum,houseid, GetLocation(HouseInfo[houseid][evPos][0], HouseInfo[houseid][evPos][1], HouseInfo[houseid][evPos][2]), GetCityName(HouseInfo[houseid][evPos][0], HouseInfo[houseid][evPos][1], HouseInfo[houseid][evPos][2]));
		    HouseInfo[houseid][houseText] = CreateDynamic3DTextLabel(string,-1,HouseInfo[houseid][evPos][0],HouseInfo[houseid][evPos][1],HouseInfo[houseid][evPos][2],5.0,INVALID_PLAYER_ID, INVALID_VEHICLE_ID,0,0);
		}
	 	if (HouseInfo[houseid][evSahip] != -1 && HouseInfo[houseid][evKiralik] == 1 && HouseInfo[houseid][evKiralayan] == -1 && HouseInfo[houseid][evSatilik] == 0)
		{
		    format(string,sizeof(string), "{FF9900}Kiralik Ev (#%d)\n\n{9F9F9F}%s\n{AFAFAF}Sahip: {2ECC71}%s\n{AFAFAF}Durum: {2ECC71}%s\n{AFAFAF}Kira Ücret: {2ECC71}%s\n{FFFFFF}%d, %s, %s",
			houseid,HouseInfo[houseid][evIsim],SQLName(HouseInfo[houseid][evSahip],0),durum,FormatNumber(HouseInfo[houseid][evKiraUcret]),houseid, GetLocation(HouseInfo[houseid][evPos][0], HouseInfo[houseid][evPos][1], HouseInfo[houseid][evPos][2]), GetCityName(HouseInfo[houseid][evPos][0], HouseInfo[houseid][evPos][1], HouseInfo[houseid][evPos][2]));
		    HouseInfo[houseid][houseText] = CreateDynamic3DTextLabel(string,-1,HouseInfo[houseid][evPos][0],HouseInfo[houseid][evPos][1],HouseInfo[houseid][evPos][2],5.0,INVALID_PLAYER_ID, INVALID_VEHICLE_ID,0,0);
		    HouseInfo[houseid][evPickup] = CreateDynamicPickup(19522,23,HouseInfo[houseid][evPos][0],HouseInfo[houseid][evPos][1],HouseInfo[houseid][evPos][2],0);
		    return 1;
		}
	 	if (HouseInfo[houseid][evSahip] != -1 && HouseInfo[houseid][evKiralik] == 1 && HouseInfo[houseid][evKiralayan] != -1 && HouseInfo[houseid][evSatilik] == 0)
		{
		    format(string,sizeof(string), "{FF9900}Kiralik Mülk (ID: %d)\n\n{9F9F9F}%s\n{AFAFAF}Sahip: {2ECC71}%s\n{AFAFAF}Durum: {2ECC71}%s\n{AFAFAF}Kiralayan: {2ECC71}%s\n{FFFFFF}%d, %s, %s",
			houseid,HouseInfo[houseid][evIsim],SQLName(HouseInfo[houseid][evSahip],0),durum,SQLName(HouseInfo[houseid][evKiralayan],0),houseid, GetLocation(HouseInfo[houseid][evPos][0], HouseInfo[houseid][evPos][1], HouseInfo[houseid][evPos][2]), GetCityName(HouseInfo[houseid][evPos][0], HouseInfo[houseid][evPos][1], HouseInfo[houseid][evPos][2]));
		    HouseInfo[houseid][houseText] = CreateDynamic3DTextLabel(string,-1,HouseInfo[houseid][evPos][0],HouseInfo[houseid][evPos][1],HouseInfo[houseid][evPos][2],5.0,INVALID_PLAYER_ID, INVALID_VEHICLE_ID,0,0);
		    HouseInfo[houseid][evPickup] = CreateDynamicPickup(19522,23,HouseInfo[houseid][evPos][0],HouseInfo[houseid][evPos][1],HouseInfo[houseid][evPos][2],0);
		    return 1;
		}
		if (HouseInfo[houseid][evSahip] != -1 && HouseInfo[houseid][evSatilik] == 1 && HouseInfo[houseid][evKiralik] == 0)
		{
		    format(string,sizeof(string), "{FF9900}Kiralik Mülk (ID: %d)\n\n{9F9F9F}%s\n{AFAFAF}Sahip: {2ECC71}%s\n{AFAFAF}Durum: {2ECC71}%s\n{AFAFAF}Fiyat: {2ECC71}%s\n{FFFFFF}%d, %s, %s",
			houseid,HouseInfo[houseid][evIsim],SQLName(HouseInfo[houseid][evSahip],0),durum,FormatNumber(HouseInfo[houseid][evFiyat]),houseid, GetLocation(HouseInfo[houseid][evPos][0], HouseInfo[houseid][evPos][1], HouseInfo[houseid][evPos][2]), GetCityName(HouseInfo[houseid][evPos][0], HouseInfo[houseid][evPos][1], HouseInfo[houseid][evPos][2]));
		    HouseInfo[houseid][houseText] = CreateDynamic3DTextLabel(string,-1,HouseInfo[houseid][evPos][0],HouseInfo[houseid][evPos][1],HouseInfo[houseid][evPos][2],5.0,INVALID_PLAYER_ID, INVALID_VEHICLE_ID,0,0);
		    HouseInfo[houseid][evPickup] = CreateDynamicPickup(1273,23,HouseInfo[houseid][evPos][0],HouseInfo[houseid][evPos][1],HouseInfo[houseid][evPos][2],0);
		    return 1;
		}
		if (HouseInfo[houseid][evSahip] != -1 && HouseInfo[houseid][evKiralik] == 0 && HouseInfo[houseid][evSatilik] == 0)
		{
		    format(string,sizeof(string), "{FF9900}Mülk (ID: %d)\n{FFFFFF}%s\nInterior %d\n%s\n{FFFFFF}%d, %s, %s",
			houseid,HouseInfo[houseid][evIsim],HouseInfo[houseid][evInterior],durum,houseid, GetLocation(HouseInfo[houseid][evPos][0], HouseInfo[houseid][evPos][1], HouseInfo[houseid][evPos][2]), GetCityName(HouseInfo[houseid][evPos][0], HouseInfo[houseid][evPos][1], HouseInfo[houseid][evPos][2]));
		    HouseInfo[houseid][houseText] = CreateDynamic3DTextLabel(string,-1,HouseInfo[houseid][evPos][0],HouseInfo[houseid][evPos][1],HouseInfo[houseid][evPos][2],5.0,INVALID_PLAYER_ID, INVALID_VEHICLE_ID,0,0);
		    HouseInfo[houseid][evPickup] = CreateDynamicPickup(19522,23,HouseInfo[houseid][evPos][0],HouseInfo[houseid][evPos][1],HouseInfo[houseid][evPos][2],0);
		    return 1;
		}
    }
    return 1;
}
stock IsPlayerNearBoot(playerid, vehicleid)
{
	static
		Float:fX,
		Float:fY,
		Float:fZ;

	GetVehicleBoot(vehicleid, fX, fY, fZ);

	return (GetPlayerVirtualWorld(playerid) == GetVehicleVirtualWorld(vehicleid)) && IsPlayerInRangeOfPoint(playerid, 3.5, fX, fY, fZ);
}

stock Ev_Kaydet(ev)
{
	new query[1330];
	format(query, sizeof(query), "UPDATE `evler` SET `evOwner` = '%d',`evFiyat` = '%d',`evKendiFiyati` = '%d', `Vergi` = '%d', `VergiSure` = '%d',`evPosX` = '%.4f',`evPosY` = '%.4f',`evPosZ` = '%.4f', `evName`= '%s',`evInterior` = '%d', `MaksMobilya` = '%d'",
	HouseInfo[ev][evSahip],
	HouseInfo[ev][evFiyat],
	HouseInfo[ev][evKendiFiyati],
	HouseInfo[ev][evVergi],
	HouseInfo[ev][evVergiSure],
	HouseInfo[ev][evPos][0],
	HouseInfo[ev][evPos][1],
	HouseInfo[ev][evPos][2],
	SQL_ReturnEscaped(HouseInfo[ev][evIsim]),
	HouseInfo[ev][evInterior],
	HouseInfo[ev][evMaksMobilya]
	);
	format(query, sizeof(query), "%s, `evKilit` = '%d',`evPara` = '%d',`evSatilik` = '%d',`evKiralik` = '%d',`evKiraUcret` = '%d',`evKiralayan` = '%d', `Uyusturucu` = '%d', `evKiyafet1` = '%d',`evKiyafet2` = '%d',`evKiyafet3` = '%d',`evKiyafet4` = '%d',`evKiyafet5` = '%d'",
	query,
	HouseInfo[ev][evKilit],
	HouseInfo[ev][evCash],
	HouseInfo[ev][evSatilik],
	HouseInfo[ev][evKiralik],
	HouseInfo[ev][evKiraUcret],
	HouseInfo[ev][evKiralayan],
	HouseInfo[ev][evUyusturucu],
	HouseInfo[ev][evKiyafetler][0],
	HouseInfo[ev][evKiyafetler][1],
	HouseInfo[ev][evKiyafetler][2],
	HouseInfo[ev][evKiyafetler][3],
	HouseInfo[ev][evKiyafetler][4]
	);
 	format(query, sizeof(query), "%s, `evWeapon1` = '%d', `evWeapon2` = '%d', `evWeapon3` = '%d',`evWeapon4` = '%d',`evWeapon5` = '%d',`evWeapon6` = '%d',`evWeapon7` = '%d',`evWeapon8` = '%d',`evWeapon9` = '%d',`evWeapon10` = '%d'",
 	query,
 	HouseInfo[ev][evSilahlar][0],
 	HouseInfo[ev][evSilahlar][1],
 	HouseInfo[ev][evSilahlar][2],
 	HouseInfo[ev][evSilahlar][3],
 	HouseInfo[ev][evSilahlar][4],
 	HouseInfo[ev][evSilahlar][5],
 	HouseInfo[ev][evSilahlar][6],
 	HouseInfo[ev][evSilahlar][7],
 	HouseInfo[ev][evSilahlar][8],
 	HouseInfo[ev][evSilahlar][9]
	);
	format(query, sizeof(query), "%s, `MobilyaYetki` = '%d', `evAmmo1` = '%d', `evAmmo2` = '%d', `evAmmo3` = '%d',`evAmmo4` = '%d',`evAmmo5` = '%d',`evAmmo6` = '%d',`evAmmo7` = '%d',`evAmmo8` = '%d',`evAmmo9` = '%d',`evAmmo10` = '%d' WHERE `evid` = '%d'",
	query,
	HouseInfo[ev][MobilyaYetki],
	HouseInfo[ev][evMermiler][0],
	HouseInfo[ev][evMermiler][1],
	HouseInfo[ev][evMermiler][2],
	HouseInfo[ev][evMermiler][3],
	HouseInfo[ev][evMermiler][4],
	HouseInfo[ev][evMermiler][5],
	HouseInfo[ev][evMermiler][6],
	HouseInfo[ev][evMermiler][7],
	HouseInfo[ev][evMermiler][8],
	HouseInfo[ev][evMermiler][9],
	HouseInfo[ev][evID]
	);
	mysql_query(g_SQL,query, false);
	return 1;
}
forward BirlikleriYukle();
public BirlikleriYukle()
{
	mysql_query(g_SQL, "SELECT * FROM `birlikler`");

	new rows = cache_num_rows();

	printf("» Toplam %d birlik yüklendi.", rows);

	if (rows)
	{
		new bID, str[256];
		for (new i = 0; i < rows; i++)
		{
		    cache_get_value_name_int(i, "bid", bID);

			Birlikler[bID][birlikExists] = true;
			Birlikler[bID][birlikID] = bID;

		    cache_get_value_name(i,      "bisim", Birlikler[bID][birlikAd],32);
		    cache_get_value_name_int(i,  "brenk", Birlikler[bID][birlikColor]);
		    cache_get_value_name_int(i,  "btip", Birlikler[bID][birlikTip]);
		    cache_get_value_name_int(i,  "bRutbeler", Birlikler[bID][birlikRutbeler]);
		    cache_get_value_name_int(i,  "sistemselonay", Birlikler[bID][birlikOnaylar][0]);
		    cache_get_value_name_int(i,  "silahonay", Birlikler[bID][birlikOnaylar][1]);
		    cache_get_value_name_int(i,  "uyusturucuonay", Birlikler[bID][birlikOnaylar][2]);
		    cache_get_value_name_int(i,  "graffitionay", Birlikler[bID][birlikOnaylar][3]);
		    cache_get_value_name_int(i,  "hoodonay", Birlikler[bID][birlikOnaylar][4]);
		    cache_get_value_name(i,      "bduyuru", Birlikler[bID][birlikDuyuru],128);
		    cache_get_value_name_int(i,  "bkasacash", Birlikler[bID][birlikKasaPara]);
		    cache_get_value_name_int(i,  "oocdurum", Birlikler[bID][OOCDurum]);
		    cache_get_value_name_int(i,  "yayindurum", Birlikler[bID][yayinDurum]);
		    cache_get_value_name_int(i,  "yayintipi", Birlikler[bID][yayinTipi]);
		    cache_get_value_name_int(i,  "reklamalimi", Birlikler[bID][ReklamAlimi]);
		    cache_get_value_name_int(i,  "reklamucreti", Birlikler[bID][ReklamUcreti]);
		    cache_get_value_name_int(i,  "reklamsayisi", Birlikler[bID][ReklamSayisi]);
		    cache_get_value_name_float(i, "reklamx", Birlikler[bID][reklamPos][0]);
		    cache_get_value_name_float(i, "reklamy", Birlikler[bID][reklamPos][1]);
		    cache_get_value_name_float(i, "reklamz", Birlikler[bID][reklamPos][2]);

		    for (new j = 0; j < 15; j ++)
		    {
		        if (j < 8)
		        {
		            format(str,sizeof(str), "byetki%d",j+1);
		            cache_get_value_name_int(i,str,Birlikler[bID][birlikYetkilendirme][j]);
		        }
		        if (j < 5)
		        {
		            format(str,sizeof str, "bdivizyon%d", j+1);
		            cache_get_value_name(i, str, BirlikDivizyon[bID][j], 15);
		        }
		        format(str, sizeof str, "brutbe%d", j+1);
		        cache_get_value_name(i, str, BirlikRutbe[bID][j], 32);
		    }

		    if (Birlikler[bID][reklamPos][0] != 0.0 && Birlikler[bID][reklamPos][1] != 0.0 && Birlikler[bID][birlikTip] == BIRLIK_HABER)
		    {
		     	Birlikler[bID][reklamPickup] = CreateDynamicPickup(1239, 23, Birlikler[bID][reklamPos][0], Birlikler[bID][reklamPos][1], Birlikler[bID][reklamPos][2]);
		       	format(str, sizeof(str), "{E74C3C}[Reklam Noktasi]\n{E74C3C}Ajans: {FFFFFF}%s\n{E74C3C}Ücret: {FFFFFF}%s\n{E74C3C}(/reklamver)", Birlikler[bID][birlikAd], FormatNumber(Birlikler[bID][ReklamUcreti]));
		        Birlikler[bID][reklamLabel] = CreateDynamic3DTextLabel(str, -1, Birlikler[bID][reklamPos][0], Birlikler[bID][reklamPos][1], Birlikler[bID][reklamPos][2], 10.0);
	        }
		}
	}
	return 1;
}

forward EvleriYukle();
public EvleriYukle()
{
	mysql_query(g_SQL, "SELECT * FROM `evler`");

	new rows = cache_num_rows();

	printf("» Toplam %d ev yüklendi.", rows);

	if (rows)
	{
	    new str[256], hoID;
		for (new i = 0; i < rows; i++)
		{
		    cache_get_value_name_int(i, "evid", hoID);

		    HouseInfo[hoID][evExists] = true;
		    HouseInfo[hoID][evID] = hoID;

		    cache_get_value_name_int(i, "evOwner", HouseInfo[hoID][evSahip]);
		    cache_get_value_name_int(i, "evFiyat", HouseInfo[hoID][evFiyat]);
		    cache_get_value_name_int(i, "evKendiFiyati", HouseInfo[hoID][evKendiFiyati]);
		    cache_get_value_name_float(i, "evPosX", HouseInfo[hoID][evPos][0]);
		    cache_get_value_name_float(i, "evPosY", HouseInfo[hoID][evPos][1]);
		    cache_get_value_name_float(i, "evPosZ", HouseInfo[hoID][evPos][2]);
		    cache_get_value_name(i, "evName", HouseInfo[hoID][evIsim],30);
		    cache_get_value_name_int(i, "MaksMobilya", HouseInfo[hoID][evMaksMobilya]);
		    cache_get_value_name_int(i, "Vergi", HouseInfo[hoID][evVergi]);
		    cache_get_value_name_int(i, "VergiSure", HouseInfo[hoID][evVergiSure]);
		    cache_get_value_name_int(i, "evInterior", HouseInfo[hoID][evInterior]);
		    cache_get_value_name_int(i, "evKilit", HouseInfo[hoID][evKilit]);
		    cache_get_value_name_int(i, "evPara", HouseInfo[hoID][evCash]);
		    cache_get_value_name_int(i, "evSatilik", HouseInfo[hoID][evSatilik]);
		    cache_get_value_name_int(i, "evKiralik", HouseInfo[hoID][evKiralik]);
		    cache_get_value_name_int(i, "evKiraUcret", HouseInfo[hoID][evKiraUcret]);
		    cache_get_value_name_int(i, "evKiralayan", HouseInfo[hoID][evKiralayan]);
		    cache_get_value_name_int(i, "Uyusturucu", HouseInfo[hoID][evUyusturucu]);
		    cache_get_value_name_int(i, "MobilyaYetki", HouseInfo[hoID][MobilyaYetki]);

			for (new j = 0; j < 10; j ++)
		    {
		        if (j < 5)
		        {
		            format(str, 24, "evKiyafet%d", j + 1);
		            cache_get_value_name_int(i, str, HouseInfo[hoID][evKiyafetler][j]);
		        }
		        format(str, 24, "evWeapon%d", j + 1);
		        cache_get_value_name_int(i, str, HouseInfo[hoID][evSilahlar][j]);

		        format(str, 24, "evAmmo%d", j + 1);
		        cache_get_value_name_int(i, str, HouseInfo[hoID][evMermiler][j]);
		    }

		    Ev_Yenile(HouseInfo[hoID][evID]);
		}
		for (new i = 0; i < MAX_EV; i ++) if (HouseInfo[i][evExists])
		{
		    format(str, sizeof(str), "SELECT * FROM `furniture` WHERE `ID` = '%d'", HouseInfo[i][evID]);

			mysql_tquery(g_SQL, str, "OnLoadFurniture", "d", i);
			Ev_Yenile(HouseInfo[hoID][evID]);
		}
	}
	return 1;
}

forward OnLoadFurniture(houseid);
public OnLoadFurniture(houseid)
{
	static
	    rows,
		id = -1;

	cache_get_row_count(rows);

	for (new i = 0; i != rows; i ++)
	{
		id = Iter_Free(Mobilyalar[houseid]);
		cache_get_value_name_int(i, "furnitureID",FurnitureData[houseid][id][furnitureID]);
		cache_get_value_name(i, "furnitureName",FurnitureData[houseid][id][furnitureName],32);
		cache_get_value_name_int(i, "furnitureModel",FurnitureData[houseid][id][furnitureModel]);
		cache_get_value_name_int(i, "MateryalDesen1",FurnitureData[houseid][id][furnitureMateryalDesen][0]);
		cache_get_value_name_int(i, "MateryalDesen2",FurnitureData[houseid][id][furnitureMateryalDesen][1]);
		cache_get_value_name_int(i, "MateryalDesen3",FurnitureData[houseid][id][furnitureMateryalDesen][2]);
		cache_get_value_name_int(i, "MateryalDesen4",FurnitureData[houseid][id][furnitureMateryalDesen][3]);
		cache_get_value_name_int(i, "MateryalDesen5",FurnitureData[houseid][id][furnitureMateryalDesen][4]);
		cache_get_value_name_float(i, "furnitureX",FurnitureData[houseid][id][furniturePos][0]);
		cache_get_value_name_float(i, "furnitureY",FurnitureData[houseid][id][furniturePos][1]);
		cache_get_value_name_float(i, "furnitureZ",FurnitureData[houseid][id][furniturePos][2]);
		cache_get_value_name_float(i, "furnitureRX",FurnitureData[houseid][id][furnitureRot][0]);
		cache_get_value_name_float(i, "furnitureRY",FurnitureData[houseid][id][furnitureRot][1]);
		cache_get_value_name_float(i, "furnitureRZ",FurnitureData[houseid][id][furnitureRot][2]);
		cache_get_value_name_int(i, "furniturePrice",FurnitureData[houseid][id][furniturePrice]);
		Iter_Add(Mobilyalar[houseid], id);
	    Furniture_Refresh(id, houseid);
	}
	return 1;
}
stock Ev_MobilyaSayisi(evid)
{
	return Iter_Count(Mobilyalar[evid]);
}
Furniture_Refresh(furnitureid, houseid)
{
	if (furnitureid != -1)
	{
	    if (IsValidDynamicObject(FurnitureData[houseid][furnitureid][furnitureObject]))
	        DestroyDynamicObject(FurnitureData[houseid][furnitureid][furnitureObject]);

	    	FurnitureData[houseid][furnitureid][furnitureObject] = CreateDynamicObject(
			FurnitureData[houseid][furnitureid][furnitureModel],
			FurnitureData[houseid][furnitureid][furniturePos][0],
			FurnitureData[houseid][furnitureid][furniturePos][1],
			FurnitureData[houseid][furnitureid][furniturePos][2],
			FurnitureData[houseid][furnitureid][furnitureRot][0],
			FurnitureData[houseid][furnitureid][furnitureRot][1],
			FurnitureData[houseid][furnitureid][furnitureRot][2],
			HouseInfo[houseid][evID] + 1,
			HouseInteriors[HouseInfo[houseid][evInterior]][intID]
		);
		for (new i; i<5; i++) if (FurnitureData[houseid][furnitureid][furnitureMateryalDesen][i] > 0)
		{
		    SetDynamicObjectMaterial(FurnitureData[houseid][furnitureid][furnitureObject], i, Desenler[FurnitureData[houseid][furnitureid][furnitureMateryalDesen][i]-1][model_id], Desenler[FurnitureData[houseid][furnitureid][furnitureMateryalDesen][i]-1][txdname], Desenler[FurnitureData[houseid][furnitureid][furnitureMateryalDesen][i]-1][texturename], 0);
		}
	}
	return 1;
}
Furniture_Save(furnitureid, houseid)
{
	static
	    string[700];

	format(string, sizeof(string), "UPDATE `furniture` SET `furnitureModel` = '%d', `furnitureName` = '%s', `furnitureX` = '%.4f', `furnitureY` = '%.4f', `furnitureZ` = '%.4f', `furnitureRX` = '%.4f', `furnitureRY` = '%.4f', `furnitureRZ` = '%.4f',`furniturePrice` = '%d'",
	    FurnitureData[houseid][furnitureid][furnitureModel],
	    FurnitureData[houseid][furnitureid][furnitureName],
	    FurnitureData[houseid][furnitureid][furniturePos][0],
	    FurnitureData[houseid][furnitureid][furniturePos][1],
	    FurnitureData[houseid][furnitureid][furniturePos][2],
	    FurnitureData[houseid][furnitureid][furnitureRot][0],
	    FurnitureData[houseid][furnitureid][furnitureRot][1],
	    FurnitureData[houseid][furnitureid][furnitureRot][2],
	    FurnitureData[houseid][furnitureid][furniturePrice]
	);
	format(string, sizeof(string), "%s, `MateryalDesen1` = '%d', `MateryalDesen2` = '%d', `MateryalDesen3` = '%d', `MateryalDesen4` = '%d', `MateryalDesen5` = '%d' WHERE `ID` = '%d' AND `furnitureID` = '%d'",
	string,
	FurnitureData[houseid][furnitureid][furnitureMateryalDesen][0],
    FurnitureData[houseid][furnitureid][furnitureMateryalDesen][1],
    FurnitureData[houseid][furnitureid][furnitureMateryalDesen][2],
    FurnitureData[houseid][furnitureid][furnitureMateryalDesen][3],
    FurnitureData[houseid][furnitureid][furnitureMateryalDesen][4],
    HouseInfo[houseid][evID],
    FurnitureData[houseid][furnitureid][furnitureID]);

	mysql_query(g_SQL, string, false);
	return 1;
}

Furniture_Add(houseid, name[], modelid, Float:x, Float:y, Float:z, Float:rx = 0.0, Float:ry = 0.0, Float:rz = 0.0,price)
{
	new id;

 	if (houseid == -1 || !HouseInfo[houseid][evExists])
	    return 0;
	id = Iter_Free(Mobilyalar[houseid]);

	if (id != -1)
	{
	    FurnitureData[houseid][id][furnitureID] = id;

		format(FurnitureData[houseid][id][furnitureName], 32, name);

		FurnitureData[houseid][id][furnitureModel] = modelid;
	    FurnitureData[houseid][id][furniturePos][0] = x;
	    FurnitureData[houseid][id][furniturePos][1] = y;
	    FurnitureData[houseid][id][furniturePos][2] = z;
	    FurnitureData[houseid][id][furnitureRot][0] = rx;
	    FurnitureData[houseid][id][furnitureRot][1] = ry;
	    FurnitureData[houseid][id][furnitureRot][2] = rz;
		FurnitureData[houseid][id][furniturePrice] = price;
		FurnitureData[houseid][id][furnitureMateryalDesen][0] = 0;
		FurnitureData[houseid][id][furnitureMateryalDesen][1] = 0;
		FurnitureData[houseid][id][furnitureMateryalDesen][2] = 0;
		FurnitureData[houseid][id][furnitureMateryalDesen][3] = 0;
		FurnitureData[houseid][id][furnitureMateryalDesen][4] = 0;

	    Furniture_Refresh(id, houseid);

	    Iter_Add(Mobilyalar[houseid], id);

		new query[256];

		mysql_format(g_SQL, query, sizeof query, "INSERT INTO `furniture` (`ID`, `furnitureID`) VALUES ('%d', '%d')", HouseInfo[houseid][evID], FurnitureData[houseid][id][furnitureID]);
		mysql_query (g_SQL, query);

		Furniture_Save(FurnitureData[houseid][id][furnitureID], houseid);
		return FurnitureData[houseid][id][furnitureID];
	}
	return -1;
}

Furniture_Delete(furnitureid, houseid)
{
	static
	    string[72];

	if (furnitureid != -1)
	{
	    format(string, sizeof(string), "DELETE FROM `furniture` WHERE `ID` = '%d' AND `furnitureID` = '%d'", HouseInfo[houseid][evID], FurnitureData[houseid][furnitureid][furnitureID]);
		mysql_tquery(g_SQL, string);

		FurnitureData[houseid][furnitureid][furnitureModel] = 0;
		Iter_Remove(Mobilyalar[houseid], furnitureid);
		DestroyDynamicObject(FurnitureData[houseid][furnitureid][furnitureObject]);
	}
	return 1;
}

stock Lokasyon_Yukle()
{
    mysql_query(g_SQL, "SELECT * FROM `lokasyon`");

	new rows = cache_num_rows();
    printf("» Toplam %d Lokasyon yüklenmistir.", rows);

	if (rows)
	{
	    new lkID;
		for (new i = 0; i < rows; i ++) if (i < MAX_LOKASYON)
	    {
	        cache_get_value_name_int(i, "ID", lkID);

	        Lokasyon[lkID][Exists] = true;
	        Lokasyon[lkID][ID] = lkID;

	        cache_get_value_name(i, "Ad", Lokasyon[lkID][lokasyonAd], 30);
	        cache_get_value_name_float(i, "posX", Lokasyon[lkID][lokasyonPos][0]);
	        cache_get_value_name_float(i, "posY", Lokasyon[lkID][lokasyonPos][1]);
	        cache_get_value_name_float(i, "posZ", Lokasyon[lkID][lokasyonPos][2]);
	    }
	}
    return 1;
}

stock CCTV_Yukle()
{
    mysql_query(g_SQL, "SELECT * FROM `cctv`");

	new rows = cache_num_rows();
    printf("» Toplam %d CCTV yüklenmistir.", rows);

	if (rows)
	{
	    new ccID;
	    for (new i = 0; i < rows; i ++)
	    {
	        cache_get_value_name_int(i, "ID", ccID);

	        CCTVInfo[ccID][ID] = ccID;

	        cache_get_value_name(i, "cctv_name", CCTVInfo[ccID][cctv_Name], 30);
	        cache_get_value_name_float(i, "cctv_x", CCTVInfo[ccID][cctv_X]);
	        cache_get_value_name_float(i, "cctv_y", CCTVInfo[ccID][cctv_Y]);
	        cache_get_value_name_float(i, "cctv_z", CCTVInfo[ccID][cctv_Z]);
	        cache_get_value_name_float(i, "cctv_rot_x", CCTVInfo[ccID][cctv_rotX]);
	        cache_get_value_name_float(i, "cctv_rot_y", CCTVInfo[ccID][cctv_rotY]);
	        cache_get_value_name_float(i, "cctv_rot_z", CCTVInfo[ccID][cctv_rotZ]);
	        cache_get_value_name_int(i, "cctv_vw", CCTVInfo[ccID][cctv_VW]);
	        cache_get_value_name_int(i, "cctv_interior", CCTVInfo[ccID][cctv_Interior]);

	        CCTVInfo[ccID][cctv_Object] = CreateObject(1886, CCTVInfo[ccID][cctv_X], CCTVInfo[ccID][cctv_Y], CCTVInfo[ccID][cctv_Z], CCTVInfo[ccID][cctv_rotX], CCTVInfo[ccID][cctv_rotY], CCTVInfo[ccID][cctv_rotZ], 20.0);
	        Iter_Add(CCTVIter, ccID);
		}
	}
	return 1;
}

SaveCCTV(id)
{
	new query[512];
	mysql_format(g_SQL, query, sizeof query, "UPDATE `cctv` SET `cctv_name` = '%s', `cctv_x` = '%f', `cctv_y` = '%f', `cctv_z` = '%f', `cctv_rot_x` = '%f', `cctv_rot_y` = '%f', `cctv_rot_z` = '%f', `cctv_vw` = '%d', `cctv_interior` = '%d' WHERE `ID` = '%d'",
		CCTVInfo[id][cctv_Name],
		CCTVInfo[id][cctv_X],
		CCTVInfo[id][cctv_Y],
		CCTVInfo[id][cctv_Z],
		CCTVInfo[id][cctv_rotX],
		CCTVInfo[id][cctv_rotY],
		CCTVInfo[id][cctv_rotZ],
		CCTVInfo[id][cctv_VW],
		CCTVInfo[id][cctv_Interior],
		CCTVInfo[id][ID]);
	mysql_query(g_SQL, query);
	return 1;
}
CreateCCTV(playerid, name[])
{
	new id = Iter_Free(CCTVIter);
	if (id != -1)
	{
		new
			Float: x, Float: y, Float: z;
		GetPlayerPos(playerid, x, y, z);

        CCTVInfo[id][ID] = id;

		CCTVInfo[id][cctv_X] = x;
		CCTVInfo[id][cctv_Y] = y;
		CCTVInfo[id][cctv_Z] = z;

		CCTVInfo[id][cctv_rotX] = 0.0;
		CCTVInfo[id][cctv_rotY] = 0.0;
		CCTVInfo[id][cctv_rotZ] = 0.0;


		CCTVInfo[id][cctv_VW] = GetPlayerVirtualWorld(playerid);
		CCTVInfo[id][cctv_Interior] = GetPlayerInterior(playerid);
		strcpy(CCTVInfo[id][cctv_Name], name, 30);

		CCTVInfo[id][cctv_Object] = CreateObject(1886, CCTVInfo[id][cctv_X], CCTVInfo[id][cctv_Y], CCTVInfo[id][cctv_Z], CCTVInfo[id][cctv_rotX], CCTVInfo[id][cctv_rotY], CCTVInfo[id][cctv_rotZ], 20.0);

		Iter_Add(CCTVIter, id);

		new query[256];
        mysql_format(g_SQL, query, sizeof query, "INSERT INTO `cctv` (`ID`) VALUES ('%d')", CCTVInfo[id][ID]);
		mysql_tquery(g_SQL, query);

		SaveCCTV(id);
	}
	return id;
}

DeleteCCTV(playerid, id)
{
	if (!Iter_Contains(CCTVIter, id)) return HataMesajGonder(playerid, "Geçersiz ID girdiniz.");

	new
		query[128];
	mysql_format(g_SQL, query, sizeof query, "DELETE FROM `cctv` WHERE `ID` = '%d'", CCTVInfo[id][ID]);
	mysql_query(g_SQL, query);

	DestroyObject(CCTVInfo[id][cctv_Object]);

	CCTVInfo[id][cctv_X] = CCTVInfo[id][cctv_Y] = CCTVInfo[id][cctv_Z] =
	CCTVInfo[id][cctv_rotX] = CCTVInfo[id][cctv_rotY] = CCTVInfo[id][cctv_rotZ] = 0.0;

	CCTVInfo[id][cctv_VW] = CCTVInfo[id][cctv_Interior] = CCTVInfo[id][ID] = -1;

	Iter_Remove(CCTVIter, id);
	MesajGonder(playerid, "CCTV silindi, ID: %d", id);
	return 1;
}
EditCCTV(playerid, id)
{
	if (!Iter_Contains(CCTVIter, id)) return HataMesajGonder(playerid, "Geçersiz ID girdiniz.");
	if (CCTV_inEditing[playerid]) return HataMesajGonder(playerid, "Zaten CCTV düzenliyorsun.");
	CCTV_inEditing[playerid] = 1;
	CCTV_ID[playerid] = id;
	EditObject(playerid, CCTVInfo[id][cctv_Object]);

	MesajGonder(playerid, "CCTV düzenlemeye basladiniz, bitirdiginizde kayit simgesine basin.");
	return 1;
}
CancelEditCCTV(playerid, id)
{
	CCTV_inEditing[playerid] = 0;
	CCTV_ID[playerid] = -1;
	SetObjectPos(CCTVInfo[id][cctv_Object], CCTVInfo[id][cctv_X], CCTVInfo[id][cctv_Y], CCTVInfo[id][cctv_Z]);
	SetObjectRot(CCTVInfo[id][cctv_Object], CCTVInfo[id][cctv_rotX], CCTVInfo[id][cctv_rotY], CCTVInfo[id][cctv_rotZ]);
	return 1;
}
ChangeCCTVName(playerid, id, name[])
{
	if (!Iter_Contains(CCTVIter, id)) return HataMesajGonder(playerid, "Geçersiz ID girdiniz.");
	strcpy(CCTVInfo[id][cctv_Name], name, 30);
	MesajGonder(playerid, "CCTV ismi degistirildi. (ID: %d, Yeni isim: %s)", id, name);
	return 1;
}
MoveCCTV(playerid, id)
{
	if (!Iter_Contains(CCTVIter, id)) return SendClientMessage(playerid, 0xFF6347FF, "The ID of the typed CCTV is nonexistent. (Use Server ID)");
	new
		Float: x, Float: y, Float: z;
	GetPlayerPos(playerid, x, y, z);

	CCTVInfo[id][cctv_X] = x;
	CCTVInfo[id][cctv_Y] = y + 0.5;
	CCTVInfo[id][cctv_Z] = z;

	CCTVInfo[id][cctv_rotX] = 0.0;
	CCTVInfo[id][cctv_rotY] = 0.0;
	CCTVInfo[id][cctv_rotZ] = 0.0;

	CCTVInfo[id][cctv_VW] = GetPlayerVirtualWorld(playerid);
	CCTVInfo[id][cctv_Interior] = GetPlayerInterior(playerid);

	SetObjectPos(CCTVInfo[id][cctv_Object], CCTVInfo[id][cctv_X], CCTVInfo[id][cctv_Y], CCTVInfo[id][cctv_Z]);
	SetObjectRot(CCTVInfo[id][cctv_Object], CCTVInfo[id][cctv_rotX], CCTVInfo[id][cctv_rotY], CCTVInfo[id][cctv_rotZ]);

	SaveCCTV(id);
	return 1;
}

stock Arrest_Load()
{
	mysql_query(g_SQL, "SELECT * FROM `arrestpoints`");

	new rows = cache_num_rows();
	printf("» Toplam %d hapis noktasi yüklendi.", rows);
	if (rows)
	{
	    new arrID;
		for (new i = 0; i < rows; i ++) if (i < MAX_ARREST_POINTS)
		{
		    cache_get_value_name_int(i, "arrestID", arrID);

		    ArrestData[arrID][arrestExists] = true;
		    ArrestData[arrID][arrestID] = arrID;

		    cache_get_value_name_float(i, "arrestX", ArrestData[arrID][arrestPos][0]);
		    cache_get_value_name_float(i, "arrestY", ArrestData[arrID][arrestPos][1]);
		    cache_get_value_name_float(i, "arrestZ", ArrestData[arrID][arrestPos][2]);
		    cache_get_value_name_int(i, "arrestInterior", ArrestData[arrID][arrestInterior]);
		    cache_get_value_name_int(i, "arrestWorld", ArrestData[arrID][arrestWorld]);

		    Arrest_Refresh(arrID);
		}
	}
	return 1;
}

Arrest_Refresh(arrestid)
{
	if (arrestid != -1 && ArrestData[arrestid][arrestExists])
	{
	    static
	        string[64];

		if (IsValidDynamicPickup(ArrestData[arrestid][arrestPickup]))
		    DestroyDynamicPickup(ArrestData[arrestid][arrestPickup]);

		if (IsValidDynamic3DTextLabel(ArrestData[arrestid][arrestText3D]))
		    DestroyDynamic3DTextLabel(ArrestData[arrestid][arrestText3D]);

		format(string, sizeof(string), "Hapis Noktasi (ID: %d)\n{FFFFFF}/hapseat", arrestid);

		ArrestData[arrestid][arrestPickup] = CreateDynamicPickup(1247, 23, ArrestData[arrestid][arrestPos][0], ArrestData[arrestid][arrestPos][1], ArrestData[arrestid][arrestPos][2], ArrestData[arrestid][arrestWorld], ArrestData[arrestid][arrestInterior]);
  		ArrestData[arrestid][arrestText3D] = CreateDynamic3DTextLabel(string, COLOR_DARKBLUE, ArrestData[arrestid][arrestPos][0], ArrestData[arrestid][arrestPos][1], ArrestData[arrestid][arrestPos][2], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, ArrestData[arrestid][arrestWorld], ArrestData[arrestid][arrestInterior]);
	}
	return 1;
}
Arrest_Delete(arrestid)
{
	if (arrestid != -1 && ArrestData[arrestid][arrestExists])
	{
	    static
	        string[64];

        if (IsValidDynamicPickup(ArrestData[arrestid][arrestPickup]))
		    DestroyDynamicPickup(ArrestData[arrestid][arrestPickup]);

		if (IsValidDynamic3DTextLabel(ArrestData[arrestid][arrestText3D]))
		    DestroyDynamic3DTextLabel(ArrestData[arrestid][arrestText3D]);

		format(string, sizeof(string), "DELETE FROM `arrestpoints` WHERE `arrestID` = '%d'", ArrestData[arrestid][arrestID]);
		mysql_query(g_SQL, string, false);

		ArrestData[arrestid][arrestExists] = false;
		ArrestData[arrestid][arrestID] = 0;
	}
	return 1;
}
Arrest_Create(Float:x, Float:y, Float:z, interior, world)
{
	for (new i = 0; i < MAX_ARREST_POINTS; i ++) if (!ArrestData[i][arrestExists])
	{
	    ArrestData[i][arrestExists] = true;
        ArrestData[i][arrestID] = i;

	    ArrestData[i][arrestPos][0] = x;
	    ArrestData[i][arrestPos][1] = y;
	    ArrestData[i][arrestPos][2] = z;
	    ArrestData[i][arrestInterior] = interior;
	    ArrestData[i][arrestWorld] = world;

		new query[256];

		mysql_format(g_SQL, query, sizeof query, "INSERT INTO `arrestpoints` (`arrestID`, `arrestInterior`) VALUES ('%d', '0')", i);
	    mysql_query(g_SQL, query);

		Arrest_Save(i);
		Arrest_Refresh(i);
		return i;
	}
	return -1;
}

Arrest_Save(arrestid)
{
	static
	    query[220];

	format(query, sizeof(query), "UPDATE `arrestpoints` SET `arrestX` = '%.4f', `arrestY` = '%.4f', `arrestZ` = '%.4f', `arrestInterior` = '%d', `arrestWorld` = '%d' WHERE `arrestID` = '%d'",
	    ArrestData[arrestid][arrestPos][0],
	    ArrestData[arrestid][arrestPos][1],
	    ArrestData[arrestid][arrestPos][2],
	    ArrestData[arrestid][arrestInterior],
	    ArrestData[arrestid][arrestWorld],
	    ArrestData[arrestid][arrestID]
	);
	mysql_query(g_SQL, query, false);
	return 1;
}
forward GateleriYukle();
public GateleriYukle()
{
	mysql_query(g_SQL, "SELECT * FROM `gates`");

	new rows = cache_num_rows();

	printf("» Toplam %d gate yüklendi. ", rows);

	if (rows)
	{
	    new gtID;
		for (new i = 0; i < rows; i ++)
		{
		    cache_get_value_name_int(i, "gateID", gtID);

		    GateData[gtID][gateExists] = true;
		    GateData[gtID][gateOpened] = false;

		    GateData[gtID][gateID] = gtID;

		    cache_get_value_name_int(i, "gateModel", GateData[gtID][gateModel]);
		    cache_get_value_name_float(i, "gateSpeed", GateData[gtID][gateSpeed]);
		    cache_get_value_name_float(i, "gateRadius", GateData[gtID][gateRadius]);
		    cache_get_value_name_int(i, "gateInterior", GateData[gtID][gateInterior]);
		    cache_get_value_name_int(i, "gateWorld", GateData[gtID][gateWorld]);
		    cache_get_value_name_float(i, "gateX", GateData[gtID][gatePos][0]);
		    cache_get_value_name_float(i, "gateY", GateData[gtID][gatePos][1]);
		    cache_get_value_name_float(i, "gateZ", GateData[gtID][gatePos][2]);
		    cache_get_value_name_float(i, "gateRX", GateData[gtID][gatePos][3]);
		    cache_get_value_name_float(i, "gateRY", GateData[gtID][gatePos][4]);
		    cache_get_value_name_float(i, "gateRZ", GateData[gtID][gatePos][5]);
		    cache_get_value_name_float(i, "gateMoveX", GateData[gtID][gateMove][0]);
		    cache_get_value_name_float(i, "gateMoveY", GateData[gtID][gateMove][1]);
		    cache_get_value_name_float(i, "gateMoveZ", GateData[gtID][gateMove][2]);
		    cache_get_value_name_float(i, "gateMoveRX", GateData[gtID][gateMove][3]);
		    cache_get_value_name_float(i, "gateMoveRY", GateData[gtID][gateMove][4]);
		    cache_get_value_name_float(i, "gateMoveRZ", GateData[gtID][gateMove][5]);
		    cache_get_value_name_int(i, "gateLinkID", GateData[gtID][gateLinkID]);
		    cache_get_value_name_int(i, "gateFaction", GateData[gtID][gateFaction]);
		    cache_get_value_name_int(i, "gateOwner", GateData[gtID][gateOwner]);
		    cache_get_value_name(i, "gatePass", GateData[gtID][gatePass], 32);
			cache_get_value_name_int(i, "VIP", GateData[gtID][gateVip]);

	     	GateData[gtID][gateObject] = CreateDynamicObject(GateData[gtID][gateModel], GateData[gtID][gatePos][0], GateData[gtID][gatePos][1], GateData[gtID][gatePos][2], GateData[gtID][gatePos][3], GateData[gtID][gatePos][4], GateData[gtID][gatePos][5], GateData[gtID][gateWorld], GateData[gtID][gateInterior]);
		}
	}
	return 1;
}
forward DroppedWeapons_Load();
public DroppedWeapons_Load()
{
    mysql_query(g_SQL, "SELECT * FROM `droppedWeapons`");

	new rows = cache_num_rows();

    printf("» Toplam %d yere atilan silah yüklendi.",rows);

	if (rows)
	{
		new str[50], dpID;
	    for (new i = 0; i < rows; i ++) if (i < MAX_DROPPED_WEAPONS)
	    {
	        cache_get_value_name_int(i, "dID", dpID);

	        DroppedWeapon[dpID][droppedExists] = true;
	        DroppedWeapon[dpID][droppedID] = dpID;

	        cache_get_value_name_int(i, "dPlayer",   DroppedWeapon[dpID][droppedPlayer]);
	        cache_get_value_name_float(i, "dropX",   DroppedWeapon[dpID][droppedPos][0]);
	        cache_get_value_name_float(i, "dropY",   DroppedWeapon[dpID][droppedPos][1]);
	        cache_get_value_name_float(i, "dropZ",   DroppedWeapon[dpID][droppedPos][2]);
	        cache_get_value_name_int(i, "dInterior", DroppedWeapon[dpID][droppedInt]);
	        cache_get_value_name_int(i, "dVw",       DroppedWeapon[dpID][droppedVw]);
	        cache_get_value_name_int(i, "dWeapon",   DroppedWeapon[dpID][droppedWeapon]);
	        cache_get_value_name_int(i, "dAmmo",     DroppedWeapon[dpID][droppedAmmo]);

	        DroppedWeapon[dpID][droppedObject] = CreateDynamicObject(GetWeaponModel(DroppedWeapon[dpID][droppedWeapon]), DroppedWeapon[dpID][droppedPos][0], DroppedWeapon[dpID][droppedPos][1], DroppedWeapon[dpID][droppedPos][2], 93.7, 120.0, 120.0, DroppedWeapon[dpID][droppedInt], DroppedWeapon[dpID][droppedVw]);
	        format(str, sizeof(str), "%s (Mermi: %d)", ReturnWeaponName(DroppedWeapon[dpID][droppedWeapon]), DroppedWeapon[dpID][droppedAmmo]);
	        DroppedWeapon[dpID][droppedText] = CreateDynamic3DTextLabel(str, COLOR_LIGHTBLUE, DroppedWeapon[dpID][droppedPos][0], DroppedWeapon[dpID][droppedPos][1], DroppedWeapon[dpID][droppedPos][2], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, DroppedWeapon[dpID][droppedVw], DroppedWeapon[dpID][droppedInt]);
	    }
    }
    return 1;
}

forward UyusturucuSaticilariniYukle();
public UyusturucuSaticilariniYukle()
{
	new rows = cache_num_rows();

	printf("» Toplam %d uyusturucu saticisi yüklendi.", rows);

	if (rows)
	{
	    new uyID, str[256];

	    for (new i = 0; i < rows; i++)
	    {
	        cache_get_value_name_int(i, "ID", uyID);

            DealerData[uyID][dealerID] = uyID;

            cache_get_value_name_int(i, "Skin", DealerData[uyID][dealerSkin]);
            cache_get_value_name_int(i, "Uyusturucu", DealerData[uyID][dealerDrugs]);
            cache_get_value_name_int(i, "VirtualWorld", DealerData[uyID][dealerVw]);

            cache_get_value_name(i, "Pos", str);

            sscanf(str, "p<|>ffff", DealerData[uyID][dealerX], DealerData[uyID][dealerY], DealerData[uyID][dealerZ], DealerData[uyID][dealerA]);

            DealerData[uyID][dealerActorID] = CreateActor(DealerData[uyID][dealerSkin], DealerData[uyID][dealerX], DealerData[uyID][dealerY], DealerData[uyID][dealerZ], DealerData[uyID][dealerA]);
            SetActorInvulnerable(DealerData[uyID][dealerActorID], 1);
            SetActorVirtualWorld(DealerData[uyID][dealerActorID], DealerData[uyID][dealerVw]);

			format(str, sizeof str, "Uyusturucu Saticisi (%d)\n\n{FFFFFF}{F1C40F}ALT {FFFFFF}tusuna basarak etkilesime geçebilirsiniz.", DealerData[uyID][dealerID]);
			DealerData[uyID][dealerLabel] = CreateDynamic3DTextLabel(str, 0xF1C40FFF, DealerData[uyID][dealerX], DealerData[uyID][dealerY], DealerData[uyID][dealerZ] + 0.25, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);

            Iter_Add(Dealers, uyID);
		}
	}
	return 1;
}
forward Objeleri_Yukle();
public Objeleri_Yukle()
{
    static rows, fields, mesaj[128];
	cache_get_row_count(rows);
	cache_get_field_count(fields);

	for (new i = 0; i < rows; i ++) if(i < MAX_OBJE)
	{
	    Obje[i][objeKullanimda] = true;
/*	    Obje[i][objeID] = cache_get_value_name_int(i, "objeID");
	    Obje[i][objeModelID] = cache_get_value_name_int(i, "objeModel");
	    Obje[i][objeData] = cache_get_value_name_int(i, "objeData");
	    Obje[i][objePos][0] = cache_get_value_name_float(i, "objeX");
	    Obje[i][objePos][1] = cache_get_value_name_float(i, "objeY");
	    Obje[i][objePos][2] = cache_get_value_name_float(i, "objeZ");
	    Obje[i][objePos][3] = cache_get_value_name_float(i, "objeRX");
	    Obje[i][objePos][4] = cache_get_value_name_float(i, "objeRY");
	    Obje[i][objePos][5] = cache_get_value_name_float(i, "objeRZ");*/
	    cache_get_value_name_int(i, "objeID", Obje[i][objeID]);
	    cache_get_value_name_int(i, "objeData", Obje[i][objeData]);
	    cache_get_value_name_int(i, "objeModel", Obje[i][objeModelID]);
	    cache_get_value_name_float(i, "objeX", Obje[i][objePos][0]);
	    cache_get_value_name_float(i, "objeY", Obje[i][objePos][1]);
	    cache_get_value_name_float(i, "objeZ", Obje[i][objePos][2]);
	    cache_get_value_name_float(i, "objeRX", Obje[i][objePos][3]);
	    cache_get_value_name_float(i, "objeRY", Obje[i][objePos][4]);
	    cache_get_value_name_float(i, "objeRZ", Obje[i][objePos][5]);

	    Obje[i][objeData] = CreateDynamicObject(Obje[i][objeModelID], Obje[i][objePos][0], Obje[i][objePos][1], Obje[i][objePos][2], Obje[i][objePos][3], Obje[i][objePos][4], Obje[i][objePos][5], -1, -1, -1, STREAMER_OBJECT_SD, STREAMER_OBJECT_DD, -1, 0);
	}
	if(rows < 1) {
	    format(mesaj, sizeof(mesaj), "[!] 0 adet obje yüklendi.");
	}
	else if(rows > 0) {
		format(mesaj, sizeof(mesaj), "[!] %d adet obje yüklendi.", rows);
	}
	printf(mesaj);
	return 1;
}

forward GiseleriYukle();
public GiseleriYukle()
{
	new rows = cache_num_rows();

	printf("» Toplam %d gise yüklendi.", rows);

	if (rows)
	{
		new gisID, str[512];

		for (new i = 0; i < rows; i++)
		{
		    cache_get_value_name_int(i, "ID", gisID);

		    Gise[gisID][gs_Exists] = true;
		    Gise[gisID][gs_ID] = gisID;

		    Gise[gisID][gs_Durum] = GISE_KAPALI;

		    cache_get_value_name(i, "GatePos", str, sizeof str);
		    sscanf(str, "p<|>ffffff", Gise[gisID][gs_GateBar][0], Gise[gisID][gs_GateBar][1], Gise[gisID][gs_GateBar][2], Gise[gisID][gs_GateBar][3], Gise[gisID][gs_GateBar][4], Gise[gisID][gs_GateBar][5]);

			cache_get_value_name(i, "KapaliPos", str, sizeof str);
		    sscanf(str, "p<|>ffffff", Gise[gisID][gs_Kapali][0], Gise[gisID][gs_Kapali][1], Gise[gisID][gs_Kapali][2], Gise[gisID][gs_Kapali][3], Gise[gisID][gs_Kapali][4], Gise[gisID][gs_Kapali][5]);

            cache_get_value_name(i, "AcikPos", str, sizeof str);
		    sscanf(str, "p<|>ffffff", Gise[gisID][gs_Acik][0], Gise[gisID][gs_Acik][1], Gise[gisID][gs_Acik][2], Gise[gisID][gs_Acik][3], Gise[gisID][gs_Acik][4], Gise[gisID][gs_Acik][5]);

			Gise[gisID][gs_GateObje] = CreateDynamicObject(966, Gise[gisID][gs_GateBar][0], Gise[gisID][gs_GateBar][1], Gise[gisID][gs_GateBar][2], Gise[gisID][gs_GateBar][3], Gise[gisID][gs_GateBar][4], Gise[gisID][gs_GateBar][5]);
			Gise[gisID][gs_Obje] = CreateDynamicObject(968, Gise[gisID][gs_Kapali][0], Gise[gisID][gs_Kapali][1], Gise[gisID][gs_Kapali][2], Gise[gisID][gs_Kapali][3], Gise[gisID][gs_Kapali][4], Gise[gisID][gs_Kapali][5]);

            new Float:ortaKoord[2];

			GetXYInFrontOfToll(Gise[i][gs_GateObje], ortaKoord[0], ortaKoord[1], 3.5);

            format(str, sizeof str, "(%d) [Y tusu]", Gise[i][gs_ID]);
			Gise[i][gs_id] = CreateDynamic3DTextLabel(str, 0xA5A5A5AA, Gise[i][gs_GateBar][0], Gise[i][gs_GateBar][1], Gise[i][gs_GateBar][2]+0.5, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, STREAMER_3D_TEXT_LABEL_SD, -1, 0);
		}
	}

	return 1;
}

forward AraclariYukle();
public AraclariYukle()
{
	mysql_query(g_SQL, "SELECT * FROM `araclar`");
	new rows = cache_num_rows(), aID;

	printf("» Toplam %d araç yüklendi.", rows);

	for (new i = 0; i < rows; i ++)
	{
	    cache_get_value_name_int(i, "aracid",  aID);

	    AracInfo[aID][aracID] = aID;

	    AracInfo[aID][aracExists] = true;

	    cache_get_value_name_int(i, "aracmodel", AracInfo[aID][aracModel]);
	    cache_get_value_name_int(i, "aracowner", AracInfo[aID][aracSahip]);
	    cache_get_value_name_float(i, "aracPosX", AracInfo[aID][aracPos][0]);
	    cache_get_value_name_float(i, "aracPosY", AracInfo[aID][aracPos][1]);
	    cache_get_value_name_float(i, "aracPosZ", AracInfo[aID][aracPos][2]);
	    cache_get_value_name_float(i, "aracPosR", AracInfo[aID][aracPos][3]);
	    cache_get_value_name_int(i, "aracrenk1", AracInfo[aID][aracRenkler][0]);
	    cache_get_value_name_int(i, "aracrenk2", AracInfo[aID][aracRenkler][1]);
	    cache_get_value_name_int(i, "aracpaintjob", AracInfo[aID][aracPaintjob]);
	    cache_get_value_name_int(i, "arackilit", AracInfo[aID][aracKilit]);
     	cache_get_value_name_int(i, "aracvergi", AracInfo[aID][aracVergi]);
     	cache_get_value_name_int(i, "VergiSure", AracInfo[aID][aracVergiSure]);
     	cache_get_value_name_int(i, "aracbaglandi", AracInfo[aID][aracBaglandi]);
     	cache_get_value_name_int(i, "aracbaglandiceza", AracInfo[aID][aracBaglandiCeza]);
     	cache_get_value_name_int(i, "Interior", AracInfo[aID][aracInterior]);
     	cache_get_value_name_int(i, "World", AracInfo[aID][aracWorld]);
     	cache_get_value_name_int(i, "Ceza", AracInfo[aID][aracTicket]);
     	cache_get_value_name_int(i, "CezaSure", AracInfo[aID][aracTicketTime]);
     	cache_get_value_name_int(i, "ElKonuldu", AracInfo[aID][aracElKonuldu]);
     	cache_get_value_name_int(i, "aracfaction", AracInfo[aID][aracFaction]);
     	cache_get_value_name_int(i, "aracfactiontype", AracInfo[aID][aracFactionType]);
     	cache_get_value_name_int(i, "arackira", AracInfo[aID][aracKira]);
    	cache_get_value_name_int(i, "aractip", AracInfo[aID][aracTip]);
    	cache_get_value_name_int(i, "aracsatilik", AracInfo[aID][aracSatilik]);
    	cache_get_value_name(i, "aracplaka", AracInfo[aID][aracPlaka], 24);
    	cache_get_value_name_int(i, "aracfiyat", AracInfo[aID][aracFiyat]);
    	cache_get_value_name_int(i, "uyusturucu", AracInfo[aID][aracUyusturucu]);
    	cache_get_value_name_float(i, "arackm", AracInfo[aID][aracKM]);
    	cache_get_value_name_float(i, "aracbenzin", AracInfo[aID][aracBenzin]);
    	cache_get_value_name_int(i, "Zirh", AracInfo[aID][aracZirh]);
    	cache_get_value_name_int(i, "ZirhVarMi", AracInfo[aID][aracZirhVarMi]);
    	cache_get_value_name_int(i, "Garaj", AracInfo[aID][aracGaraj]);
    	cache_get_value_name_int(i, "TaksiPlaka", AracInfo[aID][TaksiPlaka]);
    	cache_get_value_name_int(i, "aracseviye", AracInfo[aID][aracSeviye]);

		cache_get_value_name_int(i, "aracMod1", AracInfo[aID][aracMods][0]);
		cache_get_value_name_int(i, "aracMod2", AracInfo[aID][aracMods][1]);
		cache_get_value_name_int(i, "aracMod3", AracInfo[aID][aracMods][2]);
		cache_get_value_name_int(i, "aracMod4", AracInfo[aID][aracMods][3]);
		cache_get_value_name_int(i, "aracMod5", AracInfo[aID][aracMods][4]);
		cache_get_value_name_int(i, "aracMod6", AracInfo[aID][aracMods][5]);
		cache_get_value_name_int(i, "aracMod7", AracInfo[aID][aracMods][6]);
		cache_get_value_name_int(i, "aracMod8", AracInfo[aID][aracMods][7]);
		cache_get_value_name_int(i, "aracMod9", AracInfo[aID][aracMods][8]);
		cache_get_value_name_int(i, "aracMod10", AracInfo[aID][aracMods][9]);
		cache_get_value_name_int(i, "aracMod11", AracInfo[aID][aracMods][10]);
		cache_get_value_name_int(i, "aracMod12", AracInfo[aID][aracMods][11]);
		cache_get_value_name_int(i, "aracMod13", AracInfo[aID][aracMods][12]);
		cache_get_value_name_int(i, "aracMod14", AracInfo[aID][aracMods][13]);

		cache_get_value_name_int(i, "aracSilah1", AracInfo[aID][aracSilahlar][0]);
		cache_get_value_name_int(i, "aracSilah2", AracInfo[aID][aracSilahlar][1]);
		cache_get_value_name_int(i, "aracSilah3", AracInfo[aID][aracSilahlar][2]);
		cache_get_value_name_int(i, "aracSilah4", AracInfo[aID][aracSilahlar][3]);
		cache_get_value_name_int(i, "aracSilah5", AracInfo[aID][aracSilahlar][4]);

		cache_get_value_name_int(i, "aracMermi1", AracInfo[aID][aracMermiler][0]);
		cache_get_value_name_int(i, "aracMermi2", AracInfo[aID][aracMermiler][1]);
		cache_get_value_name_int(i, "aracMermi3", AracInfo[aID][aracMermiler][2]);
		cache_get_value_name_int(i, "aracMermi4", AracInfo[aID][aracMermiler][3]);
		cache_get_value_name_int(i, "aracMermi5", AracInfo[aID][aracMermiler][4]);

	    AracInfo[aID][aracKiralayan] = -1;

		Arac_Spawn(AracInfo[aID][aracID]);
	}
	return 1;
}

stock Arac_Spawn(carid, display = 0)
{
	new id = carid;
	new vehicle;

	if (AracInfo[id][aracExists])
	{
		if (IsValidDynamic3DTextLabel(AracInfo[id][aracLabel]))
		{
			UpdateDynamic3DTextLabelText(AracInfo[id][aracLabel], -1, " ");
			DestroyDynamic3DTextLabel(AracInfo[id][aracLabel]);
		}

	    if (IsValidVehicle(AracInfo[id][aracVehicle]))
	        DestroyVehicle(AracInfo[id][aracVehicle]);

		if (AracInfo[id][aracRenkler][0] == -1)
		    AracInfo[id][aracRenkler][0] = random(255);

        if (AracInfo[id][aracRenkler][1] == -1)
		    AracInfo[id][aracRenkler][1] = random(255);

		AracInfo[id][aracVehicle] = CreateVehicle(AracInfo[id][aracModel], AracInfo[id][aracPos][0], AracInfo[id][aracPos][1], AracInfo[id][aracPos][2], AracInfo[id][aracPos][3], AracInfo[id][aracRenkler][0], AracInfo[id][aracRenkler][1], -1);

		if(AracInfo[id][aracTip] == 6)
			AracInfo[id][aracLabel] = CreateDynamic3DTextLabel("[SÜRÜCÜ ADAYI]", COLOR_YELLOW, 0.0, 0.0, 1.0, 30.0, INVALID_PLAYER_ID, AracInfo[id][aracVehicle], 1);

		vehicle = AracInfo[id][aracVehicle];

		CarLastPos[vehicle][0] = AracInfo[id][aracPos][0];
		CarLastPos[vehicle][1] = AracInfo[id][aracPos][1];
		CarLastPos[vehicle][2] = AracInfo[id][aracPos][2];

		AracYuk[vehicle] = 0;
		AracCP[vehicle] = -1;

		LoadedTrash[vehicle] = 0;
		vehRadar[vehicle] = false;

		for (new i = 0; i < 5; i++)
		    TextDrawDestroy(carMDC[vehicle][i]);

		vehRadarLimit[vehicle] = 100;
		KillTimer(timerMDC[vehicle]);

		AracInfo[id][aracDisplay] = true;

		if ((AracInfo[id][aracSahip] != -1) && (!display) && (AracInfo[id][aracKira] == -1) && (AracInfo[id][aracFaction] == -1) && (AracInfo[id][aracSatilik] == 0) && (AracInfo[id][aracTip] == 4) && (AracInfo[id][aracGaraj] == -1))
		{
		    AracInfo[id][aracDisplay] = false;
		    SetVehicleVirtualWorld(vehicle, 1000);
		}


		if (AracInfo[id][aracBaglandi] == 1)
		{
		    AracInfo[id][aracDisplay] = false;
			SetVehicleVirtualWorld(vehicle, 1000);
		}

		if ((AracInfo[id][aracTip] == 3) && (AracInfo[id][aracKira] > 0))
		{
		    SetVehicleParamsEx(vehicle, 0, 0, 0, 0, 0, 0, 0);
		    AracInfo[id][aracKilit] = false;
		    AracInfo[id][aracLabel] = CreateDynamic3DTextLabel("{FFB400}Kiralik Araç", 0xFFFFFFFF, 0.0, -2.16, 0.0, 6.0, INVALID_PLAYER_ID, vehicle, 0, -1, -1, -1, STREAMER_3D_TEXT_LABEL_SD, -1, 0);
		}

		if ((AracInfo[id][aracTip] == 4) && (AracInfo[id][aracSatilik] == 1) && (AracInfo[id][aracKira] > 0))
		{
		    new string[128];
		    format(string, sizeof string, "{2ECC71}SATILIK\n{2ECC71}%s\n{2ECC71}%d", FormatNumber(AracInfo[id][aracFiyat]), GetSQLPhoneNumber(AracInfo[id][aracSahip]));
		    AracInfo[id][aracLabel] = CreateDynamic3DTextLabel(string, -1,0.0, -2.5, 0.4, 30.0, INVALID_PLAYER_ID, vehicle, 1);
		}

		SetVehicleNumberPlate(AracInfo[id][aracVehicle], AracInfo[id][aracPlaka]);

		if (AracInfo[id][aracDisplay] == 1)
		{
		    SetVehicleVirtualWorld(vehicle, AracInfo[id][aracWorld]);
		    LinkVehicleToInteriorEx(vehicle, AracInfo[id][aracInterior]);
		}

		AracInfo[id][aracCamlar] = false;

		AracInfo[id][Taksimetre] = 0;
        AracInfo[id][OturumKazanci] = 0;

		DestroyDynamicObject(AracInfo[id][TaksiObje]);

		format(RadyoLink[vehicle], 128, "");

		if (AracInfo[id][aracVehicle] != INVALID_VEHICLE_ID)
		{
		    for (new i = 0; i < 5; i++)
				if (IsValidDynamicObject(AracTohumObjeler[vehicle][i]))
				    DestroyDynamicObject(AracTohumObjeler[vehicle][i]);

			AracTohumlar[vehicle][0] = 0;
			AracTohumlar[vehicle][1] = 0;
			AracTohumlar[vehicle][2] = 0;

			if (AracInfo[id][aracPaintjob] != -1)
			{
			    ChangeVehiclePaintjob(vehicle, AracInfo[id][aracPaintjob]);
			}

			if (AracInfo[id][aracKilit] == 1)
			{
				new engine, lights, alarm, doors, bonnet, boot, objective;

				GetVehicleParamsEx(vehicle, engine, lights, alarm, doors, bonnet, boot, objective);
			    SetVehicleParamsEx(vehicle, engine, lights, alarm, 1, bonnet, boot, objective);
			}

			if (AracInfo[id][aracSirenAcik] == true)
			{
			    AracInfo[id][aracSirenAcik] = false;
			    DestroyDynamicObject(AracInfo[id][SirenObject]);
			}

			if (AracInfo[id][aracRadar] == true)
			{
				AracInfo[id][aracRadar] = false;
			}

			if ((AracInfo[id][aracFactionType] == BIRLIK_LSPD) || (AracInfo[carid][aracFactionType] == BIRLIK_FBI))
			{
			    PolisAraci[vehicle][Silahlar][0] = 24; // Deagle
			    PolisAraci[vehicle][Mermiler][0] = 80; // Deagle Mermi

			    PolisAraci[vehicle][Silahlar][1] = 29; // MP5
			    PolisAraci[vehicle][Mermiler][1] = 200; // MP5 Mermi

			    PolisAraci[vehicle][Silahlar][2] = 31; // M4
			    PolisAraci[vehicle][Mermiler][2] = 280; // M4 Mermi

			    PolisAraci[vehicle][Silahlar][3] = 25; // Shotgun
			    PolisAraci[vehicle][Mermiler][3] = 100; // Shotgun Mermi

			    PolisAraci[vehicle][Silahlar][4] = 0; // Bos
			    PolisAraci[vehicle][Mermiler][4] = 0;

			    PolisAraci[vehicle][AgriKesici] = 2;
			    PolisAraci[vehicle][CelikYelek] = 2;

			    Beanbag[vehicle] = 1;

			    AracInfo[id][aracZirh] = 50;
			}

			for (new i = 0; i < 14; i ++)
			    if (AracInfo[carid][aracMods][i] > 0)
					AddVehicleComponent(AracInfo[carid][aracVehicle], AracInfo[carid][aracMods][i]);
		}
	}
}

stock Car_GetID2(sqlid)
{
	for (new i = 0; i != MAX_ARAC; i ++)
	{
		if (AracInfo[i][aracExists] && AracInfo[i][aracID] == sqlid)
	    	return i;
	}
	return -1;
}

stock Car_GetID(vehicleid)
{
	for (new i = 0; i != MAX_ARAC; i ++)
	{
		if (AracInfo[i][aracExists] && AracInfo[i][aracVehicle] == vehicleid)
	    	return AracInfo[i][aracID];
	}
	return -1;
}

stock PlakaOlustur(id)
{
    if (id != -1)
    {
        format(AracInfo[id][aracPlaka], 24, "LS %s%s%s %d%d%d",Harfler[random(sizeof(Harfler))], Harfler[random(sizeof(Harfler))], Harfler[random(sizeof(Harfler))], RandomEx(0,9), RandomEx(0,9), RandomEx(0,9));
        SetVehicleNumberPlate(AracInfo[id][aracVehicle], AracInfo[id][aracPlaka]);
    }
    return 1;
}

stock RandomEx(min, max)
	return random(max - min) + min;

stock IsValidVehicleModel(model)
{
	if (model >= 400 && model <= 611)
	{
		return true;
	}
	return false;
}
stock AractanIndir(playerid)
{
	new Float:pos[3];
	GetPlayerPos(playerid,pos[0],pos[1],pos[2]);
	SetPlayerPos(playerid,pos[0],pos[1],pos[2]);
	return 1;
}
stock Log_Write(const path[], const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    File:file,
	    string[1024]
	;
	if ((start = strfind(path, "/")) != -1) {
	    strmid(string, path, 0, start + 1);

	    if (!fexist(string))
	        return printf("** Uyari: Dosya \"%s\" bulunmuyor.", string);
	}
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	file = fopen(path, io_append);

	if (!file)
	    return 0;

	if (args > 8)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 8); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 1024
		#emit PUSH.C string
		#emit PUSH.C args
		#emit SYSREQ.C format

		fwrite(file, string);
		fwrite(file, "\r\n");
		fclose(file);

		#emit LCTRL 5
		#emit SCTRL 4
		#emit RETN
	}
	fwrite(file, str);
	fwrite(file, "\r\n");
	fclose(file);

	return 1;
}

stock ParaVer(playerid,miktar,bildirim = 1)
{
	PlayerData[playerid][pCash] += miktar;
	GivePlayerMoney(playerid,miktar);
	new str[50];
	if (bildirim == 1 && miktar > -1)
	{
	    format(str,sizeof(str), "~g~+$%d",miktar);
	    GameTextForPlayer(playerid,str,750,1);
	}
 	if (bildirim == 1 && miktar < 0)
 	{
 	    format(str,sizeof(str), "~r~$%d",miktar);
	    GameTextForPlayer(playerid,str,750,1);
 	}
	return 1;
}

stock FormatNumber(number, prefix[] = "$")
{
	static
		value[32],
		length;

	format(value, sizeof(value), "%d", (number < 0) ? (-number) : (number));

	if ((length = strlen(value)) > 3)
	{
		for (new i = length, l = 0; --i >= 0; l ++) {
		    if ((l > 0) && (l % 3 == 0)) strins(value, ", ", i + 1);
		}
	}
	if (prefix[0] != 0)
	    strins(value, prefix, 0);

	if (number < 0)
		strins(value, "-", 0);

	return value;
}

stock spamProtect(playerid, const szSpam[], iTime)
{
	static
		s_szPVar[32],
		s_iPVar
	;
	format(s_szPVar, sizeof(s_szPVar), "pv_iSpam_%s", szSpam);

	s_iPVar = GetPVarInt(playerid, s_szPVar);

	if ((GetTickCount() - s_iPVar) < iTime * 1000) {
		return 0;
	} else {
		SetPVarInt(playerid, s_szPVar, GetTickCount());
	}
	return 1;
}

stock GetPlayerID(name[])
{
	new pName[24];
	foreach (new i : Player)
	{
	    GetPlayerName(i, pName, sizeof pName);
		if (strfind(name, pName, true) != -1)
		{
			return i;
		}
	}
	return -1;
}

/*stock BankaBilgileriDialog(playerid)
{
	new string[128],string2[400];
	strcat(string2, "{FF0000}islem\t{FF0000}Miktar\n");
	format(string,sizeof(string), "{FF9900}Para Çek\t{38c5f7}%s\n",FormatNumber(PlayerData[playerid][pBankCash]));
	strcat(string2,string);
	format(string,sizeof(string), "{FF9900}Para Yatir\t{38c5f7}%s\n",FormatNumber(PlayerData[playerid][pBankCash]));
	strcat(string2,string);
	format(string,sizeof(string), "{FF9900}Para Transfer\t{38c5f7}%s\n",FormatNumber(PlayerData[playerid][pBankCash]));
	strcat(string2,string);
	//strcat(string2, "{FF0000}Hesap Sil");
	ShowPlayerDialog(playerid,13,DIALOG_STYLE_TABLIST_HEADERS, "{FF9900}LOS SANTOS BANKA",string2, "Seç", "Kapat");
	return 1;
}*/
stock AdminMessage(color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 8)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 8); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit ADD.C 4
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach (new i : Player)
		{
			if (PlayerData[i][pAdmin] >= 1 && PlayerData[i][pAyarlar][8] == 0) {
  				SendClientMessage(i, color, string);
			}
		}
		return 1;
	}
 foreach (new i : Player)
	{
		if (PlayerData[i][pAdmin] >= 1 && PlayerData[i][pAyarlar][8] == 0) {
			SendClientMessage(i, color, str);
		}
	}
	return 1;
}
stock AdminHelperMessage(color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 8)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 8); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit ADD.C 4
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach (new i : Player)
		{
			if ((PlayerData[i][pAdmin] >= 1 || PlayerData[i][pHelper] >= 1) && PlayerData[i][pAyarlar][8] == 0 || PlayerData[i][pForumGorevlisi] >0 || PlayerData[i][pOyunGorevlisi]>0) {
  				SendClientMessage(i, color, string);
			}
		}
		return 1;
	}
 foreach (new i : Player)
	{
		if ((PlayerData[i][pAdmin] >= 1 || PlayerData[i][pHelper] >= 1) && PlayerData[i][pAyarlar][8] == 0) {
			SendClientMessage(i, color, str);
		}
	}
	return 1;
}

stock ObjelerYukleniyor(playerid)
{
	TogglePlayerControllable(playerid, false);

	SetPVarInt(playerid, "KOSKorumasi", 1);
	TextDrawShowForPlayer(playerid, TDEditor_TD[1]);
	SetTimerEx("objyukleniyor",3500,false, "i",playerid);
	return 1;
}

forward objyukleniyor(playerid);
public objyukleniyor(playerid)
{
	TextDrawHideForPlayer(playerid,TDEditor_TD[1]);
    TogglePlayerControllable(playerid,true);
    SetPVarInt(playerid, "KOSKorumasi", 0);
    TextDrawShowForPlayer(playerid, TDEditor_TD[0]);
    SetTimerEx("objeyuklendi",1000,false, "i",playerid);
	return 1;
}
forward objeyuklendi(playerid);
public objeyuklendi(playerid)
{
	TextDrawHideForPlayer(playerid,TDEditor_TD[0]);
	return 1;
}

stock Ev_MobilyaFiyat(house)
{
	new fiyat;
	foreach (new i: Mobilyalar[house])
	{
	    fiyat += floatround(FurnitureData[house][i][furniturePrice]/2);
	}
	return fiyat;
}

stock Garaj_Olustur(tip[], interior, Float:gX, Float:gY, Float:gZ, world)
{
	for (new i; i < MAX_GARAGE; i++) if (!GarageData[i][gExists])
	{
	    GarageData[i][gExists] = true;
	    GarageData[i][gID] = i;

	    GarageData[i][gKilit] = 1;
	    format(GarageData[i][gSifre], 30, "Yok");
	    GarageData[i][gBirlik] = -1;
	    GarageData[i][gSahip] = -1;
	    GarageData[i][gInterior] = interior;
	    GarageData[i][gPos][0] = gX;
	    GarageData[i][gPos][1] = gY;
	    GarageData[i][gPos][2] = gZ;
	    GarageData[i][gVw] = world;
	    GarageData[i][gParkDurum] = 1;
	    format(GarageData[i][gTip], 20, tip);
	    GarageData[i][gAracLimit] = 0;

		Garaj_Yenile(GarageData[i][gID]);

		new query[256];
		mysql_format(g_SQL, query, sizeof query, "INSERT INTO `garajlar` (`ID`, `Kilit`) VALUES ('%d', '1')", GarageData[i][gID]);
	    mysql_query (g_SQL, query);

		Garaj_Kaydet(GarageData[i][gID]);
		return GarageData[i][gID];
	}
	return -1;
}

Entrance_Inside(playerid)
{
	new vw;
	for (new i = 0; i != MAX_ENTRANCES; i ++)
	if (EntranceData[i][entranceExists] && GetPlayerInterior(playerid) == EntranceData[i][entranceInterior] && IsPlayerInRangeOfPoint(playerid, 2.5, EntranceData[i][entranceInt][0], EntranceData[i][entranceInt][1], EntranceData[i][entranceInt][2]))
	{
	    if (EntranceData[i][entranceInteriorVw] != -1)
			vw = EntranceData[i][entranceInteriorVw];
	    else
			vw = i+100;
	    if (EntranceData[i][entranceBaglanti] != -1)
			vw = EntranceData[i][entranceBaglanti]+23;

	    if (GetPlayerVirtualWorld(playerid) == vw) return i;
	}
    return -1;
}


stock hastaneDongu(playerid,miktar)
{
	PlayerData[playerid][pCash] += miktar;
	GivePlayerMoney(playerid,miktar);

	return 1;
}

Entrance_Nearest(playerid)
{
    for (new i = 0; i != MAX_ENTRANCES; i ++) if (EntranceData[i][entranceExists] && IsPlayerInRangeOfPoint(playerid, 2.5, EntranceData[i][entrancePos][0], EntranceData[i][entrancePos][1], EntranceData[i][entrancePos][2]))
    {
        if (GetPlayerInterior(playerid) == EntranceData[i][entranceExterior] && GetPlayerVirtualWorld(playerid) == EntranceData[i][entranceExteriorVW])
            return i;
    }
    return -1;
}
forward GarajlariYukle();
public GarajlariYukle()
{
    mysql_query(g_SQL, "SELECT * FROM `garajlar`");

	new rows = cache_num_rows();

    printf("» Toplam %d garaj yüklendi.", rows);

    if (rows)
    {
        new grID;
	    for (new i = 0; i < rows; i ++)
	    {
	        cache_get_value_name_int(i, "ID", grID);

	        GarageData[grID][gExists] = true;
	        GarageData[grID][gID] = grID;

	        cache_get_value_name_int(i, "Kilit", GarageData[grID][gKilit]);
	        cache_get_value_name(i, "Sifre", GarageData[grID][gSifre], 30);
	        cache_get_value_name_int(i, "Birlik", GarageData[grID][gBirlik]);
	        cache_get_value_name_int(i, "Sahip", GarageData[grID][gSahip]);
	        cache_get_value_name_float(i, "garageX", GarageData[grID][gPos][0]);
	        cache_get_value_name_float(i, "garageY", GarageData[grID][gPos][1]);
	        cache_get_value_name_float(i, "garageZ", GarageData[grID][gPos][2]);
	        cache_get_value_name_int(i, "VirtualWorld", GarageData[grID][gVw]);
	        cache_get_value_name_int(i, "interior", GarageData[grID][gInterior]);
	        cache_get_value_name_int(i, "parkdurum", GarageData[grID][gParkDurum]);
	        cache_get_value_name(i, "Tip", GarageData[grID][gTip], 20);
	        cache_get_value_name_int(i, "AracLimit", GarageData[grID][gAracLimit]);
	    }

	    for (new i; i < MAX_GARAGE; i++) if (GarageData[i][gExists] == true)
	    {
	        Garaj_Yenile(GarageData[i][gID]);
	    }
    }
	return 1;
}
stock Garaj_Kaydet(id)
{
	new query[500];
	format(query, sizeof(query), "UPDATE `garajlar` SET `Kilit` = '%d', `Sifre` = '%s', `Sahip` = '%d', `Birlik` = '%d', `garageX` = '%.2f', `garageY` = '%.2f', `garageZ` = '%.2f', `VirtualWorld` = '%d'",
	GarageData[id][gKilit], GarageData[id][gSifre], GarageData[id][gSahip], GarageData[id][gBirlik], GarageData[id][gPos][0], GarageData[id][gPos][1], GarageData[id][gPos][2], GarageData[id][gVw]);
	format(query, sizeof(query), "%s, `parkdurum` = '%d', `interior` = '%d', `Tip` = '%s', `AracLimit` = '%d' WHERE `ID` = '%d'", query, GarageData[id][gParkDurum], GarageData[id][gInterior], GarageData[id][gTip], GarageData[id][gAracLimit], GarageData[id][gID]);
	mysql_query(g_SQL, query, false);
	return 1;
}
stock Garaj_Yenile(id)
{
    if (IsValidDynamic3DTextLabel(GarageData[id][gText]))
   	{
    	DestroyDynamic3DTextLabel(GarageData[id][gText]);
    }
    if (IsValidDynamicPickup(GarageData[id][gPickup]))
    {
    	DestroyDynamicPickup(GarageData[id][gPickup]);
    }

    new str[180], durum[30];
    if (GarageData[id][gKilit] == 1) durum = "{ff0000}Kilitli";
    else durum = "{1dff00}Açýk";
    if (strcmp(GarageData[id][gSifre], "Yok", true)) durum = "{ff0000}sifreli";
    if (GarageData[id][gSahip] == -1 && GarageData[id][gBirlik] == -1)
    {
         format(str, sizeof(str), "{E74C3C}[Garaj]\n{E74C3C}Tip: {FFFFFF}%s\n{E74C3C}Sahip: {FFFFFF}Yok\n{E74C3C}Durum: %s\n{FFFFFF}%d, %s, %s", GarageData[id][gTip], (GarageData[id][gKilit] == 1) ? ("{ff0000}Kilitli") : ("{1dff00}Açýk"), id, GetLocation(GarageData[id][gPos][0], GarageData[id][gPos][1], GarageData[id][gPos][2]), GetCityName(GarageData[id][gPos][0], GarageData[id][gPos][1], GarageData[id][gPos][2]));
    }
    else if (GarageData[id][gSahip] != -1)
    {
        format(str, sizeof(str), "{E74C3C}[Garaj]\n{E74C3C}Tip: {FFFFFF}%s\n{E74C3C}Sahip: {FFFFFF}%s\n{E74C3C}Durum: %s\n{FFFFFF}%d, %s, %s", GarageData[id][gTip], SQLName(GarageData[id][gSahip], 0),(GarageData[id][gKilit] == 1) ? ("{ff0000}Kilitli") : ("{1dff00}Açýk"), id, GetLocation(GarageData[id][gPos][0], GarageData[id][gPos][1], GarageData[id][gPos][2]), GetCityName(GarageData[id][gPos][0], GarageData[id][gPos][1], GarageData[id][gPos][2]));
    }
    else if (GarageData[id][gBirlik] != -1)
    {
        format(str, sizeof(str), "{E74C3C}[Garaj]\n{E74C3C}Tip: {FFFFFF}%s\n{E74C3C}Sahip: {FFFFFF}%s\n{E74C3C}Durum: %s\n{FFFFFF}%d, %s, %s", GarageData[id][gTip], Birlikler[GarageData[id][gBirlik]][birlikAd],(GarageData[id][gKilit] == 1) ? ("{ff0000}Kilitli") : ("{1dff00}Açýk"), id, GetLocation(GarageData[id][gPos][0], GarageData[id][gPos][1], GarageData[id][gPos][2]), GetCityName(GarageData[id][gPos][0], GarageData[id][gPos][1], GarageData[id][gPos][2]));
    }
    GarageData[id][gText] = CreateDynamic3DTextLabel(str, -1, GarageData[id][gPos][0], GarageData[id][gPos][1], GarageData[id][gPos][2], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, GarageData[id][gVw]);
    GarageData[id][gPickup] = CreateDynamicPickup(19133, 23, GarageData[id][gPos][0], GarageData[id][gPos][1], GarageData[id][gPos][2], GarageData[id][gVw]);
    return 1;
}

forward BinalariYukle();
public BinalariYukle()
{
    mysql_query(g_SQL, "SELECT * FROM `entrances`");

	new rows = cache_num_rows();
	printf("» Toplam %d bina yüklendi.", rows);

	if (rows)
	{
	    new entID;
	    for (new i = 0; i < rows; i ++)
	    {
	        cache_get_value_name_int(i, "entranceID", entID);

	        EntranceData[entID][entranceExists] = true;
	        EntranceData[entID][entranceID] = entID;

	        cache_get_value_name(i, "entranceName", EntranceData[entID][entranceName], 32);
	        cache_get_value_name(i, "entrancePass", EntranceData[entID][entrancePass], 32);
	        cache_get_value_name_int(i, "entranceIcon", EntranceData[entID][entranceIcon]);
	        cache_get_value_name_int(i, "entrancepIcon", EntranceData[entID][entrancepIcon]);
	        cache_get_value_name_int(i, "entranceLocked", EntranceData[entID][entranceLocked]);
	        cache_get_value_name_int(i, "entranceInteriorVw", EntranceData[entID][entranceInteriorVw]);
	        cache_get_value_name_int(i, "entranceBaglanti", EntranceData[entID][entranceBaglanti]);
	        cache_get_value_name_float(i, "entrancePosX", EntranceData[entID][entrancePos][0]);
	        cache_get_value_name_float(i, "entrancePosY", EntranceData[entID][entrancePos][1]);
	        cache_get_value_name_float(i, "entrancePosZ", EntranceData[entID][entrancePos][2]);
			cache_get_value_name_float(i, "entrancePosA", EntranceData[entID][entrancePos][3]);
			cache_get_value_name_float(i, "entranceIntX", EntranceData[entID][entranceInt][0]);
			cache_get_value_name_float(i, "entranceIntY", EntranceData[entID][entranceInt][1]);
			cache_get_value_name_float(i, "entranceIntZ", EntranceData[entID][entranceInt][2]);
			cache_get_value_name_float(i, "entranceIntA", EntranceData[entID][entranceInt][3]);
			cache_get_value_name_int(i, "entranceInterior", EntranceData[entID][entranceInterior]);
			cache_get_value_name_int(i, "entranceExterior", EntranceData[entID][entranceExterior]);
			cache_get_value_name_int(i, "entranceExteriorVW", EntranceData[entID][entranceExteriorVW]);
			cache_get_value_name_int(i, "evip", EntranceData[entID][eVip]);

	        Entrance_Refresh(EntranceData[entID][entranceID]);
	    }
    }
    return 1;
}

Entrance_Refresh(entranceid)
{
    if (entranceid != -1 && EntranceData[entranceid][entranceExists])
    {
        if (IsValidDynamic3DTextLabel(EntranceData[entranceid][entranceText3D]))
            DestroyDynamic3DTextLabel(EntranceData[entranceid][entranceText3D]);

        if (IsValidDynamicPickup(EntranceData[entranceid][entrancePickup]))
            DestroyDynamicPickup(EntranceData[entranceid][entrancePickup]);

        if (IsValidDynamicMapIcon(EntranceData[entranceid][entranceMapIcon]))
            DestroyDynamicMapIcon(EntranceData[entranceid][entranceMapIcon]);


		new str[124];
		format(str, sizeof(str), "%s\n\n%d, %s, %s", EntranceData[entranceid][entranceName], entranceid, GetLocation(EntranceData[entranceid][entrancePos][0], EntranceData[entranceid][entrancePos][1], EntranceData[entranceid][entrancePos][2]), GetCityName(EntranceData[entranceid][entrancePos][0], EntranceData[entranceid][entrancePos][1], EntranceData[entranceid][entrancePos][2]));
        EntranceData[entranceid][entranceText3D] = CreateDynamic3DTextLabel(str, 0xC17426FF, EntranceData[entranceid][entrancePos][0], EntranceData[entranceid][entrancePos][1], EntranceData[entranceid][entrancePos][2]+0.5, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, EntranceData[entranceid][entranceExteriorVW], EntranceData[entranceid][entranceExterior]);
        EntranceData[entranceid][entrancePickup] = CreateDynamicPickup(EntranceData[entranceid][entrancepIcon], 23, EntranceData[entranceid][entrancePos][0], EntranceData[entranceid][entrancePos][1], EntranceData[entranceid][entrancePos][2] - 0.3, EntranceData[entranceid][entranceExteriorVW], EntranceData[entranceid][entranceExterior]);

        if (EntranceData[entranceid][entranceIcon] != 0)
            EntranceData[entranceid][entranceMapIcon] = CreateDynamicMapIcon(EntranceData[entranceid][entrancePos][0], EntranceData[entranceid][entrancePos][1], EntranceData[entranceid][entrancePos][2], EntranceData[entranceid][entranceIcon], 0, EntranceData[entranceid][entranceExteriorVW], EntranceData[entranceid][entranceExterior]);
    }
    return 1;
}

stock Entrance_Create(playerid, name[])
{
    static
        Float:x,
        Float:y,
        Float:z,
        Float:angle;

    if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
    {
        for (new i = 0; i != MAX_ENTRANCES; i ++)
        {
            if (!EntranceData[i][entranceExists])
            {
                EntranceData[i][entranceExists] = true;
                EntranceData[i][entranceID] = i;

                EntranceData[i][entranceIcon] = 0;
                EntranceData[i][entrancepIcon] = 19132;
                EntranceData[i][entranceLocked] = 0;

                format(EntranceData[i][entranceName], 32, name);
                EntranceData[i][entrancePass][0] = 0;

                EntranceData[i][entrancePos][0] = x;
                EntranceData[i][entrancePos][1] = y;
                EntranceData[i][entrancePos][2] = z;
                EntranceData[i][entrancePos][3] = angle;

                EntranceData[i][entranceInt][0] = x;
                EntranceData[i][entranceInt][1] = y;
                EntranceData[i][entranceInt][2] = z + 10000;
                EntranceData[i][entranceInt][3] = 0.0000;

                EntranceData[i][entranceInterior] = 0;
                EntranceData[i][entranceExterior] = GetPlayerInterior(playerid);
                EntranceData[i][entranceExteriorVW] = GetPlayerVirtualWorld(playerid);
				EntranceData[i][entranceInteriorVw] = -1;
				EntranceData[i][entranceBaglanti] = -1;

                new query[256];
                mysql_format(g_SQL, query, sizeof query, "INSERT INTO `entrances` (`entranceID`, `entranceLocked`, `entrancepIcon`) VALUES ('%d', '0', '19132')", EntranceData[i][entranceID]);
                mysql_query (g_SQL, query);

                Entrance_Refresh(EntranceData[i][entranceID]);
    			Entrance_Save(EntranceData[i][entranceID]);
				return EntranceData[i][entranceID];
            }
        }
    }
    return -1;
}

Entrance_Save(entranceid)
{
    static query[1100];

		format(query, sizeof(query), "UPDATE `entrances` SET `entranceName` = '%s', `entranceInteriorVw` = '%d', `entrancePass` = '%s', `entranceIcon` = '%d', `entranceLocked` = '%d', `entrancePosX` = '%.4f', `entrancePosY` = '%.4f', `entrancePosZ` = '%.4f', `entrancePosA` = '%.4f'",
        SQL_ReturnEscaped(EntranceData[entranceid][entranceName]),
        EntranceData[entranceid][entranceInteriorVw],
        SQL_ReturnEscaped(EntranceData[entranceid][entrancePass]),
        EntranceData[entranceid][entranceIcon],
        EntranceData[entranceid][entranceLocked],
        EntranceData[entranceid][entrancePos][0],
        EntranceData[entranceid][entrancePos][1],
        EntranceData[entranceid][entrancePos][2],
        EntranceData[entranceid][entrancePos][3]
    );

    format(query, sizeof(query), "%s, `entranceIntX` = '%.4f', `entranceIntY` = '%.4f', `entranceIntZ` = '%.4f', `entranceIntA` = '%.4f', `entranceInterior` = '%d', `entranceExterior` = '%d', `entranceExteriorVW` = '%d', `entranceBaglanti` = '%d', `evip` = '%d' WHERE `entranceID` = '%d'",
    query,
    EntranceData[entranceid][entranceInt][0],
   	EntranceData[entranceid][entranceInt][1],
    EntranceData[entranceid][entranceInt][2],
    EntranceData[entranceid][entranceInt][3],
    EntranceData[entranceid][entranceInterior],
    EntranceData[entranceid][entranceExterior],
    EntranceData[entranceid][entranceExteriorVW],
    EntranceData[entranceid][entranceBaglanti],
    EntranceData[entranceid][eVip],
    EntranceData[entranceid][entranceID]);

    mysql_tquery(g_SQL, query);

    mysql_format(g_SQL, query, sizeof query, "UPDATE `entrances` SET `entrancepIcon` = '%d' WHERE `entranceID` = '%d'", EntranceData[entranceid][entrancepIcon], EntranceData[entranceid][entranceID]);
	mysql_query (g_SQL, query);
	return 1;
}
NPC_Save(id)
{
	new query[1500];
	format(query, sizeof(query), "UPDATE `npcler` SET `npcAd` = '%s', `npcSkin` = '%d', `npcX` = '%.4f', `npcY` = '%.4f', `npcZ` = '%.4f', `npcA` = '%.4f', `npcVw` = '%d', `Secenek1` = '%s', `Secenek1Cevap` = '%s', `Secenek2` = '%s', `Secenek2Cevap` = '%s', `Secenek3` = '%s'",
	SQL_ReturnEscaped(NPCBilgi[id][npcAd]),
	NPCBilgi[id][npcSkin],
	NPCBilgi[id][npcPos][0],
	NPCBilgi[id][npcPos][1],
	NPCBilgi[id][npcPos][2],
	NPCBilgi[id][npcPos][3],
	NPCBilgi[id][npcVw],
	SQL_ReturnEscaped(NPCSecenekler[id][0]),
	SQL_ReturnEscaped(NPCSecenekCevaplar[id][0]),
	SQL_ReturnEscaped(NPCSecenekler[id][1]),
	SQL_ReturnEscaped(NPCSecenekCevaplar[id][1]),
	SQL_ReturnEscaped(NPCSecenekler[id][2]));
	format(query, sizeof(query), "%s, `Secenek3Cevap` = '%s', `Secenek4` = '%s', `Secenek4Cevap` = '%s', `Secenek5` = '%s', `Secenek5Cevap` = '%s' WHERE `npcID` = '%d'",
	query,
	SQL_ReturnEscaped(NPCSecenekCevaplar[id][2]),
	SQL_ReturnEscaped(NPCSecenekler[id][3]),
	SQL_ReturnEscaped(NPCSecenekCevaplar[id][3]),
	SQL_ReturnEscaped(NPCSecenekler[id][4]),
	SQL_ReturnEscaped(NPCSecenekCevaplar[id][4]),
	NPCBilgi[id][npcID]);
	mysql_query(g_SQL, query, false);
	return 1;
}

stock OyundaDegil(playerid)
{
	if (!IsPlayerConnected(playerid) || GetPVarInt(playerid, "Logged") == 0)
	{
	    return 0;
	}
	return 1;
}
stock SendNearbyMessage2(playerid, Float:radius, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 16)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 16); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit CONST.alt 4
		#emit SUB
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach (new i : Player)
		{
			if (IsPlayerNearPlayer(i, playerid, radius) && i != playerid) {
  				SendClientMessage(i, color, string);
			}
		}
		return 1;
	}
 foreach (new i : Player)
	{
		if (IsPlayerNearPlayer(i, playerid, radius) && i != playerid) {
			SendClientMessage(i, color, str);
		}
	}
	return 1;
}
stock SendNearbyMessageEx(playerid, Float:radius, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 16)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 16); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit CONST.alt 4
		#emit SUB
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach (new i : Player)
		{
			if (IsPlayerNearPlayer(i, playerid, radius)) {
  				SendClientMessage(i, color, string);
			}
		}
		return 1;
	}
 foreach (new i : Player)
	{
		if (IsPlayerNearPlayer(i, playerid, radius)) {
			SendClientMessage(i, color, str);
		}
	}
	return 1;
}
stock SendNearbyMessage(playerid, Float:radius, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 16)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 16); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit CONST.alt 4
		#emit SUB
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach (new i : Player)
		{
			if (IsPlayerNearPlayer(i, playerid, radius)) {
  				SendClientMessage(i, color, string);
			}
		}
		return 1;
	}
 foreach (new i : Player)
	{
		if (IsPlayerNearPlayer(i, playerid, radius)) {
			SendClientMessage(i, color, str);
		}
	}
	return 1;
}
stock IsPlayerNearPlayer(playerid, targetid, Float:radius)
{
	static
		Float:fX,
		Float:fY,
		Float:fZ;

	GetPlayerPos(targetid, fX, fY, fZ);

	return (GetPlayerInterior(playerid) == GetPlayerInterior(targetid) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(targetid)) && IsPlayerInRangeOfPoint(playerid, radius, fX, fY, fZ);
}

stock Oyuncu_Kaydet(playerid, disconnect=1)
{
	if (GetPVarInt(playerid, "Logged") == 0)
		return 1;

	new query[6000];
	new Float:pos[3], birliksqlid;
	if (PlayerData[playerid][pFaction] == -1) birliksqlid = -1;
	else birliksqlid = Birlikler[PlayerData[playerid][pFaction]][birlikID];
	if (GetPVarInt(playerid, "inPaintball") == 0) GetPlayerPos(playerid,pos[0],pos[1],pos[2]);
	else
	{
	    pos[0] = 1170.9122;
	    pos[1] = -1489.6418;
	    pos[2] = 22.7551;
	    SetPlayerVirtualWorld(playerid, 0);
	    SetPlayerInterior(playerid, 0);
	}
	GetPlayerHealth(playerid,PlayerData[playerid][pHealth]);
	GetPlayerArmour(playerid,PlayerData[playerid][pArmour]);

	format(query, sizeof(query), "UPDATE `oyuncular` SET `Yas` = '%d', `Cinsiyet` = '%d', `DogumYeri` = '%s', `Skin` = '%d', `TenRengi` = '%d', `CikisInt` = '%d', `CikisX` = '%f', `CikisY` = '%f', `CikisZ` = '%f', `CikisWorld` = '%d', `AdminLevel` = '%d', `Helper` = '%d', `oyungorevlisi` = '%d', `forumgorevlisi` = '%d', `Cash` = '%d', `AdminName` = '%s', `Ehliyet` = '%d', `MotorEhliyet` = '%d'",
	PlayerData[playerid][pYas],
	PlayerData[playerid][pCinsiyet],
	PlayerData[playerid][pDogum],
	PlayerData[playerid][pSkin],
	PlayerData[playerid][pTen],
	GetPlayerInterior(playerid),
	pos[0],
	pos[1],
	pos[2],
	GetPlayerVirtualWorld(playerid),
	PlayerData[playerid][pAdmin],
	PlayerData[playerid][pHelper],
	PlayerData[playerid][pOyunGorevlisi],
	PlayerData[playerid][pForumGorevlisi],
	PlayerData[playerid][pCash],
	PlayerData[playerid][pAdminName],
	PlayerData[playerid][pEhliyet],
	PlayerData[playerid][pMotorEhliyet]);

	format(query, sizeof(query), "%s, `House` = '%d',`Business` = '%d',`Birlik` = '%d',`BirlikRutbe` = '%d',`BirlikDivizyon` = '%d', `Su` = '%d', `Health` = '%.4f', `Armour` = '%.4f',`OnDuty` = '%d',`OnDutySkin` = '%d', `Aranma` = '%d', `Hapis` = '%d', `HapisSure` = '%d', `HapisSebep` = '%s', `HapiseAtan` = '%s', `Telefon` = '%d'",
	query,
	PlayerData[playerid][pHouse],
	PlayerData[playerid][pIsyeri],
	PlayerData[playerid][pFaction],
	PlayerData[playerid][pFactionRutbe],
	PlayerData[playerid][pFactionDivizyon],
	PlayerData[playerid][pSu],
	PlayerData[playerid][pHealth],
	PlayerData[playerid][pArmour],
	PlayerData[playerid][pOnDuty],
	PlayerData[playerid][pOnDutySkin],
	PlayerData[playerid][pAranma],
 	PlayerData[playerid][pHapis],
 	PlayerData[playerid][pHapisSure],
 	PlayerData[playerid][pHapisSebep],
 	PlayerData[playerid][pHapiseAtan],
    PlayerData[playerid][pTelefon]);
    new a;
    for (new i = 0; i < 13; i ++) {
        if (i<10)
	    {
		    format(query,sizeof(query), "%s, `Balik%d` = '%d',`BalikGram%d` = '%d'",query, i+1,PlayerData[playerid][pBalikID][i],i+1,PlayerData[playerid][pBalikGram][i]);
	    }
	    GetPlayerWeaponData(playerid, i, a, PlayerData[playerid][pMermiler][i]);
	    format(query, sizeof(query), "%s, `Silah%d` = '%d', `Mermi%d` = '%d'", query, i + 1, PlayerData[playerid][pSilahlar][i], i + 1, PlayerData[playerid][pMermiler][i]);
	}

    format(query, sizeof(query), "%s, `Tarife` = '%d', `KalanDK` = '%d', `KalanSMS` = '%d', `KalanNet` = '%d', `TarifeSure` = '%d', `Bitcoin` = '%d', `Boombox` = '%d', `Radyo` = '%d', `Frekans` = '%d', `Materyal` = '%d', `SilahHakki` = '%d', `SilahSuresi` = '%d', `Level` = '%d', `EXP` = '%d', `MaasSure` = '%d', `OynamaSaati` = '%d', `Maas` = '%d', `Dinle` = '%d'",
    query,
    PlayerData[playerid][pTarife],
	PlayerData[playerid][pTarifeKalan][0],
	PlayerData[playerid][pTarifeKalan][1],
	PlayerData[playerid][pTarifeKalan][2],
	PlayerData[playerid][pTarifeSure],
	PlayerData[playerid][pBitcoin],
	PlayerData[playerid][pBoombox],
	PlayerData[playerid][pRadyo],
	PlayerData[playerid][pFrekans],
	PlayerData[playerid][pMateryal],
	PlayerData[playerid][pSilahHakki],
	PlayerData[playerid][pSilahSuresi],
	PlayerData[playerid][pLevel],
    PlayerData[playerid][pEXP],
	PlayerData[playerid][pMaasSure],
	PlayerData[playerid][pOynamaSaati],
	PlayerData[playerid][pMaas],
	PlayerData[playerid][pDinle]);

	format(query, sizeof(query), "%s, `Zar` = '%d', `Sigara` = '%d', `ip` = '%d',`GozBagi` = '%d', `Maske` = '%d', `BenzinKutusu` = '%d', `Barbeku` = '%d', `Kofte` = '%d', `Tavuk` = '%d', `Dana` = '%d', `TamirKiti` = '%d', `Cadir` = '%d', `KampAtes` = '%d', `Sarjor` = '%d', `YanKeski` = '%d', `SeferSayi` = '%d'",
	query,
	PlayerData[playerid][pEsyalar][0],
	PlayerData[playerid][pEsyalar][1],
	PlayerData[playerid][pEsyalar][2],
    PlayerData[playerid][pEsyalar][3],
    PlayerData[playerid][pEsyalar][4],
    PlayerData[playerid][pEsyalar][5],
    PlayerData[playerid][pEsyalar][6],
    PlayerData[playerid][pEsyalar][7],
    PlayerData[playerid][pEsyalar][8],
    PlayerData[playerid][pEsyalar][9],
    PlayerData[playerid][pEsyalar][10],
    PlayerData[playerid][pEsyalar][11],
    PlayerData[playerid][pEsyalar][12],
    PlayerData[playerid][pEsyalar][13],
    PlayerData[playerid][pEsyalar][14],
	PlayerData[playerid][pSeferSayi]);

    format(query, sizeof(query), "%s, `Bagimlilik` = '%d', `TasimacilikSeviye` = '%d', `TasimacilikSefer` = '%d', `Garage` = '%d', `Bakiye` = '%d', `EXPBoost` = '%d', `BalikOrani` = '%d', `Vip` = '%d', `VipSure` = '%d', `DovusStili` = '%d', `MaskeID` = '%d', `MaskeHakki` = '%d', `Ayarlar` = '%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d'",
    query,
    PlayerData[playerid][pBagimlilik],
    PlayerData[playerid][pTasimacilikSeviye],
    PlayerData[playerid][pTasimacilikSefer],
    PlayerData[playerid][pGarage],
    PlayerData[playerid][pBakiye],
    PlayerData[playerid][pEXPBoost],
    PlayerData[playerid][pBalikOrani],
    PlayerData[playerid][pVip],
    PlayerData[playerid][pVipSure],
    PlayerData[playerid][pDovusStili],
    PlayerData[playerid][pMaskeID],
    PlayerData[playerid][pMaskeHakki],
    PlayerData[playerid][pAyarlar][0],
    PlayerData[playerid][pAyarlar][1],
    PlayerData[playerid][pAyarlar][2],
    PlayerData[playerid][pAyarlar][3],
    PlayerData[playerid][pAyarlar][4],
    PlayerData[playerid][pAyarlar][5],
    PlayerData[playerid][pAyarlar][6],
    PlayerData[playerid][pAyarlar][7],
    PlayerData[playerid][pAyarlar][8],
    PlayerData[playerid][pAyarlar][9],
    PlayerData[playerid][pAyarlar][10],
    PlayerData[playerid][pAyarlar][11],
    PlayerData[playerid][pAyarlar][12],
    PlayerData[playerid][pAyarlar][13],
    PlayerData[playerid][pAyarlar][14]);

    format(query, sizeof(query), "%s, `BirlikSQLID` = '%d', `Baygin` = '%d', `BayginSure` = '%d', `Partner` = '%d', `hddserial` = '%s', `Hediye` = '%d', `HediyeSaat` = '%d', `Youtuber` = '%d', `Oyunda` = '%d', `Oldurme` = '%d', `Olme` = '%d', `TalepSayi` = '%d', `Mekanik` = '%d', `CK` = '%d', `Probation` = '%d', `Parca0` = '%d', `Parca1` = '%d', `Parca2` = '%d'",
    query,
	birliksqlid,
    PlayerData[playerid][pBaygin],
    PlayerData[playerid][pBayginSure],
    PlayerData[playerid][pPartner],
    PlayerData[playerid][pSerial],
    PlayerData[playerid][pHediye],
    PlayerData[playerid][pHediyeSaat],
    PlayerData[playerid][pYoutuber],
    disconnect,
    PlayerData[playerid][pOldurme],
    PlayerData[playerid][pOlme],
    PlayerData[playerid][pTalepSayi],
    PlayerData[playerid][pMekanik],
    PlayerData[playerid][pCK],
    PlayerData[playerid][pProbation],
	PlayerData[playerid][pSilahParca][0],
	PlayerData[playerid][pSilahParca][1],
	PlayerData[playerid][pSilahParca][2]);

    format(query, sizeof(query), "%s, `portakaltohum` = '%d', `elmatohum` = '%d', `armuttohum` = '%d',`SilahAlmaSayisi` = '%d', `SilahAlma` = '%d' WHERE `ID` = '%d'",
    query,
    PlayerData[playerid][pTohumlar][0],
	PlayerData[playerid][pTohumlar][1],
	PlayerData[playerid][pTohumlar][2],
	PlayerData[playerid][pSilahAlmaSayisi],
    PlayerData[playerid][pSilahAlma],
	PlayerData[playerid][pID]);

	mysql_tquery(g_SQL, query, "OyuncuKaydedildi", "d", playerid);

	mysql_format(g_SQL, query, sizeof query, "UPDATE `oyuncular` SET `Kelepce` = '%d' WHERE `ID` = '%d'", PlayerData[playerid][pKelepce], PlayerData[playerid][pID]);
	mysql_query (g_SQL, query);

/*	mysql_format(g_SQL, query, sizeof query, "UPDATE `oyuncular` SET `Meslek` = '%d' WHERE `ID` = '%d'", Meslek[playerid], PlayerData[playerid][pID]);
	mysql_query (g_SQL, query);

	mysql_format(g_SQL, query, sizeof query, "UPDATE `oyuncular` SET `Yemler` = '%d|%d|%d' WHERE `ID` = '%d'", PlayerData[playerid][pYemTurleri][KARIDES], PlayerData[playerid][pYemTurleri][SULUNES], PlayerData[playerid][pYemTurleri][EKMEK_KIRINTISI], PlayerData[playerid][pID]);
	mysql_query (g_SQL, query);*/
	return 1;
}

forward OyuncuKaydedildi(playerid);
public OyuncuKaydedildi(playerid)
{
	new rows = cache_affected_rows();

	if(!rows)
		printf("%s kullanici verilerinde degisiklik olmadi.", ReturnName(playerid));

	else printf("%s kullanici verileri kaydedildi.", ReturnName(playerid));

	return 1;
}

forward Login(playerid);
public Login(playerid)
{
	new rows = cache_num_rows();

	new string[512], baslik[64];

	if (!rows)
	{
	    if (GetPVarInt(playerid, "wrongpass") >= 5)
		{
		    new sqlid = GetPlayerSQLIDWithName(ReturnName(playerid));
		    BildirimEkle(sqlid, "Birisi hesabýnýza girmeye çalýþtý.", "Sistem");
		    HataMesajGonder(playerid, "5 defa yanlýþ þifre girildiði için atýldýnýz.");
			return Kick(playerid);
		}

	    SetPVarInt(playerid, "wrongpass", GetPVarInt(playerid, "wrongpass") +1);

		HataMesajGonder(playerid, "Yanlýþ þifre girdiniz. (%d / 5 )", GetPVarInt(playerid, "wrongpass"));
		format(baslik, sizeof baslik, "{ffffff}Karakter Doðrulama - %s", ReturnName(playerid, 0));
	    format(string, sizeof string, "{FFFFFF}Los Angeles'a tekrardan hoþ geldin, {C3C3C3}%s.\n\n{FFFFFF}Bu hesabýn sizin olduðunu doðrulayabilmemiz için \nþifrenizi girin.\n\n{ff0000}Yanlýþ þifre girdiniz, tekrar denemeniz gerekiyor.",ReturnName(playerid,0),ReturnName(playerid,0));
		Dialog_Show(playerid, Giris, DIALOG_STYLE_PASSWORD, baslik, string, "Doðrula", "Ýptal");
	}
 	if(rows)
	{
	    cache_get_value_name_int(0, "ID",PlayerData[playerid][pID]);
	    cache_get_value_name_int(0, "Yas",PlayerData[playerid][pYas]);
	    cache_get_value_name_int(0, "Cinsiyet",PlayerData[playerid][pCinsiyet]);
	    cache_get_value_name(0, "DogumYeri",PlayerData[playerid][pDogum], 30);
	    cache_get_value_name_int(0, "TenRengi",PlayerData[playerid][pTen]);
	    cache_get_value_name_int(0, "Kelepce", PlayerData[playerid][pKelepce]);

	    cache_get_value_name(0, "Yemler", string);

	    cache_get_value_name_int(0, "Skin",PlayerData[playerid][pSkin]);
	    cache_get_value_name_int(0, "CikisInt",PlayerData[playerid][pCikisInt]);
	    cache_get_value_name_float(0, "CikisX",PlayerData[playerid][pCikisPos][0]);
	    cache_get_value_name_float(0, "CikisY",PlayerData[playerid][pCikisPos][1]);
	    cache_get_value_name_float(0, "CikisZ",PlayerData[playerid][pCikisPos][2]);
	    cache_get_value_name_int(0, "CikisWorld",PlayerData[playerid][pCikisVw]);
	    cache_get_value_name_int(0, "AdminLevel",PlayerData[playerid][pAdmin]);
	    cache_get_value_name_int(0, "Helper",PlayerData[playerid][pHelper]);
	    cache_get_value_name_int(0, "oyungorevlisi",PlayerData[playerid][pOyunGorevlisi]);
	    cache_get_value_name_int(0, "forumgorevlisi",PlayerData[playerid][pForumGorevlisi]);
	    cache_get_value_name_int(0, "Cash",PlayerData[playerid][pCash]);
	    cache_get_value_name(0, "AdminName",PlayerData[playerid][pAdminName],24);
	    cache_get_value_name_int(0, "Ehliyet",PlayerData[playerid][pEhliyet]);
	    cache_get_value_name_int(0, "MotorEhliyet", PlayerData[playerid][pMotorEhliyet]);
	    cache_get_value_name_int(0, "SeferSayi", PlayerData[playerid][pSeferSayi]);
	    cache_get_value_name_int(0, "House",PlayerData[playerid][pHouse]);
	    cache_get_value_name_int(0, "Business",PlayerData[playerid][pIsyeri]);
	    cache_get_value_name_int(0, "Birlik",PlayerData[playerid][pFaction]);
	    cache_get_value_name_int(0, "BirlikRutbe",PlayerData[playerid][pFactionRutbe]);
	    cache_get_value_name_int(0, "BirlikDivizyon",PlayerData[playerid][pFactionDivizyon]);
	    cache_get_value_name_int(0, "Su",PlayerData[playerid][pSu]);
	    cache_get_value_name_float(0, "Health",PlayerData[playerid][pHealth]);
	    cache_get_value_name_float(0, "Armour",PlayerData[playerid][pArmour]);
	    cache_get_value_name_int(0, "OnDuty",PlayerData[playerid][pOnDuty]);
	    cache_get_value_name_int(0, "OnDutySkin",PlayerData[playerid][pOnDutySkin]);
	    cache_get_value_name_int(0, "Aranma",PlayerData[playerid][pAranma]);
	    cache_get_value_name_int(0, "Hapis",PlayerData[playerid][pHapis]);
	    cache_get_value_name_int(0, "HapisSure",PlayerData[playerid][pHapisSure]);
	    cache_get_value_name(0, "HapisSebep",PlayerData[playerid][pHapisSebep], 50);
	    cache_get_value_name(0, "HapiseAtan",PlayerData[playerid][pHapiseAtan], 24);
	    cache_get_value_name_int(0, "Telefon",PlayerData[playerid][pTelefon]);
	    cache_get_value_name_int(0, "Tarife",PlayerData[playerid][pTarife]);
	    cache_get_value_name_int(0, "KalanDK",PlayerData[playerid][pTarifeKalan][0]);
	    cache_get_value_name_int(0, "KalanSMS",PlayerData[playerid][pTarifeKalan][1]);
	    cache_get_value_name_int(0, "KalanNet",PlayerData[playerid][pTarifeKalan][2]);
	    cache_get_value_name_int(0, "TarifeSure",PlayerData[playerid][pTarifeSure]);
	    cache_get_value_name_int(0, "Bitcoin",PlayerData[playerid][pBitcoin]);
	    cache_get_value_name_int(0, "Boombox",PlayerData[playerid][pBoombox]);
	    cache_get_value_name_int(0, "Radyo",PlayerData[playerid][pRadyo]);
	    cache_get_value_name_int(0, "Frekans",PlayerData[playerid][pFrekans]);
	    cache_get_value_name_int(0, "Materyal", PlayerData[playerid][pMateryal]);
	    cache_get_value_name_int(0, "SilahHakki", PlayerData[playerid][pSilahHakki]);
	    cache_get_value_name_int(0, "SilahSuresi", PlayerData[playerid][pSilahSuresi]);
	    cache_get_value_name_int(0, "Parca0", PlayerData[playerid][pSilahParca][0]);
	    cache_get_value_name_int(0, "Parca1", PlayerData[playerid][pSilahParca][1]);
	    cache_get_value_name_int(0, "Parca2", PlayerData[playerid][pSilahParca][2]);
	    cache_get_value_name_int(0, "Level",PlayerData[playerid][pLevel]);
	    cache_get_value_name_int(0, "EXP",PlayerData[playerid][pEXP]);
	    cache_get_value_name_int(0, "MaasSure",PlayerData[playerid][pMaasSure]);
	    cache_get_value_name_int(0, "OynamaSaati",PlayerData[playerid][pOynamaSaati]);
	    cache_get_value_name_int(0, "Maas",PlayerData[playerid][pMaas]);
	    cache_get_value_name_int(0, "Dinle",PlayerData[playerid][pDinle]);
	    cache_get_value_name_int(0, "Zar", PlayerData[playerid][pEsyalar][0]);
	    cache_get_value_name_int(0, "Sigara", PlayerData[playerid][pEsyalar][1]);
	    cache_get_value_name_int(0, "ip", PlayerData[playerid][pEsyalar][2]);
	    cache_get_value_name_int(0, "GozBagi", PlayerData[playerid][pEsyalar][3]);
	    cache_get_value_name_int(0, "Maske", PlayerData[playerid][pEsyalar][4]);
	    cache_get_value_name_int(0, "BenzinKutusu", PlayerData[playerid][pEsyalar][5]);
	    cache_get_value_name_int(0, "Barbeku", PlayerData[playerid][pEsyalar][6]);
	    cache_get_value_name_int(0, "Kofte", PlayerData[playerid][pEsyalar][7]);
	    cache_get_value_name_int(0, "Tavuk", PlayerData[playerid][pEsyalar][8]);
	    cache_get_value_name_int(0, "Dana", PlayerData[playerid][pEsyalar][9]);
	    cache_get_value_name_int(0, "TamirKiti", PlayerData[playerid][pEsyalar][10]);
	    cache_get_value_name_int(0, "Cadir", PlayerData[playerid][pEsyalar][11]);
        cache_get_value_name_int(0, "KampAtes", PlayerData[playerid][pEsyalar][12]);
        cache_get_value_name_int(0, "Sarjor", PlayerData[playerid][pEsyalar][13]);
        cache_get_value_name_int(0, "YanKeski", PlayerData[playerid][pEsyalar][14]);
        cache_get_value_name_int(0, "Bagimlilik", PlayerData[playerid][pBagimlilik]);
        cache_get_value_name_int(0, "TasimacilikSeviye", PlayerData[playerid][pTasimacilikSeviye]);
        cache_get_value_name_int(0, "TasimacilikSefer", PlayerData[playerid][pTasimacilikSefer]);
        cache_get_value_name_int(0, "Garage", PlayerData[playerid][pGarage]);
        cache_get_value_name_int(0, "Bakiye", PlayerData[playerid][pBakiye]);
        cache_get_value_name_int(0, "EXPBoost", PlayerData[playerid][pEXPBoost]);
        cache_get_value_name_int(0, "BalikOrani", PlayerData[playerid][pBalikOrani]);
        cache_get_value_name_int(0, "Vip", PlayerData[playerid][pVip]);
        cache_get_value_name_int(0, "VipSure", PlayerData[playerid][pVipSure]);
        cache_get_value_name_int(0, "DovusStili", PlayerData[playerid][pDovusStili]);
        cache_get_value_name_int(0, "MaskeID", PlayerData[playerid][pMaskeID]);
        cache_get_value_name_int(0, "MaskeHakki", PlayerData[playerid][pMaskeHakki]);
        cache_get_value_name_int(0, "Baygin", PlayerData[playerid][pBaygin]);
        cache_get_value_name_int(0, "BayginSure", PlayerData[playerid][pBayginSure]);
        cache_get_value_name_int(0, "Partner", PlayerData[playerid][pPartner]);
        cache_get_value_name_int(0, "Hediye", PlayerData[playerid][pHediye]);
        cache_get_value_name_int(0, "HediyeSaat", PlayerData[playerid][pHediyeSaat]);
        cache_get_value_name_int(0, "Youtuber", PlayerData[playerid][pYoutuber]);
        cache_get_value_name_int(0, "Oldurme", PlayerData[playerid][pOldurme]);
        cache_get_value_name_int(0, "Olme", PlayerData[playerid][pOlme]);
        cache_get_value_name_int(0, "TalepSayi", PlayerData[playerid][pTalepSayi]);
        cache_get_value_name_int(0, "CK", PlayerData[playerid][pCK]);
        cache_get_value_name_int(0, "Probation", PlayerData[playerid][pProbation]);
        cache_get_value_name_int(0, "portakaltohum", PlayerData[playerid][pTohumlar][0]);
        cache_get_value_name_int(0, "elmatohum", PlayerData[playerid][pTohumlar][1]);
        cache_get_value_name_int(0, "armuttohum", PlayerData[playerid][pTohumlar][2]);
        cache_get_value_name_int(0, "SilahAlmaSayisi", PlayerData[playerid][pSilahAlmaSayisi]);
        cache_get_value_name_int(0, "SilahAlma", PlayerData[playerid][pSilahAlma]);
        cache_get_value_name(0, "Ayarlar", string, 80);

        sscanf(string, "p<|>iiiiiiiiiiiiiii", PlayerData[playerid][pAyarlar][0], PlayerData[playerid][pAyarlar][1], PlayerData[playerid][pAyarlar][2], PlayerData[playerid][pAyarlar][3], PlayerData[playerid][pAyarlar][4], PlayerData[playerid][pAyarlar][5], PlayerData[playerid][pAyarlar][6],
	    PlayerData[playerid][pAyarlar][7], PlayerData[playerid][pAyarlar][8], PlayerData[playerid][pAyarlar][9], PlayerData[playerid][pAyarlar][10], PlayerData[playerid][pAyarlar][11], PlayerData[playerid][pAyarlar][12], PlayerData[playerid][pAyarlar][13], PlayerData[playerid][pAyarlar][14]);

	    cache_get_value_name(0, "ASlot1",string,45);
	    sscanf(string, "p<|>iiii", PlayerData[playerid][pASlot][0], PlayerData[playerid][pABone][0], PlayerData[playerid][pTSlot][0], PlayerData[playerid][pARenk][0]);

	    cache_get_value_name(0, "ASlot2",string,45);
	    sscanf(string, "p<|>iiii", PlayerData[playerid][pASlot][1], PlayerData[playerid][pABone][1], PlayerData[playerid][pTSlot][1], PlayerData[playerid][pARenk][1]);

	    cache_get_value_name(0, "ASlot3",string,45);
	    sscanf(string, "p<|>iiii", PlayerData[playerid][pASlot][2], PlayerData[playerid][pABone][2], PlayerData[playerid][pTSlot][2], PlayerData[playerid][pARenk][2]);

	    cache_get_value_name(0, "ASlot4",string,45);
	    sscanf(string, "p<|>iiii", PlayerData[playerid][pASlot][3], PlayerData[playerid][pABone][3], PlayerData[playerid][pTSlot][3], PlayerData[playerid][pARenk][3]);

	    cache_get_value_name(0, "ASlot5",string,45);
	    sscanf(string, "p<|>iiii", PlayerData[playerid][pASlot][4], PlayerData[playerid][pABone][4], PlayerData[playerid][pTSlot][4], PlayerData[playerid][pARenk][4]);

	    cache_get_value_name(0, "ASlot6",string,45);
	    sscanf(string, "p<|>iiii", PlayerData[playerid][pASlot][5], PlayerData[playerid][pABone][5], PlayerData[playerid][pTSlot][5], PlayerData[playerid][pARenk][5]);

	    cache_get_value_name(0, "ASlot7",string,45);
	    sscanf(string, "p<|>iiii", PlayerData[playerid][pASlot][6], PlayerData[playerid][pABone][6], PlayerData[playerid][pTSlot][6], PlayerData[playerid][pARenk][6]);

	    cache_get_value_name(0, "ASlot8",string,45);
	    sscanf(string, "p<|>iiii", PlayerData[playerid][pASlot][7], PlayerData[playerid][pABone][7], PlayerData[playerid][pTSlot][7], PlayerData[playerid][pARenk][7]);

	    cache_get_value_name(0, "ASlot9",string,45);
	    sscanf(string, "p<|>iiii", PlayerData[playerid][pASlot][8], PlayerData[playerid][pABone][8], PlayerData[playerid][pTSlot][8], PlayerData[playerid][pARenk][8]);

	    cache_get_value_name(0, "ASlot10",string,45);
	    sscanf(string, "p<|>iiii", PlayerData[playerid][pASlot][9], PlayerData[playerid][pABone][9], PlayerData[playerid][pTSlot][9], PlayerData[playerid][pARenk][9]);

	    cache_get_value_name(0, "ASlot1Pos", string, 100);
		sscanf(string, "p<|>fffffffff", AksesuarData[playerid][0][0], AksesuarData[playerid][0][1], AksesuarData[playerid][0][2], AksesuarData[playerid][0][3], AksesuarData[playerid][0][4], AksesuarData[playerid][0][5], AksesuarData[playerid][0][6], AksesuarData[playerid][0][7], AksesuarData[playerid][0][8]);

        cache_get_value_name(0, "ASlot2Pos", string, 100);
		sscanf(string, "p<|>fffffffff", AksesuarData[playerid][1][0], AksesuarData[playerid][1][1], AksesuarData[playerid][1][2], AksesuarData[playerid][1][3], AksesuarData[playerid][1][4], AksesuarData[playerid][1][5], AksesuarData[playerid][1][6], AksesuarData[playerid][1][7], AksesuarData[playerid][1][8]);

		cache_get_value_name(0, "ASlot3Pos", string, 100);
		sscanf(string, "p<|>fffffffff", AksesuarData[playerid][2][0], AksesuarData[playerid][2][1], AksesuarData[playerid][2][2], AksesuarData[playerid][2][3], AksesuarData[playerid][2][4], AksesuarData[playerid][2][5], AksesuarData[playerid][2][6], AksesuarData[playerid][2][7], AksesuarData[playerid][2][8]);

		cache_get_value_name(0, "ASlot4Pos", string, 100);
		sscanf(string, "p<|>fffffffff", AksesuarData[playerid][3][0], AksesuarData[playerid][3][1], AksesuarData[playerid][3][2], AksesuarData[playerid][3][3], AksesuarData[playerid][3][4], AksesuarData[playerid][3][5], AksesuarData[playerid][3][6], AksesuarData[playerid][3][7], AksesuarData[playerid][3][8]);

		cache_get_value_name(0, "ASlot5Pos", string, 100);
		sscanf(string, "p<|>fffffffff", AksesuarData[playerid][4][0], AksesuarData[playerid][4][1], AksesuarData[playerid][4][2], AksesuarData[playerid][4][3], AksesuarData[playerid][4][4], AksesuarData[playerid][4][5], AksesuarData[playerid][4][6], AksesuarData[playerid][4][7], AksesuarData[playerid][4][8]);

		cache_get_value_name(0, "ASlot6Pos", string, 100);
		sscanf(string, "p<|>fffffffff", AksesuarData[playerid][5][0], AksesuarData[playerid][5][1], AksesuarData[playerid][5][2], AksesuarData[playerid][5][3], AksesuarData[playerid][5][4], AksesuarData[playerid][5][5], AksesuarData[playerid][5][6], AksesuarData[playerid][5][7], AksesuarData[playerid][5][8]);

		cache_get_value_name(0, "ASlot7Pos", string, 100);
		sscanf(string, "p<|>fffffffff", AksesuarData[playerid][6][0], AksesuarData[playerid][6][1], AksesuarData[playerid][6][2], AksesuarData[playerid][6][3], AksesuarData[playerid][6][4], AksesuarData[playerid][6][5], AksesuarData[playerid][6][6], AksesuarData[playerid][6][7], AksesuarData[playerid][6][8]);

		cache_get_value_name(0, "ASlot8Pos", string, 100);
		sscanf(string, "p<|>fffffffff", AksesuarData[playerid][7][0], AksesuarData[playerid][7][1], AksesuarData[playerid][7][2], AksesuarData[playerid][7][3], AksesuarData[playerid][7][4], AksesuarData[playerid][7][5], AksesuarData[playerid][7][6], AksesuarData[playerid][7][7], AksesuarData[playerid][7][8]);

		cache_get_value_name(0, "ASlot9Pos", string, 100);
		sscanf(string, "p<|>fffffffff", AksesuarData[playerid][8][0], AksesuarData[playerid][8][1], AksesuarData[playerid][8][2], AksesuarData[playerid][8][3], AksesuarData[playerid][8][4], AksesuarData[playerid][8][5], AksesuarData[playerid][8][6], AksesuarData[playerid][8][7], AksesuarData[playerid][8][8]);

		cache_get_value_name(0, "ASlot10Pos", string, 100);
		sscanf(string, "p<|>fffffffff", AksesuarData[playerid][9][0], AksesuarData[playerid][9][1], AksesuarData[playerid][9][2], AksesuarData[playerid][9][3], AksesuarData[playerid][9][4], AksesuarData[playerid][9][5], AksesuarData[playerid][9][6], AksesuarData[playerid][9][7], AksesuarData[playerid][9][8]);

	    for (new i; i<14; i++)
     	{
     	    if (i<13)
     	    {
          		format(string, sizeof(string), "Silah%d", i + 1);
            	cache_get_value_name_int(0,string,PlayerData[playerid][pSilahlar][i]);

				format(string, sizeof(string), "Mermi%d", i + 1);
    			cache_get_value_name_int(0,string,PlayerData[playerid][pMermiler][i]);
     	    }
      	}

      	for (new j; j<10; j++)
      	{
      	    format(string,sizeof(string), "Balik%d",j+1);
      	    cache_get_value_name_int(0,string,PlayerData[playerid][pBalikID][j]);

      	    format(string,sizeof(string), "BalikGram%d",j+1);
      	    cache_get_value_name_int(0,string,PlayerData[playerid][pBalikGram][j]);

      	}

      	if (!PlayerData[playerid][pSkin])
      	{
	      	if (PlayerData[playerid][pCinsiyet] == 1 && PlayerData[playerid][pTen] == 1)
			{
		   		PlayerData[playerid][pSkin] = 101;
			}
			if (PlayerData[playerid][pCinsiyet] == 1 && PlayerData[playerid][pTen] == 2)
			{
				PlayerData[playerid][pSkin] = 184;
			}
			if (PlayerData[playerid][pCinsiyet] == 2 && PlayerData[playerid][pTen] == 1)
			{
		   		PlayerData[playerid][pSkin] = 211;
			}
			if (PlayerData[playerid][pCinsiyet] == 2 && PlayerData[playerid][pTen] == 2)
			{
		   		PlayerData[playerid][pSkin] = 12;
			}
		}

      	format(string, sizeof(string), "SELECT * FROM `tickets` WHERE `ID` = '%d'", PlayerData[playerid][pID]);
       	mysql_tquery(g_SQL, string, "TicketLoad", "d", playerid);

       	for (new i = 0; i < 10; i++)
    		PlayerData[playerid][pTSlot][i] = false;

       	SetSpawnInfo(playerid, 0, PlayerData[playerid][pSkin], PlayerData[playerid][pCikisPos][0], PlayerData[playerid][pCikisPos][1], PlayerData[playerid][pCikisPos][2], 0.0, 0, 0, 0, 0, 0, 0);
    	SetPlayerScore(playerid, PlayerData[playerid][pLevel]);
      	EkranTemizle(playerid);
      	SetPlayerColor(playerid, COLOR_WHITE);

		SetPVarInt(playerid, "GirisYapti", 1);
	    SetPVarInt(playerid, "Logged", 0);

		TextDrawHideForPlayer(playerid, GirisTD);
  		TogglePlayerSpectating(playerid, 0);
		SpawnPlayer(playerid);
   		ResetPlayerMoney(playerid);
   		GivePlayerMoney(playerid,PlayerData[playerid][pCash]);
   		SetWeapons(playerid);
   		SetPVarInt(playerid, "Logged", 1);

   		SetPlayerVirtualWorld(playerid, PlayerData[playerid][pCikisVw]);
   		SetPlayerInterior(playerid, PlayerData[playerid][pCikisInt]);

		//NT_Timer[playerid] = SetTimerEx("NT_Update", 500, true, "d", playerid);

		mysql_format(g_SQL, string, sizeof string, "UPDATE `oyuncular` SET `LastIP` = '%s',`SonGiris` = '%s', `Oyunda` = '1' WHERE `ID` = '%d'",GetIP(playerid),ReturnDate(),PlayerData[playerid][pID]);
	    mysql_query (g_SQL, string);

	}
	return 1;
}

Dialog:Yas(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return Kick(playerid);
	if(response)
	{
        if (!IsNumeric(inputtext) || strval(inputtext) < 18 || strval(inputtext) > 80)
        {
         	return Dialog_Show(playerid, Yas, DIALOG_STYLE_INPUT, "{C3C3C3}Yasiniz", "{FFFFFF}Lütfen karakterinizin yasini girin.\n{FFFFFF}Yasiniz 18 ile 80 yas arasinda olmalidir.", "Devam", "Iptal");
        }
        PlayerData[playerid][pYas] = strval(inputtext);
        new str[400];
        format(str, sizeof(str), "Karakter Oluþturma: {ffffff}Yasinizi %s olarak belirlediniz, devam edebilirsiniz.", PlayerData[playerid][pYas]);
		SendClientMessage(playerid, COLOR_KOlustur, str);
        Dialog_Show(playerid, Cinsiyet, DIALOG_STYLE_MSGBOX, "{C3C3C3}Cinsiyet", "{FFFFFF}Lütfen karakterinizin cinsiyetini belirleyin.", "Erkek", "Kadin");
	}
	return 1;
}

Dialog:Cinsiyet(playerid, response, listitem, inputtext[])
{
	if(!response)
	{
	    PlayerData[playerid][pCinsiyet] = 2;
	}
	if(response)
	{
	    PlayerData[playerid][pCinsiyet] = 1;
	}
	new str[2048];
    format(str, sizeof(str), "Karakter Oluþturma: {ffffff}Cinsiyetinizi %s olarak belirlediniz, devam edebilirsiniz.", (PlayerData[playerid][pCinsiyet] == 2) ? ("Bayan") : ("Erkek"));
	SendClientMessage(playerid, COLOR_KOlustur, str);
	if(response || !response)
	{
	   // new str[1024];
	    for (new i = 0; i < sizeof DogumYeri; i++)
     	{
      		format(str, sizeof str, "%s{FFFFFF}%s\n", str, DogumYeri[i]);
        }
        Dialog_Show(playerid, DogumYeri, DIALOG_STYLE_LIST, "{C3C3C3}Dogum Yeri", str, "Devam", "Kapat");
	}
	return 1;
}

Dialog:DogumYeri(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return Kick(playerid);
	if(response)
	{
	    format(PlayerData[playerid][pDogum], 30, "%s", DogumYeri[listitem]);
 	  	new str[400];
    	format(str, sizeof(str), "Karakter Oluþturma: {ffffff}Cinsiyetinizi %s olarak belirlediniz, devam edebilirsiniz.", PlayerData[playerid][pDogum]);
		SendClientMessage(playerid, COLOR_KOlustur, str);
	    Dialog_Show(playerid, TenRengi, DIALOG_STYLE_LIST, "{C3C3C3}Ten Rengi", "{FFFFFF}Beyaz\nSiyah", "Devam", "Iptal");
	}
	return 1;
}

Dialog:TenRengi(playerid, response, listitem, inputtext[])
{
    if(!response)
	    return Kick(playerid);
	if(response)
	{
		if(listitem == 0)
		    PlayerData[playerid][pTen] = 1;

		if(listitem == 1)
		    PlayerData[playerid][pTen] = 2;

        TextDrawHideForPlayer(playerid, GirisTD);
        PlayerData[playerid][pCash] = 500;

        SetPVarInt(playerid, "Kayit", 1);

		SetSpawnInfo(playerid, NO_TEAM, (PlayerData[playerid][pCinsiyet] == 1) ? (184) : (12), 1809.3955, -1864.9241, 13.5828, 0.0, 0, 0, 0, 0, 0, 0);
		SpawnPlayer(playerid);
	}
	return 1;
}

stock SoyadKilitlimi(soyad[])
{
    new query[125], Cache: owner_query;
    mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `kilitlisoyadlar` WHERE `Soyad` = '%s'", SQL_ReturnEscaped(soyad));
    owner_query = mysql_query(g_SQL, query);
    new rows;
    cache_get_row_count(rows);
    if (rows)
    {
        return 1;
    }
    cache_delete(owner_query);
    return 0;
}

forward TicketLoad(playerid);
public TicketLoad(playerid)
{
	new rows = cache_num_rows();
	if (rows)
	{
	    new ticID;
		for (new i = 0; i < rows && i < MAX_PLAYER_TICKETS; i ++)
		{
		    cache_get_value_name_int(i, "ticketID", ticID);

		    TicketData[playerid][ticID][ticketExists] = true;
		    TicketData[playerid][ticID][ticketID] = ticID;

		    cache_get_value_name_int(i, "ticketFee", TicketData[playerid][ticID][ticketFee]);
		    cache_get_value_name(i, "ticketDate", TicketData[playerid][ticID][ticketDate], 36);
		    cache_get_value_name(i, "ticketReason", TicketData[playerid][ticID][ticketReason], 64);
		    cache_get_value_name(i, "Memur", TicketData[playerid][ticID][ticketMemur], 24);
		}
	}
	return 1;
}

stock SetWeapons(playerid)
{
	ResetPlayerWeapons(playerid);

	for (new i = 0; i < 13; i ++)
	{
		if (PlayerData[playerid][pSilahlar][i] > 0 && PlayerData[playerid][pMermiler][i] > 0)
		{
			GivePlayerWeapon(playerid, PlayerData[playerid][pSilahlar][i], PlayerData[playerid][pMermiler][i]);
			SetPlayerArmedWeapon(playerid, 0);
		}
	}
	return 1;
}

stock GetIP(playerid)
{
	new pip[16];
	GetPlayerIp(playerid, pip, sizeof(pip));
	return pip;
}
ReturnDate()
{
	static
	    date[36];

	getdate(date[2], date[1], date[0]);
	gettime(date[3], date[4], date[5]);

	format(date, sizeof(date), "%02d/%02d/%d, %02d:%02d", date[0], date[1], date[2], date[3], date[4]);
	return date;
}
IsNumeric(const str[])
{
	for (new i = 0, l = strlen(str); i != l; i ++)
	{
	    if (i == 0 && str[0] == '-')
			continue;

	    else if (str[i] < '0' || str[i] > '9')
			return 0;
	}
	return 1;
}

stock BilgiSifirla(playerid)
{
	PlayerData[playerid][pID] = 0;
	PlayerData[playerid][pYas] = 0;
	PlayerData[playerid][pCinsiyet] = 0;
	PlayerData[playerid][pTen] = 0;
	PlayerData[playerid][pSkin] = 0;
	PlayerData[playerid][pAdmin] = 0;
	PlayerData[playerid][pHelper] = 0;
	PlayerData[playerid][pOyunGorevlisi] = 0;
	PlayerData[playerid][pForumGorevlisi] = 0;
	PlayerData[playerid][pCash] = 0;
	PlayerData[playerid][pAdminDuty] = false;
	PlayerData[playerid][pHelperDuty] = 0;
	PlayerData[playerid][pEhliyet] = 0;
	PlayerData[playerid][pMotorEhliyet] = 0;
	PlayerData[playerid][pLastCar] = -1;
	PlayerData[playerid][pDuzenlenenPompa] = -1;
	PlayerData[playerid][pEditGate] = -1;
	PlayerData[playerid][pEditType] = 0;
	PlayerData[playerid][pHouse] = -1;
	PlayerData[playerid][pFaction] = -1;
	PlayerData[playerid][pFactionRutbe] = 0;
	PlayerData[playerid][pFactionDivizyon] = 0;
	PlayerData[playerid][pEditFurniture] = -1;
	PlayerData[playerid][pFactionDavet] = -1;
	PlayerData[playerid][pFactionDavetEden] = -1;
	PlayerData[playerid][pFactionEdit] = -1;
	PlayerData[playerid][pSelectedSlot] = -1;
	PlayerData[playerid][pSu] = 0;
	PlayerData[playerid][pHealth] = 100.0;
	PlayerData[playerid][pArmour] = 0.0;
	PlayerData[playerid][pOnDuty] = 0;
	PlayerData[playerid][pOnDutySkin] = 0;
	PlayerData[playerid][pTazer] = 0;
	PlayerData[playerid][pBeanbag] = 0;
	PlayerData[playerid][pSoklandi] = 0;
	PlayerData[playerid][pKelepce] = 0;
	PlayerData[playerid][pDestek] = 0;
	PlayerData[playerid][pCCTV] = -1;
	PlayerData[playerid][pYereYatirildi] = 0;
	PlayerData[playerid][pAranma] = 0;
	PlayerData[playerid][pHapis] = 0;
	PlayerData[playerid][pHapisSure] = 0;
	format(PlayerData[playerid][pHapisSebep], 50, "");
	format(PlayerData[playerid][pHapiseAtan], 24, "");
	PlayerData[playerid][pBaygin] = 0;
	PlayerData[playerid][pBayginSure] = 0;
	PlayerData[playerid][pLoopAnim] = false;
	PlayerData[playerid][pIyilestiriyor] = -1;
	PlayerData[playerid][pIyilestirmeSure] = 0;
	PlayerData[playerid][pTopallama] = false;
	PlayerData[playerid][pTopallamaSayac] = 0;
	PlayerData[playerid][pTelefon] = -1;
	PlayerData[playerid][pAramada] = 0;
	PlayerData[playerid][pCallLine] = -1;
	PlayerData[playerid][pTarife] = -1;
	PlayerData[playerid][pTarifeKalan][0] = 0;
	PlayerData[playerid][pTarifeKalan][1] = 0;
	PlayerData[playerid][pTarifeKalan][2] = 0;
	PlayerData[playerid][pTarifeSure] = 0;
	PlayerData[playerid][pKonusmaSure] = 0;
	format(PlayerData[playerid][pIhbar], 128, "");
	format(PlayerData[playerid][pBasariPBTarih], 25, "Yapilmadi");
	format(PlayerData[playerid][pBasariEvTarih], 25, "Yapilmadi");
	format(PlayerData[playerid][pBasariAracTarih], 25, "Yapilmadi");
	format(PlayerData[playerid][pBasari5Tarih], 25, "Yapilmadi");
	format(PlayerData[playerid][pBasari10Tarih], 25, "Yapilmadi");
	PlayerData[playerid][pMateryal] = 0;
	PlayerData[playerid][pSilahHakki] = 0;
	PlayerData[playerid][pSilahSuresi] = 0;
	PlayerData[playerid][pSilahParca][0] = 0;
	PlayerData[playerid][pSilahParca][1] = 0;
	PlayerData[playerid][pSilahParca][2] = 0;
	PlayerData[playerid][pBasariPB] = 0;
	PlayerData[playerid][pBasari5] = 0;
	PlayerData[playerid][pBasari10] = 0;
	PlayerData[playerid][pBasariEv] = 0;
	PlayerData[playerid][pBasariArac] = 0;
	PlayerData[playerid][pBoombox] = 0;
	PlayerData[playerid][pIhbarSayac] = 0;
	PlayerData[playerid][pBitcoin] = 0;
	PlayerData[playerid][pGPS] = -1;
	PlayerData[playerid][pRadyo] = 0;
	PlayerData[playerid][pFrekans] = 0;
	PlayerData[playerid][pLevel] = 1;
	PlayerData[playerid][pEXP] = 0;
	PlayerData[playerid][pMaasSure] = 0;
	PlayerData[playerid][pMaas] = 0;
	PlayerData[playerid][pOynamaSaati] = 0;
	PlayerData[playerid][pMuzikKutusu] = INVALID_PLAYER_ID;
	PlayerData[playerid][pDinle] = -1;
	PlayerData[playerid][yayinKonuk] = -1;
	PlayerData[playerid][pMangalKuruldu] = false;
	PlayerData[playerid][pCadir] = -1;
	PlayerData[playerid][pSilahOffer] = -1;
	PlayerData[playerid][pSilahOfferID] = 0;
	PlayerData[playerid][pSilahOfferFiyat] = 0;
	DestroyDynamicObject(PlayerData[playerid][pMangalObject][0]);
	DestroyDynamicObject(PlayerData[playerid][pMangalObject][1]);
	PlayerData[playerid][pYemekPisiriliyor] = 0;
	PlayerData[playerid][pPisirilenYemek] = 0;
	PlayerData[playerid][pBagimlilik] = 0;
	PlayerData[playerid][pBagimlilikSayac][0] = PlayerData[playerid][pBagimlilikSayac][1] = 0;
	PlayerData[playerid][pTasimacilikSeviye] = PlayerData[playerid][pTasimacilikSefer] = 0;
	PlayerData[playerid][pGarage] = -1;
	PlayerData[playerid][pBakiye] = 0;
	PlayerData[playerid][pEXPBoost] = PlayerData[playerid][pBalikOrani] = 0;
	PlayerData[playerid][pVip] = PlayerData[playerid][pVipSure] = 0;
	PlayerData[playerid][pVipRenk] = 0;
	PlayerData[playerid][pDovusStili] = 4;
	PlayerData[playerid][pMaske] = false;
	PlayerData[playerid][pMaskeID] = 0;
	PlayerData[playerid][pMaskeHakki] = 0;
	PlayerData[playerid][pGraffiti] = 0;
	PlayerData[playerid][pSpecID] = -1;
	PlayerData[playerid][pNameChange][0] = '\0';
	PlayerData[playerid][pJetpack] = 0;
	PlayerData[playerid][pGOD] = false;
	PlayerData[playerid][pFriskOffer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pShakeOffer] = INVALID_PLAYER_ID;
 	PlayerData[playerid][pShakeType] = 0;
 	PlayerData[playerid][pHUD] = true;
 	PlayerData[playerid][pStand] = false;
 	PlayerData[playerid][pPartner] = 0;
 	PlayerData[playerid][pPartnerTeklif] = INVALID_PLAYER_ID;
 	PlayerData[playerid][pShootedBody] = -1;
 	PlayerData[playerid][pLastShot] = INVALID_PLAYER_ID;
 	PlayerData[playerid][pTaxiCalled] = 0;
 	PlayerData[playerid][pTaksiKabul] = -1;
 	PlayerData[playerid][pTaxiDuty] = false;
 	PlayerData[playerid][pTaksiUcret] = 0;
 	PlayerData[playerid][pTaxiPlayer] = -1;
 	PlayerData[playerid][pSoyun] = false;
 	PlayerData[playerid][pHediye] = 0;
 	PlayerData[playerid][pHediyeSaat] = 0;
 	PlayerData[playerid][pYoutuber] = 0;
 	PlayerData[playerid][pYoutuberTag] = false;
 	PlayerData[playerid][pSelectType] = 0;
 	PlayerData[playerid][pOldurme] = 0;
 	PlayerData[playerid][pOlme] = 0;
 	PlayerData[playerid][pTalepSayi] = 0;
 	PlayerData[playerid][pYatKontrol][0] = 0;
 	PlayerData[playerid][pCK] = 0;
 	PlayerData[playerid][pProbation] = 0;
 	PlayerData[playerid][pSilahAlmaSayisi] = 0;
	PlayerData[playerid][pSilahAlma] = 0;
	PlayerData[playerid][pLSPDUydu] = false;
 	TohumSayisi[playerid] = 0;
 	TohumTutuyor[playerid] = -1;
 	if (IsValidDynamicCP(TohumCP[playerid])) DestroyDynamicCP(TohumCP[playerid]);
 	SetPVarInt(playerid, "ssmod", 0);
 	TextDrawHideForPlayer(playerid, Karanlik);
 	DeletePVar(playerid, "AksesuarEdit");
 	SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 5);
 	SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 5);
 	SonMobilyaID[playerid] = -1;
 	SetPVarInt(playerid, "KOSKorumasi", 0);
 	DeletePVar(playerid, "OdadanAt");
 	pbOda[playerid] = -1;
 	pbTakim[playerid] = 0;
 	pbOldurme[playerid] = 0;
 	pbOlme[playerid] = 0;
	SetPVarInt(playerid, "GraffitiEdit", -1);
	DeletePVar(playerid, "HizAsimi");
	SetPVarInt(playerid, "AracSakliyor", -1);
	SetPVarInt(playerid, "pnsID", -1);
	CurrentAccountID[playerid] = -1;
	LogListType[playerid] = TYPE_NONE;
	LogListPage[playerid] = 0;
	EditingATMID[playerid] = -1;
	EditingCopObjectID[playerid] = -1;
	TextDrawHideForPlayer(playerid, Karanlik);
	SetPVarInt(playerid, "IpBaglandi", 0);
	SetPVarInt(playerid, "GozBaglandi", 0);
	SetPVarInt(playerid, "KonumKabul", -1);
	SetPVarInt(playerid, "IsyeriBuluyor", -1);
	EMSKabul[playerid] = INVALID_PLAYER_ID;
	SetPVarInt(playerid, "EvBuluyor", -1);
	SetPVarInt(playerid, "BinaBuluyor", -1);
	DeletePVar(playerid, "Arayan");
	DeletePVar(playerid, "MaasGeldi");
    DeletePVar(playerid, "MaasTimer");
    DeletePVar(playerid, "MaasKod");
	DeletePVar(playerid, "IlkBalik");
	DeletePVar(playerid, "AracaBindi");
	DeletePVar(playerid, "Iyilestiriliyor");
	PetKontrol[playerid] = -1;
	AracCekiyor[playerid] = INVALID_VEHICLE_ID;
	ResetPlayerDamages(playerid);
	CevapSifirla(playerid);
	SigaraDurum[playerid] = false;
	SetPVarInt(playerid, "kumar_id", INVALID_PLAYER_ID);
	if (PlayerData[playerid][pDragged])
	{
	    PlayerData[playerid][pDragged] = 0;
	    PlayerData[playerid][pDraggedBy] = INVALID_PLAYER_ID;
	    KillTimer(PlayerData[playerid][pDragTimer]);
	}
	foreach (new i:Player)
	{
	    if (PlayerData[i][pDraggedBy] == playerid) {
		    KillTimer(PlayerData[i][pDragTimer]);

		    PlayerData[i][pDragged] = 0;
            PlayerData[i][pDraggedBy] = INVALID_PLAYER_ID;
		}
	}
 	DestroyPlayerProgressBar(playerid, PlayerData[playerid][pDrinkBar]);
 	PlayerData[playerid][pDrinkBar] = INVALID_PLAYER_BAR_ID;
 	BalikTimer[playerid] = -1;
	for (new i; i<13; i++)
	{
	    if (i < 10)
	    {
		    PlayerData[playerid][pBalikID][i] = -1;
		    PlayerData[playerid][pBalikGram][i] = 0;
	    }
	    if (i < 5)
	    {
	    	PlayerData[playerid][pTelefonAyar][i] = 0;
	    }
	    PlayerData[playerid][pSilahlar][i] = 0;
	    PlayerData[playerid][pMermiler][i] = 0;
	    PlayerData[playerid][pEsyalar][i] = 0;
	    PlayerData[playerid][pAyarlar][i] = 0;
	}
	PlayerData[playerid][pAyarlar][14] = 0;
	PlayerData[playerid][pEsyalar][13] = 0;
	PlayerData[playerid][pEsyalar][14] = 0;
	PlayerData[playerid][pAyarlar][4] = 1;
	for (new j = 0; j < 10; j ++) {
			PlayerData[playerid][pARenk][j] = 0;
	    	AksesuarData[playerid][j][j] = 0.0;
	    	PlayerData[playerid][pASlot][j] = 0;
	    	PlayerData[playerid][pTSlot][j] = 0;
	    	PlayerData[playerid][pABone][j] = 0;
	    }
	for (new i = 0; i != MAX_PLAYER_TICKETS; i ++) {
        TicketData[playerid][i][ticketID] = 0;
        TicketData[playerid][i][ticketExists] = false;
        TicketData[playerid][i][ticketFee] = 0;
    }
    RemovePlayerAttachedObject(playerid,2);
    RemovePlayerAttachedObject(playerid,3);
    RemovePlayerAttachedObject(playerid,4);
    RemovePlayerAttachedObject(playerid,6);
	DeletePVar(playerid, "davet");
	SetPVarInt(playerid, "mobilyaid",-1);
	RemovePlayerAttachedObject(playerid,1);
	RemovePlayerAttachedObject(playerid,5);
	DeletePVar(playerid, "ehliyethata");
	DeletePVar(playerid, "ehliyetaliyor");
	DeletePVar(playerid, "ehliyetsinavinda");
	DeletePVar(playerid, "Logged");
	DeletePVar(playerid, "Kayit");
	DeletePVar(playerid, "hata");
	DeletePVar(playerid, "Sifre");
	DeletePVar(playerid, "Yas");
	DeletePVar(playerid, "dogum");
	DeletePVar(playerid, "Sex");

	KillTimer(PlayerData[playerid][Timer_Yuk]);
	PlayerData[playerid][Timer_Yuk] = -1;
	PlayerData[playerid][pEhliyetSinavinda] = 0;
	PlayerData[playerid][pEhliyetUyari] = 0;
	PlayerData[playerid][pSeferSayi] = 0;
	MeslekCP[playerid] = -1;

    PlayerDrugData[playerid][Drugs] = 0;

	//pCBugging[playerid] = false;
	return 1;
}
stock TurkceKarakter(yazi[])
{
	if (strfind(yazi, "Þ", true) != -1) return 1;
	if (strfind(yazi, "þ", true) != -1) return 1;
	if (strfind(yazi, "ç", true) != -1) return 1;
	if (strfind(yazi, "Ç", true) != -1) return 1;
	if (strfind(yazi, "ö", true) != -1) return 1;
	if (strfind(yazi, "Ö", true) != -1) return 1;
	if (strfind(yazi, "ü", true) != -1) return 1;
	if (strfind(yazi, "Ü", true) != -1) return 1;
	return 0;
}

forward Giris_Yap(playerid);
public Giris_Yap(playerid)
{
	new query[256], baslik[64];

	mysql_format(g_SQL, query, sizeof query, "SELECT * FROM `oyuncular` WHERE `Isim` = '%s'", ReturnName(playerid));
	mysql_query (g_SQL, query);

	new rows = cache_num_rows();

	if (!rows)
	{
	    DeletePVar(playerid,"hata");
		new string[280];
		format(string,sizeof(string),"{FFFFFF}Los Angeles'a hoþ geldin, {898989}%s.{FFFFFF}\n\nAramýzda yer almak için lütfen kendine þifre belirle!",ReturnName(playerid,1),ReturnName(playerid,1));
		ShowPlayerDialog(playerid,6,DIALOG_STYLE_INPUT,"{b2b2b2}Kayýt",string,"Devam","Iptal");
  	}
	if (rows)
	{
	    EkranTemizle(playerid);

	    format(baslik, sizeof baslik, "{ffffff}Karakter Doðrulama - %s", ReturnName(playerid, 0));
		format(query, sizeof query, "{FFFFFF}Los Angeles'a tekrardan hoþ geldin, {898989}%s.\n\n{FFFFFF}Bu hesabýn size ait olduðunu doðrulayabilmemiz için \nþifrenizi girin.",ReturnName(playerid,0),ReturnName(playerid,0));

		Dialog_Show(playerid, Giris, DIALOG_STYLE_PASSWORD, baslik, query, "Dogrula", "Iptal");
	}
	return 1;
}

Dialog:Giris(playerid, response, listitem, inputtext[])
{
	if(!response)
	    Kick(playerid);

	if(response)
	{
	    new str[512], baslik[64];

		if (!strlen(inputtext))
  		{
  		    format(baslik, sizeof baslik, "{ffffff}Doðrulama - %s", ReturnName(playerid, 0));
    		format(str, sizeof str, "{FFFFFF}Los Angeles'a tekrardan hoþ geldin, {898989}%s.\n\n{FFFFFF}Bu hesabin sana ait olduðunu doðrulayabilmemiz için lütfen\nþifreni gir.",ReturnName(playerid,0),ReturnName(playerid,0));
   			return Dialog_Show(playerid, Giris, DIALOG_STYLE_PASSWORD, baslik, str, "Dogrula", "Iptal");
		}

		format(str, sizeof str, "SELECT * FROM `oyuncular` WHERE `Isim` = '%s' AND `Sifre` = md5('%s')", ReturnName(playerid), inputtext);
		mysql_tquery(g_SQL, str, "Login", "d", playerid);
	}
	return 1;
}

stock GetPlayerLastName(playerid, soyad[], nm = 0)
{
    new
        namestring[2][MAX_PLAYER_NAME];

    if (nm)
	{
        new name[MAX_PLAYER_NAME];

        GetPlayerName(playerid,name,MAX_PLAYER_NAME);
        split(name, namestring, '_');
    }
	else
	{
        split(soyad, namestring, '_');
    }
    return namestring[1];
}

stock split(const strsrc[], strdest[][], delimiter)
{
    new i, li;
    new aNum;
    new len;

    while (i <= strlen(strsrc))
    {
        if (strsrc[i] == delimiter || i == strlen(strsrc))
        {
            len = strmid(strdest[aNum], strsrc, li, i, 128);
            strdest[aNum][len] = 0;
            li = i+1;
            aNum++;
        }
        i++;
    }
    return 1;
}
Dialog:SoruCevapla(playerid, response, listitem, inputtext[]) {

	if (!response) return Kick(playerid);

	if (listitem != Cevaplar[SoruID[playerid]])
	{
		YanlisCevap[playerid]++;
	}
	CevaplananSoru[playerid]++;
	if (CevaplananSoru[playerid] < SonSoruID) SoruSor(playerid);
	else {
	    if (YanlisCevap[playerid] >= 1)
	    {
	        HataMesajGonder(playerid, "Sorulara yanlis cevap verdiniz, daha sonra tekrar deneyin.");
	        return Kick(playerid);
	    }
	    MesajGonder(playerid, "Sorulara dogru cevap verdiniz, artik karakter olusturabilirsiniz.");

		DeletePVar(playerid, "hata");
		CevapSifirla(playerid);
		new string[280];
		format(string,sizeof(string), "{FFFFFF}Sunucumuza hos geldin {C3C3C3}%s, {FFFFFF}karakter olusturmak için sifrenizi girmelisiniz.\n\n{C3C3C3}Karakter Adi: {C3C3C3}%s\n\nsifrenizi girin:",ReturnName(playerid,1),ReturnName(playerid,1));
		ShowPlayerDialog(playerid,6,DIALOG_STYLE_INPUT, "{C3C3C3}Kayit",string, "Devam", "Iptal");
	}

	return 1;
}

stock IsValidRoleplayName(const name[])
{
	if (!name[0] || strfind(name, "_") == -1)
	    return 0;

	else for (new i = 0, len = strlen(name); i != len; i ++) {
	    if ((i == 0) && (name[i] < 'A' || name[i] > 'Z'))
	        return 0;

		else if ((i != 0 && i < len  && name[i] == '_') && (name[i + 1] < 'A' || name[i + 1] > 'Z'))
		    return 0;

		else if ((name[i] < 'A' || name[i] > 'Z') && (name[i] < 'a' || name[i] > 'z') && name[i] != '_' && name[i] != '.')
		    return 0;
	}
	return 1;
}

stock EkranTemizle(playerid)
{
	for (new i; i < 25; i++)
	{
	    SendClientMessage(playerid, 0xFFFFFFFF, "");
	}
	return 1;
}

ReturnName(playerid, underscore = 1, nt = -1)
{
	static
	    name[MAX_PLAYER_NAME + 1];

	GetPlayerName(playerid, name, sizeof(name));

	if (underscore != 1)
	{
	    for (new i = 0, len = strlen(name); i < len; i ++)
		{
	        if (name[i] == '_')
				name[i] = ' ';
		}
	}

	if (PetKontrol[playerid] != -1 && GetPVarInt(playerid, "Logged") == 1) format(name, sizeof(name), "%s", PetBilgi[PetKontrol[playerid]][petAdi]);

	if (PlayerData[playerid][pMaske] == true && PetKontrol[playerid] == -1 && nt == -1)
	    format(name, sizeof(name), "Maskeli (#%d)", PlayerData[playerid][pMaskeID]);

	return name;
}
stock SendClientMessageToAllEx(color, const text[], {Float, _}:...)
{
    static
        args,
        str[512];

    /*
     *  Custom function that uses #emit to format variables into a string.
     *  This code is very fragile; touching any code here will cause crashing!
    */
    if ((args = numargs()) == 2)
    {
        SendClientMessageToAll(color, text);
    }
    else
    {
        while (--args >= 2)
        {
            #emit LCTRL 5
            #emit LOAD.alt args
            #emit SHL.C.alt 2
            #emit ADD.C 12
            #emit ADD
            #emit LOAD.I
            #emit PUSH.pri
        }
        #emit PUSH.S text
        #emit PUSH.C 144
        #emit PUSH.C str
        #emit LOAD.S.pri 8
        #emit ADD.C 4
        #emit PUSH.pri
        #emit SYSREQ.C format
        #emit LCTRL 5
        #emit SCTRL 4

        SendClientMessageToAll(color, str);

        #emit RETN
    }
    return 1;
}
stock SendVehicleMessage(except, vehicleid, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) if (GetPlayerVehicleID(i) == vehicleid && i != except ) {
		    SendClientMessage(i, color, string);
		}
		return 1;
	}
	foreach (new i : Player) if (GetPlayerVehicleID(i) == vehicleid && i != except) {
 		SendClientMessage(i, color, string);
	}
	return 1;
}
/*stock SendVehicleMessage(vehicleid, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) if (GetPlayerVehicleID(i) == vehicleid) {
		    SendClientMessage(i, color, string);
		}
		return 1;
	}
	foreach (new i : Player) if (GetPlayerVehicleID(i) == vehicleid) {
 		SendClientMessage(i, color, string);
	}
	return 1;
}*/
stock SendClientMessageEx(playerid, color, const text[], {Float, _}:...)
{
	static
	    args,
	    str[144];

	/*
     *  Custom function that uses #emit to format variables into a string.
     *  This code is very fragile; touching any code here will cause crashing!
	*/
	if ((args = numargs()) == 3)
	{
	    SendClientMessage(playerid, color, text);
	}
	else
	{
		while (--args >= 3)
		{
			#emit LCTRL 5
			#emit LOAD.alt args
			#emit SHL.C.alt 2
			#emit ADD.C 12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S text
		#emit PUSH.C 144
		#emit PUSH.C str
		#emit PUSH.S 8
		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		SendClientMessage(playerid, color, str);

		#emit RETN
	}
	return 1;
}
stock SoruEkle(soru[], siklar[], cevap)
{
	format(Quiz[SonSoruID], 1024, "%s", soru);
	Cevaplar[SonSoruID] = cevap;
	format(Siklar[SonSoruID], 1024, "%s", siklar);
	SonSoruID++;
	return 1;
}

stock SoruSor(playerid)
{
	soru_al:
	new id = random(SonSoruID);

	if (SoruSoruldu[playerid][id]) goto soru_al;
	Dialog_Show(playerid, SoruCevapla, DIALOG_STYLE_LIST, Quiz[id], Siklar[id], "Seç", "");
	SoruID[playerid] = id;
	SoruSoruldu[playerid][id] = 1;
	return 1;
}

stock CevapSifirla(playerid)
{
    SoruID[playerid] = -1;
	CevaplananSoru[playerid] = 0;
	YanlisCevap[playerid] = 0;
	for (new i; i < MAX_QUIZ; i++) SoruSoruldu[playerid][i] = 0;
	return 1;
}
Fuel_InitPlayer(playerid)
{
	UsingPumpID[playerid] = -1;
	RefuelTimer[playerid] = -1;
	FuelBought[playerid] = 0;

	FuelText[playerid] = CreatePlayerTextDraw(playerid, 40.000000, 305.000000, "~b~~h~Dolduruluyor...~n~~n~~w~Fiyat: ~g~~h~$0 ~y~~h~(0 L)");
	PlayerTextDrawBackgroundColor(playerid, FuelText[playerid], 255);
	PlayerTextDrawFont(playerid, FuelText[playerid], 1);
	PlayerTextDrawLetterSize(playerid, FuelText[playerid], 0.240000, 1.100000);
	PlayerTextDrawColor(playerid, FuelText[playerid], -1);
	PlayerTextDrawSetOutline(playerid, FuelText[playerid], 1);
	PlayerTextDrawSetProportional(playerid, FuelText[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, FuelText[playerid], 0);
	return 1;
}

Vehicle_IsANoFuelVehicle(model)
{
	switch (model)
	{
		case 481, 509, 510: return 1;
		default: return 0;
	}
	return 0;
}

formatInt(intVariable, iThousandSeparator = ',', iCurrencyChar = '$')
{
    /*
		By Kar
		https://gist.github.com/Kar2k/bfb0eafb2caf71a1237b349684e091b9/8849dad7baa863afb1048f40badd103567c005a5#file-formatint-function
	*/
	static
		s_szReturn[ 32 ],
		s_szThousandSeparator[ 2 ] = { ' ', EOS },
		s_szCurrencyChar[ 2 ] = { ' ', EOS },
		s_iVariableLen,
		s_iChar,
		s_iSepPos,
		bool:s_isNegative
	;

	format( s_szReturn, sizeof( s_szReturn ), "%d", intVariable );

	if (s_szReturn[0] == '-')
		s_isNegative = true;
	else
		s_isNegative = false;

	s_iVariableLen = strlen( s_szReturn );

	if ( s_iVariableLen >= 4 && iThousandSeparator)
	{
		s_szThousandSeparator[ 0 ] = iThousandSeparator;

		s_iChar = s_iVariableLen;
		s_iSepPos = 0;

		while ( --s_iChar > _:s_isNegative )
		{
			if ( ++s_iSepPos == 3 )
			{
				strins( s_szReturn, s_szThousandSeparator, s_iChar );

				s_iSepPos = 0;
			}
		}
	}
	if (iCurrencyChar) {
		s_szCurrencyChar[ 0 ] = iCurrencyChar;
		strins( s_szReturn, s_szCurrencyChar, _:s_isNegative );
	}
	return s_szReturn;
}

GetClosestPlant(playerid, Float: range = 1.5)
{
	new id = -1, Float: dist = range, Float: tempdist;
	foreach (new i : Plants)
	{
	    tempdist = GetPlayerDistanceFromPoint(playerid, PlantData[i][plantX], PlantData[i][plantY], PlantData[i][plantZ]);

	    if (tempdist > range) continue;
		if (tempdist <= dist)
		{
			dist = tempdist;
			id = i;
		}
	}

	return id;
}

GetClosestDealer(playerid, Float: range = 2.0)
{
	new id = -1, Float: dist = range, Float: tempdist;

	foreach (new i : Dealers)
	{
	    tempdist = GetPlayerDistanceFromPoint(playerid, DealerData[i][dealerX], DealerData[i][dealerY], DealerData[i][dealerZ]);

	    if (tempdist > range) continue;
		if (tempdist <= dist)
		{
			dist = tempdist;
			id = i;
		}
	}
	return id;
}

GetClosestGraffiti(playerid, Float: range = 2.0)
{
	new id = -1, Float: dist = range, Float: tempdist;
	for (new i; i<MAX_GRAFFITI_POINTS; i++) if (GraffitiData[i][graffitiExists] == 1)
	{
	    tempdist = GetPlayerDistanceFromPoint(playerid, GraffitiData[i][graffitiPos][0], GraffitiData[i][graffitiPos][1], GraffitiData[i][graffitiPos][2]);

	    if (tempdist > range) continue;
		if (tempdist <= dist)
		{
			dist = tempdist;
			id = i;
		}
	}

	return id;
}
ShowDrugStats(playerid)
{
	new dialog[350];
	format(
		dialog,
		sizeof(dialog),
		"Bagimlilik\t%s\n\
		Uyusturucu\t%s gram\n\
		Tohum\t%s\n\
		Kullanilan Uyusturucu\t%s gram\n\
		Ekilen Tohum\t%s\n\
		Toplanan Tohum\t%s (%s gram)\n\
		Verilen Uyusturucu\t%s gram\n\
		Alinan Uyusturucu\t%s gram\n\
		Satin Alinan Uyusturucu\t%s gram {2ECC71}(%s)\n\
		Satilan Uyusturucu\t%s gram {2ECC71}(%s)\n\
		{FF0000}istatistikleri Sifirla",
		(PlayerData[playerid][pBagimlilik] == 1) ? ("{2ECC71}Evet") : ("{FF0000}Hayir"),
		formatInt(PlayerDrugData[playerid][Drugs], .iCurrencyChar = '\0'),
		formatInt(PlayerDrugData[playerid][Seeds], .iCurrencyChar = '\0'),
		formatInt(PlayerDrugData[playerid][TotalUsed], .iCurrencyChar = '\0'),
		formatInt(PlayerDrugData[playerid][TotalPlanted], .iCurrencyChar = '\0'),
		formatInt(PlayerDrugData[playerid][TotalHarvestedPlants], .iCurrencyChar = '\0'), formatInt(PlayerDrugData[playerid][TotalHarvestedGrams], .iCurrencyChar = '\0'),
		formatInt(PlayerDrugData[playerid][TotalGiven], .iCurrencyChar = '\0'),
		formatInt(PlayerDrugData[playerid][TotalReceived], .iCurrencyChar = '\0'),
		formatInt(PlayerDrugData[playerid][TotalBought], .iCurrencyChar = '\0'), formatInt(PlayerDrugData[playerid][TotalBoughtPrice]),
		formatInt(PlayerDrugData[playerid][TotalSold], .iCurrencyChar = '\0'), formatInt(PlayerDrugData[playerid][TotalSoldPrice])
	);

	ShowPlayerDialog(playerid, DIALOG_DRUG_STATS, DIALOG_STYLE_TABLIST, "Uyusturucu istatistikleri", dialog, "Seç", "Kapat");
	return 1;
}

ShowDealerMenu(playerid)
{
	new dialog[300], id = PlayerDrugData[playerid][DealerID];
	format(
		dialog,
		sizeof(dialog),
		"islem\tFiyat\tSizde Bulunan\n\
		{%06x}Uyusturucu Tohumu Al\t{2ECC71}%s\t%s\n\
		{%06x}Uyusturucu Satin Al (%s gram saticida)\t{2ECC71}%s x gram\t%s gram\n\
		{%06x}Uyusturucu Sat\t{2ECC71}%s x gram\t%s gram",
		(PlayerDrugData[playerid][Seeds] < SEED_LIMIT) ? 0xFFFFFFFF >>> 8 : 0xE74C3CFF >>> 8, formatInt(SEED_PRICE), formatInt(PlayerDrugData[playerid][Seeds], .iCurrencyChar = '\0'),
		(PlayerDrugData[playerid][Drugs] >= CARRY_LIMIT || DealerData[id][dealerDrugs] < 1) ? 0xE74C3CFF >>> 8 : 0xFFFFFFFF >>> 8, formatInt(DealerData[id][dealerDrugs], .iCurrencyChar = '\0'), formatInt(DRUG_BUY_PRICE), formatInt(PlayerDrugData[playerid][Drugs], .iCurrencyChar = '\0'),
		(PlayerDrugData[playerid][Drugs] > 0) ? 0xFFFFFFFF >>> 8 : 0xE74C3CFF >>> 8, formatInt(DRUG_SELL_PRICE), formatInt(PlayerDrugData[playerid][Drugs], .iCurrencyChar = '\0')
	);

	ShowPlayerDialog(playerid, DIALOG_DRUG_DEALER, DIALOG_STYLE_TABLIST_HEADERS, "Uyusturucu Saticisi", dialog, "Seç", "Kapat");
	return 1;
}
Player_PlantCount(playerid)
{
	new count = 0, name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, MAX_PLAYER_NAME);
	foreach (new i : Plants) if (PlantData[i][plantedBy] == PlayerData[playerid][pID]) count++;
	return count;
}
Player_Init(playerid)
{
	new emptydata[E_PLAYER];
	PlayerDrugData[playerid] = emptydata;
	PlayerDrugData[playerid][DrugsOfferedBy] = INVALID_PLAYER_ID;
	RegenTimer[playerid] = EffectTimer[playerid] = -1;

	// load player
	new drugs, seeds, totalused, totalplanted, harvested[2], given, received, bought[2], sold[2];
	stmt_bind_value(LoadPlayer, 0, DB::TYPE_INT, PlayerData[playerid][pID]);
	stmt_bind_result_field(LoadPlayer, 0, DB::TYPE_INTEGER, drugs);
	stmt_bind_result_field(LoadPlayer, 1, DB::TYPE_INTEGER, seeds);
	stmt_bind_result_field(LoadPlayer, 2, DB::TYPE_INTEGER, totalused);
	stmt_bind_result_field(LoadPlayer, 3, DB::TYPE_INTEGER, totalplanted);
	stmt_bind_result_field(LoadPlayer, 4, DB::TYPE_INTEGER, harvested[0]);
    stmt_bind_result_field(LoadPlayer, 5, DB::TYPE_INTEGER, harvested[1]);
    stmt_bind_result_field(LoadPlayer, 6, DB::TYPE_INTEGER, given);
    stmt_bind_result_field(LoadPlayer, 7, DB::TYPE_INTEGER, received);
    stmt_bind_result_field(LoadPlayer, 8, DB::TYPE_INTEGER, bought[0]);
    stmt_bind_result_field(LoadPlayer, 9, DB::TYPE_INTEGER, bought[1]);
    stmt_bind_result_field(LoadPlayer, 10, DB::TYPE_INTEGER, sold[0]);
    stmt_bind_result_field(LoadPlayer, 11, DB::TYPE_INTEGER, sold[1]);

	if (stmt_execute(LoadPlayer))
	{
	    if (stmt_rows_left(LoadPlayer) > 0) {
	        stmt_fetch_row(LoadPlayer);

	        PlayerDrugData[playerid][Drugs] = drugs;
	        PlayerDrugData[playerid][Seeds] = seeds;
	        PlayerDrugData[playerid][TotalUsed] = totalused;
	        PlayerDrugData[playerid][TotalPlanted] = totalplanted;
	        PlayerDrugData[playerid][TotalHarvestedPlants] = harvested[0];
	        PlayerDrugData[playerid][TotalHarvestedGrams] = harvested[1];
	        PlayerDrugData[playerid][TotalGiven] = given;
	        PlayerDrugData[playerid][TotalReceived] = received;
	        PlayerDrugData[playerid][TotalBought] = bought[0];
	        PlayerDrugData[playerid][TotalBoughtPrice] = bought[1];
	        PlayerDrugData[playerid][TotalSold] = sold[0];
	        PlayerDrugData[playerid][TotalSoldPrice] = sold[1];
	    }else{
	        stmt_bind_value(InsertPlayer, 0, DB::TYPE_INT, PlayerData[playerid][pID]);
	        stmt_execute(InsertPlayer);
	    }
	}

	return 1;
}

Player_SaveDrugs(playerid)
{
    stmt_bind_value(SavePlayer, 0, DB::TYPE_INTEGER, PlayerDrugData[playerid][Drugs]);
	stmt_bind_value(SavePlayer, 1, DB::TYPE_INTEGER, PlayerDrugData[playerid][Seeds]);
	stmt_bind_value(SavePlayer, 2, DB::TYPE_INTEGER, PlayerDrugData[playerid][TotalUsed]);
	stmt_bind_value(SavePlayer, 3, DB::TYPE_INTEGER, PlayerDrugData[playerid][TotalPlanted]);
	stmt_bind_value(SavePlayer, 4, DB::TYPE_INTEGER, PlayerDrugData[playerid][TotalHarvestedPlants]);
	stmt_bind_value(SavePlayer, 5, DB::TYPE_INTEGER, PlayerDrugData[playerid][TotalHarvestedGrams]);
	stmt_bind_value(SavePlayer, 6, DB::TYPE_INTEGER, PlayerDrugData[playerid][TotalGiven]);
	stmt_bind_value(SavePlayer, 7, DB::TYPE_INTEGER, PlayerDrugData[playerid][TotalReceived]);
	stmt_bind_value(SavePlayer, 8, DB::TYPE_INTEGER, PlayerDrugData[playerid][TotalBought]);
	stmt_bind_value(SavePlayer, 9, DB::TYPE_INTEGER, PlayerDrugData[playerid][TotalBoughtPrice]);
	stmt_bind_value(SavePlayer, 10, DB::TYPE_INTEGER, PlayerDrugData[playerid][TotalSold]);
	stmt_bind_value(SavePlayer, 11, DB::TYPE_INTEGER, PlayerDrugData[playerid][TotalSoldPrice]);
	stmt_bind_value(SavePlayer, 12, DB::TYPE_INT, PlayerData[playerid][pID]);
	return stmt_execute(SavePlayer);
}

Player_GetName(playerid)
{
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, sizeof(name));
	return name;
}

Plant_GrowthPercentage(id)
{
	if (!Iter_Contains(Plants, id)) return 0;
	return (PlantData[id][plantGrowth] * 100) / PLANT_MAX_GROWTH;
}

Plant_Destroy(id)
{
	if (!Iter_Contains(Plants, id)) return 0;
	KillTimer(PlantData[id][plantTimer]);
	DestroyDynamicObject(PlantData[id][plantObj]);
	DestroyDynamic3DTextLabel(PlantData[id][plantLabel]);

	PlantData[id][plantObj] = PlantData[id][plantTimer] = -1;
	PlantData[id][plantLabel] = Text3D: -1;
	PlantData[id][gotLeaves] = false;

	Iter_Remove(Plants, id);
	return 1;
}

forward PlantGrowth(id);
public PlantGrowth(id)
{
    new label_string[128];
    PlantData[id][plantGrowth] += RandomEx(3, 7);
	if (PlantData[id][plantGrowth] >= PLANT_MAX_GROWTH)
	{
	    PlantData[id][plantGrowth] = PLANT_MAX_GROWTH;

		KillTimer(PlantData[id][plantTimer]);

	    PlantData[id][plantTimer] = SetTimerEx("PlantRot", ROT_INTERVAL * 1000, false, "i", id);

	    new percentage = Plant_GrowthPercentage(id);
        format(label_string, sizeof(label_string), "Yetismis Uyusturucu Tohumu (%d)\n\n{FFFFFF}Yerlestiren: %s\nBüyüme: {%06x}%d%%\n\n{FFFFFF}/utohum topla", id, SQLName(PlantData[id][plantedBy], 0), (percentage < 25) ? 0xE74C3CFF >>> 8 : 0x2ECC71FF >>> 8, percentage);
		UpdateDynamic3DTextLabelText(PlantData[id][plantLabel], 0xF1C40FFF, label_string);

		SetDynamicObjectMaterial(PlantData[id][plantObj], 2, 2, "plants_TABLETOP", "CJ_PLANT", 0xFFD35400);
		new owner_id = GetPlayerIDWithSQLID(PlantData[id][plantedBy]);
    	if (owner_id != -1) SunucuMesaji(owner_id, "Yerlestirdiginiz uyusturucu tohumu yetisti, çürümeden önce onu topla!");
	}
	else
	{
	    new percentage = Plant_GrowthPercentage(id);

		if (!PlantData[id][gotLeaves] && percentage >= 25)
	    {
	        SetDynamicObjectMaterial(PlantData[id][plantObj], 2, 2, "plants_TABLETOP", "CJ_PLANT", 0xFF2ECC71);
	        PlantData[id][gotLeaves] = true;
		}

	    format(label_string, sizeof(label_string), "Uyusturucu Tohumu (%d)\n\n{FFFFFF}Yerlestiren: %s\nBüyüme: {%06x}%d%%\n\n{FFFFFF}/utohum topla", id, SQLName(PlantData[id][plantedBy], 0), (percentage < 25) ? 0xE74C3CFF >>> 8 : 0x2ECC71FF >>> 8, percentage);
		UpdateDynamic3DTextLabelText(PlantData[id][plantLabel], 0xF1C40FFF, label_string);
	}
	return 1;
}

forward PlantRot(id);
public PlantRot(id)
{
    new owner_id = GetPlayerIDWithSQLID(PlantData[id][plantedBy]);
    if (owner_id != -1) SunucuMesaji(owner_id, "Ektiginiz uyusturucu tohumu çürüdü.");

    Plant_Destroy(id);
	return 1;
}

forward RegenHealth(playerid, amount);
public RegenHealth(playerid, amount)
{
	amount--;

	new Float: zirh;
	GetPlayerArmour(playerid, zirh);

	if (zirh + 2.5 < 95.0) ZirhAyarla(playerid, zirh + 2.5);
	if (amount > 0) {
		#if defined USE_DRUNKLEVEL
	    SetPlayerDrunkLevel(playerid, 4999);
		#endif

		RegenTimer[playerid] = SetTimerEx("RegenHealth", 500, false, "ii", playerid, amount);
	}else{
	    #if defined USE_DRUNKLEVEL
	    SetPlayerDrunkLevel(playerid, 0);
		#endif

	    if (RegenTimer[playerid] != -1)
		{
		    KillTimer(RegenTimer[playerid]);
		    RegenTimer[playerid] = -1;
		}
	}

	return 1;
}

forward RemoveEffects(playerid);
public RemoveEffects(playerid)
{
	#if defined USE_DRUNKLEVEL
	SetPlayerDrunkLevel(playerid, 0);
	#endif

	SetPlayerWeather(playerid, 10);
	if (EffectTimer[playerid] != -1)
	{
	    KillTimer(EffectTimer[playerid]);
	    EffectTimer[playerid] = -1;
	}

	return 1;
}

ConvertToMinutes(time)
{
    // http://forum.sa-mp.com/showpost.php?p=3223897&postcount=11
    new string[15];//-2000000000:00 could happen, so make the string 15 chars to avoid any errors
    format(string, sizeof(string), "%02d:%02d", time / 60, time % 60);
    return string;
}

IsPlayerNearBanker(playerid)
{
	foreach (new i : Bankers)
	{
	    if (IsPlayerInRangeOfPoint(playerid, 3.0, BankerData[i][bankerX], BankerData[i][bankerY], BankerData[i][bankerZ])) return 1;
	}

	return 0;
}

GetClosestATM(playerid, Float: range = 3.0)
{
	new id = -1, Float: dist = range, Float: tempdist;
	foreach (new i : ATMs)
	{
	    tempdist = GetPlayerDistanceFromPoint(playerid, ATMData[i][atmX], ATMData[i][atmY], ATMData[i][atmZ]);

	    if (tempdist > range) continue;
		if (tempdist <= dist)
		{
			dist = tempdist;
			id = i;
		}
	}

	return id;
}

Bank_SaveLog(playerid, type, accid, toaccid, amount)
{
	if (type == TYPE_NONE) return 1;
	new query[256];

	switch (type)
	{
	    case TYPE_LOGIN, TYPE_PASSCHANGE: mysql_format(g_SQL, query, sizeof(query), "INSERT INTO bank_logs SET AccountID=%d, Type=%d, Player='%e', Date=UNIX_TIMESTAMP()", accid, type, Player_GetName(playerid));
	    case TYPE_DEPOSIT, TYPE_WITHDRAW: mysql_format(g_SQL, query, sizeof(query), "INSERT INTO bank_logs SET AccountID=%d, Type=%d, Player='%e', Amount=%d, Date=UNIX_TIMESTAMP()", accid, type, Player_GetName(playerid), amount);
		case TYPE_TRANSFER: mysql_format(g_SQL, query, sizeof(query), "INSERT INTO bank_logs SET AccountID=%d, ToAccountID=%d, Type=%d, Player='%e', Amount=%d, Date=UNIX_TIMESTAMP()", accid, toaccid, type, Player_GetName(playerid), amount);
	}

	mysql_tquery(g_SQL, query);
	return 1;
}

Bank_ShowMenu(playerid)
{
	new string[256], using_atm = GetPVarInt(playerid, "usingATM");
	if (CurrentAccountID[playerid] == -1) {
		format(string, sizeof(string), "{%06x}Hesap Oluþtur\t{2ECC71}%s\nBenim Hesaplarým\t{F1C40F}%d\nGiriþ Yap", (using_atm ? 0xE74C3CFF >>> 8 : 0xFFFFFFFF >>> 8), (using_atm ? ("") : formatInt(ACCOUNT_PRICE)), Bank_AccountCount(playerid));
		ShowPlayerDialog(playerid, DIALOG_BANK_MENU_NOLOGIN, DIALOG_STYLE_TABLIST, "{F1C40F}Banka: {FFFFFF}Menu", string, "Seç", "Kapat");
	}else{
	    new balance = Bank_GetBalance(CurrentAccountID[playerid]), menu_title[64];
		format(menu_title, sizeof(menu_title), "{F1C40F}Banka: {FFFFFF}Menu (Hesap Numarasý: {F1C40F}%d{FFFFFF})", CurrentAccountID[playerid]);

	    format(
			string,
			sizeof(string),
			"{%06x}Hesap Oluþtur\t{2ECC71}%s\nBenim Hesaplarým\t{F1C40F}%d\nPara Yatýr\t{2ECC71}%s\nPara Çek\t{2ECC71}%s\nPara Transfer\t{2ECC71}%s\n{%06x}Hesap Kayýtlarý\n{%06x}Þifre Deðiþtir\n{%06x}Hesap Sil\nÇýkýþ Yap",
			(using_atm ? 0xE74C3CFF >>> 8 : 0xFFFFFFFF >>> 8),
			(using_atm ? ("") : formatInt(ACCOUNT_PRICE)),
			Bank_AccountCount(playerid),
			formatInt(GetPlayerMoney(playerid)),
			formatInt(balance),
			formatInt(balance),
			(using_atm ? 0xE74C3CFF >>> 8 : 0xFFFFFFFF >>> 8),
			(using_atm ? 0xE74C3CFF >>> 8 : 0xFFFFFFFF >>> 8),
			(using_atm ? 0xE74C3CFF >>> 8 : 0xFFFFFFFF >>> 8)
		);

		ShowPlayerDialog(playerid, DIALOG_BANK_MENU, DIALOG_STYLE_TABLIST, menu_title, string, "Seç", "Kapat");
	}

	DeletePVar(playerid, "bankLoginAccount");
	DeletePVar(playerid, "bankTransferAccount");
	return 1;
}

Bank_ShowLogMenu(playerid)
{
	LogListType[playerid] = TYPE_NONE;
	LogListPage[playerid] = 0;
	ShowPlayerDialog(playerid, DIALOG_BANK_LOGS, DIALOG_STYLE_LIST, "{F1C40F}Banka: {FFFFFF}Kayitlar", "Yatirilan Para Kayitlari\nÇekilen Para Kayitlari\nTransfer Edilen Para Kayitlari\nGiris Kayitlari\nsifre Degistirme Kayitlari", "Seç", "Geri");
	return 1;
}
Bank_AccountCount(playerid)
{
	new query[144], Cache: find_accounts;
	mysql_format(g_SQL, query, sizeof(query), "SELECT null FROM bank_accounts WHERE Owner='%d' && Disabled=0", PlayerData[playerid][pID]);
	find_accounts = mysql_query(g_SQL, query);

	new count = cache_num_rows();
	cache_delete(find_accounts);
	return count;
}

Bank_GetBalance(accountid)
{
	new query[144], Cache: get_balance;
	mysql_format(g_SQL, query, sizeof(query), "SELECT Balance FROM bank_accounts WHERE ID=%d && Disabled=0", accountid);
	get_balance = mysql_query(g_SQL, query);

	new balance;
	cache_get_value_name_int(0, "Balance", balance);
	cache_delete(get_balance);
	return balance;
}

Bank_GetOwner(accountid)
{
	new query[144], owner, Cache: get_owner;
	mysql_format(g_SQL, query, sizeof(query), "SELECT Owner FROM bank_accounts WHERE ID=%d && Disabled=0", accountid);
	get_owner = mysql_query(g_SQL, query);

	cache_get_value_name_int(0, "Owner", owner);
	cache_delete(get_owner);
	return owner;
}

Bank_ListAccounts(playerid)
{
    new query[256], Cache: get_accounts;
    mysql_format(g_SQL, query, sizeof(query), "SELECT ID, Balance, LastAccess, FROM_UNIXTIME(CreatedOn, '%%d/%%m/%%Y %%H:%%i:%%s') AS Created, FROM_UNIXTIME(LastAccess, '%%d/%%m/%%Y %%H:%%i:%%s') AS Last FROM bank_accounts WHERE Owner='%d' && Disabled=0 ORDER BY CreatedOn DESC", PlayerData[playerid][pID]);
	get_accounts = mysql_query(g_SQL, query);
    new rows = cache_num_rows();

	if (rows) {
	    new string[1024], acc_id, balance, last_access, cdate[24], ldate[24];
    	format(string, sizeof(string), "ID\tDenge\tOlusturulma\tSon Giris\n");
	    for (new i; i < rows; ++i)
	    {
	        cache_get_value_name_int(i, "ID", acc_id);
	        cache_get_value_name_int(i, "Balance", balance);
	        cache_get_value_name_int(i, "LastAccess", last_access);
        	cache_get_value_name(i, "Created", cdate);
        	cache_get_value_name(i, "Last", ldate);

	        format(string, sizeof(string), "%s{FFFFFF}%d\t{2ECC71}%s\t{FFFFFF}%s\t%s\n", string, acc_id, formatInt(balance), cdate, (last_access == 0) ? ("Yok") : ldate);
	    }

		ShowPlayerDialog(playerid, DIALOG_BANK_ACCOUNTS, DIALOG_STYLE_TABLIST_HEADERS, "{F1C40F}Banka: {FFFFFF}Hesaplarim", string, "Giris", "Geri");
	}else{
	    HataMesajGonder(playerid, "Hiç banka hesabiniz yok.");
		Bank_ShowMenu(playerid);
	}

    cache_delete(get_accounts);
	return 1;
}

Bank_ShowLogs(playerid)
{
	new query[196], type = LogListType[playerid], Cache: bank_logs;
	mysql_format(g_SQL, query, sizeof(query), "SELECT *, FROM_UNIXTIME(Date, '%%d/%%m/%%Y %%H:%%i:%%s') as ActionDate FROM bank_logs WHERE AccountID=%d && Type=%d ORDER BY Date DESC LIMIT %d, 15", CurrentAccountID[playerid], type, LogListPage[playerid] * 15);
	bank_logs = mysql_query(g_SQL, query);

	new rows = cache_num_rows();
	if (rows) {
		new list[1512], title[96], name[MAX_PLAYER_NAME], date[24];
		switch (type)
		{
		    case TYPE_LOGIN:
			{
				format(list, sizeof(list), "By\tAction Date\n");
				format(title, sizeof(title), "{F1C40F}Banka: {FFFFFF}Giris Kayitlari (Sayfa %d)", LogListPage[playerid] + 1);
			}

			case TYPE_DEPOSIT:
			{
				format(list, sizeof(list), "Yatiran\tMiktar\tTarih\n");
				format(title, sizeof(title), "{F1C40F}Banka: {FFFFFF}Yatirilan Para Kayitlari (Sayfa %d)", LogListPage[playerid] + 1);
			}

			case TYPE_WITHDRAW:
			{
				format(list, sizeof(list), "Çeken\tMiktar\tTarih\n");
				format(title, sizeof(title), "{F1C40F}Banka: {FFFFFF}Çekilen Para Kayitlari (Sayfa %d)", LogListPage[playerid] + 1);
			}

			case TYPE_TRANSFER:
			{
				format(list, sizeof(list), "Transfer Eden\tHesap Numarasi\tMiktar\tTarih\n");
				format(title, sizeof(title), "{F1C40F}Banka: {FFFFFF}Transfer Edilen Para Kayitlari (Sayfa %d)", LogListPage[playerid] + 1);
			}

			case TYPE_PASSCHANGE:
			{
				format(list, sizeof(list), "Degistiren\tTarih\n");
				format(title, sizeof(title), "{F1C40F}Banka: {FFFFFF}sifre Degistirme Kayitlari (Sayfa %d)", LogListPage[playerid] + 1);
			}
		}

		new amount, to_acc_id;
	    for (new i; i < rows; ++i)
	    {
	        cache_get_value_name(i, "Player", name);
        	cache_get_value_name(i, "ActionDate", date);

            switch (type)
			{
			    case TYPE_LOGIN:
				{
					format(list, sizeof(list), "%s%s\t%s\n", list, name, date);
				}

				case TYPE_DEPOSIT:
				{
				    cache_get_value_name_int(i, "Amount", amount);
					format(list, sizeof(list), "%s%s\t{2ECC71}%s\t%s\n", list, name, formatInt(amount), date);
				}

				case TYPE_WITHDRAW:
				{
				    cache_get_value_name_int(i, "Amount", amount);
					format(list, sizeof(list), "%s%s\t{2ECC71}%s\t%s\n", list, name, formatInt(amount), date);
				}

				case TYPE_TRANSFER:
				{
				    cache_get_value_name_int(i, "ToAccountID", to_acc_id);
				    cache_get_value_name_int(i, "Amount", amount);

					format(list, sizeof(list), "%s%s\t%d\t{2ECC71}%s\t%s\n", list, name, to_acc_id, formatInt(amount), date);
				}

				case TYPE_PASSCHANGE:
				{
					format(list, sizeof(list), "%s%s\t%s\n", list, name, date);
				}
			}
	    }

		ShowPlayerDialog(playerid, DIALOG_BANK_LOG_PAGE, DIALOG_STYLE_TABLIST_HEADERS, title, list, "Sonraki", "Geri");
	}else{
		HataMesajGonder(playerid, "Daha fazla kayit bulunamadi.");
		Bank_ShowLogMenu(playerid);
	}

	cache_delete(bank_logs);
	return 1;
}
forward LoadBankers();
public LoadBankers()
{
	new rows = cache_num_rows();

	if (rows)
	{
	    new id, label_string[80];
	    for (new i; i < rows; i++)
		{
		    cache_get_value_name_int(i, "ID", id);
		    cache_get_value_name_int(i, "Skin", BankerData[id][Skin]);
		    cache_get_value_name_float(i, "PosX", BankerData[id][bankerX]);
		    cache_get_value_name_float(i, "PosY", BankerData[id][bankerY]);
		    cache_get_value_name_float(i, "PosZ", BankerData[id][bankerZ]);
		    cache_get_value_name_float(i, "PosA", BankerData[id][bankerA]);
		    cache_get_value_name_int(i, "Virtual", BankerData[id][bankerVw]);

		    BankerData[id][bankerActorID] = CreateActor(BankerData[id][Skin], BankerData[id][bankerX], BankerData[id][bankerY], BankerData[id][bankerZ], BankerData[id][bankerA]);

			if (!IsValidActor(BankerData[id][bankerActorID]))
			{
				printf("  [Bank System] Couldn't create an actor for banker ID %d.", id);
			}
			else
			{
			    SetActorInvulnerable(BankerData[id][bankerActorID], true); // people may use a version where actors aren't invulnerable by default
			    SetActorVirtualWorld(BankerData[id][bankerActorID], BankerData[id][bankerVw]);
			}

			#if defined BANKER_USE_MAPICON
			BankerData[id][bankerIconID] = CreateDynamicMapIcon(BankerData[id][bankerX], BankerData[id][bankerY], BankerData[id][bankerZ], 58, 0, .streamdistance = BANKER_ICON_RANGE);
			#endif

			format(label_string, sizeof(label_string), "Bankaci (%d)\n\n{F1C40F}ALT {FFFFFF}tusuna basarak etkilesime geçebilirsiniz.", id);
			BankerData[id][bankerLabel] = CreateDynamic3DTextLabel(label_string, 0x1ABC9CFF, BankerData[id][bankerX], BankerData[id][bankerY], BankerData[id][bankerZ] + 0.25, 5.0, .testlos = 1);

			Iter_Add(Bankers, id);
		}
	}

	printf("  [Bank System] Loaded %d bankers.", Iter_Count(Bankers));
	return 1;
}

forward LoadATMs();
public LoadATMs()
{
	new rows = cache_num_rows();
	if (rows)
	{
	    new id, label_string[64];
	    #if defined ROBBABLE_ATMS
		new dataArray[E_ATMDATA];
	    #endif

	    for (new i; i < rows; i++)
		{
		    cache_get_value_name_int(i, "ID", id);
	     	cache_get_value_name_float(i, "PosX", ATMData[id][atmX]);
	     	cache_get_value_name_float(i, "PosY", ATMData[id][atmY]);
	     	cache_get_value_name_float(i, "PosZ", ATMData[id][atmZ]);
	     	cache_get_value_name_float(i, "RotX", ATMData[id][atmRX]);
	     	cache_get_value_name_float(i, "RotY", ATMData[id][atmRY]);
	     	cache_get_value_name_float(i, "RotZ", ATMData[id][atmRZ]);

		    ATMData[id][atmObjID] = CreateDynamicObject(19324, ATMData[id][atmX], ATMData[id][atmY], ATMData[id][atmZ], ATMData[id][atmRX], ATMData[id][atmRY], ATMData[id][atmRZ]);

			#if defined ROBBABLE_ATMS
		    if (IsValidDynamicObject(ATMData[id][atmObjID])) {
		        format(dataArray[IDString], 8, "atm_sys");
		        dataArray[refID] = id;

		        Streamer_SetArrayData(STREAMER_TYPE_OBJECT, ATMData[id][atmObjID], E_STREAMER_EXTRA_ID, dataArray);
		    }else{
				printf("  [Bank System] Couldn't create an ATM object for ATM ID %d.", id);
		    }
			#else
			if (!IsValidDynamicObject(ATMData[id][atmObjID])) printf("  [Bank System] Couldn't create an ATM object for ATM ID %d.", id);
			#endif

			#if defined ATM_USE_MAPICON
			ATMData[id][atmIconID] = CreateDynamicMapIcon(ATMData[id][atmX], ATMData[id][atmY], ATMData[id][atmZ], 52, 0, .streamdistance = ATM_ICON_RANGE);
			#endif

			format(label_string, sizeof(label_string), "ATM (%d)\n\n{FFFFFF}Etkilesim {F1C40F}[ALT]", id);
			ATMData[id][atmLabel] = CreateDynamic3DTextLabel(label_string, 0x1ABC9CFF, ATMData[id][atmX], ATMData[id][atmY], ATMData[id][atmZ] + 0.85, 5.0, .testlos = 1);

			Iter_Add(ATMs, id);
		}
	}

    printf("  [Bank System] Loaded %d ATMs.", Iter_Count(ATMs));
	return 1;
}

forward OnBankAccountCreated(playerid, pass[]);
public OnBankAccountCreated(playerid, pass[])
{
	ParaVer(playerid, -ACCOUNT_PRICE);

	new id = cache_insert_id();
	MesajGonder(playerid, "Banka hesabýnýz oluþturuldu.");

	SunucuMesaji(playerid, "Hesap Numarasý: %d", id);
	SunucuMesaji(playerid, "Hesap Þifreniz: %s", pass);
	return 1;
}

forward OnBankAccountLogin(playerid, id);
public OnBankAccountLogin(playerid, id)
{
	if (cache_num_rows() > 0) {
	    new owner, last_access, ldate[24];
	    cache_get_value_name_int(0, "Owner", owner);
	    cache_get_value_name_int(0, "LastAccess", last_access);
	    cache_get_value_name(0, "Last", ldate);

	    SunucuMesaji(playerid, "Bu hesap %s adlý kiþiye kayýtlýdýr.", SQLName(owner));
	    SunucuMesaji(playerid, "Son Aktiflik: {F1C40F}%s", (last_access == 0) ? ("Never") : ldate);

	    CurrentAccountID[playerid] = id;
	    Bank_ShowMenu(playerid);

	    new query[96];
	    mysql_format(g_SQL, query, sizeof(query), "UPDATE bank_accounts SET LastAccess=UNIX_TIMESTAMP() WHERE ID=%d && Disabled=0", id);
	    mysql_tquery(g_SQL, query);

	    Bank_SaveLog(playerid, TYPE_LOGIN, id, -1, 0);
	}else{
	    HataMesajGonder(playerid, "Yanlýþ þifre veya hesap numarasý girildi.");
	    Bank_ShowMenu(playerid);
	}

	return 1;
}

forward OnBankAccountDeposit(playerid, amount);
public OnBankAccountDeposit(playerid, amount)
{
	if (cache_affected_rows() > 0) {
	    MesajGonder(playerid, "Banka hesabýna {2ECC71}%s {FFFFFF}miktar para yatýrýldý.", FormatNumber(amount));

	    ParaVer(playerid, -amount);
	    Bank_SaveLog(playerid, TYPE_DEPOSIT, CurrentAccountID[playerid], -1, amount);
	}else{
	    HataMesajGonder(playerid, "Hata oluþtu.");
	}

	Bank_ShowMenu(playerid);
	return 1;
}

forward OnBankAccountWithdraw(playerid, amount);
public OnBankAccountWithdraw(playerid, amount)
{
	if (cache_affected_rows() > 0) {
	    MesajGonder(playerid, "Banka hesabýndan {2ECC71}%s {FFFFFF}miktar para çekildi.", FormatNumber(amount));

	    ParaVer(playerid, amount);
	    Bank_SaveLog(playerid, TYPE_WITHDRAW, CurrentAccountID[playerid], -1, amount);
	}else{
	    HataMesajGonder(playerid, "Hata oluþtu.");
	}

    Bank_ShowMenu(playerid);
	return 1;
}

forward OnBankAccountTransfer(playerid, id, amount);
public OnBankAccountTransfer(playerid, id, amount)
{
	if (cache_affected_rows() > 0) {
		new query[144];
		mysql_format(g_SQL, query, sizeof(query), "UPDATE bank_accounts SET Balance=Balance-%d WHERE ID=%d && Disabled=0", amount, CurrentAccountID[playerid]);
		mysql_tquery(g_SQL, query, "OnBankAccountTransferDone", "iii", playerid, id, amount);
	}else{
	    HataMesajGonder(playerid, "Transfer basarisiz, hatali hesap numarasi girmis olabilirsiniz.");
	    Bank_ShowMenu(playerid);
	}

	return 1;
}

forward OnBankAccountTransferDone(playerid, id, amount);
public OnBankAccountTransferDone(playerid, id, amount)
{
	if (cache_affected_rows() > 0) {
	    MesajGonder(playerid, "{F1C40F}%d {FFFFFF}numarali hesaba {2ECC71}%s {FFFFFF}miktar para transfer ettiniz.", id, FormatNumber(amount));

		Bank_SaveLog(playerid, TYPE_TRANSFER, CurrentAccountID[playerid], id, amount);
	}else{
	   HataMesajGonder(playerid, "Transfer basarisiz, hatali hesap numarasi girmis olabilirsiniz.");

	}

    Bank_ShowMenu(playerid);
	return 1;
}

forward OnBankAccountPassChange(playerid, newpass[]);
public OnBankAccountPassChange(playerid, newpass[])
{
	if (cache_affected_rows() > 0) {
	    SunucuMesaji(playerid, "sifre '%s' olarak degistirildi.", newpass);

        Bank_SaveLog(playerid, TYPE_PASSCHANGE, CurrentAccountID[playerid], -1, 0);
	}else{
	    HataMesajGonder(playerid, "sifre degistirme basarisiz.");
	}

    Bank_ShowMenu(playerid);
	return 1;
}

forward OnBankAccountDeleted(playerid, id, amount);
public OnBankAccountDeleted(playerid, id, amount)
{
    if (cache_affected_rows() > 0) {
        ParaVer(playerid, amount);

        foreach (new i : Player)
        {
            if (i == playerid) continue;
            if (CurrentAccountID[i] == id) CurrentAccountID[i] = -1;
        }

	    SunucuMesaji(playerid, "Banka hesabiniz silindi.");
	}else{
	    SendClientMessage(playerid, 0xE74C3CFF, "Hata olustu.");
	}

	CurrentAccountID[playerid] = -1;
    Bank_ShowMenu(playerid);
	return 1;
}

forward OnBankAccountAdminEdit(playerid);
public OnBankAccountAdminEdit(playerid)
{
    if (cache_affected_rows() > 0) {
        MesajGonder(playerid, "Hesap düzenlendi.");
	}else{
	    SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}Account editing failed. (No affected rows)");
	}

	return 1;
}

Ticket_Add(suspectid, price, reason[], memur[])
{
    new
        string[1024];


    for (new i = 0; i != MAX_PLAYER_TICKETS; i ++)
    {
        if (!TicketData[suspectid][i][ticketExists])
        {
            TicketData[suspectid][i][ticketExists] = true;
            TicketData[suspectid][i][ticketFee] = price;
			format(TicketData[suspectid][i][ticketMemur], 24, memur);
            format(TicketData[suspectid][i][ticketDate], 36, ReturnDate());
            format(TicketData[suspectid][i][ticketReason], 64, reason);
            TicketData[suspectid][i][ticketID] = i;

            mysql_format(g_SQL, string, sizeof(string), "INSERT INTO `tickets` (`ticketID`, `ID`, `ticketFee`, `ticketDate`, `ticketReason`, `Memur`) VALUES ('%d', '%d', '%d', '%s', '%s', '%s')", i, PlayerData[suspectid][pID], price, TicketData[suspectid][i][ticketDate], SQL_ReturnEscaped(reason), memur);
            mysql_query (g_SQL, string);
            return i;
        }
    }
    return -1;
}

Ticket_Remove(playerid, ticketid)
{
    if (ticketid != -1 && TicketData[playerid][ticketid][ticketExists])
    {
        new
            string[100];

        format(string, sizeof(string), "DELETE FROM `tickets` WHERE `ID` = '%d' AND `ticketID` = '%d'", PlayerData[playerid][pID], TicketData[playerid][ticketid][ticketID]);
        mysql_tquery(g_SQL, string);

        TicketData[playerid][ticketid][ticketExists] = false;
        TicketData[playerid][ticketid][ticketID] = 0;
        TicketData[playerid][ticketid][ticketFee] = 0;
        format(TicketData[playerid][ticketid][ticketMemur], 24, "");
    }
    return 1;
}

stock GetFreeCopObjectID()
{
	new id = -1;
	for (new i; i < MAX_COP_OBJECTS; i++)
	{
	    if (!CopObjectData[i][ObjCreated])
	    {
	        id = i;
	        break;
	    }
	}

	return id;
}

stock GetPlayerSpeed(vid)
{
    new Float:vx, Float:vy, Float:vz, Float:vel;
	vel = GetVehicleVelocity(vid, vx, vy, vz);
	vel = (floatsqroot(((vx*vx)+(vy*vy))+(vz*vz))* 181.5);
	return floatround(vel);
}

stock InsertObjectToDB(id)
{
    stmt_bind_value(AddObject, 0, DB::TYPE_INTEGER, id);
	stmt_bind_value(AddObject, 1, DB::TYPE_STRING, format(CopObjectData[id][Owner],32,ReturnName(id, 0)));
	stmt_bind_value(AddObject, 2, DB::TYPE_INTEGER, CopObjectData[id][Type]);
	stmt_bind_value(AddObject, 3, DB::TYPE_INTEGER, CopObjectData[id][ObjData]);
    stmt_bind_value(AddObject, 4, DB::TYPE_INTEGER, CopObjectData[id][ObjModel]);
	stmt_bind_value(AddObject, 5, DB::TYPE_FLOAT, CopObjectData[id][ObjX]);
	stmt_bind_value(AddObject, 6, DB::TYPE_FLOAT, CopObjectData[id][ObjY]);
	stmt_bind_value(AddObject, 7, DB::TYPE_FLOAT, CopObjectData[id][ObjZ]);
	stmt_bind_value(AddObject, 8, DB::TYPE_FLOAT, CopObjectData[id][ObjRX]);
	stmt_bind_value(AddObject, 9, DB::TYPE_FLOAT, CopObjectData[id][ObjRY]);
	stmt_bind_value(AddObject, 10, DB::TYPE_FLOAT, CopObjectData[id][ObjRZ]);
	stmt_bind_value(AddObject, 11, DB::TYPE_INTEGER, CopObjectData[id][ObjInterior]);
	stmt_bind_value(AddObject, 12, DB::TYPE_INTEGER, CopObjectData[id][ObjVirtualWorld]);
	stmt_execute(AddObject);
	return 1;
}

stock SaveObjectToDB(id)
{
    stmt_bind_value(UpdateObject, 0, DB::TYPE_FLOAT, CopObjectData[id][ObjX]);
	stmt_bind_value(UpdateObject, 1, DB::TYPE_FLOAT, CopObjectData[id][ObjY]);
	stmt_bind_value(UpdateObject, 2, DB::TYPE_FLOAT, CopObjectData[id][ObjZ]);
	stmt_bind_value(UpdateObject, 3, DB::TYPE_FLOAT, CopObjectData[id][ObjRX]);
	stmt_bind_value(UpdateObject, 4, DB::TYPE_FLOAT, CopObjectData[id][ObjRY]);
	stmt_bind_value(UpdateObject, 5, DB::TYPE_FLOAT, CopObjectData[id][ObjRZ]);
	stmt_bind_value(UpdateObject, 6, DB::TYPE_INTEGER, id);
	stmt_execute(UpdateObject);
	return 1;
}
encode_tires(tire1, tire2, tire3, tire4) return tire1 | (tire2 << 1) | (tire3 << 2) | (tire4 << 3);
stock RemoveBuildings(playerid)
{

// willowfield
RemoveBuildingForPlayer(playerid, 5310, 2267.959, -1997.890, 18.578, 0.250);
RemoveBuildingForPlayer(playerid, 5318, 2267.959, -1997.890, 18.578, 0.250);
RemoveBuildingForPlayer(playerid, 1687, 2300.179, -1997.050, 25.468, 0.250);
RemoveBuildingForPlayer(playerid, 1635, 2296.669, -1982.199, 17.625, 0.250);
RemoveBuildingForPlayer(playerid, 1687, 2236.139, -2010.229, 18.296, 0.250);
RemoveBuildingForPlayer(playerid, 1635, 2255.840, -2013.589, 15.148, 0.250);

// marco bistro
RemoveBuildingForPlayer(playerid, 5463, 1881.800, -1315.540, 37.945, 0.250);
RemoveBuildingForPlayer(playerid, 5466, 1881.800, -1315.540, 37.945, 0.250);
RemoveBuildingForPlayer(playerid, 5644, 1881.819, -1315.920, 30.835, 0.250);
RemoveBuildingForPlayer(playerid, 5464, 1902.430, -1309.540, 29.914, 0.250);
RemoveBuildingForPlayer(playerid, 11542, -1016.789, 1372.010, 21.156, 0.250);
RemoveBuildingForPlayer(playerid, 11656, -1016.789, 1372.010, 21.156, 0.250);

// palomino
	RemoveBuildingForPlayer(playerid, 13026, 2261.4219, -71.8125, 25.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 781, 2253.7734, -79.5313, 25.4922, 0.25);
	RemoveBuildingForPlayer(playerid, 12959, 2261.4219, -71.8125, 25.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 1688, 2269.0938, -68.6094, 31.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 1691, 2262.2031, -69.4297, 30.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 956, 2271.7266, -76.4609, 25.9609, 0.25);
	RemoveBuildingForPlayer(playerid, 781, 2259.3906, -79.4141, 25.4922, 0.25);
	RemoveBuildingForPlayer(playerid, 781, 2266.0859, -79.4141, 25.4922, 0.25);
	RemoveBuildingForPlayer(playerid, 1440, 2274.6641, -69.8438, 26.0781, 0.25);
	RemoveBuildingForPlayer(playerid, 1294, 2285.0234, -89.4453, 29.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 669, 2248.6250, -65.6797, 25.8125, 0.25);


// Fakir Ev 2

RemoveBuildingForPlayer(playerid, 2251, 266.4531, 303.3672, 998.9844, 0.25);
RemoveBuildingForPlayer(playerid, 14867, 270.2813, 302.5547, 999.6797, 0.25);
RemoveBuildingForPlayer(playerid, 1720, 272.9063, 304.7891, 998.1641, 0.25);
RemoveBuildingForPlayer(playerid, 14870, 273.1641, 303.1719, 1000.9141, 0.25);
RemoveBuildingForPlayer(playerid, 2251, 273.9922, 303.3672, 998.9844, 0.25);
RemoveBuildingForPlayer(playerid, 14868, 274.1328, 304.5078, 1001.1953, 0.25);
RemoveBuildingForPlayer(playerid, 948, 266.5703, 306.4453, 998.1406, 0.25);
RemoveBuildingForPlayer(playerid, 14866, 270.1172, 307.6094, 998.7578, 0.25);
RemoveBuildingForPlayer(playerid, 14869, 273.8125, 305.0156, 998.9531, 0.25);

// Fakir Ev 3

RemoveBuildingForPlayer(playerid, 2865, 2499.5000, -1712.2188, 1014.8672, 0.25);
RemoveBuildingForPlayer(playerid, 2821, 2500.9297, -1710.3516, 1014.8516, 0.25);
RemoveBuildingForPlayer(playerid, 1509, 2501.1953, -1710.6953, 1015.0547, 0.25);
RemoveBuildingForPlayer(playerid, 2277, 2494.7578, -1705.3281, 1018.8984, 0.25);
RemoveBuildingForPlayer(playerid, 1512, 2500.8906, -1706.5703, 1015.0547, 0.25);
RemoveBuildingForPlayer(playerid, 1512, 2501.1172, -1705.4766, 1015.0547, 0.25);
RemoveBuildingForPlayer(playerid, 1509, 2501.1953, -1706.8594, 1015.0547, 0.25);
RemoveBuildingForPlayer(playerid, 1520, 2501.2969, -1707.2344, 1014.9141, 0.25);
RemoveBuildingForPlayer(playerid, 1520, 2501.2969, -1707.3594, 1014.9141, 0.25);
RemoveBuildingForPlayer(playerid, 2830, 2491.8359, -1702.9375, 1014.5703, 0.25);
RemoveBuildingForPlayer(playerid, 2306, 2491.8359, -1701.2813, 1017.3516, 0.25);
RemoveBuildingForPlayer(playerid, 1794, 2492.9688, -1701.8516, 1017.3672, 0.25);
RemoveBuildingForPlayer(playerid, 2306, 2494.0156, -1701.3125, 1017.3516, 0.25);
RemoveBuildingForPlayer(playerid, 2247, 2494.1172, -1700.3359, 1018.8203, 0.25);
RemoveBuildingForPlayer(playerid, 14478, 2494.4297, -1698.3359, 1014.0391, 0.25);
RemoveBuildingForPlayer(playerid, 1740, 2495.2891, -1704.4922, 1017.3672, 0.25);
RemoveBuildingForPlayer(playerid, 2816, 2494.8047, -1702.5156, 1018.0469, 0.25);
RemoveBuildingForPlayer(playerid, 2272, 2496.2188, -1702.5234, 1018.5859, 0.25);
RemoveBuildingForPlayer(playerid, 14477, 2501.0703, -1697.6172, 1016.1250, 0.25);
RemoveBuildingForPlayer(playerid, 14490, 2501.0703, -1697.6172, 1016.1250, 0.25);
RemoveBuildingForPlayer(playerid, 14491, 2501.0703, -1697.6172, 1016.1250, 0.25);
RemoveBuildingForPlayer(playerid, 2252, 2493.0469, -1697.1875, 1014.5703, 0.25);
RemoveBuildingForPlayer(playerid, 2827, 2497.6563, -1697.0703, 1014.7266, 0.25);
RemoveBuildingForPlayer(playerid, 14489, 2490.4453, -1694.8672, 1015.4609, 0.25);
RemoveBuildingForPlayer(playerid, 2028, 2491.3438, -1694.7656, 1013.8359, 0.25);

// Fakir Ev 4

RemoveBuildingForPlayer(playerid, 15028, 2263.1250, -1138.2422, 1049.8438, 0.25);
RemoveBuildingForPlayer(playerid, 15026, 2264.9063, -1137.7656, 1051.3594, 0.25);

// vinewood

RemoveBuildingForPlayer(playerid, 13722, 1413.410, -804.742, 83.437, 0.250);
RemoveBuildingForPlayer(playerid, 13759, 1413.410, -804.742, 83.437, 0.250);
RemoveBuildingForPlayer(playerid, 13831, 1413.410, -804.742, 83.437, 0.250);
RemoveBuildingForPlayer(playerid, 13759, 1413.410, -804.742, 83.437, 0.250);
RemoveBuildingForPlayer(playerid, 620, 1375.089, -813.539, 69.570, 0.250);

// Fakir Ev 5

RemoveBuildingForPlayer(playerid, 15028, 2263.1250, -1138.2422, 1049.8438, 0.25);
RemoveBuildingForPlayer(playerid, 15026, 2264.9063, -1137.7656, 1051.3594, 0.25);
RemoveBuildingForPlayer(playerid, 15032, 2278.5547, -1136.6250, 1051.6328, 0.25);
RemoveBuildingForPlayer(playerid, 15036, 2278.5859, -1135.2266, 1051.0313, 0.25);
RemoveBuildingForPlayer(playerid, 15051, 2279.9375, -1135.8203, 1049.7656, 0.25);
RemoveBuildingForPlayer(playerid, 1764, 2286.1250, -1138.4766, 1049.8828, 0.25);
RemoveBuildingForPlayer(playerid, 15037, 2280.5703, -1137.7422, 1050.2188, 0.25);
RemoveBuildingForPlayer(playerid, 2099, 2281.1953, -1136.0156, 1049.8828, 0.25);

// Fakir Ev 6

RemoveBuildingForPlayer(playerid, 2046, 2806.2266, -1174.5703, 1026.3594, 0.25);
RemoveBuildingForPlayer(playerid, 2049, 2805.2109, -1173.4922, 1026.5234, 0.25);
RemoveBuildingForPlayer(playerid, 2241, 2805.6875, -1173.5156, 1025.0703, 0.25);
RemoveBuildingForPlayer(playerid, 2060, 2810.3047, -1172.8516, 1025.2109, 0.25);
RemoveBuildingForPlayer(playerid, 2060, 2810.3047, -1172.8516, 1025.0469, 0.25);
RemoveBuildingForPlayer(playerid, 2060, 2810.3047, -1172.8516, 1024.8750, 0.25);
RemoveBuildingForPlayer(playerid, 2060, 2810.3047, -1172.8516, 1024.7031, 0.25);
RemoveBuildingForPlayer(playerid, 2060, 2811.6016, -1172.8516, 1024.8750, 0.25);
RemoveBuildingForPlayer(playerid, 2060, 2811.6016, -1172.8516, 1024.7031, 0.25);
RemoveBuildingForPlayer(playerid, 2060, 2811.6016, -1172.8516, 1025.0469, 0.25);
RemoveBuildingForPlayer(playerid, 2060, 2811.6016, -1172.8516, 1025.2109, 0.25);
RemoveBuildingForPlayer(playerid, 2048, 2805.2109, -1172.0547, 1026.8906, 0.25);
RemoveBuildingForPlayer(playerid, 2055, 2805.1953, -1170.5391, 1026.5078, 0.25);
RemoveBuildingForPlayer(playerid, 2060, 2810.0234, -1171.2266, 1024.7031, 0.25);
RemoveBuildingForPlayer(playerid, 2064, 2810.8359, -1171.8984, 1025.2031, 0.25);
RemoveBuildingForPlayer(playerid, 2068, 2809.2031, -1169.3672, 1027.5313, 0.25);
RemoveBuildingForPlayer(playerid, 2069, 2806.3906, -1166.8203, 1024.6250, 0.25);
RemoveBuildingForPlayer(playerid, 1764, 2808.6563, -1166.9531, 1024.5703, 0.25);
RemoveBuildingForPlayer(playerid, 2100, 2805.5078, -1165.5625, 1024.5703, 0.25);
RemoveBuildingForPlayer(playerid, 2276, 2809.2109, -1165.2734, 1026.6875, 0.25);
RemoveBuildingForPlayer(playerid, 1821, 2810.5938, -1167.6172, 1024.5625, 0.25);
RemoveBuildingForPlayer(playerid, 2053, 2810.6094, -1167.5781, 1024.6328, 0.25);
RemoveBuildingForPlayer(playerid, 2058, 2809.6406, -1165.3359, 1024.5781, 0.25);
RemoveBuildingForPlayer(playerid, 2272, 2811.3438, -1165.2734, 1026.7891, 0.25);
RemoveBuildingForPlayer(playerid, 2297, 2811.0234, -1165.0625, 1024.5625, 0.25);
RemoveBuildingForPlayer(playerid, 1765, 2811.4766, -1168.4063, 1024.5625, 0.25);
RemoveBuildingForPlayer(playerid, 2241, 2811.6875, -1168.5078, 1028.6797, 0.25);
RemoveBuildingForPlayer(playerid, 2059, 2814.8359, -1173.4766, 1025.3594, 0.25);
RemoveBuildingForPlayer(playerid, 2116, 2814.3047, -1173.4219, 1024.5547, 0.25);
RemoveBuildingForPlayer(playerid, 2050, 2813.1250, -1173.3359, 1026.3359, 0.25);
RemoveBuildingForPlayer(playerid, 1736, 2812.8281, -1172.2969, 1027.0469, 0.25);
RemoveBuildingForPlayer(playerid, 2051, 2813.1250, -1171.2891, 1026.3359, 0.25);
RemoveBuildingForPlayer(playerid, 2121, 2813.9531, -1172.4609, 1025.0859, 0.25);
RemoveBuildingForPlayer(playerid, 2121, 2815.3828, -1172.4844, 1025.0859, 0.25);
RemoveBuildingForPlayer(playerid, 2275, 2812.6094, -1168.1094, 1026.4453, 0.25);
RemoveBuildingForPlayer(playerid, 2156, 2813.6484, -1167.0000, 1024.5703, 0.25);
RemoveBuildingForPlayer(playerid, 2255, 2814.5703, -1169.2891, 1029.9141, 0.25);
RemoveBuildingForPlayer(playerid, 2047, 2817.3125, -1170.9688, 1031.1719, 0.25);
RemoveBuildingForPlayer(playerid, 2160, 2815.8984, -1164.9063, 1024.5625, 0.25);
RemoveBuildingForPlayer(playerid, 2159, 2817.2656, -1164.9063, 1024.5625, 0.25);
RemoveBuildingForPlayer(playerid, 2157, 2818.7109, -1173.9531, 1024.5703, 0.25);
RemoveBuildingForPlayer(playerid, 2157, 2818.6406, -1164.9063, 1024.5625, 0.25);
RemoveBuildingForPlayer(playerid, 2300, 2818.6484, -1166.5078, 1028.1719, 0.25);
RemoveBuildingForPlayer(playerid, 2046, 2819.4453, -1174.0000, 1026.3594, 0.25);
RemoveBuildingForPlayer(playerid, 2091, 2819.8047, -1165.6641, 1028.1641, 0.25);
RemoveBuildingForPlayer(playerid, 2157, 2820.6328, -1167.3125, 1024.5703, 0.25);

// Fakir Ev 7

RemoveBuildingForPlayer(playerid, 2248, 2235.8281, -1081.6484, 1048.5781, 0.25);
RemoveBuildingForPlayer(playerid, 2248, 2239.2266, -1081.6484, 1048.5781, 0.25);
RemoveBuildingForPlayer(playerid, 1798, 2242.0469, -1078.4297, 1048.0547, 0.25);
RemoveBuildingForPlayer(playerid, 1798, 2244.5469, -1078.4297, 1048.0547, 0.25);
RemoveBuildingForPlayer(playerid, 2248, 2235.8281, -1070.2188, 1048.5781, 0.25);
RemoveBuildingForPlayer(playerid, 2523, 2236.0391, -1068.9063, 1048.0547, 0.25);
RemoveBuildingForPlayer(playerid, 2249, 2236.1406, -1064.1953, 1048.6641, 0.25);
RemoveBuildingForPlayer(playerid, 2264, 2239.0156, -1071.6094, 1050.0625, 0.25);
RemoveBuildingForPlayer(playerid, 15057, 2240.6016, -1072.7031, 1048.0391, 0.25);
RemoveBuildingForPlayer(playerid, 2270, 2238.9063, -1068.9844, 1050.0469, 0.25);
RemoveBuildingForPlayer(playerid, 2248, 2239.2188, -1070.2188, 1048.5781, 0.25);
RemoveBuildingForPlayer(playerid, 2280, 2240.3203, -1070.8906, 1050.2188, 0.25);
RemoveBuildingForPlayer(playerid, 1703, 2240.7344, -1069.5156, 1048.0156, 0.25);
RemoveBuildingForPlayer(playerid, 2526, 2237.2500, -1066.5391, 1048.0078, 0.25);
RemoveBuildingForPlayer(playerid, 2088, 2237.9063, -1064.2891, 1047.9766, 0.25);
RemoveBuildingForPlayer(playerid, 2528, 2238.8516, -1068.1563, 1048.0234, 0.25);
RemoveBuildingForPlayer(playerid, 2249, 2238.9531, -1064.8125, 1050.5625, 0.25);
RemoveBuildingForPlayer(playerid, 2269, 2240.3203, -1068.4453, 1050.1094, 0.25);
RemoveBuildingForPlayer(playerid, 2108, 2240.7734, -1066.3047, 1048.0234, 0.25);
RemoveBuildingForPlayer(playerid, 1741, 2241.3125, -1072.4688, 1048.0156, 0.25);
RemoveBuildingForPlayer(playerid, 2297, 2242.1719, -1066.2266, 1048.0156, 0.25);
RemoveBuildingForPlayer(playerid, 1822, 2243.3281, -1067.8281, 1048.0234, 0.25);
RemoveBuildingForPlayer(playerid, 1703, 2243.8203, -1073.1875, 1048.0156, 0.25);
RemoveBuildingForPlayer(playerid, 2271, 2245.3203, -1068.4453, 1050.1172, 0.25);
RemoveBuildingForPlayer(playerid, 1703, 2245.0313, -1067.6094, 1048.0156, 0.25);
RemoveBuildingForPlayer(playerid, 2108, 2244.7969, -1066.2734, 1048.0234, 0.25);

// Fakir Ev 8

RemoveBuildingForPlayer(playerid, 2158, 305.2188, 1120.2109, 1082.8359, 0.25);
RemoveBuildingForPlayer(playerid, 2330, 308.6953, 1120.8203, 1082.8672, 0.25);
RemoveBuildingForPlayer(playerid, 1802, 307.1875, 1121.8281, 1082.8828, 0.25);
RemoveBuildingForPlayer(playerid, 2846, 309.9844, 1121.4063, 1082.8906, 0.25);
RemoveBuildingForPlayer(playerid, 2840, 309.8125, 1123.4766, 1082.8750, 0.25);
RemoveBuildingForPlayer(playerid, 2855, 309.0391, 1124.5547, 1082.8828, 0.25);
RemoveBuildingForPlayer(playerid, 1720, 309.8594, 1124.5938, 1082.8906, 0.25);
RemoveBuildingForPlayer(playerid, 1750, 315.6797, 1116.6563, 1082.8750, 0.25);
RemoveBuildingForPlayer(playerid, 2867, 318.0703, 1122.9844, 1082.8828, 0.25);
RemoveBuildingForPlayer(playerid, 2858, 321.4141, 1122.4063, 1082.8984, 0.25);
RemoveBuildingForPlayer(playerid, 2855, 316.2578, 1124.5469, 1083.0156, 0.25);
RemoveBuildingForPlayer(playerid, 2855, 316.3359, 1124.5547, 1082.8828, 0.25);
RemoveBuildingForPlayer(playerid, 2855, 316.4688, 1125.0313, 1083.0156, 0.25);
RemoveBuildingForPlayer(playerid, 2855, 316.4688, 1125.0313, 1082.8828, 0.25);
RemoveBuildingForPlayer(playerid, 2855, 316.7266, 1124.5547, 1082.8828, 0.25);
RemoveBuildingForPlayer(playerid, 2855, 316.7266, 1124.5547, 1083.0156, 0.25);
RemoveBuildingForPlayer(playerid, 2852, 316.5469, 1124.7031, 1083.1563, 0.25);
RemoveBuildingForPlayer(playerid, 1728, 319.0469, 1124.3047, 1082.8828, 0.25);
RemoveBuildingForPlayer(playerid, 2262, 317.7266, 1124.8047, 1084.8594, 0.25);
RemoveBuildingForPlayer(playerid, 2844, 321.6406, 1127.9375, 1082.9531, 0.25);
RemoveBuildingForPlayer(playerid, 1793, 321.3828, 1128.4453, 1082.8828, 0.25);
RemoveBuildingForPlayer(playerid, 2859, 324.4453, 1118.9844, 1082.9063, 0.25);
RemoveBuildingForPlayer(playerid, 2860, 324.6094, 1120.7969, 1082.8906, 0.25);
RemoveBuildingForPlayer(playerid, 2103, 327.0391, 1116.9766, 1082.8750, 0.25);
RemoveBuildingForPlayer(playerid, 1710, 326.2109, 1121.2656, 1082.8984, 0.25);
RemoveBuildingForPlayer(playerid, 2147, 331.9922, 1118.8672, 1082.8594, 0.25);
RemoveBuildingForPlayer(playerid, 2338, 334.3906, 1118.8203, 1082.8438, 0.25);
RemoveBuildingForPlayer(playerid, 2337, 334.3906, 1119.8125, 1082.8438, 0.25);
RemoveBuildingForPlayer(playerid, 2170, 334.4531, 1121.8281, 1082.8516, 0.25);
RemoveBuildingForPlayer(playerid, 2116, 331.4922, 1122.5469, 1082.8750, 0.25);
RemoveBuildingForPlayer(playerid, 2857, 322.2422, 1123.7109, 1082.8750, 0.25);
RemoveBuildingForPlayer(playerid, 2295, 326.8438, 1124.4844, 1082.8594, 0.25);
RemoveBuildingForPlayer(playerid, 2336, 334.2500, 1123.8672, 1082.8438, 0.25);
RemoveBuildingForPlayer(playerid, 2335, 334.2422, 1124.8672, 1082.8438, 0.25);
RemoveBuildingForPlayer(playerid, 2334, 334.2422, 1125.8672, 1082.8438, 0.25);
RemoveBuildingForPlayer(playerid, 2852, 321.6719, 1130.3516, 1083.5547, 0.25);
RemoveBuildingForPlayer(playerid, 1728, 325.5078, 1130.8516, 1082.8750, 0.25);
RemoveBuildingForPlayer(playerid, 2819, 323.4453, 1131.1250, 1082.8984, 0.25);

// Fakir Ev 9

RemoveBuildingForPlayer(playerid, 16408, 418.2266, 2538.8516, 11.4297, 0.25);
RemoveBuildingForPlayer(playerid, 1810, 418.7344, 2538.7578, 8.9844, 0.25);
RemoveBuildingForPlayer(playerid, 2147, 413.9688, 2538.2188, 8.9844, 0.25);
RemoveBuildingForPlayer(playerid, 1748, 418.2734, 2541.0625, 9.7891, 0.25);
RemoveBuildingForPlayer(playerid, 1810, 417.6328, 2542.5000, 8.9844, 0.25);
RemoveBuildingForPlayer(playerid, 1812, 416.2422, 2540.3359, 8.9766, 0.25);
RemoveBuildingForPlayer(playerid, 2115, 418.6875, 2539.5938, 8.9922, 0.25);
RemoveBuildingForPlayer(playerid, 1810, 418.2031, 2539.9063, 8.9844, 0.25);
RemoveBuildingForPlayer(playerid, 1738, 420.1328, 2542.8750, 9.6328, 0.25);
RemoveBuildingForPlayer(playerid, 1763, 421.0781, 2540.8125, 8.9844, 0.25);

// Orta Ev 1

RemoveBuildingForPlayer(playerid, 1741, 2261.6953, -1223.0781, 1048.0156, 0.25);
RemoveBuildingForPlayer(playerid, 2088, 2258.1406, -1220.5859, 1048.0078, 0.25);
RemoveBuildingForPlayer(playerid, 2090, 2258.5938, -1221.5469, 1048.0625, 0.25);
RemoveBuildingForPlayer(playerid, 2249, 2251.3594, -1218.1797, 1048.6953, 0.25);
RemoveBuildingForPlayer(playerid, 2528, 2254.4063, -1218.2734, 1048.0234, 0.25);
RemoveBuildingForPlayer(playerid, 2121, 2250.3047, -1213.9375, 1048.5234, 0.25);
RemoveBuildingForPlayer(playerid, 2526, 2252.4297, -1215.4531, 1048.0391, 0.25);
RemoveBuildingForPlayer(playerid, 2523, 2254.1953, -1215.4531, 1048.0156, 0.25);
RemoveBuildingForPlayer(playerid, 2297, 2255.4219, -1213.5313, 1048.0156, 0.25);
RemoveBuildingForPlayer(playerid, 2248, 2262.3906, -1215.5469, 1048.6094, 0.25);
RemoveBuildingForPlayer(playerid, 1816, 2261.4141, -1213.4531, 1048.0078, 0.25);
RemoveBuildingForPlayer(playerid, 2249, 2247.2969, -1212.1641, 1049.6250, 0.25);
RemoveBuildingForPlayer(playerid, 2249, 2247.2969, -1208.8594, 1049.6250, 0.25);
RemoveBuildingForPlayer(playerid, 2109, 2250.2813, -1212.2500, 1048.4141, 0.25);
RemoveBuildingForPlayer(playerid, 2121, 2249.2344, -1211.4531, 1048.5234, 0.25);
RemoveBuildingForPlayer(playerid, 2121, 2250.3047, -1210.8984, 1048.5234, 0.25);
RemoveBuildingForPlayer(playerid, 2319, 2250.3438, -1206.9609, 1048.0078, 0.25);
RemoveBuildingForPlayer(playerid, 1760, 2261.4609, -1212.0625, 1048.0078, 0.25);
RemoveBuildingForPlayer(playerid, 2126, 2258.1094, -1210.3750, 1048.0156, 0.25);
RemoveBuildingForPlayer(playerid, 15044, 2255.0938, -1209.7813, 1048.0313, 0.25);
RemoveBuildingForPlayer(playerid, 2247, 2258.4766, -1209.7891, 1048.9922, 0.25);
RemoveBuildingForPlayer(playerid, 2099, 2262.8047, -1208.4922, 1048.0156, 0.25);
RemoveBuildingForPlayer(playerid, 2254, 2254.1172, -1206.5000, 1050.7578, 0.25);
RemoveBuildingForPlayer(playerid, 2240, 2254.6328, -1207.2734, 1048.5625, 0.25);
RemoveBuildingForPlayer(playerid, 2252, 2256.2109, -1206.1016, 1048.8281, 0.25);
RemoveBuildingForPlayer(playerid, 2235, 2256.2188, -1206.8594, 1048.0078, 0.25);
RemoveBuildingForPlayer(playerid, 1760, 2257.6172, -1207.7266, 1048.0078, 0.25);
RemoveBuildingForPlayer(playerid, 2235, 2261.4297, -1206.2031, 1048.0078, 0.25);
RemoveBuildingForPlayer(playerid, 2252, 2262.1172, -1206.1016, 1048.8281, 0.25);

// Orta Ev 2

RemoveBuildingForPlayer(playerid, 2241, 2194.5469, -1226.4844, 1048.5234, 0.25);
RemoveBuildingForPlayer(playerid, 2526, 2191.8750, -1225.3594, 1048.0391, 0.25);
RemoveBuildingForPlayer(playerid, 2523, 2191.8750, -1223.5938, 1048.0234, 0.25);
RemoveBuildingForPlayer(playerid, 2241, 2194.5469, -1221.7969, 1048.5234, 0.25);
RemoveBuildingForPlayer(playerid, 2528, 2194.6953, -1223.1172, 1048.0234, 0.25);
RemoveBuildingForPlayer(playerid, 2278, 2194.6406, -1221.5859, 1050.3203, 0.25);
RemoveBuildingForPlayer(playerid, 2095, 2186.2109, -1219.1563, 1048.0313, 0.25);
RemoveBuildingForPlayer(playerid, 2106, 2186.2500, -1220.3203, 1048.8750, 0.25);
RemoveBuildingForPlayer(playerid, 2106, 2189.5000, -1220.3203, 1048.8750, 0.25);
RemoveBuildingForPlayer(playerid, 2095, 2189.6250, -1219.1563, 1048.0313, 0.25);
RemoveBuildingForPlayer(playerid, 2108, 2192.0547, -1219.5234, 1048.0234, 0.25);
RemoveBuildingForPlayer(playerid, 2108, 2194.3359, -1219.5234, 1048.0234, 0.25);
RemoveBuildingForPlayer(playerid, 2280, 2196.8828, -1219.9688, 1050.1641, 0.25);
RemoveBuildingForPlayer(playerid, 2088, 2199.1875, -1219.0078, 1048.0156, 0.25);
RemoveBuildingForPlayer(playerid, 1717, 2187.2422, -1215.6719, 1048.0078, 0.25);
RemoveBuildingForPlayer(playerid, 2090, 2188.4453, -1217.1797, 1048.0078, 0.25);
RemoveBuildingForPlayer(playerid, 2088, 2188.4688, -1213.0234, 1048.0156, 0.25);
RemoveBuildingForPlayer(playerid, 2281, 2196.1484, -1214.6797, 1050.3125, 0.25);
RemoveBuildingForPlayer(playerid, 2298, 2197.2734, -1216.6250, 1048.0234, 0.25);
RemoveBuildingForPlayer(playerid, 2106, 2197.2500, -1212.8516, 1048.5469, 0.25);
RemoveBuildingForPlayer(playerid, 2259, 2198.5859, -1213.1484, 1050.2969, 0.25);
RemoveBuildingForPlayer(playerid, 2828, 2198.5391, -1212.8359, 1048.8203, 0.25);
RemoveBuildingForPlayer(playerid, 2106, 2199.9375, -1212.8516, 1048.5469, 0.25);
RemoveBuildingForPlayer(playerid, 2832, 2181.5000, -1206.5234, 1049.0625, 0.25);
RemoveBuildingForPlayer(playerid, 2134, 2181.6250, -1207.4219, 1048.0156, 0.25);
RemoveBuildingForPlayer(playerid, 2132, 2181.6328, -1205.4219, 1048.0156, 0.25);
RemoveBuildingForPlayer(playerid, 2339, 2181.6250, -1206.4219, 1048.0156, 0.25);
RemoveBuildingForPlayer(playerid, 2131, 2184.6250, -1207.8594, 1048.0156, 0.25);
RemoveBuildingForPlayer(playerid, 2121, 2183.5625, -1204.2344, 1048.5234, 0.25);
RemoveBuildingForPlayer(playerid, 2115, 2184.6641, -1204.1719, 1048.0313, 0.25);
RemoveBuildingForPlayer(playerid, 2299, 2187.6250, -1212.1563, 1048.0078, 0.25);
RemoveBuildingForPlayer(playerid, 2826, 2186.4531, -1210.5625, 1048.0313, 0.25);
RemoveBuildingForPlayer(playerid, 2106, 2185.7109, -1209.4063, 1048.7734, 0.25);
RemoveBuildingForPlayer(playerid, 2259, 2185.3984, -1209.9609, 1050.0859, 0.25);
RemoveBuildingForPlayer(playerid, 2328, 2186.4375, -1210.1719, 1048.0156, 0.25);
RemoveBuildingForPlayer(playerid, 2255, 2188.1563, -1209.1406, 1050.2422, 0.25);
RemoveBuildingForPlayer(playerid, 2121, 2185.8047, -1205.2656, 1048.5234, 0.25);
RemoveBuildingForPlayer(playerid, 2281, 2187.8516, -1207.1250, 1050.0703, 0.25);
RemoveBuildingForPlayer(playerid, 2069, 2188.2109, -1207.5703, 1048.0703, 0.25);
RemoveBuildingForPlayer(playerid, 2328, 2189.4531, -1210.1719, 1048.0156, 0.25);
RemoveBuildingForPlayer(playerid, 2280, 2189.8984, -1207.8438, 1050.1172, 0.25);
RemoveBuildingForPlayer(playerid, 2249, 2190.2188, -1209.3828, 1049.4453, 0.25);
RemoveBuildingForPlayer(playerid, 2108, 2192.0547, -1209.7109, 1048.0234, 0.25);
RemoveBuildingForPlayer(playerid, 2108, 2194.3359, -1209.7109, 1048.0234, 0.25);
RemoveBuildingForPlayer(playerid, 2826, 2190.5781, -1204.4297, 1048.0313, 0.25);
RemoveBuildingForPlayer(playerid, 1702, 2191.5781, -1206.9375, 1048.0391, 0.25);
RemoveBuildingForPlayer(playerid, 2857, 2193.0938, -1204.2813, 1048.5078, 0.25);
RemoveBuildingForPlayer(playerid, 1818, 2193.1250, -1205.1328, 1048.0078, 0.25);
RemoveBuildingForPlayer(playerid, 1702, 2196.1484, -1205.3828, 1048.0391, 0.25);
RemoveBuildingForPlayer(playerid, 2260, 2196.7188, -1206.4922, 1050.1641, 0.25);
RemoveBuildingForPlayer(playerid, 2831, 2181.5625, -1203.5000, 1049.0703, 0.25);
RemoveBuildingForPlayer(playerid, 2134, 2181.6250, -1203.4219, 1048.0156, 0.25);
RemoveBuildingForPlayer(playerid, 2141, 2181.6250, -1201.4219, 1048.0156, 0.25);
RemoveBuildingForPlayer(playerid, 2339, 2181.6250, -1202.4219, 1048.0156, 0.25);
RemoveBuildingForPlayer(playerid, 2831, 2184.6016, -1203.8906, 1048.8438, 0.25);
RemoveBuildingForPlayer(playerid, 2121, 2185.8047, -1202.6094, 1048.5234, 0.25);
RemoveBuildingForPlayer(playerid, 2121, 2183.3281, -1202.3750, 1048.5234, 0.25);
RemoveBuildingForPlayer(playerid, 2131, 2183.3750, -1200.8672, 1048.0156, 0.25);
RemoveBuildingForPlayer(playerid, 15043, 2189.1641, -1203.6484, 1048.0313, 0.25);
RemoveBuildingForPlayer(playerid, 1717, 2190.5469, -1201.5625, 1048.0078, 0.25);
RemoveBuildingForPlayer(playerid, 2244, 2188.0000, -1200.8516, 1048.2891, 0.25);
RemoveBuildingForPlayer(playerid, 2255, 2188.2656, -1200.8438, 1050.1797, 0.25);
RemoveBuildingForPlayer(playerid, 2126, 2192.4063, -1200.5234, 1048.0156, 0.25);
RemoveBuildingForPlayer(playerid, 2811, 2192.8359, -1200.0391, 1048.5391, 0.25);
RemoveBuildingForPlayer(playerid, 15040, 2193.2031, -1199.1094, 1050.1328, 0.25);
RemoveBuildingForPlayer(playerid, 2100, 2195.2500, -1200.4844, 1048.0234, 0.25);

// Orta Ev 3

RemoveBuildingForPlayer(playerid, 2077, 2357.5469, -1134.1875, 1050.7031, 0.25);
RemoveBuildingForPlayer(playerid, 2298, 2361.2969, -1134.1484, 1049.8594, 0.25);
RemoveBuildingForPlayer(playerid, 2141, 2367.5625, -1135.3906, 1049.8750, 0.25);
RemoveBuildingForPlayer(playerid, 2339, 2367.5625, -1134.3906, 1049.8750, 0.25);
RemoveBuildingForPlayer(playerid, 2134, 2367.5625, -1133.3906, 1049.8750, 0.25);
RemoveBuildingForPlayer(playerid, 2077, 2357.5469, -1131.5234, 1050.6875, 0.25);
RemoveBuildingForPlayer(playerid, 2271, 2357.8594, -1132.8828, 1051.2813, 0.25);
RemoveBuildingForPlayer(playerid, 2087, 2360.2969, -1129.9766, 1049.8750, 0.25);
RemoveBuildingForPlayer(playerid, 2103, 2360.8281, -1130.1406, 1051.0156, 0.25);
RemoveBuildingForPlayer(playerid, 2279, 2369.8125, -1135.4375, 1052.1094, 0.25);
RemoveBuildingForPlayer(playerid, 2125, 2370.5781, -1134.0313, 1050.1797, 0.25);
RemoveBuildingForPlayer(playerid, 2125, 2371.7500, -1133.5938, 1050.1797, 0.25);
RemoveBuildingForPlayer(playerid, 2278, 2372.1875, -1135.4297, 1052.1250, 0.25);
RemoveBuildingForPlayer(playerid, 2030, 2371.2266, -1132.9219, 1050.2734, 0.25);
RemoveBuildingForPlayer(playerid, 2812, 2371.2969, -1133.0156, 1050.6641, 0.25);
RemoveBuildingForPlayer(playerid, 2125, 2371.7500, -1131.8594, 1050.1797, 0.25);
RemoveBuildingForPlayer(playerid, 2125, 2370.5781, -1131.8594, 1050.1797, 0.25);
RemoveBuildingForPlayer(playerid, 2288, 2373.3828, -1130.4531, 1051.9844, 0.25);
RemoveBuildingForPlayer(playerid, 2141, 2374.5000, -1135.3906, 1049.8203, 0.25);
RemoveBuildingForPlayer(playerid, 2132, 2374.5000, -1131.3906, 1049.8203, 0.25);
RemoveBuildingForPlayer(playerid, 2339, 2374.5078, -1134.3828, 1049.8203, 0.25);
RemoveBuildingForPlayer(playerid, 2134, 2374.5078, -1133.3828, 1049.8203, 0.25);
RemoveBuildingForPlayer(playerid, 2339, 2374.5078, -1130.3828, 1049.8203, 0.25);
RemoveBuildingForPlayer(playerid, 2225, 2369.1797, -1125.8047, 1049.8672, 0.25);
RemoveBuildingForPlayer(playerid, 2260, 2369.7188, -1123.8594, 1052.0781, 0.25);
RemoveBuildingForPlayer(playerid, 2331, 2367.3672, -1123.1563, 1050.1172, 0.25);
RemoveBuildingForPlayer(playerid, 2302, 2364.5547, -1122.9688, 1049.8672, 0.25);
RemoveBuildingForPlayer(playerid, 2259, 2368.6094, -1122.5078, 1052.0469, 0.25);
RemoveBuildingForPlayer(playerid, 2333, 2367.5703, -1122.1484, 1049.8672, 0.25);
RemoveBuildingForPlayer(playerid, 2255, 2361.5703, -1122.1484, 1052.2109, 0.25);
RemoveBuildingForPlayer(playerid, 1734, 2364.8828, -1122.0469, 1053.8516, 0.25);
RemoveBuildingForPlayer(playerid, 2811, 2372.7031, -1128.9141, 1049.8203, 0.25);
RemoveBuildingForPlayer(playerid, 15061, 2371.6094, -1128.1875, 1051.8750, 0.25);
RemoveBuildingForPlayer(playerid, 15062, 2371.6094, -1128.1875, 1051.8750, 0.25);
RemoveBuildingForPlayer(playerid, 2868, 2370.1250, -1125.2344, 1049.8672, 0.25);
RemoveBuildingForPlayer(playerid, 1703, 2370.3906, -1124.4375, 1049.8438, 0.25);
RemoveBuildingForPlayer(playerid, 1822, 2372.0938, -1124.2188, 1049.8516, 0.25);
RemoveBuildingForPlayer(playerid, 2828, 2374.2578, -1129.2578, 1050.7891, 0.25);
RemoveBuildingForPlayer(playerid, 2084, 2374.4688, -1129.2109, 1049.8750, 0.25);
RemoveBuildingForPlayer(playerid, 1703, 2374.6797, -1122.5313, 1049.8438, 0.25);
RemoveBuildingForPlayer(playerid, 2281, 2375.6641, -1128.1016, 1051.8750, 0.25);
RemoveBuildingForPlayer(playerid, 2868, 2374.9766, -1125.2344, 1049.8672, 0.25);
RemoveBuildingForPlayer(playerid, 2280, 2375.6484, -1122.3828, 1051.9922, 0.25);
RemoveBuildingForPlayer(playerid, 2227, 2370.2344, -1120.5859, 1049.8750, 0.25);
RemoveBuildingForPlayer(playerid, 1742, 2366.6953, -1119.2500, 1049.8750, 0.25);
RemoveBuildingForPlayer(playerid, 1703, 2371.6016, -1121.5078, 1049.8438, 0.25);
RemoveBuildingForPlayer(playerid, 2227, 2375.5859, -1120.9922, 1049.8750, 0.25);

// Orta Ev 4

RemoveBuildingForPlayer(playerid, 2123, 2312.9609, -1145.0703, 1050.3203, 0.25);
RemoveBuildingForPlayer(playerid, 2123, 2314.2969, -1146.3125, 1050.3203, 0.25);
RemoveBuildingForPlayer(playerid, 2123, 2315.4219, -1145.0703, 1050.3203, 0.25);
RemoveBuildingForPlayer(playerid, 2086, 2314.2734, -1144.8984, 1050.0859, 0.25);
RemoveBuildingForPlayer(playerid, 2123, 2314.2969, -1143.6250, 1050.3203, 0.25);
RemoveBuildingForPlayer(playerid, 15045, 2324.4297, -1143.3125, 1049.6016, 0.25);
RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1144.0859, 1049.6953, 0.25);
RemoveBuildingForPlayer(playerid, 2138, 2335.3594, -1144.0703, 1049.6719, 0.25);
RemoveBuildingForPlayer(playerid, 2135, 2336.3516, -1144.0781, 1049.6719, 0.25);
RemoveBuildingForPlayer(playerid, 2305, 2337.3203, -1144.0781, 1049.6719, 0.25);
RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1143.1016, 1049.6953, 0.25);
RemoveBuildingForPlayer(playerid, 2138, 2337.3203, -1143.0938, 1049.6719, 0.25);
RemoveBuildingForPlayer(playerid, 1703, 2322.2266, -1142.4766, 1049.4766, 0.25);
RemoveBuildingForPlayer(playerid, 1822, 2323.9297, -1142.2578, 1049.4844, 0.25);
RemoveBuildingForPlayer(playerid, 1741, 2312.6484, -1140.7891, 1053.3750, 0.25);
RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1142.1094, 1049.6953, 0.25);
RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1141.1172, 1049.6953, 0.25);
RemoveBuildingForPlayer(playerid, 2079, 2334.4219, -1140.9688, 1050.3359, 0.25);
RemoveBuildingForPlayer(playerid, 1703, 2326.5234, -1140.5703, 1049.4766, 0.25);
RemoveBuildingForPlayer(playerid, 2138, 2337.3203, -1142.1094, 1049.6719, 0.25);
RemoveBuildingForPlayer(playerid, 2139, 2337.3125, -1141.1094, 1049.6641, 0.25);
RemoveBuildingForPlayer(playerid, 2088, 2338.4531, -1141.3672, 1053.2734, 0.25);
RemoveBuildingForPlayer(playerid, 2270, 2340.2734, -1141.7109, 1054.5391, 0.25);
RemoveBuildingForPlayer(playerid, 15050, 2330.3281, -1140.3047, 1051.9063, 0.25);
RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1140.1328, 1049.6953, 0.25);
RemoveBuildingForPlayer(playerid, 1703, 2323.4375, -1139.5469, 1049.4766, 0.25);
RemoveBuildingForPlayer(playerid, 2079, 2333.3281, -1139.8672, 1050.3359, 0.25);
RemoveBuildingForPlayer(playerid, 2115, 2334.4297, -1139.6250, 1049.7109, 0.25);
RemoveBuildingForPlayer(playerid, 15049, 2334.3281, -1139.5859, 1051.1953, 0.25);
RemoveBuildingForPlayer(playerid, 2079, 2335.3672, -1139.8750, 1050.3359, 0.25);
RemoveBuildingForPlayer(playerid, 2303, 2337.3281, -1140.1172, 1049.6719, 0.25);
RemoveBuildingForPlayer(playerid, 2090, 2309.5156, -1139.3438, 1053.4219, 0.25);
RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1139.1406, 1049.6953, 0.25);
RemoveBuildingForPlayer(playerid, 2079, 2333.3281, -1138.8281, 1050.3359, 0.25);
RemoveBuildingForPlayer(playerid, 2079, 2335.3672, -1138.8359, 1050.3359, 0.25);
RemoveBuildingForPlayer(playerid, 2298, 2336.5391, -1138.7891, 1053.2813, 0.25);
RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1138.1563, 1049.6953, 0.25);
RemoveBuildingForPlayer(playerid, 2136, 2337.3281, -1138.1328, 1049.6719, 0.25);
RemoveBuildingForPlayer(playerid, 2240, 2319.2500, -1137.8750, 1050.0156, 0.25);
RemoveBuildingForPlayer(playerid, 2240, 2329.5000, -1137.8750, 1050.0156, 0.25);
RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1137.1641, 1049.6953, 0.25);
RemoveBuildingForPlayer(playerid, 2079, 2334.4219, -1137.5859, 1050.3359, 0.25);
RemoveBuildingForPlayer(playerid, 2139, 2337.3125, -1137.1484, 1049.6641, 0.25);
RemoveBuildingForPlayer(playerid, 2088, 2310.6641, -1136.3047, 1053.3672, 0.25);
RemoveBuildingForPlayer(playerid, 2257, 2320.4141, -1134.6328, 1053.8281, 0.25);
RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1136.1719, 1049.6953, 0.25);
RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1135.1875, 1049.6953, 0.25);
RemoveBuildingForPlayer(playerid, 2254, 2328.1484, -1134.6172, 1054.0625, 0.25);
RemoveBuildingForPlayer(playerid, 2281, 2335.2656, -1136.4063, 1054.7266, 0.25);
RemoveBuildingForPlayer(playerid, 2106, 2336.5156, -1135.0156, 1053.8047, 0.25);
RemoveBuildingForPlayer(playerid, 2271, 2337.8047, -1135.3516, 1054.7031, 0.25);
RemoveBuildingForPlayer(playerid, 2138, 2337.3203, -1136.1641, 1049.6719, 0.25);
RemoveBuildingForPlayer(playerid, 2138, 2337.3203, -1135.1797, 1049.6719, 0.25);
RemoveBuildingForPlayer(playerid, 2106, 2339.2031, -1135.0156, 1053.8047, 0.25);

// Zengin Ev 1

RemoveBuildingForPlayer(playerid, 2123, 2312.9609, -1145.0703, 1050.3203, 0.25);
RemoveBuildingForPlayer(playerid, 2123, 2314.2969, -1146.3125, 1050.3203, 0.25);
RemoveBuildingForPlayer(playerid, 2123, 2315.4219, -1145.0703, 1050.3203, 0.25);
RemoveBuildingForPlayer(playerid, 2086, 2314.2734, -1144.8984, 1050.0859, 0.25);
RemoveBuildingForPlayer(playerid, 2123, 2314.2969, -1143.6250, 1050.3203, 0.25);
RemoveBuildingForPlayer(playerid, 15045, 2324.4297, -1143.3125, 1049.6016, 0.25);
RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1144.0859, 1049.6953, 0.25);
RemoveBuildingForPlayer(playerid, 2138, 2335.3594, -1144.0703, 1049.6719, 0.25);
RemoveBuildingForPlayer(playerid, 2135, 2336.3516, -1144.0781, 1049.6719, 0.25);
RemoveBuildingForPlayer(playerid, 2305, 2337.3203, -1144.0781, 1049.6719, 0.25);
RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1143.1016, 1049.6953, 0.25);
RemoveBuildingForPlayer(playerid, 2138, 2337.3203, -1143.0938, 1049.6719, 0.25);
RemoveBuildingForPlayer(playerid, 1703, 2322.2266, -1142.4766, 1049.4766, 0.25);
RemoveBuildingForPlayer(playerid, 1822, 2323.9297, -1142.2578, 1049.4844, 0.25);
RemoveBuildingForPlayer(playerid, 1741, 2312.6484, -1140.7891, 1053.3750, 0.25);
RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1142.1094, 1049.6953, 0.25);
RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1141.1172, 1049.6953, 0.25);
RemoveBuildingForPlayer(playerid, 2079, 2334.4219, -1140.9688, 1050.3359, 0.25);
RemoveBuildingForPlayer(playerid, 1703, 2326.5234, -1140.5703, 1049.4766, 0.25);
RemoveBuildingForPlayer(playerid, 2138, 2337.3203, -1142.1094, 1049.6719, 0.25);
RemoveBuildingForPlayer(playerid, 2139, 2337.3125, -1141.1094, 1049.6641, 0.25);
RemoveBuildingForPlayer(playerid, 2088, 2338.4531, -1141.3672, 1053.2734, 0.25);
RemoveBuildingForPlayer(playerid, 2270, 2340.2734, -1141.7109, 1054.5391, 0.25);
RemoveBuildingForPlayer(playerid, 15050, 2330.3281, -1140.3047, 1051.9063, 0.25);
RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1140.1328, 1049.6953, 0.25);
RemoveBuildingForPlayer(playerid, 1703, 2323.4375, -1139.5469, 1049.4766, 0.25);
RemoveBuildingForPlayer(playerid, 2079, 2333.3281, -1139.8672, 1050.3359, 0.25);
RemoveBuildingForPlayer(playerid, 2115, 2334.4297, -1139.6250, 1049.7109, 0.25);
RemoveBuildingForPlayer(playerid, 15049, 2334.3281, -1139.5859, 1051.1953, 0.25);
RemoveBuildingForPlayer(playerid, 2079, 2335.3672, -1139.8750, 1050.3359, 0.25);
RemoveBuildingForPlayer(playerid, 2303, 2337.3281, -1140.1172, 1049.6719, 0.25);
RemoveBuildingForPlayer(playerid, 2090, 2309.5156, -1139.3438, 1053.4219, 0.25);
RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1139.1406, 1049.6953, 0.25);
RemoveBuildingForPlayer(playerid, 2079, 2333.3281, -1138.8281, 1050.3359, 0.25);
RemoveBuildingForPlayer(playerid, 2079, 2335.3672, -1138.8359, 1050.3359, 0.25);
RemoveBuildingForPlayer(playerid, 2298, 2336.5391, -1138.7891, 1053.2813, 0.25);
RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1138.1563, 1049.6953, 0.25);
RemoveBuildingForPlayer(playerid, 2136, 2337.3281, -1138.1328, 1049.6719, 0.25);
RemoveBuildingForPlayer(playerid, 2240, 2319.2500, -1137.8750, 1050.0156, 0.25);
RemoveBuildingForPlayer(playerid, 2240, 2329.5000, -1137.8750, 1050.0156, 0.25);
RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1137.1641, 1049.6953, 0.25);
RemoveBuildingForPlayer(playerid, 2079, 2334.4219, -1137.5859, 1050.3359, 0.25);
RemoveBuildingForPlayer(playerid, 2139, 2337.3125, -1137.1484, 1049.6641, 0.25);
RemoveBuildingForPlayer(playerid, 2088, 2310.6641, -1136.3047, 1053.3672, 0.25);
RemoveBuildingForPlayer(playerid, 2257, 2320.4141, -1134.6328, 1053.8281, 0.25);
RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1136.1719, 1049.6953, 0.25);
RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1135.1875, 1049.6953, 0.25);
RemoveBuildingForPlayer(playerid, 2254, 2328.1484, -1134.6172, 1054.0625, 0.25);
RemoveBuildingForPlayer(playerid, 2281, 2335.2656, -1136.4063, 1054.7266, 0.25);
RemoveBuildingForPlayer(playerid, 2106, 2336.5156, -1135.0156, 1053.8047, 0.25);
RemoveBuildingForPlayer(playerid, 2271, 2337.8047, -1135.3516, 1054.7031, 0.25);
RemoveBuildingForPlayer(playerid, 2138, 2337.3203, -1136.1641, 1049.6719, 0.25);
RemoveBuildingForPlayer(playerid, 2138, 2337.3203, -1135.1797, 1049.6719, 0.25);
RemoveBuildingForPlayer(playerid, 2106, 2339.2031, -1135.0156, 1053.8047, 0.25);
RemoveBuildingForPlayer(playerid, 2259, 2316.3125, -1024.5156, 1051.3203, 0.25);
RemoveBuildingForPlayer(playerid, 2242, 2321.4609, -1019.7500, 1049.3672, 0.25);
RemoveBuildingForPlayer(playerid, 2078, 2318.2578, -1017.6016, 1049.1953, 0.25);
RemoveBuildingForPlayer(playerid, 2203, 2312.1641, -1014.5547, 1050.4219, 0.25);
RemoveBuildingForPlayer(playerid, 2139, 2312.3750, -1014.5547, 1049.1953, 0.25);
RemoveBuildingForPlayer(playerid, 2830, 2312.1406, -1013.6719, 1050.2578, 0.25);
RemoveBuildingForPlayer(playerid, 2139, 2312.3750, -1013.5625, 1049.1953, 0.25);
RemoveBuildingForPlayer(playerid, 2241, 2322.4453, -1026.4453, 1050.5000, 0.25);
RemoveBuildingForPlayer(playerid, 2244, 2322.3594, -1019.8906, 1049.4844, 0.25);
RemoveBuildingForPlayer(playerid, 2112, 2322.6563, -1026.4219, 1049.5938, 0.25);
RemoveBuildingForPlayer(playerid, 2105, 2323.0156, -1026.8594, 1050.4453, 0.25);
RemoveBuildingForPlayer(playerid, 2224, 2322.6953, -1019.0859, 1049.2031, 0.25);
RemoveBuildingForPlayer(playerid, 2281, 2324.3125, -1017.7969, 1051.2266, 0.25);
RemoveBuildingForPlayer(playerid, 2261, 2322.4609, -1015.4297, 1051.1563, 0.25);
RemoveBuildingForPlayer(playerid, 2165, 2323.3750, -1015.8984, 1053.7031, 0.25);
RemoveBuildingForPlayer(playerid, 1714, 2323.7500, -1014.8594, 1053.7109, 0.25);
RemoveBuildingForPlayer(playerid, 1755, 2325.2734, -1025.0625, 1049.1406, 0.25);
RemoveBuildingForPlayer(playerid, 2229, 2325.6406, -1017.2813, 1049.2031, 0.25);
RemoveBuildingForPlayer(playerid, 2107, 2326.0703, -1016.6719, 1050.6641, 0.25);
RemoveBuildingForPlayer(playerid, 2088, 2325.5313, -1015.0938, 1053.6953, 0.25);
RemoveBuildingForPlayer(playerid, 15060, 2326.6641, -1022.1953, 1049.2266, 0.25);
RemoveBuildingForPlayer(playerid, 2280, 2327.3125, -1017.7969, 1051.2109, 0.25);
RemoveBuildingForPlayer(playerid, 2104, 2327.1719, -1017.2109, 1049.2109, 0.25);
RemoveBuildingForPlayer(playerid, 2088, 2327.4766, -1015.0938, 1053.6953, 0.25);
RemoveBuildingForPlayer(playerid, 2139, 2312.3750, -1012.5703, 1049.1953, 0.25);
RemoveBuildingForPlayer(playerid, 2303, 2312.3594, -1011.5859, 1049.2031, 0.25);
RemoveBuildingForPlayer(playerid, 2079, 2313.8906, -1011.5781, 1049.8359, 0.25);
RemoveBuildingForPlayer(playerid, 2079, 2314.9844, -1012.6797, 1049.8359, 0.25);
RemoveBuildingForPlayer(playerid, 2115, 2314.9922, -1011.4063, 1049.2031, 0.25);
RemoveBuildingForPlayer(playerid, 2832, 2315.0547, -1011.2813, 1050.0000, 0.25);
RemoveBuildingForPlayer(playerid, 2079, 2315.9297, -1011.5859, 1049.8359, 0.25);
RemoveBuildingForPlayer(playerid, 2831, 2312.1875, -1010.6563, 1050.2656, 0.25);
RemoveBuildingForPlayer(playerid, 2136, 2312.3594, -1010.6094, 1049.2031, 0.25);
RemoveBuildingForPlayer(playerid, 2079, 2313.8906, -1010.5391, 1049.8359, 0.25);
RemoveBuildingForPlayer(playerid, 2079, 2315.9297, -1010.5469, 1049.8359, 0.25);
RemoveBuildingForPlayer(playerid, 2139, 2317.3438, -1009.5938, 1049.2031, 0.25);
RemoveBuildingForPlayer(playerid, 2079, 2314.9844, -1009.2969, 1049.8359, 0.25);
RemoveBuildingForPlayer(playerid, 1822, 2324.3359, -1012.2188, 1049.2109, 0.25);
RemoveBuildingForPlayer(playerid, 2333, 2323.4922, -1009.7266, 1053.7031, 0.25);
RemoveBuildingForPlayer(playerid, 2291, 2323.7891, -1009.5938, 1049.2109, 0.25);
RemoveBuildingForPlayer(playerid, 2291, 2324.7813, -1009.5938, 1049.2109, 0.25);
RemoveBuildingForPlayer(playerid, 2331, 2323.4453, -1009.2813, 1053.9531, 0.25);
RemoveBuildingForPlayer(playerid, 2298, 2325.0625, -1010.7188, 1053.7031, 0.25);
RemoveBuildingForPlayer(playerid, 2291, 2325.7813, -1009.5938, 1049.2109, 0.25);
RemoveBuildingForPlayer(playerid, 1822, 2326.6250, -1012.2188, 1049.2109, 0.25);
RemoveBuildingForPlayer(playerid, 2291, 2326.7734, -1009.5938, 1049.2109, 0.25);
RemoveBuildingForPlayer(playerid, 2138, 2312.3672, -1008.6094, 1049.2031, 0.25);
RemoveBuildingForPlayer(playerid, 2138, 2314.3281, -1007.6328, 1049.2031, 0.25);
RemoveBuildingForPlayer(playerid, 2305, 2312.3672, -1007.6250, 1049.2031, 0.25);
RemoveBuildingForPlayer(playerid, 2135, 2313.3359, -1007.6250, 1049.2031, 0.25);
RemoveBuildingForPlayer(playerid, 2139, 2317.3438, -1008.6016, 1049.2031, 0.25);
RemoveBuildingForPlayer(playerid, 1735, 2318.8047, -1007.9688, 1049.1953, 0.25);
RemoveBuildingForPlayer(playerid, 2139, 2317.3438, -1007.6094, 1049.2031, 0.25);
RemoveBuildingForPlayer(playerid, 2287, 2320.0547, -1007.2500, 1055.7578, 0.25);
RemoveBuildingForPlayer(playerid, 2194, 2322.3594, -1008.4453, 1054.9453, 0.25);
RemoveBuildingForPlayer(playerid, 2106, 2325.0391, -1006.9453, 1054.2266, 0.25);
RemoveBuildingForPlayer(playerid, 2528, 2321.2656, -1006.0313, 1053.7266, 0.25);
RemoveBuildingForPlayer(playerid, 2249, 2323.0156, -1005.8828, 1054.3984, 0.25);
RemoveBuildingForPlayer(playerid, 2526, 2318.3750, -1003.0703, 1053.7422, 0.25);
RemoveBuildingForPlayer(playerid, 2523, 2322.2500, -1003.0703, 1053.7188, 0.25);
RemoveBuildingForPlayer(playerid, 1760, 2327.8047, -1021.0313, 1049.1953, 0.25);
RemoveBuildingForPlayer(playerid, 2295, 2328.7891, -1015.8281, 1049.1953, 0.25);
RemoveBuildingForPlayer(playerid, 1739, 2328.8359, -1023.6016, 1050.1094, 0.25);
RemoveBuildingForPlayer(playerid, 1739, 2329.0469, -1022.6953, 1050.1094, 0.25);
RemoveBuildingForPlayer(playerid, 2229, 2329.0703, -1017.2813, 1049.2031, 0.25);
RemoveBuildingForPlayer(playerid, 2295, 2329.2578, -1015.8281, 1053.7891, 0.25);
RemoveBuildingForPlayer(playerid, 2291, 2327.7578, -1009.5938, 1049.2109, 0.25);
RemoveBuildingForPlayer(playerid, 2106, 2327.7266, -1006.9453, 1054.2266, 0.25);
RemoveBuildingForPlayer(playerid, 2291, 2329.1875, -1011.0078, 1049.2109, 0.25);
RemoveBuildingForPlayer(playerid, 2291, 2329.1875, -1011.9922, 1049.2109, 0.25);
RemoveBuildingForPlayer(playerid, 2291, 2329.1875, -1010.0234, 1049.2109, 0.25);
RemoveBuildingForPlayer(playerid, 2285, 2328.9766, -1007.6406, 1051.2266, 0.25);
RemoveBuildingForPlayer(playerid, 2869, 2329.2891, -1025.8672, 1049.2266, 0.25);
RemoveBuildingForPlayer(playerid, 2829, 2329.4688, -1023.6250, 1050.0078, 0.25);
RemoveBuildingForPlayer(playerid, 2868, 2329.7656, -1023.0156, 1050.0000, 0.25);
RemoveBuildingForPlayer(playerid, 2117, 2329.6953, -1022.5859, 1049.2031, 0.25);
RemoveBuildingForPlayer(playerid, 1739, 2330.3672, -1023.5156, 1050.1094, 0.25);
RemoveBuildingForPlayer(playerid, 1739, 2330.3672, -1022.6875, 1050.1094, 0.25);
RemoveBuildingForPlayer(playerid, 2243, 2329.2969, -1018.0313, 1049.3984, 0.25);
RemoveBuildingForPlayer(playerid, 2096, 2330.2266, -1012.9688, 1053.7109, 0.25);
RemoveBuildingForPlayer(playerid, 2240, 2330.7422, -1010.7813, 1054.2578, 0.25);
RemoveBuildingForPlayer(playerid, 2096, 2330.2266, -1009.1875, 1053.7109, 0.25);
return 1;
}

forward FillTrash(id);
public FillTrash(id)
{
	TrashData[id][TrashLevel]++;
	if(TrashData[id][TrashType] == TYPE_BIN && TrashData[id][TrashLevel] > 1) TrashData[id][TrashLevel] = 1;

	if(TrashData[id][TrashType] == TYPE_DUMPSTER) {
		if(TrashData[id][TrashLevel] == 1) TrashData[id][TrashTimer] = SetTimerEx("FillTrash", REFILL_TIME * 1000, false, "i", id);
		if(TrashData[id][TrashLevel] >= 2)
		{
			TrashData[id][TrashLevel] = 2;
			KillTimer(TrashData[id][TrashTimer]);
			TrashData[id][TrashTimer] = -1;
		}

		Streamer_SetIntData(STREAMER_TYPE_3D_TEXT_LABEL, TrashData[id][TrashLabel], E_STREAMER_COLOR, (TrashData[id][TrashLevel] == 1) ? 0xF39C12FF : 0x2ECC71FF);
		return 1;
	}

	Streamer_SetIntData(STREAMER_TYPE_3D_TEXT_LABEL, TrashData[id][TrashLabel], E_STREAMER_COLOR, 0x2ECC71FF);
	return 1;
}

Vehicle_RemoveLogs(vehicleid)
{
    if (GetVehicleModel(vehicleid) == 0) return 0;
    for (new i; i < LOG_LIMIT; i++)
	{
	    if (IsValidDynamicObject(LogObjects[vehicleid][i]))
	    {
	        DestroyDynamicObject(LogObjects[vehicleid][i]);
	        LogObjects[vehicleid][i] = -1;
	    }
	}

	return 1;
}

// http://forum.sa-mp.com/showpost.php?p=3117531&postcount=5
RGBAToARGB(rgba)
    return rgba >>> 8 | rgba << 24;

stock GetComponentPrice(componentid)
{
    static const ModifiyeFiyatlar[] = {
        400, 550, 200, 250, 100, 150, 80, 500, 200, 500,
        1000, 220, 250, 100, 400, 500, 200, 500, 350, 300,
        250, 200, 150, 350, 50, 1000, 480, 480, 770, 680,
        37, 370, 170, 120, 790, 150, 500, 690, 190, 390,
        500, 390, 1000, 500, 500, 510, 710, 670, 530, 810,
        620, 670, 530, 130, 210, 230, 520, 430, 620, 720,
        530, 180, 250, 430, 830, 850, 750, 250, 200, 550,
        450, 550, 450, 1000, 1030, 980, 1560, 1620, 1200, 1030,
        1000, 1230, 820, 1560, 1350, 770, 100, 1500, 150, 650,
        450, 100, 750, 350, 450, 350, 1000, 620, 1140, 1000,
        940, 780, 830, 3250, 1610, 1540, 780, 780, 780, 1610,
        1540, -1, -1, 3340, 3250, 2130, 2050, 2130, 780, 940,
        780, 940, 780, 860, 780, 1120, 3340, 3250, 3340, 1650,
        3380, 3290, 1590, 830, 800, 1500, 1000, 800, 580, 470,
        870, 980, 150, 150, 100, 100, 490, 600, 890, 1000,
        1090, 840, 910, 1200, 1030, 1030, 920, 930, 550, 1050,
        1050, 950, 650, 550, 450, 850, 950, 850, 950, 970,
        880, 990, 900, 950, 1000, 900, 1000, 900, 2050, 2150,
        2130, 2050, 2130, 2040, 2150, 2040, 2095, 2175, 2080, 2200,
        1200, 1040, 940, 1100
    };

    new comindex = componentid - 1000;

    if (!(0 <= comindex < sizeof(ModifiyeFiyatlar)))
        return -1;

    return ModifiyeFiyatlar[comindex];
}
stock GetComponentName(component) return ModName[component-1000];
stock Pet_Sil(id)
{
	new query[65];
	format(query, sizeof(query), "DELETE FROM `petler` WHERE `petid` = '%d'", PetBilgi[id][petID]);
	mysql_query(g_SQL, query, false);
	FCNPC_Destroy(PetBilgi[id][NPCID]);
 	DestroyDynamic3DTextLabel(PetBilgi[id][petText]);
	PetBilgi[id][petID] = 0;
	PetBilgi[id][NPCID] = -1;
	format(PetBilgi[id][petAdi], 24, "Yok");
	PetBilgi[id][petSahip] = -1;
	PetBilgi[id][petTuru] = 0;
	PetBilgi[id][petCinsiyet] = 0;
	PetBilgi[id][petRenk] = 0;
	PetBilgi[id][petAclik] = 0;
	PetBilgi[id][petSaglik] = 0.0;
	PetBilgi[id][petTakip] = -1;
	PetBilgi[id][petYarali] = 0;
	PetBilgi[id][petDurum] = false;
	PetBilgi[id][petSaldir] = -1;
	PetBilgi[id][petAcikma] = 0;
	Iter_Remove(Petler, id);
	return 1;
}
stock PetYakin(playerid, Float:radius)
{
	foreach (new i:Petler) if (PetBilgi[i][petDurum] == true)
	{
	    new Float:pos[3];
	    FCNPC_GetPosition(PetBilgi[i][NPCID], pos[0], pos[1], pos[2]);
	    if (IsPlayerInRangeOfPoint(playerid, radius, pos[0], pos[1], pos[2]) && PetBilgi[i][petSahip] == PlayerData[playerid][pID] && FCNPC_GetVirtualWorld(PetBilgi[i][NPCID]) == GetPlayerVirtualWorld(playerid))
	    {
	        return i;
	    }
	}
	return -1;
}
stock PetDialog(playerid, id)
{
	new str[750], string[124], petrenk[20], petrenkkod[10];
	switch (PetBilgi[id][petRenk])
	{
	    case 1: petrenk = "Beyaz", petrenkkod = "FFFFFF";
	    case 2: petrenk = "Mavi", petrenkkod = "0295f7";
	    case 3: petrenk = "Kirmizi", petrenkkod = "f70202";
	    case 4: petrenk = "Turuncu", petrenkkod = "f77002";
	    case 5: petrenk = "Sari", petrenkkod = "ffff00";
	    case 6: petrenk = "Mor", petrenkkod = "ee00ff";
	    case 7: petrenk = "Yesil", petrenkkod = "2aff00";
	}
	strcat(str, "islem\tDurum\n");
	format(string, sizeof(string), "{ff0050}» {FFFFFF}Pet Adi\t{AFAFAF}%s\n", PetBilgi[id][petAdi]);
	strcat(str, string);
	format(string, sizeof(string), "{ff0050}» {FFFFFF}Pet Ad Rengi\t{%s}%s\n", petrenkkod, petrenk);
	strcat(str, string);
	format(string, sizeof(string), "{ff0050}» {FFFFFF}Pet Türü\t{AFAFAF}%s\n", PetTurIsim(PetBilgi[id][petTuru]));
	strcat(str, string);
	format(string, sizeof(string), "{ff0050}» {FFFFFF}Pet Cinsiyeti\t{AFAFAF}%s\n", (PetBilgi[id][petCinsiyet] == 1) ? ("Erkek") : ("Kadin"));
	strcat(str, string);
	format(string, sizeof(string), "{ff0050}» {FFFFFF}Pet Açlik\t{AFAFAF}%d\n", PetBilgi[id][petAclik]);
	strcat(str, string);
	format(string, sizeof(string), "{ff0050}» {FFFFFF}Pet Saglik\t{AFAFAF}%.1f \n", FCNPC_GetHealth(PetBilgi[id][NPCID]));
	strcat(str, string);
	format(string, sizeof(string), "{AFAFAF}» {FFFFFF}Pet Moduna Geç\n");
	strcat(str, string);
	format(string, sizeof(string), "{AFAFAF}» {FFFFFF}Pet Takip Modu\t{AFAFAF}%s {AFAFAF}\n", (PetBilgi[id][petTakip] == -1) ? ("{ff0000}Kapalý") : ("{26ff00}Açýk"));
	strcat(str, string);
	format(string, sizeof(string), "{AFAFAF}» {FFFFFF}Peti Besle\n");
	strcat(str, string);
	format(string, sizeof(string), "{AFAFAF}» {FFFFFF}Peti iyilestir\t{AFAFAF}{26ff00}$%d {AFAFAF}", floatround(100-FCNPC_GetHealth(PetBilgi[id][NPCID]))*3);
	strcat(str, string);

	format(string, sizeof(string), "{FFFFFF}%s'in Peti (ID: %d)", SQLName(PetBilgi[id][petSahip], 0), id);
	SetPVarInt(playerid, "PetID", id);
	ShowPlayerDialog(playerid, DIALOG_PET, DIALOG_STYLE_TABLIST_HEADERS, string, str, "Seç", "Kapat");
	return 1;
}

stock Pet_Olustur(sahip, turu, cinsiyet)
{
	for (new i; i < MAX_PET; i++)
	{
	    if (!Iter_Contains(Petler, i))
	    {
     		PetBilgi[i][petID] = i;
	        format(PetBilgi[i][petAdi], 24, "Yok");
	        PetBilgi[i][petSahip] = sahip;
	        PetBilgi[i][petTuru] = turu;
	        PetBilgi[i][petCinsiyet] = cinsiyet;
	        PetBilgi[i][petRenk] = 3;
	        PetBilgi[i][petAclik] = 100;
	        PetBilgi[i][petSaglik] = 100.0;
	        PetBilgi[i][petTakip] = -1;
	        PetBilgi[i][petDurum] = false;
	        PetBilgi[i][petSaldir] = -1;

	        Iter_Add(Petler, i);

			new query[256];
	        mysql_format(g_SQL, query, sizeof(query), "INSERT INTO `petler` (`petid`, `petadi`, `petsahip`, `petturu`, `petcinsiyet`, `petrenk`, `petaclik`, `petsaglik`) VALUES ('%d', 'Yok', '%d', '%d', '%d', '3', '100', '100.0')", PetBilgi[i][petID], sahip, turu, cinsiyet);
	        mysql_query (g_SQL, query);
	        return i;
	    }
	}
	return -1;
}

stock PetTurIsim(tur)
{
	new isim[20];
	isim = "Yok";
	switch (tur)
	{
	    case 1: isim = "Black Pitbull";
	    case 2: isim = "Boxer Dog";
	    case 3: isim = "Brown Pitbull";
	    case 4: isim = "Bull Terrier";
	    case 5: isim = "Dalmation";
	    case 6: isim = "Doberman";
	    case 7: isim = "European Shepherd";
	    case 8: isim = "German Shorthair";
	    case 9: isim = "Gray Pitbull";
	    case 10: isim = "Siberian Husky";
	    case 11: isim = "White Pitbull";
	}
	return isim;
}

stock PetTurSkin(tur)
{
	new skin;
	switch (tur)
	{
	    case 1: skin = 20001;
	    case 2: skin = 20002;
	    case 3: skin = 20003;
	    case 4: skin = 20004;
	    case 5: skin = 20005;
	    case 6: skin = 20006;
	    case 7: skin = 20007;
	    case 8: skin = 20008;
	    case 9: skin = 20009;
	    case 10: skin = 20010;
	    case 11: skin = 20011;
	    default: skin = 20001;
	}
	return skin;
}

new cekilisSure = -1;

CMD:cekilisyap(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 4)
        return HataMesajGonder(playerid, "Bu komutu kullanmak için yetkiniz yok!");

	if (cekilisSure > -1)
	    return HataMesajGonder(playerid, "Hali hazirda zaten bir çekilis mevcut.");

	new tmp;

	if (sscanf(params, "d", tmp))
	    return SunucuMesaji(playerid, "/cekilisyap [Süre]");

	if (!(3 <= tmp <= 10))
	    return HataMesajGonder(playerid, "Çekilis süresini en az 3, en fazla 10 yapabilirsiniz.");

	MesajGonder(playerid, "Basarili bir sekilde çekilisi baslattiniz.");
	cekilisSure = tmp;
	return 1;
}

/*forward OnServerUpdate();
public OnServerUpdate()
{
    if (cekilisSure != -1)
    {
        if (cekilisSure == 0) foreach (new i : Player)
        {
            SendClientMessageEx(i, 0x01A9DBFF, "(( [Çekilis] Çekilisi kazanan sansli talihli %s oldu, kendisini tebrik ederiz! )) ", ReturnName(Iter_Random(Player), 0));
        }
        else if (cekilisSure > 0) foreach (new i : Player)
		{
            SendClientMessageEx(i, 0x01A9DBFF, "(( [Çekilis] sansli kisinin seçilmesine son %d saniye kaldi. ))", cekilisSure);
		}
		cekilisSure -= 1;
	}

    if (GetServerBilgi("BitcoinUpdate") <= gettime())
	{
	    new sans = random(100)+1;
		new date = gettime()+7*86400;

		if (sans >= 15)
		{
			new artacak = RandomEx(50, 100);
			SetServerBilgi("BitcoinAlma", BITCOIN_ALMA+artacak);
			SetServerBilgi("BitcoinSatma", BITCOIN_ALMA+artacak);
		}

		if (sans <= 14)
		{
            new azalacak = RandomEx(10, 40);
			SetServerBilgi("BitcoinAlma", BITCOIN_ALMA-azalacak);
			SetServerBilgi("BitcoinSatma", BITCOIN_SATMA-azalacak);
		}

		SetServerBilgi("BitcoinUpdate", date);
	}
	return 1;
}*/

forward PetUpdate();
public PetUpdate()
{
	foreach (new i:Petler)
	{
	    if (PetBilgi[i][petDurum] == true)
	    {
	        new str[124];
	        if (PetBilgi[i][petRenk] == 1) format(str, sizeof(str), "{FFFFFF}%s (#%d)\n\n{AFAFAF}Pet Türü: %s\n{AFAFAF}Cinsiyet: %s\n{AFAFAF}Saglik: %.1f\nAçlik: %d",PetBilgi[i][petAdi],i, PetTurIsim(PetBilgi[i][petTuru]), (PetBilgi[i][petCinsiyet] == 1) ? ("Erkek") : ("Kadin"), FCNPC_GetHealth(PetBilgi[i][NPCID]), PetBilgi[i][petAclik]);
	        if (PetBilgi[i][petRenk] == 2) format(str, sizeof(str), "{0295f7}%s (#%d)\n\n{AFAFAF}Pet Türü: %s\n{AFAFAF}Cinsiyet: %s\n{AFAFAF}Saglik: %.1f\nAçlik: %d",PetBilgi[i][petAdi],i, PetTurIsim(PetBilgi[i][petTuru]), (PetBilgi[i][petCinsiyet] == 1) ? ("Erkek") : ("Kadin"), FCNPC_GetHealth(PetBilgi[i][NPCID]), PetBilgi[i][petAclik]);
	        if (PetBilgi[i][petRenk] == 3) format(str, sizeof(str), "{f70202}%s (#%d)\n\n{AFAFAF}Pet Türü: %s\n{AFAFAF}Cinsiyet: %s\n{AFAFAF}Saglik: %.1f\nAçlik: %d",PetBilgi[i][petAdi],i, PetTurIsim(PetBilgi[i][petTuru]), (PetBilgi[i][petCinsiyet] == 1) ? ("Erkek") : ("Kadin"), FCNPC_GetHealth(PetBilgi[i][NPCID]), PetBilgi[i][petAclik]);
			if (PetBilgi[i][petRenk] == 4) format(str, sizeof(str), "{f77002}%s (#%d)\n\n{AFAFAF}Pet Türü: %s\n{AFAFAF}Cinsiyet: %s\n{AFAFAF}Saglik: %.1f\nAçlik: %d",PetBilgi[i][petAdi],i, PetTurIsim(PetBilgi[i][petTuru]), (PetBilgi[i][petCinsiyet] == 1) ? ("Erkek") : ("Kadin"), FCNPC_GetHealth(PetBilgi[i][NPCID]), PetBilgi[i][petAclik]);
			if (PetBilgi[i][petRenk] == 5) format(str, sizeof(str), "{ffff00}%s (#%d)\n\n{AFAFAF}Pet Türü: %s\n{AFAFAF}Cinsiyet: %s\n{AFAFAF}Saglik: %.1f\nAçlik: %d",PetBilgi[i][petAdi],i, PetTurIsim(PetBilgi[i][petTuru]), (PetBilgi[i][petCinsiyet] == 1) ? ("Erkek") : ("Kadin"), FCNPC_GetHealth(PetBilgi[i][NPCID]), PetBilgi[i][petAclik]);
			if (PetBilgi[i][petRenk] == 6) format(str, sizeof(str), "{ee00ff}%s (#%d)\n{AFAFAF}Pet Türü: %s\n{AFAFAF}Cinsiyet: %s\n{AFAFAF}Saglik: %.1f\nAçlik: %d",PetBilgi[i][petAdi],i, PetTurIsim(PetBilgi[i][petTuru]), (PetBilgi[i][petCinsiyet] == 1) ? ("Erkek") : ("Kadin"), FCNPC_GetHealth(PetBilgi[i][NPCID]), PetBilgi[i][petAclik]);
			if (PetBilgi[i][petRenk] == 7) format(str, sizeof(str), "{2aff00}%s (#%d)\n\n{AFAFAF}Pet Türü: %s\n{AFAFAF}Cinsiyet: %s\n{AFAFAF}Saglik: %.1f\nAçlik: %d",PetBilgi[i][petAdi],i, PetTurIsim(PetBilgi[i][petTuru]), (PetBilgi[i][petCinsiyet] == 1) ? ("Erkek") : ("Kadin"), FCNPC_GetHealth(PetBilgi[i][NPCID]), PetBilgi[i][petAclik]);
			UpdateDynamic3DTextLabelText(PetBilgi[i][petText], -1, str);

			if (PetBilgi[i][petTakip] != -1 && OyundaDegil(PetBilgi[i][petTakip]) && !IsPlayerInWater(PetBilgi[i][petTakip]) && !IsPlayerInAnyVehicle(PetBilgi[i][petTakip]) && GetPlayerInterior(PetBilgi[i][petTakip]) == FCNPC_GetInterior(PetBilgi[i][NPCID]) && GetPlayerVirtualWorld(PetBilgi[i][petTakip]) == FCNPC_GetVirtualWorld(PetBilgi[i][NPCID]))
			{
			    new Float:pos[3];
			    FCNPC_GetPosition(PetBilgi[i][NPCID], pos[0], pos[1], pos[2]);
			    FCNPC_StopAttack(PetBilgi[i][NPCID]);
			    if (GetPlayerDistanceFromPoint(PetBilgi[i][petTakip], pos[0], pos[1], pos[2]) >= 20)
			    {
			        PetBilgi[i][petTakip] = -1;
			        PetBilgi[i][petSaldir] = -1;
			        FCNPC_Stop(PetBilgi[i][NPCID]);
			        FCNPC_StopAttack(PetBilgi[i][NPCID]);
			    }
			    if (GetPlayerDistanceFromPoint(PetBilgi[i][petTakip], pos[0], pos[1], pos[2]) >= 1 && GetPlayerDistanceFromPoint(PetBilgi[i][petTakip], pos[0], pos[1], pos[2]) <= 20)
			    {
			        FCNPC_StopAttack(PetBilgi[i][NPCID]);
					FCNPC_GoToPlayer(PetBilgi[i][NPCID], PetBilgi[i][petTakip]);
			    }
			    if (GetPlayerDistanceFromPoint(PetBilgi[i][petTakip], pos[0], pos[1], pos[2]) < 1 && PetBilgi[i][petSaldir] != -1)
			    {
			        FCNPC_MeleeAttack(PetBilgi[i][NPCID], -1, true);
				}

			}
			PetBilgi[i][petAcikma]++;
			if (PetBilgi[i][petAcikma] >= 360)
			{
			    PetBilgi[i][petAcikma] = 0;
			    PetBilgi[i][petAclik] -= 3;
			    if (PetBilgi[i][petAclik] < 0) PetBilgi[i][petAclik] = 0;
			}
	    }
	}
	return 1;
}
forward PetDelete(id);
public PetDelete(id)
{
	PetBilgi[id][petSaglik] = 100.0;
    FCNPC_Destroy(PetBilgi[id][NPCID]);
    PetBilgi[id][petTakip] = -1;
    PetBilgi[id][NPCID] = -1;
    PetBilgi[id][petDurum] = false;
    DestroyDynamic3DTextLabel(PetBilgi[id][petText]);
	return 1;
}
stock Pet_Kaydet(id)
{
	new query[1000];
	format(query, sizeof(query), "UPDATE `petler` SET `petadi` = '%s', `petsahip` = '%d', `petturu` = '%d', `petcinsiyet` = '%d', `petrenk` = '%d', `petaclik` = '%d', `petsaglik` = '%.1f', `petyarali` = '%d' WHERE `petid` = '%d'",
	PetBilgi[id][petAdi],
	PetBilgi[id][petSahip],
	PetBilgi[id][petTuru],
	PetBilgi[id][petCinsiyet],
	PetBilgi[id][petRenk],
	PetBilgi[id][petAclik],
	(PetBilgi[id][petDurum] == true) ? (FCNPC_GetHealth(PetBilgi[id][NPCID])) : (PetBilgi[id][petSaglik]),
	PetBilgi[id][petYarali],
	PetBilgi[id][petID]);
	mysql_query(g_SQL, query, false);
	return 1;
}

forward HoodlariYukle();
public HoodlariYukle()
{
	mysql_query(g_SQL, "SELECT * FROM `hood`");

	new rows = cache_num_rows();

	printf("» Toplam %d Hood yüklendi.", rows);

	if (rows)
	{
	    new hoID;
		for (new i; i<rows; i++)
		{
		    cache_get_value_name_int(i, "ID", hoID);

            Hood[hoID][hExists] = true;
            Hood[hoID][hID] = hoID;

			cache_get_value_name_float(i, "hoodX", Hood[hoID][hPos][0]);
		    cache_get_value_name_float(i, "hoodY", Hood[hoID][hPos][1]);
		    cache_get_value_name_float(i, "hoodZ", Hood[hoID][hPos][2]);
		    cache_get_value_name_int(i, "Birlik", Hood[hoID][hBirlik]);

		    Hood_Yenile(hoID);
		}
	}
	return 1;
}

stock NPCYukle()
{
	mysql_query(g_SQL, "SELECT * FROM `npcler`");

	new rows = cache_num_rows();

	printf("» Toplam %d NPC yüklendi.", rows);

	if (rows)
	{
	    new npID;

		for (new i = 0; i < rows; i ++)
		{
		    cache_get_value_name_int(i, "npcID", npID);

		    NPCBilgi[npID][npcExists] = true;
		    NPCBilgi[npID][npcID] = npID;

		    cache_get_value_name(i, "npcAd", NPCBilgi[npID][npcAd], 24);
		    cache_get_value_name_int(i, "npcSkin", NPCBilgi[npID][npcSkin]);
		    cache_get_value_name_float(i, "npcX", NPCBilgi[npID][npcPos][0]);
		    cache_get_value_name_float(i, "npcY", NPCBilgi[npID][npcPos][1]);
		    cache_get_value_name_float(i, "npcZ", NPCBilgi[npID][npcPos][2]);
		    cache_get_value_name_float(i, "npcA", NPCBilgi[npID][npcPos][3]);
		    cache_get_value_name_int(i, "npcVw", NPCBilgi[npID][npcVw]);
		    cache_get_value_name(i, "Secenek1", NPCSecenekler[npID][0], 50);
		    cache_get_value_name(i, "Secenek1Cevap", NPCSecenekCevaplar[npID][0], 200);
		    cache_get_value_name(i, "Secenek2", NPCSecenekler[npID][1], 50);
		    cache_get_value_name(i, "Secenek2Cevap", NPCSecenekCevaplar[npID][1], 200);
		    cache_get_value_name(i, "Secenek3", NPCSecenekler[npID][2], 50);
		    cache_get_value_name(i, "Secenek3Cevap", NPCSecenekCevaplar[npID][2], 200);
		    cache_get_value_name(i, "Secenek4", NPCSecenekler[npID][3], 50);
		    cache_get_value_name(i, "Secenek4Cevap", NPCSecenekCevaplar[npID][3], 200);
		    cache_get_value_name(i, "Secenek5", NPCSecenekler[npID][4], 50);
		    cache_get_value_name(i, "Secenek5Cevap", NPCSecenekCevaplar[npID][4], 200);

		    NPC_Refresh(npID);
		}
	}
	return 1;
}

stock NPC_Refresh(id)
{
	if (id != -1 && NPCBilgi[id][npcExists])
	{
	    if (IsValidDynamic3DTextLabel(NPCBilgi[id][npcLabel])) DestroyDynamic3DTextLabel(NPCBilgi[id][npcLabel]);
	    if (IsValidDynamicActor(NPCBilgi[id][npcActor])) DestroyDynamicActor(NPCBilgi[id][npcActor]);
	    NPCBilgi[id][npcActor] = CreateDynamicActor(NPCBilgi[id][npcSkin], NPCBilgi[id][npcPos][0], NPCBilgi[id][npcPos][1], NPCBilgi[id][npcPos][2], NPCBilgi[id][npcPos][3], 1, 100, NPCBilgi[id][npcVw]);
	    new str[124];
	    format(str, sizeof(str), "{E74C3C}[%s] (#%d)\n{E74C3C}[ALT] {FFFFFF}- Etkilesim", NPCBilgi[id][npcAd], id);
	    NPCBilgi[id][npcLabel] = CreateDynamic3DTextLabel(str, -1, NPCBilgi[id][npcPos][0], NPCBilgi[id][npcPos][1], NPCBilgi[id][npcPos][2]+1.2, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, NPCBilgi[id][npcVw]);
	}
	return 1;
}

stock GraffitiYukle()
{
    mysql_query(g_SQL, "SELECT * FROM `graffiti`");

    new rows = cache_num_rows();

	if (rows)
	{
	    new grafID;
	    for (new i = 0; i < rows; i ++) if (i < MAX_GRAFFITI_POINTS)
	    {
	        cache_get_value_name_int(i, "graffitiID", grafID);

            GraffitiData[grafID][graffitiExists] = 1;
            GraffitiData[grafID][graffitiID] = grafID;

			cache_get_value_name(i, "graffitiText", GraffitiData[grafID][graffitiText], 64);
	        cache_get_value_name(i, "graffitiFont", GraffitiData[grafID][graffitiFont], 64);
	        cache_get_value_name_float(i, "graffitiX", GraffitiData[grafID][graffitiPos][0]);
	        cache_get_value_name_float(i, "graffitiY", GraffitiData[grafID][graffitiPos][1]);
	        cache_get_value_name_float(i, "graffitiZ", GraffitiData[grafID][graffitiPos][2]);
	        cache_get_value_name_float(i, "graffitiRX", GraffitiData[grafID][graffitiPos][3]);
	        cache_get_value_name_float(i, "graffitiRY", GraffitiData[grafID][graffitiPos][4]);
	        cache_get_value_name_float(i, "graffitiRZ", GraffitiData[grafID][graffitiPos][5]);

	        Graffiti_Refresh(grafID);
	    }
	}

    return 1;
}

stock Graffiti_Refresh(id)
{
    if (id != -1 && GraffitiData[id][graffitiExists])
    {

        if (IsValidDynamicObject(GraffitiData[id][graffitiObject]))
            DestroyDynamicObject(GraffitiData[id][graffitiObject]);


        GraffitiData[id][graffitiObject] = CreateDynamicObject(19482, GraffitiData[id][graffitiPos][0], GraffitiData[id][graffitiPos][1], GraffitiData[id][graffitiPos][2], GraffitiData[id][graffitiPos][3], GraffitiData[id][graffitiPos][4], GraffitiData[id][graffitiPos][5]);
		SetDynamicObjectMaterialText(GraffitiData[id][graffitiObject], 0, GraffitiData[id][graffitiText], OBJECT_MATERIAL_SIZE_256x256, GraffitiData[id][graffitiFont], 24, 0, 0xFFFFFFFF, 0, 1);
    }
    return 1;
}
stock Graffiti_Save(id)
{
    new
        query[384];

    format(query, sizeof(query), "UPDATE `graffiti` SET `graffitiX` = '%.4f', `graffitiY` = '%.4f', `graffitiZ` = '%.4f', `graffitiRX` = '%.4f', `graffitiRY` = '%.4f', `graffitiRZ` = '%.4f', `graffitiText` = '%s', `graffitiFont` = '%s' WHERE `graffitiID` = '%d'",
        GraffitiData[id][graffitiPos][0],
        GraffitiData[id][graffitiPos][1],
        GraffitiData[id][graffitiPos][2],
        GraffitiData[id][graffitiPos][3],
        GraffitiData[id][graffitiPos][4],
        GraffitiData[id][graffitiPos][5],
        SQL_ReturnEscaped(GraffitiData[id][graffitiText]),
        SQL_ReturnEscaped(GraffitiData[id][graffitiFont]),
        GraffitiData[id][graffitiID]
    );
    mysql_tquery(g_SQL, query);
    return 1;
}

stock Graffiti_Create(Float:x, Float:y, Float:z)
{
    for (new i = 0; i < MAX_GRAFFITI_POINTS; i ++)
    {
        if (!GraffitiData[i][graffitiExists])
        {
            GraffitiData[i][graffitiExists] = 1;
            GraffitiData[i][graffitiID] = i;

            GraffitiData[i][graffitiPos][0] = x;
            GraffitiData[i][graffitiPos][1] = y;
            GraffitiData[i][graffitiPos][2] = z;
            GraffitiData[i][graffitiPos][3] = 0.0;
            GraffitiData[i][graffitiPos][4] = 0.0;
            GraffitiData[i][graffitiPos][5] = 0.0;

            format(GraffitiData[i][graffitiText], 32, "Graffiti");
            format(GraffitiData[i][graffitiFont], 32, "Arial");

            Graffiti_Refresh(i);

			new query[256];

			mysql_format(g_SQL, query, sizeof query, "INSERT INTO `graffiti` (`graffitiID`, `graffitiRX`) VALUES ('%d', '0.0')", i);
			mysql_query (g_SQL, query);

    		Graffiti_Save(i);
            return i;
        }
    }
    return -1;
}


stock Hood_Yenile(id)
{
	if (IsValidDynamic3DTextLabel(Hood[id][hLabel])) DestroyDynamic3DTextLabel(Hood[id][hLabel]);
	if (IsValidDynamicArea(Hood[id][hZone])) DestroyDynamicArea(Hood[id][hZone]);
	if (IsValidDynamicPickup(Hood[id][hPickup])) DestroyDynamicPickup(Hood[id][hPickup]);
	if (IsValidDynamicMapIcon(Hood[id][hMapIcon])) DestroyDynamicMapIcon(Hood[id][hMapIcon]);
	new str[124];
	format(str, sizeof(str), "Hood (#%d)\n%s", id, Birlikler[Hood[id][hBirlik]][birlikAd]);
	Hood[id][hLabel] = CreateDynamic3DTextLabel(str, COLOR_LIGHTBLUE, Hood[id][hPos][0], Hood[id][hPos][1], Hood[id][hPos][2], 10.0);
	Hood[id][hZone] = CreateDynamicRectangle(Hood[id][hPos][0]-45, Hood[id][hPos][1]-45, Hood[id][hPos][0]+45, Hood[id][hPos][1]+45, 0, 0);
	Hood[id][hPickup] = CreateDynamicPickup(1254, 23, Hood[id][hPos][0], Hood[id][hPos][1], Hood[id][hPos][2], 0, 0);
	Hood[id][hMapIcon] = CreateDynamicMapIcon(Hood[id][hPos][0], Hood[id][hPos][1], Hood[id][hPos][2], 23, 0, 0);
	return 1;
}
stock PetleriYukle()
{
	mysql_query(g_SQL, "SELECT * FROM `petler`");
	new rows = cache_num_rows();

	printf("» Toplam %d pet yüklendi.", rows);

	if (rows)
	{
	    new pPID;
		for (new i; i < rows; i++)
		{
		    cache_get_value_name_int(i, "petid", pPID);

		    PetBilgi[pPID][petID] = pPID;

		    cache_get_value_name(i, "petadi", PetBilgi[pPID][petAdi], 24);
		    cache_get_value_name_int(i, "petsahip", PetBilgi[pPID][petSahip]);
		    cache_get_value_name_int(i, "petturu", PetBilgi[pPID][petTuru]);
		    cache_get_value_name_int(i, "petcinsiyet", PetBilgi[pPID][petCinsiyet]);
		    cache_get_value_name_int(i, "petrenk", PetBilgi[pPID][petRenk]);
		    cache_get_value_name_int(i, "petaclik", PetBilgi[pPID][petAclik]);
		    cache_get_value_name_float(i, "petsaglik", PetBilgi[pPID][petSaglik]);
		    cache_get_value_name_int(i, "petyarali", PetBilgi[pPID][petYarali]);

			PetBilgi[pPID][petTakip] = -1;
		    PetBilgi[pPID][petDurum] = false;
		    Iter_Add(Petler, pPID);
		}
	}
	return 1;
}

stock GetPlayerPosEx(playerid, &Float:x, &Float:y, &Float:z)
{
	new id = Entrance_Inside(playerid);
	if (id != -1)
	{
	    x = EntranceData[id][entrancePos][0];
	    y = EntranceData[id][entrancePos][1];
	    z = EntranceData[id][entrancePos][2];
	    return 1;
	}
	id = House_Inside(playerid);
	if (id != -1)
	{
	    x = HouseInfo[id][evPos][0];
	    y = HouseInfo[id][evPos][1];
	    z = HouseInfo[id][evPos][2];
	    return 1;
	}
	id = Garage_Inside(playerid);
	if (id != -1)
	{
	    x = GarageData[id][gPos][0];
	    y = GarageData[id][gPos][1];
	    z = GarageData[id][gPos][2];
	    return 1;
	}
	id = Business_Inside(playerid);
	if (id != -1)
	{
	    x = Isyeri[id][isyeriPos][0];
	    y = Isyeri[id][isyeriPos][1];
	    z = Isyeri[id][isyeriPos][2];
	    return 1;
	}
	GetPlayerPos(playerid, x, y, z);
	return 1;
}

stock IsPlayerInWater(playerid)
{
        new Float:Z;
        GetPlayerPos(playerid,Z,Z,Z);
        if (Z < 0.7) switch (GetPlayerAnimationIndex(playerid)) { case 1543,1538,1539: return 1; }
        if (GetPlayerDistanceFromPoint(playerid,-965,2438,42) <= 700 && Z < 45)return 1;
        new Float:water_places[][] =
        {
                {25.0,  2313.0, -1417.0,        23.0},
                {15.0,  1280.0, -773.0,         1082.0},
                {15.0,  1279.0, -804.0,         86.0},
                {20.0,  1094.0, -674.0,         111.0},
                {26.0,  194.0,  -1232.0,        76.0},
                {25.0,  2583.0, 2385.0,         15.0},
                {25.0,  225.0,  -1187.0,        73.0},
                {50.0,  1973.0, -1198.0,        17.0}
        };
        for (new t=0; t < sizeof water_places; t++)
                if (GetPlayerDistanceFromPoint(playerid,water_places[t][1],water_places[t][2],water_places[t][3]) <= water_places[t][0]) return 1;
        return 0;
}
stock GetInitials(const string[])
{
    new
        ret[32],
        index = 0;

    for (new i = 0, l = strlen(string); i != l; i ++)
    {
        if (('A' <= string[i] <= 'Z') && (i == 0 || string[i - 1] == ' '))
            ret[index++] = string[i];
    }
    return ret;
}
stock convertDatex(timestamp, _form=0){

    new year=1970, day=0, month=0, hour=0, mins=0, sec=0;

    new days_of_month[12] = { 31,28,31,30,31,30,31,31,30,31,30,31 };

    new names_of_month[12][10] = {"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"};

    new returnstring[56];

    while (timestamp>31622400){

        timestamp -= 31536000;

        if ( ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0) ) timestamp -= 86400;

        year++;

    }

    if ( ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0) )

        days_of_month[1] = 29;

    else

        days_of_month[1] = 28;

    while (timestamp>86400){

        timestamp -= 86400, day++;

        if (day==days_of_month[month]) day=0, month++;

    }

    while (timestamp>60){

        timestamp -= 60, mins++;

        if ( mins == 60) mins=0, hour++;

    }

    sec=timestamp;

    switch ( _form ){

        case 1: format(returnstring,56, "%02d/%02d/%d %02d:%02d:%02d", day+1, month+1, year, hour, mins, sec);

        case 2: format(returnstring,56, "%s %02d, %d, %02d:%02d:%02d", names_of_month[month],day+1,year, hour, mins, sec);

        case 3: format(returnstring,56, "%d %c%c%c %d, %02d:%02d", day+1,names_of_month[month][0],names_of_month[month][1],names_of_month[month][2], year,hour,mins);

        default: format(returnstring,56, "%02d/%02d/%d %02d:%02d:%02d", day+1, month+1, year, hour, mins, sec);

    }

    return returnstring;

}
stock GetFightStyleName(styleid)
{
    new sname[12];
    sname = "Bilinmiyor";
    switch (styleid)
    {
        case 4: sname = "Normal";
        case 5: sname = "Boxing";
        case 6: sname = "Kung Fu";
        case 7: sname = "Knee Head";
        case 15: sname = "Grabkick";
        case 16: sname = "Elbow";
    }
    return sname;
}
stock Graffiti_Delete(id)
{
    if (id != -1 && GraffitiData[id][graffitiExists])
    {
        new
            string[64];

        if (IsValidDynamicObject(GraffitiData[id][graffitiObject]))
            DestroyDynamicObject(GraffitiData[id][graffitiObject]);

        format(string, sizeof(string), "DELETE FROM `graffiti` WHERE `graffitiID` = '%d'", GraffitiData[id][graffitiID]);
        mysql_tquery(g_SQL, string);

        GraffitiData[id][graffitiExists] = false;
        GraffitiData[id][graffitiText][0] = 0;
        GraffitiData[id][graffitiID] = 0;
    }
    return 1;
}
PaintballSpawn(playerid)
{
	new id = pbOda[playerid];
	if (Paintball[id][odaDurum] != ODA_BASLADI || Paintball[id][odaExists] == false || GetPVarInt(playerid, "OdadanAt") == 1)
	{
	    OdadanAt(playerid, 3);
	    DeletePVar(playerid, "OdadanAt");
	    return 1;
	}
	if (pbTakim[playerid] == 0 && Paintball[id][odaOyunTuru] == 1) return 1;
	if (Paintball[id][odaOyunTuru] == 2)
	{
	    switch (Paintball[id][odaArena])
	    {
	        case 1:
	        {
	            new rand = random(4);
	            switch (rand)
	            {
	                case 0:
	                {
	                    SetPlayerPos(playerid, 1059.3263,2081.4861,10.8203);
	                    SetPlayerFacingAngle(playerid, 322.0627);
	                    SetPlayerInterior(playerid, 0);
	                    SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                }
	                case 1:
	                {
	                    SetPlayerPos(playerid, 1068.1041,2130.2908,10.8203);
	                    SetPlayerFacingAngle(playerid, 176.9880);
	                    SetPlayerInterior(playerid, 0);
	                    SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                }
	                case 2:
	                {
	                    SetPlayerPos(playerid, 1087.8287,2078.1233,15.3504);
	                    SetPlayerFacingAngle(playerid, 30.0567);
	                    SetPlayerInterior(playerid, 0);
	                    SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                }
	                case 3:
	                {
	                    SetPlayerPos(playerid, 1086.3816,2118.1890,15.3504);
	                    SetPlayerFacingAngle(playerid, 111.5241);
	                    SetPlayerInterior(playerid, 0);
	                    SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                }
	            }
	        }
	        case 2:
	        {
	            new rand = random(5);
	            switch (rand)
	            {
	                case 0:
	                {
	                    SetPlayerPos(playerid, 1250.3260,-47.5597,1001.0268);
	                    SetPlayerFacingAngle(playerid, 304.2428);
	                    SetPlayerInterior(playerid, 18);
	                    SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                }
	                case 1:
	                {
	                    SetPlayerPos(playerid, 1286.4022,-64.8159,1002.4961);
	                    SetPlayerFacingAngle(playerid, 349.2183);
	                    SetPlayerInterior(playerid, 18);
	                    SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if (Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
	                }
	                case 3:
	                {
	                    SetPlayerPos(playerid, 1253.7115,-0.0914,1001.0323);
	                    SetPlayerFacingAngle(playerid, 214.8205);
	                    SetPlayerInterior(playerid, 18);
	                    SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if (Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
	                }
	                case 4:
	                {
	                    SetPlayerPos(playerid, 1308.4783,-45.9482,1001.0313);
	                    SetPlayerFacingAngle(playerid, 68.8058);
	                    SetPlayerInterior(playerid, 18);
	                    SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if (Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
					}
	            }
	        }
	        case 3:
	        {
	            new rand = random(6);
	            switch (rand)
	            {
	                case 0:
	                {
	                    SetPlayerPos(playerid, -975.1069,1061.2255,1345.6719);
	                    SetPlayerFacingAngle(playerid, 93.5594);
	                    SetPlayerInterior(playerid, 10);
	                    SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if (Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
					}
					case 1:
					{
					    SetPlayerPos(playerid, -1130.9933,1057.7678,1346.4141);
	                    SetPlayerFacingAngle(playerid, 269.3412);
	                    SetPlayerInterior(playerid, 10);
	                    SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if (Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
					}
					case 2:
					{
					    SetPlayerPos(playerid, -1084.8049,1042.5554,1343.4354);
	                    SetPlayerFacingAngle(playerid, 301.9282);
	                    SetPlayerInterior(playerid, 10);
	                    SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if (Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
					}
					case 3:
					{
					    SetPlayerPos(playerid, -1038.9807,1049.7030,1342.1497);
	                    SetPlayerFacingAngle(playerid, 294.7213);
	                    SetPlayerInterior(playerid, 10);
	                    SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if (Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
					}
					case 4:
					{
					    SetPlayerPos(playerid, -973.8306,1027.6724,1345.0436);
	                    SetPlayerFacingAngle(playerid, 355.1951);
	                    SetPlayerInterior(playerid, 10);
	                    SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if (Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
					}
					case 5:
					{
					    SetPlayerPos(playerid, -973.0900,1088.9197,1344.9883);
	                    SetPlayerFacingAngle(playerid, 86.3523);
	                    SetPlayerInterior(playerid, 10);
	                    SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if (Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
					}
				}
	        }
	        case 4:
	        {
	            new rand = random(6);
	            switch (rand)
	            {
	                case 0:
	                {
		                SetPlayerPos(playerid, 239.0441,143.9385,1003.0234);
	                 	SetPlayerFacingAngle(playerid, 357.3882);
	                  	SetPlayerInterior(playerid, 3);
	                   	SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if (Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
                    }
                    case 1:
                    {
                        SetPlayerPos(playerid, 300.0846,183.6274,1007.1719);
	                 	SetPlayerFacingAngle(playerid, 95.4391);
	                  	SetPlayerInterior(playerid, 3);
	                   	SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if (Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
                    }
                    case 2:
                    {
                        SetPlayerPos(playerid, 245.1610,185.1715,1008.1719);
	                 	SetPlayerFacingAngle(playerid, 321.9813);
	                  	SetPlayerInterior(playerid, 3);
	                   	SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if (Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
                    }
                    case 3:
                    {
                        SetPlayerPos(playerid, 208.3106,142.2589,1003.0234);
	                 	SetPlayerFacingAngle(playerid, 271.8475);
	                  	SetPlayerInterior(playerid, 3);
	                   	SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if (Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
                    }
                    case 4:
                    {
                        SetPlayerPos(playerid, 196.2699,179.3185,1003.0234);
	                 	SetPlayerFacingAngle(playerid, 250.2508);
	                  	SetPlayerInterior(playerid, 3);
	                   	SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if (Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
                    }
                    case 5:
                    {
                        SetPlayerPos(playerid, 230.5995,183.4883,1003.0313);
	                 	SetPlayerFacingAngle(playerid, 124.6263);
	                  	SetPlayerInterior(playerid, 3);
	                   	SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if (Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
                    }
	            }

	        }
	        case 5:
	        {
	            new rand = random(5);
	            switch (rand)
	            {
	                case 0:
	                {
	                    SetPlayerPos(playerid, 1058.8458,2081.5845,10.8203);
	                 	SetPlayerFacingAngle(playerid, 332.0316);
	                  	SetPlayerInterior(playerid, 0);
	                   	SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if (Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
	                }
	                case 1:
	                {
	                    SetPlayerPos(playerid, 1069.3534,2129.8914,10.8203);
	                 	SetPlayerFacingAngle(playerid, 172.2302);
	                  	SetPlayerInterior(playerid, 0);
	                   	SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
						SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if (Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
	                }
	                case 2:
					{
					    SetPlayerPos(playerid, 1087.8864,2079.1938,15.3504);
	                 	SetPlayerFacingAngle(playerid, 29.0823);
	                  	SetPlayerInterior(playerid, 0);
	                   	SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if (Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
					}
					case 3:
					{
					    SetPlayerPos(playerid, 1093.3832,2097.4788,10.8203);
	                 	SetPlayerFacingAngle(playerid, 87.9896);
	                  	SetPlayerInterior(playerid, 0);
	                   	SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if (Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
					}
					case 4:
					{
					    SetPlayerPos(playerid, 1065.2822,2111.1763,10.8203);
	                 	SetPlayerFacingAngle(playerid, 269.0746);
	                  	SetPlayerInterior(playerid, 0);
	                   	SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if (Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
					}
				}
	        }
	        case 6:
	        {
	            new rand = random(5);
	            switch (rand)
	            {
	                case 0:
	                {
	                    SetPlayerPos(playerid, 2543.4995,-1304.1349,1025.0703);
	                 	SetPlayerFacingAngle(playerid, 174.1336);
	                  	SetPlayerInterior(playerid, 2);
	                   	SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if (Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
	                }
	                case 1:
	                {
	                    SetPlayerPos(playerid, 2562.5330,-1296.9476,1031.4219);
	                 	SetPlayerFacingAngle(playerid, 84.4958);
	                  	SetPlayerInterior(playerid, 2);
	                   	SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if (Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
	                }
	                case 2:
	                {
	                    SetPlayerPos(playerid, 2574.8743,-1301.6804,1037.7734);
	                 	SetPlayerFacingAngle(playerid, 359.2685);
	                  	SetPlayerInterior(playerid, 2);
	                   	SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if (Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
	                }
	                case 3:
	                {
	                    SetPlayerPos(playerid, 2581.0449,-1285.3281,1044.1250);
	                 	SetPlayerFacingAngle(playerid, 171.9168);
	                  	SetPlayerInterior(playerid, 2);
	                   	SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if (Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
	                }
	                case 4:
	                {
	                    SetPlayerPos(playerid, 2529.1042,-1286.1699,1054.6406);
	                 	SetPlayerFacingAngle(playerid, 81.9662);
	                  	SetPlayerInterior(playerid, 2);
	                   	SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if (Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
	                }
				}
	        }
	        case 7:
	        {
	            new rand = random(7);
	            switch (rand)
	            {
	                case 0:
	                {
	                    SetPlayerPos(playerid, 2216.1829,-1149.5088,1025.7969);
	                 	SetPlayerFacingAngle(playerid, 300.7219);
	                  	SetPlayerInterior(playerid, 15);
	                   	SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if (Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
	                }
	                case 1:
	                {
	                    SetPlayerPos(playerid, 2240.9519,-1193.5115,1029.7969);
	                 	SetPlayerFacingAngle(playerid, 3.6791);
	                  	SetPlayerInterior(playerid, 15);
	                   	SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if (Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
	                }
	                case 2:
	                {
	                    SetPlayerPos(playerid, 2234.7319,-1159.3888,1029.7969);
	                 	SetPlayerFacingAngle(playerid, 270.6182);
	                  	SetPlayerInterior(playerid, 15);
	                   	SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if (Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
	                }
	                case 3:
	                {
	                    SetPlayerPos(playerid, 2234.0752,-1170.9261,1029.7969);
	                 	SetPlayerFacingAngle(playerid, 270.6182);
	                  	SetPlayerInterior(playerid, 15);
	                   	SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if (Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
	                }
	                case 4:
	                {
	                    SetPlayerPos(playerid, 2239.8977,-1188.0165,1033.7969);
	                 	SetPlayerFacingAngle(playerid, 258.4217);
	                  	SetPlayerInterior(playerid, 15);
	                   	SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if (Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
	                }
	                case 5:
	                {
	                    SetPlayerPos(playerid, 2225.8901,-1182.4353,1029.7969);
	                 	SetPlayerFacingAngle(playerid, 166.6141);
	                  	SetPlayerInterior(playerid, 15);
	                   	SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if (Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
	                }
	                case 6:
	                {
	                    SetPlayerPos(playerid, 2186.6885,-1182.1509,1033.7969);
	                 	SetPlayerFacingAngle(playerid, 201.6845);
	                  	SetPlayerInterior(playerid, 15);
	                   	SetPlayerVirtualWorld(playerid, id+10);
	                    SetPlayerTeam(playerid, NO_TEAM);
	                    SetPlayerHealth(playerid, 100);
	                    SetPlayerArmour(playerid, Paintball[id][odaZirh]);
	                    ResetPlayerWeapons(playerid);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
	                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
	                    SetPlayerArmedWeapon(playerid, 0);
	                    //if (Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
	                }
				}
	        }
	    }
	}
	else
	{
	    switch (Paintball[id][odaArena])
	    {
	        case 1:
	        {
	            if (pbTakim[playerid] == 1)
	            {
	                SetPlayerPos(playerid, 1059.3263,2081.4861,10.8203);
                	SetPlayerFacingAngle(playerid, 322.0627);
                	SetPlayerInterior(playerid, 0);
                	SetPlayerVirtualWorld(playerid, id+10);
                 	SetPlayerTeam(playerid, 10);
                 	SetPlayerHealth(playerid, 100);
                  	SetPlayerArmour(playerid, Paintball[id][odaZirh]);
                  	ResetPlayerWeapons(playerid);
                   	GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
                   	GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
                    SetPlayerArmedWeapon(playerid, 0);
                    //if (Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
	            }
	            else
	            {
	                SetPlayerPos(playerid, 1068.1041,2130.2908,10.8203);
                	SetPlayerFacingAngle(playerid, 176.9880);
                	SetPlayerInterior(playerid, 0);
                	SetPlayerVirtualWorld(playerid, id+10);
                 	SetPlayerTeam(playerid, 20);
                 	SetPlayerHealth(playerid, 100);
                  	SetPlayerArmour(playerid, Paintball[id][odaZirh]);
                  	ResetPlayerWeapons(playerid);
                   	GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
                   	GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
                    SetPlayerArmedWeapon(playerid, 0);
                    //if (Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
	            }
	        }
	        case 2:
	        {
	            if (pbTakim[playerid] == 1)
	            {
	                SetPlayerPos(playerid, 1303.3241,0.8544,1001.0255);
                	SetPlayerFacingAngle(playerid, 131.1362);
                	SetPlayerInterior(playerid, 18);
                	SetPlayerVirtualWorld(playerid, id+10);
                 	SetPlayerTeam(playerid, 10);
                 	SetPlayerHealth(playerid, 100);
                  	SetPlayerArmour(playerid, Paintball[id][odaZirh]);
                  	ResetPlayerWeapons(playerid);
                   	GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
                   	GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
                    SetPlayerArmedWeapon(playerid, 0);
                    //if (Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
	            }
	            else
	            {
	                SetPlayerPos(playerid, 1250.3260,-47.5597,1001.0268);
                	SetPlayerFacingAngle(playerid, 304.2428);
                	SetPlayerInterior(playerid, 18);
                	SetPlayerVirtualWorld(playerid, id+10);
                 	SetPlayerTeam(playerid, 20);
                 	SetPlayerHealth(playerid, 100);
                  	SetPlayerArmour(playerid, Paintball[id][odaZirh]);
                  	ResetPlayerWeapons(playerid);
                   	GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
                   	GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
                    SetPlayerArmedWeapon(playerid, 0);
                    //if (Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
	            }
	        }
	        case 3:
	        {
	            if (pbTakim[playerid] == 1)
	            {
	                SetPlayerPos(playerid, -975.1069,1061.2255,1345.6719);
                	SetPlayerFacingAngle(playerid, 93.5594);
                	SetPlayerInterior(playerid, 10);
                	SetPlayerVirtualWorld(playerid, id+10);
                 	SetPlayerTeam(playerid, 10);
                 	SetPlayerHealth(playerid, 100);
                  	SetPlayerArmour(playerid, Paintball[id][odaZirh]);
                  	ResetPlayerWeapons(playerid);
                   	GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
                   	GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
                    SetPlayerArmedWeapon(playerid, 0);
                    //if (Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
	            }
	            else
	            {
	                SetPlayerPos(playerid, -1130.9933,1057.7678,1346.4141);
                	SetPlayerFacingAngle(playerid, 269.3412);
                	SetPlayerInterior(playerid, 10);
                	SetPlayerVirtualWorld(playerid, id+10);
                 	SetPlayerTeam(playerid, 20);
                 	SetPlayerHealth(playerid, 100);
                  	SetPlayerArmour(playerid, Paintball[id][odaZirh]);
                  	ResetPlayerWeapons(playerid);
                   	GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
                   	GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
                    SetPlayerArmedWeapon(playerid, 0);
                    //if (Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
	            }
	        }
	        case 4:
	        {
	            if (pbTakim[playerid] == 1)
	            {
	                SetPlayerPos(playerid, 239.0441,143.9385,1003.0234);
                	SetPlayerFacingAngle(playerid, 357.3882);
                	SetPlayerInterior(playerid, 3);
                	SetPlayerVirtualWorld(playerid, id+10);
                 	SetPlayerTeam(playerid, 10);
                 	SetPlayerHealth(playerid, 100);
                  	SetPlayerArmour(playerid, Paintball[id][odaZirh]);
                  	ResetPlayerWeapons(playerid);
                   	GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
                   	GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
                    SetPlayerArmedWeapon(playerid, 0);
                    //if (Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
	            }
	            else
	            {
	                SetPlayerPos(playerid, 300.0846,183.6274,1007.1719);
                	SetPlayerFacingAngle(playerid, 95.4391);
                	SetPlayerInterior(playerid, 3);
                	SetPlayerVirtualWorld(playerid, id+10);
                 	SetPlayerTeam(playerid, 20);
                 	SetPlayerHealth(playerid, 100);
                  	SetPlayerArmour(playerid, Paintball[id][odaZirh]);
                  	ResetPlayerWeapons(playerid);
                   	GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
                   	GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
                    SetPlayerArmedWeapon(playerid, 0);
                    //if (Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
	            }
	        }
	        case 5:
	        {
	            if (pbTakim[playerid] == 1)
	            {
	                SetPlayerPos(playerid, 1058.8458,2081.5845,10.8203);
                	SetPlayerFacingAngle(playerid, 332.0316);
                	SetPlayerInterior(playerid, 0);
                	SetPlayerVirtualWorld(playerid, id+10);
                 	SetPlayerTeam(playerid, 10);
                 	SetPlayerHealth(playerid, 100);
                  	SetPlayerArmour(playerid, Paintball[id][odaZirh]);
                  	ResetPlayerWeapons(playerid);
                   	GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
                   	GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
                    SetPlayerArmedWeapon(playerid, 0);
                    //if (Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
	            }
	            else
	            {
	                SetPlayerPos(playerid, 1069.3534,2129.8914,10.8203);
                	SetPlayerFacingAngle(playerid, 172.2302);
                	SetPlayerInterior(playerid, 0);
                	SetPlayerVirtualWorld(playerid, id+10);
                 	SetPlayerTeam(playerid, 20);
                 	SetPlayerHealth(playerid, 100);
                  	SetPlayerArmour(playerid, Paintball[id][odaZirh]);
                  	ResetPlayerWeapons(playerid);
                   	GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
                   	GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
                    SetPlayerArmedWeapon(playerid, 0);
                    //if (Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
	            }
	        }
	        case 6:
	        {
	            if (pbTakim[playerid] == 1)
	            {
	                SetPlayerPos(playerid, 2543.4995,-1304.1349,1025.0703);
                	SetPlayerFacingAngle(playerid, 174.1336);
                	SetPlayerInterior(playerid, 2);
                	SetPlayerVirtualWorld(playerid, id+10);
                 	SetPlayerTeam(playerid, 10);
                 	SetPlayerHealth(playerid, 100);
                  	SetPlayerArmour(playerid, Paintball[id][odaZirh]);
                  	ResetPlayerWeapons(playerid);
                   	GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
                   	GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
                    SetPlayerArmedWeapon(playerid, 0);
                    //if (Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
	            }
	            else
	            {
	                SetPlayerPos(playerid, 2562.5330,-1296.9476,1031.4219);
                	SetPlayerFacingAngle(playerid, 84.4958);
                	SetPlayerInterior(playerid, 2);
                	SetPlayerVirtualWorld(playerid, id+10);
                 	SetPlayerTeam(playerid, 20);
                 	SetPlayerHealth(playerid, 100);
                  	SetPlayerArmour(playerid, Paintball[id][odaZirh]);
                  	ResetPlayerWeapons(playerid);
                   	GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
                   	GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
                    SetPlayerArmedWeapon(playerid, 0);
                    //if (Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
	            }
	        }
	        case 7:
	        {
	            if (pbTakim[playerid] == 1)
	            {
	                SetPlayerPos(playerid, 2216.1829,-1149.5088,1025.7969);
                	SetPlayerFacingAngle(playerid, 300.7219);
                	SetPlayerInterior(playerid, 15);
                	SetPlayerVirtualWorld(playerid, id+10);
                 	SetPlayerTeam(playerid, 10);
                 	SetPlayerHealth(playerid, 100);
                  	SetPlayerArmour(playerid, Paintball[id][odaZirh]);
                  	ResetPlayerWeapons(playerid);
                   	GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
                   	GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
                    SetPlayerArmedWeapon(playerid, 0);
                    //if (Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
	            }
	            else
	            {
	                SetPlayerPos(playerid, 2240.9519,-1193.5115,1029.7969);
                	SetPlayerFacingAngle(playerid, 3.6791);
                	SetPlayerInterior(playerid, 15);
                	SetPlayerVirtualWorld(playerid, id+10);
                 	SetPlayerTeam(playerid, 20);
                 	SetPlayerHealth(playerid, 100);
                  	SetPlayerArmour(playerid, Paintball[id][odaZirh]);
                  	ResetPlayerWeapons(playerid);
                   	GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][0], 1000);
                   	GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][1], 1000);
                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][2], 1000);
                    GivePlayerWeapon(playerid, Paintball[id][odaSilahlar][3], 1000);
                    SetPlayerArmedWeapon(playerid, 0);
                    //if (Paintball[id][odaDurum] != ODA_BASLADI) TogglePlayerControllable(playerid, false);
	            }
	        }
	    }
	}
	return 1;
}
TimeConvert(seconds, tarz=0, saat=0)
{
	new tmp[16];
 	new minutes = floatround(seconds/60);
	seconds -= minutes*60;
	if (minutes >= 60)
	{
	    saat++;
	}
  	if (tarz == 1)
  	{
   		format(tmp, sizeof(tmp), "%d:%02d", minutes, seconds);
   	} else {
   		format(tmp, sizeof(tmp), "%02d:%02d:%02d", saat, minutes, seconds);
   	}
   	return tmp;
}
KomutEkle(ad[], tanim[], katagori, olusum = -1)
{
	for (new i = 0; i != MAX_YARDIM_KOMUTLARI; i ++)
	{
 		if (!Komutlar[i][komutVarmi])
		{
		    Komutlar[i][komutVarmi] = true;
            Komutlar[i][komutKatagori] = katagori;
            Komutlar[i][komutOlusum] = olusum;

           	format(Komutlar[i][komutAd], 24, ad);
           	format(Komutlar[i][komutTanim], 256, tanim);

			return i;
		}
	}
	return -1;
}
KomutYukle()
{
	// -------------------------- Genel Komutlar ------------------------ //
	KomutEkle("/ayarlar", " {e0ddaf}Hesap ayarlarýna eriþme.", 0);
	KomutEkle("/mulklerim", " {e0ddaf}Karakterinize bagli isyerleri ve evleri listeler.", 0);
	KomutEkle("/karakter", " {e0ddaf}Karakterinizin bilgilerini görme.", 0);
	KomutEkle("/id", " {e0ddaf}Oyun adina göre ID sorgulama.", 0);
	KomutEkle("/rapor", " {e0ddaf}Admin ve Supporter ekibine sorunlarýnýzý iletebilirsiniz.", 0);
	KomutEkle("/admins", " {e0ddaf}Çevrimiçi adminleri listeler.", 0);
	KomutEkle("/supporters", " {e0ddaf}Çevrimiçi supporterleri listeler.", 0);
	KomutEkle("/animasyonlar", " {e0ddaf}Sunucuya eklenmis animasyonlari listeler.", 0);
	KomutEkle("/dinle", " {e0ddaf}Dinleyebileceginiz yayin organlarini listeler.", 0);
	KomutEkle("/cpsifirla", " {e0ddaf}Checkpointlerinizi sifirlar.", 0);
	KomutEkle("/kabulet", " {e0ddaf}Gelen teklifleri kabul etme.", 0);
	KomutEkle("/birlikler", " {e0ddaf}Birlik siralamasini gösterir.", 0);
	KomutEkle("/birlikara", " {e0ddaf}Belirli isim araliginda birlikleri listelersiniz.", 0);
	KomutEkle("/hud", " {e0ddaf}Ekrandaki göstergeleri kapatir/açar.", 0);
	KomutEkle("/anahtarver", " {e0ddaf}Ev/Araç anahtari verme.", 0);
	KomutEkle("/silahlarim", " {e0ddaf}Silah menüsünü açar. ", 0);
	KomutEkle("/aractanat", " {e0ddaf}Herhangi bir oyuncuyu aracinizdan atmayi saglar.", 0);
	KomutEkle("/aracaat", " {e0ddaf}Kelepçelenmis veya elleri baglanmis kisiyi yakininizdaki araca atmayi saglar.", 0);
    // -------------------------- Chat & Roleplay Komutlari    ------------------------ //
	KomutEkle("/chatttemizle", " {e0ddaf}Chat ekranini temizler.", 1);
	KomutEkle("/me", " {e0ddaf}Etkilesim komutu.", 1);
	KomutEkle("/do", " {e0ddaf}Etkilesim komutu.", 1);
	KomutEkle("/s(hout)", " {e0ddaf}Bagirma.", 1);
	KomutEkle("/b", " {e0ddaf}Oyun disi kanal.", 1);
	KomutEkle("/pm", " {e0ddaf}Özel mesaj. (Private)", 1);
	KomutEkle("/p", " {e0ddaf}Son PM attiginiz kisiye özel mesaj. (Private)", 1);
	KomutEkle("/w(hisper)", " {e0ddaf}Oyuncuya fisildama.", 1);
	KomutEkle("/c", " {e0ddaf}Sessiz konusma.", 1);
	KomutEkle("/ame", " {e0ddaf}Etkilesim komutu (Karakter üstünde).", 1);
	KomutEkle("/ado", " {e0ddaf}Etkilesim komutu (Karakter üstünde).", 1);
    KomutEkle("/paraver", " {e0ddaf}Kisiye para aktarma.", 1);
    KomutEkle("/dene", " {e0ddaf}Basarili/Basarisiz olma sansi.", 1);
    KomutEkle("/tokalas", " {e0ddaf}Belirlediginiz kisiye tokalasma istegi yollar.", 1);
    KomutEkle("/kimlikgoster", " {e0ddaf}Kimlik bilgilerinizi gösterme.", 1);
    KomutEkle("/lisansgoster", " {e0ddaf}Ehliyet/ruhsat durumunuzu gösterme.", 1);
    KomutEkle("/kapi", " {e0ddaf}Kapilari/gateleri açma.", 1);
    // -------------------------- TELEFON  ------------------------ //
    KomutEkle("/telefon", " {e0ddaf}Telefon menüsünü açar.", 3);
    KomutEkle("/ara", " {e0ddaf}Numara çevirme.", 3);
    KomutEkle("/sms", " {e0ddaf}SMS Gönderme.", 3);
    KomutEkle("/cagrikabul", " {e0ddaf}Gelen aramayi cevaplama.", 3);
    KomutEkle("/cagrikapat", " {e0ddaf}Aramayi sonlandirma/Reddetme.", 3);
	// --------------------- Araç -------------------------------
    KomutEkle("/benzinkutusu", " {e0ddaf}Benzin kutusunu kullanma.", 4);
    KomutEkle("/motor", " {e0ddaf}Motoru açma/kapatma.", 4);
    KomutEkle("/kilit", " {e0ddaf}Kilidi açma/kapatma.", 4);
    KomutEkle("/bagaj", " {e0ddaf}Bagaji açma.", 4);
    KomutEkle("/araclarim", " {e0ddaf}Tüm araçlarinizi listeleme.", 4);
    KomutEkle("/arac", " {e0ddaf}Araç kontrol menüsü.", 4);
    KomutEkle("/acam", " {e0ddaf}Camlari açma/kapatma.", 4);
    KomutEkle("/farlar", " {e0ddaf}Farlari açma/kapatma.", 4);
    KomutEkle("/kaput", " {e0ddaf}Kaputu açma/kapatma.", 4);
    KomutEkle("/aractanat", " {e0ddaf} Herhangi bir oyuncuyu aracinizdan atmayi saglar.", 4);
    KomutEkle("/abs", "{e0ddaf}ABS Fren sistemini devreye sokar.", 4);
    // -------------------------- UYUsTURUCU  ------------------------ //
	KomutEkle("/ukullan", " {e0ddaf}Uyusturucu kullanma.", 5);
	KomutEkle("/uver", " {e0ddaf}Belirlediginiz kisiye uyusturucu verirsiniz.", 5);
	KomutEkle("/usat", " {e0ddaf}Belirlediginiz kisiye uyusturucu satarsiniz.", 5);
	KomutEkle("/utohum", " {e0ddaf}Tohum ekebilirsiniz ve toplayabilirsiniz.", 5);
	KomutEkle("/ubilgi", " {e0ddaf}Uyusturucu istatistiklerinizi gösterir.", 5);

    // -------------------------- BiRLiK  ------------------------ //
    KomutEkle("/birlikler", " {e0ddaf}Birlik siralamasini gösterir.", 6);
    KomutEkle("/birlikara", " {e0ddaf}Belirli isim araliginda birlikleri listelersiniz.", 6);
    KomutEkle("/f(ac)", " {e0ddaf}Birlik içi sohbet.", 6);
    KomutEkle("/graffiti", " {e0ddaf}Graffiti onayli birlikler için graffiti komutu.", 6);
    KomutEkle("/birlik", " {e0ddaf}Birlik menüsünü açar.", 6);

	// ------------------------ MESLEKLER -------------------------- //

	KomutEkle("/meslekler", " {e0ddaf}Meslekler hakkinda yardim alma.", 7);

    /// -------------------------- POLiS  ------------------------ //
	KomutEkle("/taser", " {e0ddaf}Elektrosok cihazi.", 6, BIRLIK_LSPD);
    KomutEkle("/kelepce", " {e0ddaf}Kisiyi kelepçeler.", 6, BIRLIK_LSPD);
    KomutEkle("/kelepcecikar", " {e0ddaf}Kisinin kelepçesini çözer.", 6, BIRLIK_LSPD);
    KomutEkle("/surukle", " {e0ddaf}Kisiyi sürüklersiniz.", 6, BIRLIK_LSPD);
    KomutEkle("/mdc", " {e0ddaf}Mobil Bilgi Sistemini açar.", 6, BIRLIK_LSPD);
    KomutEkle("/hapseat", " {e0ddaf}Hapse atma.", 6, BIRLIK_LSPD);
    KomutEkle("/t", " {e0ddaf}Telsiz iletisimi.", 6, BIRLIK_LSPD);
    KomutEkle("/d(ept)", " {e0ddaf}Departman telsizi.", 6, BIRLIK_LSPD);
    KomutEkle("/yt(yakin telsiz)", " {e0ddaf}Yakin telsiz.", 6, BIRLIK_LSPD);
    KomutEkle("/elkoy", " {e0ddaf}Uyusturuculara ve silahlara el koyma.", 6, BIRLIK_LSPD);
    KomutEkle("/objekoy", " {e0ddaf}Obje koyma. (barikat, çivi vs.)", 6, BIRLIK_LSPD);
    KomutEkle("/objesil", " {e0ddaf}Obje silme.",6, BIRLIK_LSPD);
    KomutEkle("/objeduzenle", " {e0ddaf}Obje düzenleme.",6, BIRLIK_LSPD);
    KomutEkle("/aracibagla", " {e0ddaf}Çekilmis araci baglama.", 6, BIRLIK_LSPD);
    KomutEkle("/kapiyikir", " {e0ddaf}Ev/isyeri kapisi kirma.", 6, BIRLIK_LSPD);
    KomutEkle("/siren", " {e0ddaf}Tepe sireni koyma.", 6, BIRLIK_LSPD);
    KomutEkle("/flasor", " {e0ddaf}Farlari hizli açip kapama.", 6, BIRLIK_LSPD);
    KomutEkle("/callsign", " {e0ddaf}Birim kodu koyma.", 6, BIRLIK_LSPD);
    KomutEkle("/rozetgoster", " {e0ddaf}Rozet gösterme komutu.", 6, BIRLIK_LSPD);
    KomutEkle("/destekistek", " {e0ddaf}Birimlere sinyal göndererek destek isteme.", 6, BIRLIK_LSPD);
    KomutEkle("/bagaj", " {e0ddaf}Birim araçlarinda silah deposuna ulasma.", 6, BIRLIK_LSPD);
    KomutEkle("/yereyatir", " {e0ddaf}Kisiyi yere yatirma.", 6, BIRLIK_LSPD);
	/// -------------------------- Yayin Ajansi  ------------------------ //
	KomutEkle("/yayin", " {e0ddaf}Yayindan konusmanizi saglar.", 6, BIRLIK_HABER);
	KomutEkle("/yayinmuzik", " {e0ddaf}Yayina müzik ekleme.", 6, BIRLIK_HABER);
	KomutEkle("/yayindavet", " {e0ddaf}Yayina konuk alma/çikarma.", 6, BIRLIK_HABER);
    KomutEkle("/rozetgoster", " {e0ddaf}Basin kartini gösterme komutu.", 6, BIRLIK_HABER);
    /// -------------------------- LSMD  ------------------------ //
	KomutEkle("/r(adio)", " {e0ddaf}Telsiz iletisimi.", 6, BIRLIK_LSMD);
    KomutEkle("/d(ept)", " {e0ddaf}Departman telsizi.", 6, BIRLIK_LSMD);
    KomutEkle("/yaracaat", " {e0ddaf}Yaraliyi araca yükleme.", 6, BIRLIK_LSMD);
    KomutEkle("/yteslim", " {e0ddaf}Araca yüklenen yaraliyi teslim etme.", 6, BIRLIK_LSMD);
    KomutEkle("/rozetgoster", " {e0ddaf}Rozet gösterme komutu.", 6, BIRLIK_LSMD);
    KomutEkle("/megafon", " {e0ddaf}Araç megafonu/el megafonu.", 6, BIRLIK_LSMD);
    KomutEkle("/ytasi", " {e0ddaf}Kisiyi sedye ile sürüklersiniz.", 6, BIRLIK_LSMD);
    /// -------------------------- Yapimcilar  ------------------------ //
    KomutEkle("2021", " Yapimcilar", 9);
    KomutEkle("Unknown and Bojna", " {e0ddaf}First Party Developer", 9);
    KomutEkle("", " {e0ddaf}Supporter", 9);
    KomutEkle("Destekte bulunan", " adi geçmeyen herkese tesekkürler.", 9);
	return 1;
}

stock LinkVehicleToInteriorEx(vehicleid, interiorid)
{
	CarInterior[vehicleid] = interiorid;
	return LinkVehicleToInterior(vehicleid, interiorid);
}

static stock GetPosOffset(Float: p_p_x, Float: p_p_y, Float: p_p_z, Float: p_c_x, Float: p_c_y, Float: p_c_z, &Float:p_n_x, &Float:p_n_y, &Float: p_n_z)
{
	p_n_x = (p_p_x > p_c_x) ? (p_p_x - p_c_x) : (p_c_x - p_p_x);
	p_n_y = (p_p_y > p_c_y) ? (p_p_y - p_c_y) : (p_c_y - p_p_y);
	p_n_z = (p_p_z > p_c_z) ? (p_p_z - p_c_z) : (p_c_z - p_p_z);
	return true;
}
stock IsVehicleUpgradeCompatible(model,componentid) // by AirKite
{
	switch (model)
	{
		case 400:
		{
			switch (componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1024: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 401:
		{
			switch (componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1004: { return 1; }
				case 1005: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1017: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
			}
		}
		case 404:
		{
			switch (componentid)
			{
				case 1000: { return 1; }
				case 1002: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1016: { return 1; }
				case 1017: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 405:
		{
			switch (componentid)
			{
				case 1000: { return 1; }
				case 1001: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1014: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 410:
		{
			switch (componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1017: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1023: { return 1; }
				case 1024: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 415:
		{
			switch (componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 418:
		{
			switch (componentid)
			{
				case 1002: { return 1; }
				case 1006: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1016: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 420:
		{
			switch (componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1004: { return 1; }
				case 1005: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1019: { return 1; }
				case 1021: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 421:
		{
			switch (componentid)
			{
				case 1000: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1014: { return 1; }
				case 1016: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 422:
		{
			switch (componentid)
			{
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1017: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 426:
		{
			switch (componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1004: { return 1; }
				case 1005: { return 1; }
				case 1006: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1019: { return 1; }
				case 1021: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 436:
		{
			switch (componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1017: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1022: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 439:
		{
			switch (componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1017: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 477:
		{
			switch (componentid)
			{
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 478:
		{
			switch (componentid)
			{
				case 1004: { return 1; }
				case 1005: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1012: { return 1; }
				case 1013: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1022: { return 1; }
				case 1024: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 489:
		{
			switch (componentid)
			{
				case 1000: { return 1; }
				case 1002: { return 1; }
				case 1004: { return 1; }
				case 1005: { return 1; }
				case 1006: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1016: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1024: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 491:
		{
			switch (componentid)
			{
				case 1003: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1014: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 492:
		{
			switch (componentid)
			{
				case 1000: { return 1; }
				case 1004: { return 1; }
				case 1005: { return 1; }
				case 1006: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1016: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 496:
		{
			switch (componentid)
			{
				case 1001: { return 1; }
				case 1002: { return 1; }
				case 1003: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1011: { return 1; }
				case 1017: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
			}
		}
		case 500:
		{
			switch (componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1024: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 516:
		{
			switch (componentid)
			{
				case 1000: { return 1; }
				case 1002: { return 1; }
				case 1004: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1015: { return 1; }
				case 1016: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 517:
		{
			switch (componentid)
			{
				case 1002: { return 1; }
				case 1003: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1016: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 518:
		{
			switch (componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1005: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1020: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 527:
		{
			switch (componentid)
			{
				case 1001: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1014: { return 1; }
				case 1015: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 529:
		{
			switch (componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1011: { return 1; }
				case 1012: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 534:
		{
			switch (componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1100: { return 1; }
				case 1101: { return 1; }
				case 1106: { return 1; }
				case 1122: { return 1; }
				case 1123: { return 1; }
				case 1124: { return 1; }
				case 1125: { return 1; }
				case 1126: { return 1; }
				case 1127: { return 1; }
				case 1178: { return 1; }
				case 1179: { return 1; }
				case 1180: { return 1; }
				case 1185: { return 1; }
			}
		}
		case 535:
		{
			switch (componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1109: { return 1; }
				case 1110: { return 1; }
				case 1113: { return 1; }
				case 1114: { return 1; }
				case 1115: { return 1; }
				case 1116: { return 1; }
				case 1117: { return 1; }
				case 1118: { return 1; }
				case 1119: { return 1; }
				case 1120: { return 1; }
				case 1121: { return 1; }
			}
		}
		case 536:
		{
			switch (componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1103: { return 1; }
				case 1104: { return 1; }
				case 1105: { return 1; }
				case 1107: { return 1; }
				case 1108: { return 1; }
				case 1128: { return 1; }
				case 1181: { return 1; }
				case 1182: { return 1; }
				case 1183: { return 1; }
				case 1184: { return 1; }
			}
		}
		case 540:
		{
			switch (componentid)
			{
				case 1001: { return 1; }
				case 1004: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1023: { return 1; }
				case 1024: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 542:
		{
			switch (componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1014: { return 1; }
				case 1015: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 546:
		{
			switch (componentid)
			{
				case 1001: { return 1; }
				case 1002: { return 1; }
				case 1004: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1023: { return 1; }
				case 1024: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 547:
		{
			switch (componentid)
			{
				case 1000: { return 1; }
				case 1003: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1016: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
			}
		}
		case 549:
		{
			switch (componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1011: { return 1; }
				case 1012: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 550:
		{
			switch (componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1004: { return 1; }
				case 1005: { return 1; }
				case 1006: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 551:
		{
			switch (componentid)
			{
				case 1002: { return 1; }
				case 1003: { return 1; }
				case 1005: { return 1; }
				case 1006: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1016: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 558:
		{
			switch (componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1088: { return 1; }
				case 1089: { return 1; }
				case 1090: { return 1; }
				case 1091: { return 1; }
				case 1092: { return 1; }
				case 1093: { return 1; }
				case 1094: { return 1; }
				case 1095: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1163: { return 1; }
				case 1164: { return 1; }
				case 1165: { return 1; }
				case 1166: { return 1; }
				case 1167: { return 1; }
				case 1168: { return 1; }
			}
		}
		case 559:
		{
			switch (componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1065: { return 1; }
				case 1066: { return 1; }
				case 1067: { return 1; }
				case 1068: { return 1; }
				case 1069: { return 1; }
				case 1070: { return 1; }
				case 1071: { return 1; }
				case 1072: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1158: { return 1; }
				case 1159: { return 1; }
				case 1160: { return 1; }
				case 1161: { return 1; }
				case 1162: { return 1; }
				case 1173: { return 1; }
			}
		}
		case 560:
		{
			switch (componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1026: { return 1; }
				case 1027: { return 1; }
				case 1028: { return 1; }
				case 1029: { return 1; }
				case 1030: { return 1; }
				case 1031: { return 1; }
				case 1032: { return 1; }
				case 1033: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1138: { return 1; }
				case 1139: { return 1; }
				case 1140: { return 1; }
				case 1141: { return 1; }
				case 1169: { return 1; }
				case 1170: { return 1; }
			}
		}
		case 561:
		{
			switch (componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1055: { return 1; }
				case 1056: { return 1; }
				case 1057: { return 1; }
				case 1058: { return 1; }
				case 1059: { return 1; }
				case 1060: { return 1; }
				case 1061: { return 1; }
				case 1062: { return 1; }
				case 1063: { return 1; }
				case 1064: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1154: { return 1; }
				case 1155: { return 1; }
				case 1156: { return 1; }
				case 1157: { return 1; }
			}
		}
		case 562:
		{
			switch (componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1034: { return 1; }
				case 1035: { return 1; }
				case 1036: { return 1; }
				case 1037: { return 1; }
				case 1038: { return 1; }
				case 1039: { return 1; }
				case 1040: { return 1; }
				case 1041: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1146: { return 1; }
				case 1147: { return 1; }
				case 1148: { return 1; }
				case 1149: { return 1; }
				case 1171: { return 1; }
				case 1172: { return 1; }
			}
		}
		case 565:
		{
			switch (componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1045: { return 1; }
				case 1046: { return 1; }
				case 1047: { return 1; }
				case 1048: { return 1; }
				case 1049: { return 1; }
				case 1050: { return 1; }
				case 1051: { return 1; }
				case 1052: { return 1; }
				case 1053: { return 1; }
				case 1054: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1150: { return 1; }
				case 1151: { return 1; }
				case 1152: { return 1; }
				case 1153: { return 1; }
			}
		}
		case 567:
		{
			switch (componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1102: { return 1; }
				case 1129: { return 1; }
				case 1130: { return 1; }
				case 1131: { return 1; }
				case 1132: { return 1; }
				case 1133: { return 1; }
				case 1186: { return 1; }
				case 1187: { return 1; }
				case 1188: { return 1; }
				case 1189: { return 1; }
			}
		}
		case 575:
		{
			switch (componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1042: { return 1; }
				case 1043: { return 1; }
				case 1044: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1099: { return 1; }
				case 1174: { return 1; }
				case 1175: { return 1; }
				case 1176: { return 1; }
				case 1177: { return 1; }
			}
		}
		case 576:
		{
			switch (componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1134: { return 1; }
				case 1135: { return 1; }
				case 1136: { return 1; }
				case 1137: { return 1; }
				case 1190: { return 1; }
				case 1191: { return 1; }
				case 1192: { return 1; }
				case 1193: { return 1; }
			}
		}
		case 580:
		{
			switch (componentid)
			{
				case 1001: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1020: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 585:
		{
			switch (componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 589:
		{
			switch (componentid)
			{
				case 1000: { return 1; }
				case 1004: { return 1; }
				case 1005: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1016: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1020: { return 1; }
				case 1024: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 600:
		{
			switch (componentid)
			{
				case 1004: { return 1; }
				case 1005: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1020: { return 1; }
				case 1022: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 603:
		{
			switch (componentid)
			{
				case 1001: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1023: { return 1; }
				case 1024: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 402,403,406..409,411..414,416,419,423,424,427..429,431..435,437,438,440..445,448,450,451,455..459,461..463,466..468,470,471,474,475,479..486,490,494,495,498,499,502..510,514,515,521..526,528,530..533,541,552,543..545,554..557,566,568,578,571..574,579,581..584,586..588,591,594,596..599,601,602,604..611:
		{
			switch (componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
	}
	return 0;
}

Trash_InitPlayer(playerid)
{
    HasTrash[playerid] = false;
    TrashCP[playerid] = -1;

    for(new i; i < sizeof(FactoryData); i++)
	{
		TogglePlayerDynamicCP(playerid, FactoryData[i][FactoryCP], 0);
		FactoryIcons[playerid][i] = -1;
	}

	CapacityText[playerid] = CreatePlayerTextDraw(playerid, 32.000000, 290.000000, "Arac kapasitesi (0/10)");
	PlayerTextDrawBackgroundColor(playerid, CapacityText[playerid], 255);
	PlayerTextDrawFont(playerid, CapacityText[playerid], 1);
	PlayerTextDrawLetterSize(playerid, CapacityText[playerid], 0.200000, 1.000000);
	PlayerTextDrawColor(playerid, CapacityText[playerid], -1);
	PlayerTextDrawSetOutline(playerid, CapacityText[playerid], 1);
	PlayerTextDrawSetProportional(playerid, CapacityText[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, CapacityText[playerid], 0);

	CapacityBar[playerid] = CreatePlayerProgressBar(playerid, 30.000000, 304.000000, 118.500000, 6.199999, -1429936641, TRASH_LIMIT, 0);
	return 1;
}

Trash_ResetPlayer(playerid, removeUI = 0)
{
	if(IsPlayerAttachedObjectSlotUsed(playerid, ATTACHMENT_INDEX)) RemovePlayerAttachedObject(playerid, ATTACHMENT_INDEX);
	if(IsValidDynamicCP(TrashCP[playerid])) DestroyDynamicCP(TrashCP[playerid]);
	HasTrash[playerid] = false;
	TrashCP[playerid] = -1;

	if(removeUI)
	{
	    PlayerTextDrawDestroy(playerid, CapacityText[playerid]);
	    DestroyPlayerProgressBar(playerid, CapacityBar[playerid]);
	}

	return 1;
}

Trash_ShowCapacity(playerid)
{
    new vehicleid = GetPlayerVehicleID(playerid), capacity_string[32];
    format(capacity_string, sizeof(capacity_string), "Arac kapasitesi (%d/%d)", LoadedTrash[vehicleid], TRASH_LIMIT);
    PlayerTextDrawSetString(playerid, CapacityText[playerid], capacity_string);
    PlayerTextDrawShow(playerid, CapacityText[playerid]);

	SetPlayerProgressBarValue(playerid, CapacityBar[playerid], LoadedTrash[vehicleid]);
	ShowPlayerProgressBar(playerid, CapacityBar[playerid]);
	return 1;
}
stock UcakKontrol(aracid)
{
	switch(GetVehicleModel(aracid)) {
		case 592, 577, 511, 512, 593, 520, 553, 476, 519, 460, 513, 548, 425, 417, 487, 488, 497, 563, 447, 469: return 1;
	}
	return 0;
}

stock HelikopterKontrol(aracid)
{
	switch(GetVehicleModel(aracid)) {
		case 417, 425, 447, 465, 469, 487, 488, 497, 501, 548, 563: return 1;
	}
	return 0;
}

Trash_Closest(playerid)
{
	new closest_id = -1, Float: dist = 300.0, Float: tempdist;
    for(new i; i < sizeof(TrashData); i++)
	{
	    tempdist = GetPlayerDistanceFromPoint(playerid, TrashData[i][TrashX], TrashData[i][TrashY], TrashData[i][TrashZ]);
		if(tempdist > 300.0) continue;
		if(tempdist <= dist)
		{
		    dist = tempdist;
		    closest_id = i;
		}
	}

	return closest_id;
}

Trash_ClosestEx(playerid)
{
	new closest_id = -1, Float: dist = 5.0, Float: tempdist;
    for(new i; i < sizeof(TrashData); i++)
	{
	    tempdist = GetPlayerDistanceFromPoint(playerid, TrashData[i][TrashX], TrashData[i][TrashY], TrashData[i][TrashZ]);
		if(tempdist > 5.0) continue;
		if(tempdist <= dist)
		{
		    dist = tempdist;
		    closest_id = i;
		}
	}

	return closest_id;
}

CMD:gir(playerid)
{
	new id = Entrance_Nearest(playerid);

	if (id != -1)
    {
    	if (PlayerData[playerid][pBaygin] == 1) return HataMesajGonder(playerid, "Yarali oldugunuz için binaya giremezsiniz!");
        if (EntranceData[id][entranceLocked]) return HataMesajGonder(playerid, "Bu bina kilitli.");
		if (strfind(EntranceData[id][entranceName], "VIP", true) != -1 && PlayerData[playerid][pVip] < 1) return HataMesajGonder(playerid, "Buraya girmek için vip olmalisiniz. (/oocmarket)");
		if (!strlen(EntranceData[id][entrancePass]))
		{
	   		SetPlayerPos(playerid, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]);
			SetPlayerFacingAngle(playerid, EntranceData[id][entranceInt][3]);

			if (EntranceData[id][entranceInteriorVw] != -1)
				SetPlayerVirtualWorld(playerid, EntranceData[id][entranceInteriorVw]);
	        else    PlayerData[playerid][pAdmins] = 1;
				SetPlayerVirtualWorld(playerid, EntranceData[id][entranceInteriorVw]);

			if(EntranceData[id][entranceBaglanti] != -1)
			{
				SetPlayerVirtualWorld(playerid, EntranceData[id][entranceBaglanti]+23);
    			SetPlayerInterior(playerid, 0);
				PlayerData[playerid][pGarage] = EntranceData[id][entranceBaglanti];
			}else{
				SetPlayerInterior(playerid, EntranceData[id][entranceInterior]);
			}
				SetCameraBehindPlayer(playerid);
				ObjelerYukleniyor(playerid);
			}else{
			    SetPVarInt(playerid, "binaid", id);
			    ShowPlayerDialog(playerid, 22, DIALOG_STYLE_INPUT, "Bina sifre", "Bu bina için sifre belirlenmis, lütfen sifreyi girin:", "Devam", "Kapat");
		}
		return 1;
	}

	id = House_Nearest(playerid);
	if (id != -1)
    {
    	if (PlayerData[playerid][pBaygin] == 1) return HataMesajGonder(playerid, "Yarali oldugunuz için eve giremezsiniz.");
   		if (HouseInfo[id][evKilit] == 1) return HataMesajGonder(playerid, "Bu ev kilitlenmis.");
   		if (HouseInfo[id][evSahip] > 0) SendClientMessageEx(playerid, -1, "{FFFFFF}Bu evin sahibi {AFAFAF}%s.", SQLName(HouseInfo[id][evSahip], 0));

		SendClientMessageEx(playerid, -1, "{FFFFFF}Sistemsel Fiyat: {AFAFAF}%s {FFFFFF}Vergi: {AFAFAF}%s/%s {FFFFFF}Saatlik Vergi: {AFAFAF}%s", FormatNumber(HouseInfo[id][evKendiFiyati]), FormatNumber(HouseInfo[id][evVergi]), FormatNumber(Ev_MaksVergi(id)), FormatNumber(GetHouseVergi(id)));

		SetPlayerInterior(playerid, HouseInteriors[ HouseInfo[id][evInterior] ][intID]);
		SetPlayerPos(playerid, HouseInteriors[HouseInfo[id][evInterior] ][intX], HouseInteriors[ HouseInfo[id][evInterior] ][intY], HouseInteriors[ HouseInfo[id][evInterior] ][intZ]);
        SetPlayerVirtualWorld(playerid,HouseInfo[id][evID]+1);

		ObjelerYukleniyor(playerid);
        SetCameraBehindPlayer(playerid);
        PlayerData[playerid][pHouse] = HouseInfo[id][evID];

        return 1;
    }

    id = Business_Nearest(playerid);
    if (id != -1)
    {
    	if (PlayerData[playerid][pBaygin] == 1) return HataMesajGonder(playerid, "Yarali oldugunuz için isyerine giremezsiniz.");
        if (Isyeri[id][isyeriKilit]) return HataMesajGonder(playerid, "Bu isyeri kilitli.");
        if (Isyeri[id][isyeriGirisUcret] > 0 && Isyeri[id][isyeriSahip] != PlayerData[playerid][pID])
        {
        	if (PlayerData[playerid][pCash] < Isyeri[id][isyeriGirisUcret]) return HataMesajGonder(playerid, "Giris Ücretini ödemek için yeterli paraniz bulunmuyor.");

			Isyeri[id][isyeriKasa] += Isyeri[id][isyeriGirisUcret];
            ParaVer(playerid,-Isyeri[id][isyeriGirisUcret]);
		}

		if (Isyeri[id][isyeriTip] == 6 && strlen(Isyeri[id][isyeriMuzik]) > 0)
			PlayAudioStreamForPlayer(playerid, Isyeri[id][isyeriMuzik]);

		SetPlayerPos(playerid,Isyeri[id][isyeriInt][0],Isyeri[id][isyeriInt][1],Isyeri[id][isyeriInt][2]);
		SetPlayerFacingAngle(playerid,Isyeri[id][isyeriInt][3]);
		SetPlayerInterior(playerid,Isyeri[id][isyeriInterior]);
		SetPlayerVirtualWorld(playerid,Isyeri[id][isyeriID]+1);

		SetCameraBehindPlayer(playerid);
		PlayerData[playerid][pIsyeri] = Isyeri[id][isyeriID];
		ObjelerYukleniyor(playerid);

		if (Isyeri[id][isyeriTip] != 7)
		    SendClientMessage(playerid, 0x777777AA, "{FFFFFF}Ýþyerine hoþgeldiniz."),
			SendClientMessage(playerid, 0x777777AA, "{FFFFFF}Bu iþyerinde {777777}/satinal {FFFFFF}komutunu kullanabilirsiniz.");
		else
			SendClientMessage(playerid, 0x777777AA, "{FFFFFF}Kumar oynamak için {777777}/kumar {FFFFFF}komutunu kullanabilirsiniz.");

		if (strlen(Isyeri[id][isyeriMesaj]) && strcmp(Isyeri[id][isyeriMesaj], "Yok", true))
	  		SendClientMessage(playerid, 0x1394BFFF, Isyeri[id][isyeriMesaj]);

		return 1;
	}

	id = Garage_Nearest(playerid);
	if (id != -1)
	{
		if (PlayerData[playerid][pBaygin] == 1)
			return HataMesajGonder(playerid, "Yaralý olduðunuz için garaja giremezsiniz.");

		if (GarageData[id][gKilit] == 1)
			return HataMesajGonder(playerid, "Garaj kilitli.");

		if (GarageData[id][gBirlik] != -1 && PlayerData[playerid][pFaction] != GarageData[id][gBirlik])
			return HataMesajGonder(playerid, "Bu garaj birlige özeldir.");

		if (!strcmp(GarageData[id][gSifre], "Yok", true))
        {
  	    	if (!IsPlayerInAnyVehicle(playerid))
            {
            	SetPlayerPos(playerid,GarageInteriors[GarageData[id][gInterior]][intX],GarageInteriors[GarageData[id][gInterior]][intY],GarageInteriors[GarageData[id][gInterior]][intZ]);
            	SetPlayerInterior(playerid,GarageInteriors[GarageData[id][gInterior]][intID]);
            	SetPlayerVirtualWorld(playerid, id+23);

				ObjelerYukleniyor(playerid);
   				SetPlayerFacingAngle(playerid,GarageInteriors[GarageData[id][gInterior]][intA]);
                SetCameraBehindPlayer(playerid);
                PlayerData[playerid][pGarage] = id;
            }

			if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
            {
            	new vehicleid = GetPlayerVehicleID(playerid);

				SetVehiclePos(vehicleid, GarageInteriors[GarageData[id][gInterior]][intX],GarageInteriors[GarageData[id][gInterior]][intY],GarageInteriors[GarageData[id][gInterior]][intZ]+1);
    			SetVehicleVirtualWorld(vehicleid, id+23);
              	LinkVehicleToInteriorEx(vehicleid, GarageInteriors[GarageData[id][gInterior]][intID]);
				SetVehicleZAngle(vehicleid, GarageInteriors[GarageData[id][gInterior]][intA]);

				SetPlayerPos(playerid,GarageInteriors[GarageData[id][gInterior]][intX],GarageInteriors[GarageData[id][gInterior]][intY],GarageInteriors[GarageData[id][gInterior]][intZ]);
                SetPlayerInterior(playerid,GarageInteriors[GarageData[id][gInterior]][intID]);
                SetPlayerVirtualWorld(playerid, id+23);
                SetPlayerFacingAngle(playerid,GarageInteriors[GarageData[id][gInterior]][intA]);
                SetCameraBehindPlayer(playerid);
              	PutPlayerInVehicle(playerid, vehicleid, 0);
              	ObjelerYukleniyor(playerid);
              	PlayerData[playerid][pGarage] = id;

				foreach (new i:Player)
              	{
              		if (IsPlayerInVehicle(i, vehicleid) && GetPlayerVehicleSeat(i) != 128 && GetPlayerVehicleSeat(i) != 0)
					{
						SetPlayerPos(i,GarageInteriors[GarageData[id][gInterior]][intX],GarageInteriors[GarageData[id][gInterior]][intY],GarageInteriors[GarageData[id][gInterior]][intZ]);
                		SetPlayerInterior(i,GarageInteriors[GarageData[id][gInterior]][intID]);
                 		SetPlayerVirtualWorld(i, id+23);
                  		SetPlayerFacingAngle(i,GarageInteriors[GarageData[id][gInterior]][intA]);
                   		SetCameraBehindPlayer(i);
                   		PutPlayerInVehicle(i, vehicleid, GetPlayerVehicleSeat(i));
                   		ObjelerYukleniyor(i);
                   		PlayerData[i][pGarage] = id;
              	    }
              	}
			}
        }else{
       		SetPVarInt(playerid, "Garaj", id);
            Dialog_Show(playerid, GarajGiris, DIALOG_STYLE_INPUT, "Garaj sifre", "Bu garaj sifreli, lütfen sifreyi giriniz:", "Tamam", "Kapat");
        }

        return 1;
	}
	return 1;
}

CMD:cik(playerid)
{
	new id = Entrance_Inside(playerid);

	if (id != -1)
	{
		if (PlayerData[playerid][pBaygin] == 1) return HataMesajGonder(playerid, "Yarali oldugunuz için binadan çikamazsiniz.");
		if (EntranceData[id][entranceLocked]) return HataMesajGonder(playerid, "Bu bina kilitli.");
		if(EntranceData[id][eVip] > 0 && PlayerData[playerid][pAdmin] < EntranceData[id][eVip]) return HataMesajGonder(playerid, "Bu kapi viplere özeldir.");

		SetPlayerPos(playerid, EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2]);
		SetPlayerFacingAngle(playerid, EntranceData[id][entrancePos][3]);
		PlayerData[playerid][pGarage] = -1;
		PlayerData[playerid][pAdmins] = 1;
        SetPlayerInterior(playerid, EntranceData[id][entranceExterior]);
        SetPlayerVirtualWorld(playerid, EntranceData[id][entranceExteriorVW]);
		ObjelerYukleniyor(playerid);
        SetCameraBehindPlayer(playerid);
        return 1;
	}

	id = House_Inside(playerid, true);

    if (id != -1)
   	{
   		if (PlayerData[playerid][pBaygin] == 1) return HataMesajGonder(playerid, "Yarali oldugunuz için evden çikamazsiniz.");
     	if (HouseInfo[id][evKilit] == 1) return HataMesajGonder(playerid, "Bu ev kilitlenmis.");

		SetPlayerPos(playerid,HouseInfo[id][evPos][0],HouseInfo[id][evPos][1],HouseInfo[id][evPos][2]);
        SetPlayerInterior(playerid,0);
        SetPlayerVirtualWorld(playerid,0);
		ObjelerYukleniyor(playerid);
        SetCameraBehindPlayer(playerid);
        PlayerData[playerid][pHouse] = -1;
        SonMobilyaID[playerid] = -1;
        return 1;
    }

    id = Garage_Inside(playerid, true);

	if (id != -1)
	{
		if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			new vehicleid = GetPlayerVehicleID(playerid);

			SetVehiclePos(vehicleid, GarageData[id][gPos][0], GarageData[id][gPos][1], GarageData[id][gPos][2]);
	    	SetVehicleVirtualWorld(vehicleid, GarageData[id][gVw]);
	    	LinkVehicleToInteriorEx(vehicleid, 0);
	      	SetPlayerInterior(playerid, 0);
	       	SetPlayerVirtualWorld(playerid, GarageData[id][gVw]);
	    	ObjelerYukleniyor(playerid);
	    	PlayerData[playerid][pGarage] = -1;

	    	foreach (new i:Player)
	    	{
		    	if (IsPlayerInVehicle(i, vehicleid) && GetPlayerVehicleSeat(i) != 128 && GetPlayerVehicleSeat(i) != 0)
	 	        {
	           		SetPlayerPos(i,GarageData[id][gPos][0], GarageData[id][gPos][1], GarageData[id][gPos][2]);
	           		SetPlayerInterior(i, 0);
	           		SetPlayerVirtualWorld(i, GarageData[id][gVw]);
	           		SetCameraBehindPlayer(i);
	           		PutPlayerInVehicle(i, vehicleid, GetPlayerVehicleSeat(i));
	           		ObjelerYukleniyor(i);
	    	    }
			}
    	}else{
         	SetPlayerPos(playerid, GarageData[id][gPos][0], GarageData[id][gPos][1], GarageData[id][gPos][2]);
	      	SetPlayerInterior(playerid, 0);
	       	SetPlayerVirtualWorld(playerid, GarageData[id][gVw]);
	        SetCameraBehindPlayer(playerid);
	        ObjelerYukleniyor(playerid);
	        PlayerData[playerid][pGarage] = -1;
    	}
	    return 1;
	}

	id = Business_Inside(playerid, true);

	if (id != -1)
	{
		if (PlayerData[playerid][pBaygin] == 1) return HataMesajGonder(playerid, "Yarali oldugunuz için is yerinden çikamazsiniz.");

		SetPlayerPos(playerid, Isyeri[id][isyeriPos][0], Isyeri[id][isyeriPos][1], Isyeri[id][isyeriPos][2]);
		SetPlayerFacingAngle(playerid, Isyeri[id][isyeriPos][3] - 180.0);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);

		ObjelerYukleniyor(playerid);

		if (Isyeri[id][isyeriTip] == 6)
			StopAudioStreamForPlayer(playerid);

		SetCameraBehindPlayer(playerid);
		PlayerData[playerid][pIsyeri] = -1;

		return 1;
	}
	return 1;
}

Tamirhane_Objeler(id, bool:option=true)
{
	if(!Tamirhane[id][Tamirhane_Kontrol])
		return 1;

	if(IsValidDynamic3DTextLabel(Tamirhane[id][Tamirhane_Yazi]))
	{
		DestroyDynamic3DTextLabel(Tamirhane[id][Tamirhane_Yazi]);
		Tamirhane[id][Tamirhane_Yazi] = Text3D:INVALID_3DTEXT_ID;
	}

	if(option)
	{
		if(IsValidDynamicPickup(Tamirhane[id][Tamirhane_Pickup]))
			DestroyDynamicPickup(Tamirhane[id][Tamirhane_Pickup]);

		Tamirhane[id][Tamirhane_Pickup] = CreateDynamicPickup(19921, 23, Tamirhane[id][Tamirhane_Pos][0], Tamirhane[id][Tamirhane_Pos][1], Tamirhane[id][Tamirhane_Pos][2], Tamirhane[id][Tamirhane_World], Tamirhane[id][Tamirhane_Interior]);


		if(IsValidDynamicMapIcon(Tamirhane[id][Tamirhane_MapIcon]))
			DestroyDynamicMapIcon(Tamirhane[id][Tamirhane_MapIcon]);

		Tamirhane[id][Tamirhane_MapIcon] = CreateDynamicMapIcon(Tamirhane[id][Tamirhane_Pos][0], Tamirhane[id][Tamirhane_Pos][1], Tamirhane[id][Tamirhane_Pos][2], 63, -1);
	}

    new string[128];

	format(string, sizeof(string), "{AFAFAF}(%d) (Y tusu tamir) - /araczirhlat\n/aracyukselt\n/taksiplakasi", id);

	Tamirhane[id][Tamirhane_Yazi] = CreateDynamic3DTextLabel(string, -1, Tamirhane[id][Tamirhane_Pos][0], Tamirhane[id][Tamirhane_Pos][1], Tamirhane[id][Tamirhane_Pos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1,-1, STREAMER_3D_TEXT_LABEL_SD, -1, 0);
	return 1;
}

IsPlayerNearPNS(playerid)
{
	for(new i = 0; i < MAX_TAMIRHANE; i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 5.0, Tamirhane[i][Tamirhane_Pos][0], Tamirhane[i][Tamirhane_Pos][1], Tamirhane[i][Tamirhane_Pos][2]))
			return i;
	}
	return -1;
}

Tamirhane_Kaydet(id, bool:opsiyon=false)
{
	if(!Tamirhane[id][Tamirhane_Kontrol])
		return 1;

	new query[500];

	mysql_format(g_SQL, query, sizeof(query), "UPDATE tamirhaneler SET tamirX = '%0.2f', tamirY = '%0.2f', tamirZ = '%0.2f', tamirA = '%0.2f', tamirIcX = '%0.2f', tamirIcY = '%0.2f', tamirIcZ = '%0.2f', tamirIcA = '%0.2f', tamirVW = '%d', tamirInt = '%d', tamirIcVW = '%d', tamirIcInt = '%d', tamirVakit = '%d' WHERE tamirID = '%d'",
		Tamirhane[id][Tamirhane_Pos][0], Tamirhane[id][Tamirhane_Pos][1], Tamirhane[id][Tamirhane_Pos][2], Tamirhane[id][Tamirhane_Pos][3],
		Tamirhane[id][Tamirhane_IcPos][0], Tamirhane[id][Tamirhane_IcPos][1], Tamirhane[id][Tamirhane_IcPos][2], Tamirhane[id][Tamirhane_Pos][4],
		Tamirhane[id][Tamirhane_World], Tamirhane[id][Tamirhane_Interior],
		Tamirhane[id][Tamirhane_IcWorld], Tamirhane[id][Tamirhane_IcInterior],
		Tamirhane[id][Tamirhane_Vakit],
		Tamirhane[id][Tamirhane_ID]
	);

	mysql_tquery(g_SQL, query);

	if(opsiyon)
		Tamirhane_Objeler(id);
	return 1;
}

forward TamirhaneleriYukle();
public TamirhaneleriYukle()
{
	mysql_query(g_SQL, "SELECT * FROM `tamirhaneler`");

	new rows = cache_num_rows();

	printf("» Toplam %d tamirhane yuklendi.", rows);

	if(rows)
	{
		new tid;

		for(new i = 0; i < rows; i++)
		{
			cache_get_value_name_int(i, "tamirID", tid);

			Tamirhane[tid][Tamirhane_ID] = tid;
			Tamirhane[tid][Tamirhane_Kontrol] = true;
			Tamirhane[tid][Tamirhane_Kullaniliyor] = false;

			cache_get_value_name_float(i, "tamirX", Tamirhane[tid][Tamirhane_Pos][0]);
			cache_get_value_name_float(i, "tamirY", Tamirhane[tid][Tamirhane_Pos][1]);
			cache_get_value_name_float(i, "tamirZ", Tamirhane[tid][Tamirhane_Pos][2]);
			cache_get_value_name_float(i, "tamirA", Tamirhane[tid][Tamirhane_Pos][3]);

			cache_get_value_name_int(i, "tamirVW", Tamirhane[tid][Tamirhane_World]);
			cache_get_value_name_int(i, "tamirInt", Tamirhane[tid][Tamirhane_Interior]);

			cache_get_value_name_float(i, "tamirIcX", Tamirhane[tid][Tamirhane_IcPos][0]);
			cache_get_value_name_float(i, "tamirIcY", Tamirhane[tid][Tamirhane_IcPos][1]);
			cache_get_value_name_float(i, "tamirIcZ", Tamirhane[tid][Tamirhane_IcPos][2]);
			cache_get_value_name_float(i, "tamirIcA", Tamirhane[tid][Tamirhane_Pos][4]);

			cache_get_value_name_int(i, "tamirIcVW", Tamirhane[tid][Tamirhane_IcWorld]);
			cache_get_value_name_int(i, "tamirIcInt", Tamirhane[tid][Tamirhane_IcInterior]);

			cache_get_value_name_int(i, "tamirVakit", Tamirhane[tid][Tamirhane_Vakit]);

			Tamirhane_Objeler(i);
		}
	}
	return 1;
}

forward PompalariYukle();
public PompalariYukle()
{
    mysql_query(g_SQL, "SELECT * FROM `pompalar`");

	new rows = cache_num_rows();

	printf("» Toplam %d benzin pompasi yuklendi.", rows);

	if(rows)
	{
	    new pompaid;
		for (new i = 0; i < rows; i++)
		{
			cache_get_value_name_int(i, "pompaID", pompaid);

            Pompa[pompaid][Pompa_Kontrol] = true;
			Pompa[pompaid][Pompa_ID] = pompaid;

			cache_get_value_name_float(i, "pompaX", Pompa[pompaid][Pompa_Pos][0]);
			cache_get_value_name_float(i, "pompaY", Pompa[pompaid][Pompa_Pos][1]);
			cache_get_value_name_float(i, "pompaZ", Pompa[pompaid][Pompa_Pos][2]);
			cache_get_value_name_float(i, "pompaRX", Pompa[pompaid][Pompa_Pos][3]);
			cache_get_value_name_float(i, "pompaRY", Pompa[pompaid][Pompa_Pos][4]);
			cache_get_value_name_float(i, "pompaRZ", Pompa[pompaid][Pompa_Pos][5]);
		}

		for(new i = 0; i < MAX_POMPA; i++)
		{
		    if(Pompa[i][Pompa_Kontrol])
	         	Pompa_Objeler(i);
		}
	}
	return 1;
}

Pump_Closest(playerid, Float: range = 6.0)
{
	new id = -1;

	for(new i = 0; i < MAX_POMPA; i++)
	{
		if(Pompa[i][Pompa_Kontrol])
		{
			if(IsPlayerInRangeOfPoint(playerid, range, Pompa[i][Pompa_Pos][0], Pompa[i][Pompa_Pos][1], Pompa[i][Pompa_Pos][2]))
			{
				id = i;
				break;
			}
		}
	}
	return id;
}

Pompa_Objeler(id, bool:option=true)
{
	if(!Pompa[id][Pompa_Kontrol])
		return 1;

	if(IsValidDynamic3DTextLabel(Pompa[id][Pompa_Yazi]))
	{
		DestroyDynamic3DTextLabel(Pompa[id][Pompa_Yazi]);
		Pompa[id][Pompa_Yazi] = Text3D:INVALID_3DTEXT_ID;
	}

	if(option)
	{
		if(IsValidDynamicObject(Pompa[id][Pompa_Obje]))
		{
			DestroyDynamicObject(Pompa[id][Pompa_Obje]);
			Pompa[id][Pompa_Obje] = INVALID_OBJECT_ID;
		}

		Pompa[id][Pompa_Obje] = CreateDynamicObject(3465, Pompa[id][Pompa_Pos][0], Pompa[id][Pompa_Pos][1], Pompa[id][Pompa_Pos][2], Pompa[id][Pompa_Pos][3], Pompa[id][Pompa_Pos][4], Pompa[id][Pompa_Pos][5], -1, -1, -1, STREAMER_OBJECT_SD, STREAMER_OBJECT_DD, -1, 0);
	}

    new string[128];

	format(string, sizeof(string), "{ffb672}(%d) Yakýt Pompasý\n\n{2ECC71}$%d / Litre\n%s/yakital", id, BENZIN_UCRET, (Pompa[id][Pompa_Kullaniliyor] == 1) ? ("{E74C3C}") : ("{FFFFFF}"));

	Pompa[id][Pompa_Yazi] = CreateDynamic3DTextLabel(string, 0xFFFFFFFF, Pompa[id][Pompa_Pos][0], Pompa[id][Pompa_Pos][1], Pompa[id][Pompa_Pos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1,-1, STREAMER_3D_TEXT_LABEL_SD, -1, 0);
	return 1;
}

Pompa_Kaydet(id, bool:opsiyon=false)
{
	if(!Pompa[id][Pompa_Kontrol])
		return 1;

	new query[220];

	mysql_format(g_SQL, query, sizeof(query), "UPDATE pompalar SET pompaX = '%0.2f', pompaY = '%0.2f', pompaZ = '%0.2f', pompaRX = '%0.2f', pompaRY = '%0.2f', pompaRZ = '%0.2f' WHERE pompaID = '%d'",
		Pompa[id][Pompa_Pos][0], Pompa[id][Pompa_Pos][1], Pompa[id][Pompa_Pos][2],
		Pompa[id][Pompa_Pos][3], Pompa[id][Pompa_Pos][4], Pompa[id][Pompa_Pos][5],
		Pompa[id][Pompa_ID]
	);

	mysql_tquery(g_SQL, query);

	if(opsiyon)
		Pompa_Objeler(id);
	return 1;
}

Pompa_IDBul()
{
	for(new i = 0; i < MAX_POMPA; i++)
	{
		if(!Pompa[i][Pompa_Kontrol])
			return i;
	}
	return -1;
}

Pompa_Olustur(playerid)
{
	if(GetPlayerInterior(playerid) != 0 || GetPlayerVirtualWorld(playerid) != 0)
		return HataMesajGonder(playerid, "Interior veya virtual world degeriniz 0'dan farkliyken bu fonksiyonu kullanamazsiniz.");

	if(PlayerData[playerid][pDuzenlenenPompa] != -1)
		return HataMesajGonder(playerid, "su anda sistemde benzin pompasi düzenliyor olarak görünüyorsunuz.");

	new id = Pompa_IDBul();

	if(id == -1)
		return HataMesajGonder(playerid, "Daha fazla benzin pompasi olusturulamaz, limite ulasilmis.");

	Pompa[id][Pompa_Kontrol] = true;
	Pompa[id][Pompa_Kullaniliyor] = false;

	new Float:x,
		Float:y,
		Float:z,
		Float:ang;

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, ang);

	x += (2.5 * floatsin(-ang, degrees));
	y += (2.5 * floatcos(-ang, degrees));

	Pompa[id][Pompa_Pos][0] = x;
	Pompa[id][Pompa_Pos][1] = y;
	Pompa[id][Pompa_Pos][2] = z;
	Pompa[id][Pompa_Pos][3] = Pompa[id][Pompa_Pos][4] = 0.0;
	Pompa[id][Pompa_Pos][5] = ang;

	new query[250];

	mysql_format(g_SQL, query, sizeof(query),
		"INSERT INTO pompalar (`pompaX`, `pompaY`, `pompaZ`, `pompaRX`, `pompaRY`, `pompaRZ`, `pompaID`) VALUES ('%0.2f', '%0.2f', '%0.2f', '%0.2f', '%0.2f', '%0.2f', '%d')",
		Pompa[id][Pompa_Pos][0], Pompa[id][Pompa_Pos][1], Pompa[id][Pompa_Pos][2], Pompa[id][Pompa_Pos][3], Pompa[id][Pompa_Pos][4], Pompa[id][Pompa_Pos][5], id);

	mysql_query(g_SQL, query);

	Pompa[id][Pompa_ID] = id;

	Pompa_Kaydet(id, true);

	SunucuMesaji(playerid, "Benzin pompasi %d olusturuldu.", id);

	format(query, sizeof(query), "%d", id);
	cmd_pompaduzenle(playerid, query);
	return 1;
}

Tamirhane_IDBul()
{
	for(new i = 0; i < MAX_TAMIRHANE; i++)
	{
		if(!Tamirhane[i][Tamirhane_Kontrol])
			return i;
	}
	return -1;
}

Tamirhane_Olustur(playerid, saniye)
{
	new id = Tamirhane_IDBul();

	if(id == -1)
		return HataMesajGonder(playerid, "Daha fazla tamirhane olusturulamaz, limite ulasilmis.");

	Tamirhane[id][Tamirhane_Kontrol] = true;
	Tamirhane[id][Tamirhane_Kullaniliyor] = 0;
	Tamirhane[id][Tamirhane_ID] = id;

	new Float:x, Float:y, Float:z, Float:ang;

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, ang);

	Tamirhane[id][Tamirhane_Pos][0] = x;
	Tamirhane[id][Tamirhane_Pos][1] = y;
	Tamirhane[id][Tamirhane_Pos][2] = z;
	Tamirhane[id][Tamirhane_Pos][3] = ang;

	Tamirhane[id][Tamirhane_Interior] = GetPlayerInterior(playerid);
	Tamirhane[id][Tamirhane_World] = GetPlayerVirtualWorld(playerid);
	Tamirhane[id][Tamirhane_Vakit] = saniye;

	Tamirhane[id][Tamirhane_IcPos][0] = Tamirhane[id][Tamirhane_IcPos][1] = Tamirhane[id][Tamirhane_IcPos][2] = 0.0;
	Tamirhane[id][Tamirhane_IcWorld] = id + 5000;
	Tamirhane[id][Tamirhane_IcInterior] = 0;

	new query[400];

	mysql_format(g_SQL, query, sizeof(query),
		"INSERT INTO tamirhaneler (`tamirX`, `tamirY`, `tamirZ`, `tamirA`, `tamirIcX`, `tamirIcY`, `tamirIcZ`, `tamirID`, `tamirVakit`, `tamirVW`, `tamirInt`, `tamirIcVW`, `tamirIcInt`) VALUES ('%0.2f', '%0.2f', '%0.2f', '%0.2f', '0.0', '0.0', '0.0', '%d', '%d', '%d', '%d', '%d', '%d')",
		x, y, z, ang, id, saniye, Tamirhane[id][Tamirhane_World], Tamirhane[id][Tamirhane_Interior], Tamirhane[id][Tamirhane_IcWorld], Tamirhane[id][Tamirhane_IcInterior]);

	mysql_query(g_SQL, query);

	SunucuMesaji(playerid, "Tamirhane %d olusturuldu. (Saniye: %d)", id, saniye);
	SunucuMesaji(playerid, "/tamirduzenle komutuyla iç pozisyonu ayarlamalisiniz.");

	Tamirhane_Kaydet(id, true);
	return 1;
}

CMD:pompaolustur(playerid)
{
    if(PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

	Pompa_Olustur(playerid);
	return 1;
}

CMD:pompasil(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

	new id;

	if(sscanf(params, "i", id))
		return KullanimMesaji(playerid, "/pompasil [id]");

	if(!Pompa[id][Pompa_Kontrol])
		return HataMesajGonder(playerid, "Geçersiz ID girdiniz.");

	if(Pompa[id][Pompa_Kullaniliyor])
		return HataMesajGonder(playerid, "Bu pompa su anda kullaniliyor, silinemez.");

	new query[64];

	mysql_format(g_SQL, query, sizeof query, "DELETE FROM `pompalar` WHERE `pompaID` = '%d'", Pompa[id][Pompa_ID]);
	mysql_tquery(g_SQL, query);

	if(IsValidDynamic3DTextLabel(Pompa[id][Pompa_Yazi]))
	{
		DestroyDynamic3DTextLabel(Pompa[id][Pompa_Yazi]);
		Pompa[id][Pompa_Yazi] = Text3D:INVALID_3DTEXT_ID;
	}
	if(IsValidDynamicObject(Pompa[id][Pompa_Obje]))
	{
		DestroyDynamicObject(Pompa[id][Pompa_Obje]);
		Pompa[id][Pompa_Obje] = INVALID_OBJECT_ID;
	}

	Pompa[id][Pompa_Kontrol] = false;

	MesajGonder(playerid, "%d ID'li pompa basariyla silindi.", id);
	return 1;
}

CMD:pompagit(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

	new id;

	if(sscanf(params, "i", id))
		return KullanimMesaji(playerid, "/pompagit [id]");

	if(!Pompa[id][Pompa_Kontrol])
		return HataMesajGonder(playerid, "Geçersiz ID girdiniz.");

	SetPlayerPos(playerid, Pompa[id][Pompa_Pos][0], Pompa[id][Pompa_Pos][1], Pompa[id][Pompa_Pos][2]);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	return 1;
}

CMD:pompaduzenle(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

	new id;

	if(sscanf(params, "i", id))
		return KullanimMesaji(playerid, "/pompaduzenle [id]");

	if(!Pompa[id][Pompa_Kontrol])
		return HataMesajGonder(playerid, "Geçersiz ID girdiniz.");

	if(Pompa[id][Pompa_Kullaniliyor])
		return HataMesajGonder(playerid, "Bu pompa su anda kullaniliyor, düzenlenemez.");

	if(PlayerData[playerid][pDuzenlenenPompa] != -1)
		return HataMesajGonder(playerid, "su anda sistemde benzin pompasi düzenliyor olarak görünüyorsunuz.");

	PlayerData[playerid][pDuzenlenenPompa] = id;
	EditDynamicObject(playerid, Pompa[id][Pompa_Obje]);

	MesajGonder(playerid, "Lütfen pompa objesinin pozisyonunu düzenleyiniz.");
	return 1;
}

CMD:tamirgit(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

	new id;

	if(sscanf(params, "i", id))
		return KullanimMesaji(playerid, "/tamirgit [id]");

	if(!Tamirhane[id][Tamirhane_Kontrol])
		return HataMesajGonder(playerid, "Geçersiz ID girdiniz.");

	SetPlayerPos(playerid, Tamirhane[id][Tamirhane_Pos][0], Tamirhane[id][Tamirhane_Pos][1], Tamirhane[id][Tamirhane_Pos][2]);
	SetPlayerFacingAngle(playerid, Tamirhane[id][Tamirhane_Pos][3]);

	SetPlayerInterior(playerid, Tamirhane[id][Tamirhane_Interior]);
	SetPlayerVirtualWorld(playerid, Tamirhane[id][Tamirhane_World]);
	return 1;
}

CMD:tamirsil(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

	new id;

	if(sscanf(params, "i", id))
		return KullanimMesaji(playerid, "/tamirsil [id]");

	if(!Tamirhane[id][Tamirhane_Kontrol])
		return HataMesajGonder(playerid, "Geçersiz ID girdiniz.");

	if(Tamirhane[id][Tamirhane_Kullaniliyor] == 1)
		return HataMesajGonder(playerid, "Bu tamirhane su anda kullaniliyor, silinemez.");

	new query[64];

	mysql_format(g_SQL, query, sizeof query, "DELETE FROM `tamirhaneler` WHERE `tamirID` = '%d'", Tamirhane[id][Tamirhane_ID]);
	mysql_tquery(g_SQL, query);

	if(IsValidDynamic3DTextLabel(Tamirhane[id][Tamirhane_Yazi]))
	{
		DestroyDynamic3DTextLabel(Tamirhane[id][Tamirhane_Yazi]);
		Tamirhane[id][Tamirhane_Yazi] = Text3D:INVALID_3DTEXT_ID;
	}

	if(IsValidDynamicPickup(Tamirhane[id][Tamirhane_Pickup]))
		DestroyDynamicPickup(Tamirhane[id][Tamirhane_Pickup]);

	if(IsValidDynamicMapIcon(Tamirhane[id][Tamirhane_MapIcon]))
		DestroyDynamicMapIcon(Tamirhane[id][Tamirhane_MapIcon]);

	Tamirhane[id][Tamirhane_Kontrol] = false;

	MesajGonder(playerid, "%d ID'li tamirhane basariyla silindi.", id);
	return 1;
}

CMD:tamirduzenle(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

	new id, operation[15], str[50];
	if(sscanf(params, "ds[15]S()[50]", id, operation, str))
	{
		KullanimMesaji(playerid, "/tamirduzenle [id] [parametre]");
		SendClientMessage(playerid, -1, "PARAMETRELER: dispos | icpos | vakit");
		return 1;
	}

	if(!Tamirhane[id][Tamirhane_Kontrol])
		return HataMesajGonder(playerid, "Geçersiz ID girdiniz.");

	if(!strcmp(operation, "dispos", true))
	{
		new Float:x, Float:y, Float:z, Float:ang;

		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, ang);

		Tamirhane[id][Tamirhane_Pos][0] = x;
		Tamirhane[id][Tamirhane_Pos][1] = y;
		Tamirhane[id][Tamirhane_Pos][2] = z;
		Tamirhane[id][Tamirhane_Pos][3] = ang;

		Tamirhane[id][Tamirhane_Interior] = GetPlayerInterior(playerid);
		Tamirhane[id][Tamirhane_World] = GetPlayerVirtualWorld(playerid);

		SunucuMesaji(playerid, "%d ID'sine tanimli tamirhanenin dis pozisyonu bulundugunuz konuma getirildi.", id);
		Tamirhane_Kaydet(id, true);
		return 1;
	}
	else if(!strcmp(operation, "icpos", true))
	{
		new Float:x, Float:y, Float:z, Float:ang;

		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, ang);

		Tamirhane[id][Tamirhane_IcPos][0] = x;
		Tamirhane[id][Tamirhane_IcPos][1] = y;
		Tamirhane[id][Tamirhane_IcPos][2] = z;
		Tamirhane[id][Tamirhane_Pos][4] = ang;

		Tamirhane[id][Tamirhane_IcInterior] = GetPlayerInterior(playerid);

		SunucuMesaji(playerid, "%d ID'sine tanimli tamirhanenin iç pozisyonu bulundugunuz konuma getirildi.", id);
		Tamirhane_Kaydet(id);
		return 1;
	}
	else if(!strcmp(operation, "vakit", true))
	{
		new vakit;

		if(sscanf(str, "i", vakit))
		{
			KullanimMesaji(playerid, "/tamirduzenle [%d] [vakit(saniye)]", id);
			return 1;
		}

		if(vakit < 1)
			return HataMesajGonder(playerid, "Girilen saniye 1'den küçük olamaz.");

		Tamirhane[id][Tamirhane_Vakit] = id;
		SunucuMesaji(playerid, "%d ID'sine tanimli tamirhanenin islem saniyesi %d olarak degistirildi.", id, vakit);

		Tamirhane_Kaydet(id);
		return 1;
	}

	cmd_tamirduzenle(playerid, "");
	return 1;
}

CMD:tamirolustur(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 4) return HataMesajGonder(playerid, "Yeterli yetkiniz yok!");

	new saniye;

	if(sscanf(params, "i", saniye))
		return KullanimMesaji(playerid, "/tamirolustur [tamir saniyesi]");

	Tamirhane_Olustur(playerid, saniye);
	return 1;
}

CMD:lisansgoster(playerid, params[])
{
	new oyuncuid;

	if(sscanf(params, "u", oyuncuid)) return KullanimMesaji(playerid, "/lisansgoster [id/isim]");
	if(!IsPlayerConnected(oyuncuid)) return HataMesajGonder(playerid, "Girilen kisi oyunda degil.");
	if(!OyundaDegil(oyuncuid) || !IsPlayerNearPlayer(playerid, oyuncuid, 5.0)) return HataMesajGonder(playerid, "Oyuncu giris yapmamis veya oyuncuya yakin degilsin.");

	new slisans[4],
		mlisans[4],
		string[100];

	if(PlayerData[playerid][pEhliyet] == 0)
		format(slisans, sizeof(slisans), "Yok");
	else
		format(slisans, sizeof(slisans), "Var");

	if(PlayerData[playerid][pMotorEhliyet] == 0)
		format(mlisans, sizeof(slisans), "Yok");
	else
		format(mlisans, sizeof(slisans), "Var");

	SendClientMessageEx(oyuncuid, COLOR_GREEN, "__________________[%s Lisanslari]__________________", ReturnName(playerid, 0));
	SendClientMessageEx(oyuncuid, COLOR_WHITE, "Sürücü lisansi: [%s] | Motor lisansi: [%s]", slisans, mlisans);

	if(oyuncuid != playerid)
	{
		format(string, sizeof(string), "lisanslarini çikartir ve %s adli kisiye gösterir.", ReturnName(oyuncuid, 0));
		cmd_me(playerid, string);
	}
	else cmd_me(playerid, "lisanslarini cüzdanindan çikartir ve inceler.");
	return 1;
}

CMD:silah(playerid, params[])
{
    if(IsPlayerInAnyVehicle(playerid))
        return HataMesajGonder(playerid, "Araçtayken bu komutu kullanamazsýn.");

    new weaponid = GetPlayerWeapon(playerid);

    if (!weaponid)
        return HataMesajGonder(playerid, "Elinizde silah yok.");

    if (!IsWeaponWearable(weaponid))
        return HataMesajGonder(playerid, "Elinizdeki silah düzenlenemez.");

    if (isnull(params))
        return  KullanimMesaji(playerid, "/silah [duzenle/gizle]");

    if (!strcmp(params, "duzenle", true))
    {
        if (EditingWeapon[playerid])
            return HataMesajGonder(playerid, "Zaten bir silah düzenliyorsunuz.");

        if (WeaponSettings[playerid][weaponid - 22][Hidden])
            return HataMesajGonder(playerid, "Gizli bir silahý düzenleyemezsiniz.");

        new index = weaponid - 22;

        SetPlayerArmedWeapon(playerid, 0);
        new slot = GetWeaponObjectSlot(weaponid);
        if(slot != -1)
        {
            SetPlayerAttachedObject(playerid, GetWeaponObjectSlot(weaponid), GetWeaponModel(weaponid), WeaponSettings[playerid][index][Bone], WeaponSettings[playerid][index][Position][0], WeaponSettings[playerid][index][Position][1], WeaponSettings[playerid][index][Position][2], WeaponSettings[playerid][index][Position][3], WeaponSettings[playerid][index][Position][4], WeaponSettings[playerid][index][Position][5], 1.0, 1.0, 1.0);
            EditAttachedObject(playerid, GetWeaponObjectSlot(weaponid));

            EditingWeapon[playerid] = weaponid;
        }
        else return HataMesajGonder(playerid, "Tüm aksesuar slotlarýný kullanýyorsunuz, lütfen bir aksesuar çýkartýp tekrar deneyin.");
    }
/*    else if (!strcmp(params, "kemik", true))
    {
        if (EditingWeapon[playerid])
            return HataMesajGonder(playerid, "Zaten bir silah düzenliyorsunuz.");

        Dialog_Show(playerid, DialogEditBone, DIALOG_STYLE_LIST, "Kemik", "Gövde\nKafa\nSol üst kol\nSað üst kol\nSol el\nSað el\nSol kalça\nSað kalça\nSol ayak\nSað ayak\nSað baldýr\nSol baldýr\nSol ön kol\nSað ön kol\nSol omuz\nSað omuz\nBoyun\nÇene", "Seç", "Ýptal");
        EditingWeapon[playerid] = weaponid;
    }*/
    else if (!strcmp(params, "gizle", true))
    {
        if (EditingWeapon[playerid])
            return HataMesajGonder(playerid, "Düzenlediðiniz bir silahý gizleyemezsiniz, lütfen önce düzenlemeyi bitirin.");

        if (!IsWeaponHideable(weaponid))
            return HataMesajGonder(playerid, "Bu silah gizlenemez.");

        new index = weaponid - 22, weaponname[18], string[150];

        GetWeaponName(weaponid, weaponname, sizeof(weaponname));

        if (WeaponSettings[playerid][index][Hidden])
        {
            HataMesajGonder(playerid, "%s artýk üstünüzde görünecek.", weaponname);
            WeaponSettings[playerid][index][Hidden] = false;
        }
        else
        {
            if (IsPlayerAttachedObjectSlotUsed(playerid, GetWeaponObjectSlot(weaponid)))
                RemovePlayerAttachedObject(playerid, GetWeaponObjectSlot(weaponid));

            HataMesajGonder(playerid, "%s artýk üstünüzde görünmeyecek.", weaponname);
            WeaponSettings[playerid][index][Hidden] = true;
        }
        if(WeaponSettings[playerid][index][duzenlendi])
        {
            mysql_format(g_SQL, string, sizeof(string), "UPDATE weaponsettings SET Hidden = '%d' WHERE sOwner = '%d' AND WeaponID = '%d'", WeaponSettings[playerid][index][Hidden], PlayerData[playerid][pID], weaponid);
            mysql_tquery(g_SQL, string);
        }
    }
    else HataMesajGonder(playerid, "Bilinmeyen bir parametre girdiniz.");
    return 1;
}

CMD:ehliyetal(playerid)
{
	if(PlayerData[playerid][pEhliyetSinavinda] != 0)
		return HataMesajGonder(playerid, "su anda zaten sinavda görünüyorsunuz, bir sorun olustugunu düsünüyorsaniz relog atin.");

	if(!IsPlayerInRangeOfPoint(playerid, 3.0, -2033.0245, -117.5572, 1035.1719))
		return HataMesajGonder(playerid, "Ehliyet alma noktasinda degilsiniz.");

	Dialog_Show(playerid, DIALOG_EHLIYET, DIALOG_STYLE_LIST, "Sürücü Sinavi:", "Sürücü lisansi sinavi [$%d]\nMotorlu tasit lisansi [$%d]", "Sinava basla", "iptal", EHLIYET_SURUCU, EHLIYET_MOTOR);
	return 1;
}

Dialog:DIALOG_EHLIYET(playerid, response, listitem, inputtext[])
{
	if(!response)
		return 1;

	switch(listitem)
	{
		case 0:
		{
			if(PlayerData[playerid][pEhliyet] == 1)
				return HataMesajGonder(playerid, "Zaten sürücü lisansina sahipsiniz.");

			if(PlayerData[playerid][pCash] < EHLIYET_SURUCU)
				return HataMesajGonder(playerid, "Yeterli paraniz yok.");

			ParaVer(playerid, -EHLIYET_SURUCU);
			PlayerData[playerid][pEhliyetSinavinda] = 2;
		}
		case 1:
		{
			if(PlayerData[playerid][pEhliyet] == 2)
				return HataMesajGonder(playerid, "Zaten motor lisansina sahipsiniz.");

			if(PlayerData[playerid][pCash] < EHLIYET_MOTOR)
				return HataMesajGonder(playerid, "Yeterli paraniz yok.");

			ParaVer(playerid, -EHLIYET_SURUCU);
			PlayerData[playerid][pEhliyetSinavinda] = 1;
		}
	}

	SunucuMesaji(playerid, "Sinav basladi, bir sürücü kursu aracina binin ve motoru çalistirin. (/motor)");
	return 1;
}

/*static GetHealthDots(playerid)
{
    new
        dots[64], Float: HP;

    GetPlayerHealth(playerid, HP);

    if(HP >= 100)
        dots = "";
    else if(HP >= 90)
        dots = "{660000}";
    else if(HP >= 80)
        dots = "{660000}";
    else if(HP >= 70)
        dots = "{660000}";
    else if(HP >= 60)
        dots = "{660000}";
    else if(HP >= 50)
        dots = "{660000}";
    else if(HP >= 40)
        dots = "{660000}";
    else if(HP >= 30)
        dots = "{660000}";
    else if(HP >= 20)
        dots = "{660000}";
    else if(HP >= 10)
        dots = "{660000}";
    else if(HP >= 0)
        dots = "{660000}";

    return dots;
}

static GetArmorDots(playerid)
{
    new
        dots[64], Float: AR;

    GetPlayerArmour(playerid, AR);

    if(AR >= 100)
        dots = "";
    else if(AR >= 90)
        dots = "{666666}";
    else if(AR >= 80)
        dots = "{666666}";
    else if(AR >= 70)
        dots = "{666666}";
    else if(AR >= 60)
        dots = "{666666}";
    else if(AR >= 50)
        dots = "{666666}";
    else if(AR >= 40)
        dots = "{666666}";
    else if(AR >= 30)
        dots = "{666666}";
    else if(AR >= 20)
        dots = "{666666}";
    else if(AR >= 10)
        dots = "{666666}";
    else if(AR >= 0)
        dots = "{666666}";

    return dots;
}

forward UpdateNametag();
public UpdateNametag()
{
    for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
    {
        if(IsPlayerConnected(i))
        {
            new nametag[128], Float:armour;
            GetPlayerArmour(i, armour);
            if(armour > 1.0)
            {
                format(nametag, sizeof(nametag), "{%06x}%s {FFFFFF}(%i)\n{FFFFFF}%s {FF0000}%s", GetPlayerColor(i) >>> 8, ReturnName(i, 0), i, GetArmorDots(i), GetHealthDots(i));
            }
            else
            {
                format(nametag, sizeof(nametag), "{%06x}%s {FFFFFF}(%i)\n{FF0000}%s", GetPlayerColor(i) >>> 8, ReturnName(i, 0), i, GetHealthDots(i));
            }
            UpdateDynamic3DTextLabelText(cNametag[i], 0xFFFFFFFF, nametag);
        }
    }
    return 1;
}*/

forward AttachTrailer(vehicleid, playerid);
public AttachTrailer(vehicleid, playerid)
{
	AttachTrailerToVehicle(Dorse[playerid], vehicleid);
}

GetWeaponObjectSlot(weaponid)
{
    new objectslot;

    switch (weaponid)
    {
        case 22..24: objectslot = 0;
        case 25..27: objectslot = 1;
        case 28, 29, 32: objectslot = 2;
        case 30, 31: objectslot = 3;
        case 33, 34: objectslot = 4;
        case 35..38: objectslot = 5;
    }
    return objectslot;
}

GetWeaponModel(weaponid) //Will only return the model of wearable weapons (22-38)
{
    new model;

    switch(weaponid)
    {
        case 22..29: model = 324 + weaponid;
        case 30: model = 355;
        case 31: model = 356;
        case 32: model = 372;
        case 33..38: model = 324 + weaponid;
    }
    return model;
}

IsWeaponWearable(weaponid)
    return (weaponid >= 22 && weaponid <= 38);

IsWeaponHideable(weaponid)
    return (weaponid >= 22 && weaponid <= 24 || weaponid == 28 || weaponid == 32);

forward OnLoadWeapons(playerid);
public OnLoadWeapons(playerid)
{
    new rows, weaponid, index;
    cache_get_row_count(rows);

    if(!rows) return 1;

    for (new i; i < rows; i++)
    {
        cache_get_value_name_int(i, "WeaponID", weaponid);
        index = weaponid - 22;

        cache_get_value_name_float(i, "PosX", WeaponSettings[playerid][index][Position][0]);
        cache_get_value_name_float(i, "PosY", WeaponSettings[playerid][index][Position][1]);
        cache_get_value_name_float(i, "PosZ", WeaponSettings[playerid][index][Position][2]);

        cache_get_value_name_float(i, "RotX", WeaponSettings[playerid][index][Position][3]);
        cache_get_value_name_float(i, "RotY", WeaponSettings[playerid][index][Position][4]);
        cache_get_value_name_float(i, "RotZ", WeaponSettings[playerid][index][Position][5]);

        cache_get_value_name_int(i, "Bone", WeaponSettings[playerid][index][Bone]);
        cache_get_value_name_int(i, "Hidden", WeaponSettings[playerid][index][Hidden]);
        cache_get_value_name_int(i, "duzenlendi", WeaponSettings[playerid][index][duzenlendi]);
    }
    return 1;
}

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
    new weaponid = EditingWeapon[playerid];
    if(weaponid)
    {
        if (response)
        {
            new enum_index = weaponid - 22, weaponname[18], name[MAX_PLAYER_NAME], string[340];

            GetWeaponName(weaponid, weaponname, sizeof(weaponname));
            GetPlayerName(playerid, name, MAX_PLAYER_NAME);

            WeaponSettings[playerid][enum_index][Position][0] = fOffsetX;
            WeaponSettings[playerid][enum_index][Position][1] = fOffsetY;
            WeaponSettings[playerid][enum_index][Position][2] = fOffsetZ;
            WeaponSettings[playerid][enum_index][Position][3] = fRotX;
            WeaponSettings[playerid][enum_index][Position][4] = fRotY;
            WeaponSettings[playerid][enum_index][Position][5] = fRotZ;
            new slot = GetWeaponObjectSlot(weaponid);
            if(slot != -1) SetPlayerAttachedObject(playerid, GetWeaponObjectSlot(weaponid), GetWeaponModel(weaponid), WeaponSettings[playerid][enum_index][Bone], fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, 1.0, 1.0, 1.0);
            else return HataMesajGonder(playerid, "Tüm aksesuar slotlarýný kullanýyorsunuz, bir aksesuar çýkartýp tekrar deneyin.");
            SunucuMesaji(playerid, "%s isimli silahýnýzýn pozisyonunu baþarýyla deðiþtirdiniz.", weaponname);

            if(WeaponSettings[playerid][enum_index][duzenlendi])
            {
                mysql_format(g_SQL, string, sizeof(string), "DELETE FROM weaponsettings WHERE sOwner = '%d' AND WeaponID = 'd'", PlayerData[playerid][pID], weaponid);
                mysql_tquery(g_SQL, string);
            }

            if(!WeaponSettings[playerid][enum_index][duzenlendi])
            {
                WeaponSettings[playerid][enum_index][duzenlendi] = 1;
                mysql_format(g_SQL, string, sizeof(string), "INSERT INTO weaponsettings (sOwner, WeaponID, PosX, PosY, PosZ, RotX, RotY, RotZ, Bone, duzenlendi) VALUES (%d, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, 1, %d)", PlayerData[playerid][pID], weaponid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, WeaponSettings[playerid][enum_index][duzenlendi]);
                mysql_tquery(g_SQL, string);
            }
        }
        EditingWeapon[playerid] = 0;
        return 1;
    }
    return 1;
}

stock Motormu(vid)
{
	switch (GetVehicleModel(vid))
	{
		case 448, 461..463, 468, 521, 522, 581, 586: return 1;
	}
	return 0;
}
